
F411_diplay_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e624  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c0c  0800e7c4  0800e7c4  0001e7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123d0  080123d0  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  080123d0  080123d0  000223d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123d8  080123d8  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123d8  080123d8  000223d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123dc  080123dc  000223dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  080123e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006940  20000174  08012554  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20006ab4  08012554  00036ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b56  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d0  00000000  00000000  00056cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0005c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  0005e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db14  00000000  00000000  0005ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000252d9  00000000  00000000  0007dafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9564  00000000  00000000  000a2dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087f0  00000000  00000000  0014c38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      000000df  00000000  00000000  00154b7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e7ac 	.word	0x0800e7ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800e7ac 	.word	0x0800e7ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f002 f928 	bl	80027ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059c:	f000 f86e 	bl	800067c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	T = HAL_GetTick();
 80005a0:	f002 f95a 	bl	8002858 <HAL_GetTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <main+0xa4>)
 80005a8:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 fa85 	bl	8000ab8 <MX_GPIO_Init>
	MX_DMA_Init();
 80005ae:	f000 fa63 	bl	8000a78 <MX_DMA_Init>
	MX_CRC_Init();
 80005b2:	f000 f91d 	bl	80007f0 <MX_CRC_Init>
	MX_SPI1_Init();
 80005b6:	f000 f92f 	bl	8000818 <MX_SPI1_Init>
	MX_TIM2_Init();
 80005ba:	f000 f963 	bl	8000884 <MX_TIM2_Init>
	MX_ADC1_Init();
 80005be:	f000 f8c5 	bl	800074c <MX_ADC1_Init>
	MX_TIM3_Init();
 80005c2:	f000 f9ab 	bl	800091c <MX_TIM3_Init>
	MX_TIM4_Init();
 80005c6:	f000 fa03 	bl	80009d0 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <main+0xa8>)
 80005cc:	f005 fd24 	bl	8006018 <HAL_TIM_Base_Start>
	MX_USB_DEVICE_Init();
 80005d0:	f00c febc 	bl	800d34c <MX_USB_DEVICE_Init>

	ST7789_Init();
 80005d4:	f000 fd42 	bl	800105c <ST7789_Init>
	ST7789_rotation(2);
 80005d8:	2002      	movs	r0, #2
 80005da:	f001 fc0d 	bl	8001df8 <ST7789_rotation>
//	c
//	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005de:	f00a f937 	bl	800a850 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of DisplayTask */
	DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL,
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <main+0xac>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0xb0>)
 80005e8:	f00a f97c 	bl	800a8e4 <osThreadNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <main+0xb4>)
 80005f0:	6013      	str	r3, [r2, #0]
			&DisplayTask_attributes);

	/* creation of MotorTask */
	MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <main+0xb8>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4816      	ldr	r0, [pc, #88]	; (8000650 <main+0xbc>)
 80005f8:	f00a f974 	bl	800a8e4 <osThreadNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <main+0xc0>)
 8000600:	6013      	str	r3, [r2, #0]

	/* creation of ADCTask */
	ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <main+0xc4>)
 8000604:	2100      	movs	r1, #0
 8000606:	4815      	ldr	r0, [pc, #84]	; (800065c <main+0xc8>)
 8000608:	f00a f96c 	bl	800a8e4 <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <main+0xcc>)
 8000610:	6013      	str	r3, [r2, #0]

	/* creation of USBTask */
	USBTaskHandle = osThreadNew(StartUSBTask, NULL, &USBTask_attributes);
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <main+0xd0>)
 8000614:	2100      	movs	r1, #0
 8000616:	4814      	ldr	r0, [pc, #80]	; (8000668 <main+0xd4>)
 8000618:	f00a f964 	bl	800a8e4 <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <main+0xd8>)
 8000620:	6013      	str	r3, [r2, #0]

	/* creation of MotorSpeedTask */
	MotorSpeedTaskHandle = osThreadNew(StartMotorSpeedTask, NULL,
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <main+0xdc>)
 8000624:	2100      	movs	r1, #0
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0xe0>)
 8000628:	f00a f95c 	bl	800a8e4 <osThreadNew>
 800062c:	4603      	mov	r3, r0
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <main+0xe4>)
 8000630:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000632:	f00a f931 	bl	800a898 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000636:	e7fe      	b.n	8000636 <main+0xa2>
 8000638:	20000384 	.word	0x20000384
 800063c:	20000328 	.word	0x20000328
 8000640:	08012244 	.word	0x08012244
 8000644:	08000ca1 	.word	0x08000ca1
 8000648:	20000370 	.word	0x20000370
 800064c:	08012268 	.word	0x08012268
 8000650:	08000e95 	.word	0x08000e95
 8000654:	20000374 	.word	0x20000374
 8000658:	0801228c 	.word	0x0801228c
 800065c:	08000ef5 	.word	0x08000ef5
 8000660:	20000378 	.word	0x20000378
 8000664:	080122b0 	.word	0x080122b0
 8000668:	08000f6d 	.word	0x08000f6d
 800066c:	2000037c 	.word	0x2000037c
 8000670:	080122d4 	.word	0x080122d4
 8000674:	08000fb5 	.word	0x08000fb5
 8000678:	20000380 	.word	0x20000380

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00d fbbe 	bl	800de0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xc8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a26      	ldr	r2, [pc, #152]	; (8000744 <SystemClock_Config+0xc8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <SystemClock_Config+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <SystemClock_Config+0xcc>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80006ec:	230f      	movs	r3, #15
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80006f0:	2390      	movs	r3, #144	; 0x90
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80006f8:	2305      	movs	r3, #5
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fd25 	bl	8005150 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
		Error_Handler();
 800070c:	f000 fca0 	bl	8001050 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2101      	movs	r1, #1
 800072c:	4618      	mov	r0, r3
 800072e:	f004 ff87 	bl	8005640 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc0>
		Error_Handler();
 8000738:	f000 fc8a 	bl	8001050 <Error_Handler>
	}
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_ADC1_Init+0x98>)
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_ADC1_Init+0xa0>)
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000798:	2201      	movs	r2, #1
 800079a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007ac:	f002 f884 	bl	80028b8 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x6e>
		Error_Handler();
 80007b6:	f000 fc4b 	bl	8001050 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80007ba:	2306      	movs	r3, #6
 80007bc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007cc:	f002 f942 	bl	8002a54 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x8e>
		Error_Handler();
 80007d6:	f000 fc3b 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000190 	.word	0x20000190
 80007e8:	40012000 	.word	0x40012000
 80007ec:	0f000001 	.word	0x0f000001

080007f0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_CRC_Init+0x20>)
 80007f6:	4a07      	ldr	r2, [pc, #28]	; (8000814 <MX_CRC_Init+0x24>)
 80007f8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_CRC_Init+0x20>)
 80007fc:	f002 fd88 	bl	8003310 <HAL_CRC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_CRC_Init+0x1a>
		Error_Handler();
 8000806:	f000 fc23 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001d8 	.word	0x200001d8
 8000814:	40023000 	.word	0x40023000

08000818 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI1_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI1_Init+0x64>)
 8000838:	2202      	movs	r2, #2
 800083a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI1_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI1_Init+0x64>)
 800086a:	f005 f8e7 	bl	8005a3c <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000874:	f000 fbec 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001e0 	.word	0x200001e0
 8000880:	40013000 	.word	0x40013000

08000884 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM2_Init+0x94>)
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 44999;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_TIM2_Init+0x94>)
 80008aa:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80008ae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM2_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_TIM2_Init+0x94>)
 80008b8:	220f      	movs	r2, #15
 80008ba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_TIM2_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM2_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <MX_TIM2_Init+0x94>)
 80008ca:	f005 fb55 	bl	8005f78 <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80008d4:	f000 fbbc 	bl	8001050 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_TIM2_Init+0x94>)
 80008e6:	f005 fe6d 	bl	80065c4 <HAL_TIM_ConfigClockSource>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80008f0:	f000 fbae 	bl	8001050 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_TIM2_Init+0x94>)
 8000902:	f006 fac9 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800090c:	f000 fba0 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000298 	.word	0x20000298

0800091c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <MX_TIM3_Init+0xb0>)
 8000942:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_TIM3_Init+0xac>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1023;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000952:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000956:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM3_Init+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000964:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000966:	f005 fc13 	bl	8006190 <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x58>
		Error_Handler();
 8000970:	f000 fb6e 	bl	8001050 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000984:	f006 fa88 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800098e:	f000 fb5f 	bl	8001050 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	; 0x60
 8000994:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_TIM3_Init+0xac>)
 80009aa:	f005 fd49 	bl	8006440 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80009b4:	f000 fb4c 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_TIM3_Init+0xac>)
 80009ba:	f001 fdbb 	bl	8002534 <HAL_TIM_MspPostInit>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002e0 	.word	0x200002e0
 80009cc:	40000400 	.word	0x40000400

080009d0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_TIM4_Init+0xa0>)
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <MX_TIM4_Init+0xa4>)
 80009f2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_TIM4_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_TIM4_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a06:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000a14:	4816      	ldr	r0, [pc, #88]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a16:	f005 faaf 	bl	8005f78 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM4_Init+0x54>
		Error_Handler();
 8000a20:	f000 fb16 	bl	8001050 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a24:	2307      	movs	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a28:	2350      	movs	r3, #80	; 0x50
 8000a2a:	613b      	str	r3, [r7, #16]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
	sSlaveConfig.TriggerFilter = 15;
 8000a30:	230f      	movs	r3, #15
 8000a32:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK) {
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a3c:	f005 fe89 	bl	8006752 <HAL_TIM_SlaveConfigSynchro>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM4_Init+0x7a>
		Error_Handler();
 8000a46:	f000 fb03 	bl	8001050 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a58:	f006 fa1e 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000a62:	f000 faf5 	bl	8001050 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000328 	.word	0x20000328
 8000a74:	40000800 	.word	0x40000800

08000a78 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	203a      	movs	r0, #58	; 0x3a
 8000aa0:	f002 fc0c 	bl	80032bc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000aa4:	203a      	movs	r0, #58	; 0x3a
 8000aa6:	f002 fc25 	bl	80032f4 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RST_Pin | DC_Pin | CS_Pin | M_IN1_Pin | M_IN2_Pin,
 8000b22:	2200      	movs	r2, #0
 8000b24:	212f      	movs	r1, #47	; 0x2f
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_GPIO_Init+0x9c>)
 8000b28:	f003 f87c 	bl	8003c24 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RST_Pin DC_Pin CS_Pin M_IN1_Pin
	 M_IN2_Pin */
	GPIO_InitStruct.Pin = RST_Pin | DC_Pin | CS_Pin | M_IN1_Pin | M_IN2_Pin;
 8000b2c:	232f      	movs	r3, #47	; 0x2f
 8000b2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_GPIO_Init+0x9c>)
 8000b44:	f002 feea 	bl	800391c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <printTime>:

/* USER CODE BEGIN 4 */
void printTime() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af04      	add	r7, sp, #16
	char str_s[10];
	TIME_ON.h = HAL_GetTick() / ONEHOUR;
 8000b5e:	f001 fe7b 	bl	8002858 <HAL_GetTick>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <printTime+0x12c>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0d5b      	lsrs	r3, r3, #21
 8000b6c:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <printTime+0x130>)
 8000b6e:	6013      	str	r3, [r2, #0]
	TIME_ON.m = HAL_GetTick() / MINUT;
 8000b70:	f001 fe72 	bl	8002858 <HAL_GetTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <printTime+0x134>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	0b9b      	lsrs	r3, r3, #14
 8000b7e:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <printTime+0x130>)
 8000b80:	6053      	str	r3, [r2, #4]
	TIME_ON.s = HAL_GetTick() / SEC;
 8000b82:	f001 fe69 	bl	8002858 <HAL_GetTick>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <printTime+0x138>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	099b      	lsrs	r3, r3, #6
 8000b90:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <printTime+0x130>)
 8000b92:	6093      	str	r3, [r2, #8]

	if (TIME_ON.s > 59) {
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <printTime+0x130>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b3b      	cmp	r3, #59	; 0x3b
 8000b9a:	d923      	bls.n	8000be4 <printTime+0x8c>
		if (TIME_ON.h > 0) {
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <printTime+0x130>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00f      	beq.n	8000bc4 <printTime+0x6c>
			TIME_ON.s = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 8000ba4:	f001 fe58 	bl	8002858 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <printTime+0x130>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4939      	ldr	r1, [pc, #228]	; (8000c94 <printTime+0x13c>)
 8000bb0:	fb01 f303 	mul.w	r3, r1, r3
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <printTime+0x138>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	099b      	lsrs	r3, r3, #6
 8000bbe:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <printTime+0x130>)
 8000bc0:	6093      	str	r3, [r2, #8]
 8000bc2:	e00f      	b.n	8000be4 <printTime+0x8c>

		} else {
			TIME_ON.s = (HAL_GetTick() - (MINUT * TIME_ON.m)) / SEC;
 8000bc4:	f001 fe48 	bl	8002858 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <printTime+0x130>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <printTime+0x138>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	099b      	lsrs	r3, r3, #6
 8000be0:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <printTime+0x130>)
 8000be2:	6093      	str	r3, [r2, #8]
		}
	}
	if (TIME_ON.m > 59) {
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <printTime+0x130>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b3b      	cmp	r3, #59	; 0x3b
 8000bea:	d90f      	bls.n	8000c0c <printTime+0xb4>
		TIME_ON.m = (HAL_GetTick() - (MINUT * TIME_ON.h)) / SEC;
 8000bec:	f001 fe34 	bl	8002858 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <printTime+0x130>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000bfa:	fb01 f303 	mul.w	r3, r1, r3
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <printTime+0x138>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	099b      	lsrs	r3, r3, #6
 8000c08:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <printTime+0x130>)
 8000c0a:	6053      	str	r3, [r2, #4]
	}
	if (TIME_ON.h >= HAL_ERROR) {
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <printTime+0x130>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00e      	beq.n	8000c32 <printTime+0xda>
		TIME_ON.h = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 8000c14:	f001 fe20 	bl	8002858 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <printTime+0x130>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	491d      	ldr	r1, [pc, #116]	; (8000c94 <printTime+0x13c>)
 8000c20:	fb01 f303 	mul.w	r3, r1, r3
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <printTime+0x138>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	099b      	lsrs	r3, r3, #6
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <printTime+0x130>)
 8000c30:	6013      	str	r3, [r2, #0]
	}

	sprintf(str_s, "%li:%li:%li ", TIME_ON.h, TIME_ON.m, TIME_ON.s);
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <printTime+0x130>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <printTime+0x130>)
 8000c38:	6859      	ldr	r1, [r3, #4]
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <printTime+0x130>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	1d38      	adds	r0, r7, #4
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	460b      	mov	r3, r1
 8000c44:	4914      	ldr	r1, [pc, #80]	; (8000c98 <printTime+0x140>)
 8000c46:	f00d f9f7 	bl	800e038 <siprintf>

	ST7789_DrawFillRoundRect(0, 0, 90, 50, 0, ST7789_BLACK);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2332      	movs	r3, #50	; 0x32
 8000c54:	225a      	movs	r2, #90	; 0x5a
 8000c56:	2100      	movs	r1, #0
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f001 f947 	bl	8001eec <ST7789_DrawFillRoundRect>

	ST7789_print(5, 5, ST7789_GREEN, ST7789_BLACK, 0, &Font_11x18, 1, str_s);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	9303      	str	r3, [sp, #12]
 8000c62:	2301      	movs	r3, #1
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <printTime+0x144>)
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2005      	movs	r0, #5
 8000c78:	f000 fffa 	bl	8001c70 <ST7789_print>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	95217cb1 	.word	0x95217cb1
 8000c88:	2000038c 	.word	0x2000038c
 8000c8c:	45e7b273 	.word	0x45e7b273
 8000c90:	10624dd3 	.word	0x10624dd3
 8000c94:	0036ee80 	.word	0x0036ee80
 8000c98:	0800e7fc 	.word	0x0800e7fc
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <StartDisplayTask>:
 * @brief  Function implementing the DisplayTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af04      	add	r7, sp, #16
 8000ca6:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000ca8:	f00c fb50 	bl	800d34c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	char str[10];
	ST7789_FillScreen(ST7789_BLACK);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 fae7 	bl	8001280 <ST7789_FillScreen>
	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8000cb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cb6:	2250      	movs	r2, #80	; 0x50
 8000cb8:	2178      	movs	r1, #120	; 0x78
 8000cba:	20a0      	movs	r0, #160	; 0xa0
 8000cbc:	f000 fdb6 	bl	800182c <ST7789_DrawCircleFilled>

	/* Infinite loop */
	for (;;) {
		if (TIME_ON.m <= TIMEFORSENSORS) {
 8000cc0:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <StartDisplayTask+0x1d8>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d850      	bhi.n	8000d6a <StartDisplayTask+0xca>
			if (ch4.actual != ch4.last) {
 8000cc8:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000cca:	881a      	ldrh	r2, [r3, #0]
 8000ccc:	4b6b      	ldr	r3, [pc, #428]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000cce:	885b      	ldrh	r3, [r3, #2]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f000 80c9 	beq.w	8000e68 <StartDisplayTask+0x1c8>
				sprintf(str, "%i %%", ch4.actual);
 8000cd6:	4b69      	ldr	r3, [pc, #420]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4967      	ldr	r1, [pc, #412]	; (8000e80 <StartDisplayTask+0x1e0>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00d f9a8 	bl	800e038 <siprintf>
				ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8000ce8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cec:	2250      	movs	r2, #80	; 0x50
 8000cee:	2178      	movs	r1, #120	; 0x78
 8000cf0:	20a0      	movs	r0, #160	; 0xa0
 8000cf2:	f000 fd9b 	bl	800182c <ST7789_DrawCircleFilled>

				ST7789_print(130, 70, ST7789_WHITE, ST7789_BLACK, 0,
 8000cf6:	4b63      	ldr	r3, [pc, #396]	; (8000e84 <StartDisplayTask+0x1e4>)
 8000cf8:	9303      	str	r3, [sp, #12]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	2300      	movs	r3, #0
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2300      	movs	r3, #0
 8000d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0c:	2146      	movs	r1, #70	; 0x46
 8000d0e:	2082      	movs	r0, #130	; 0x82
 8000d10:	f000 ffae 	bl	8001c70 <ST7789_print>
						&Font_16x26, 1, "Wait");

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	4b5a      	ldr	r3, [pc, #360]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2c:	216e      	movs	r1, #110	; 0x6e
 8000d2e:	2087      	movs	r0, #135	; 0x87
 8000d30:	f000 ff9e 	bl	8001c70 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4954      	ldr	r1, [pc, #336]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00d f97c 	bl	800e038 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	9303      	str	r3, [sp, #12]
 8000d46:	2301      	movs	r3, #1
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	4b4f      	ldr	r3, [pc, #316]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2300      	movs	r3, #0
 8000d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d58:	2196      	movs	r1, #150	; 0x96
 8000d5a:	2087      	movs	r0, #135	; 0x87
 8000d5c:	f000 ff88 	bl	8001c70 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000d62:	881a      	ldrh	r2, [r3, #0]
 8000d64:	4b45      	ldr	r3, [pc, #276]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000d66:	805a      	strh	r2, [r3, #2]
 8000d68:	e07e      	b.n	8000e68 <StartDisplayTask+0x1c8>
			}
		} else {
			if (flagt.Heat == 0) {
 8000d6a:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <StartDisplayTask+0x1f0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d13b      	bne.n	8000dea <StartDisplayTask+0x14a>
				sprintf(str, "%i %%", ch4.actual);
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4940      	ldr	r1, [pc, #256]	; (8000e80 <StartDisplayTask+0x1e0>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f00d f95a 	bl	800e038 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 8000d84:	231f      	movs	r3, #31
 8000d86:	2250      	movs	r2, #80	; 0x50
 8000d88:	2178      	movs	r1, #120	; 0x78
 8000d8a:	20a0      	movs	r0, #160	; 0xa0
 8000d8c:	f000 fd4e 	bl	800182c <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	9303      	str	r3, [sp, #12]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9302      	str	r3, [sp, #8]
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da8:	216e      	movs	r1, #110	; 0x6e
 8000daa:	2087      	movs	r0, #135	; 0x87
 8000dac:	f000 ff60 	bl	8001c70 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4935      	ldr	r1, [pc, #212]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00d f93e 	bl	800e038 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd4:	2196      	movs	r1, #150	; 0x96
 8000dd6:	2087      	movs	r0, #135	; 0x87
 8000dd8:	f000 ff4a 	bl	8001c70 <ST7789_print>
						&Font_16x26, 1, str);
				ch4.last = ch4.actual;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000de2:	805a      	strh	r2, [r3, #2]
				flagt.Heat = 1;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <StartDisplayTask+0x1f0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
			}
			if (ch4.actual != ch4.last) {
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000df0:	885b      	ldrh	r3, [r3, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d038      	beq.n	8000e68 <StartDisplayTask+0x1c8>
				sprintf(str, "%i %%", ch4.actual);
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	491f      	ldr	r1, [pc, #124]	; (8000e80 <StartDisplayTask+0x1e0>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f00d f918 	bl	800e038 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 8000e08:	231f      	movs	r3, #31
 8000e0a:	2250      	movs	r2, #80	; 0x50
 8000e0c:	2178      	movs	r1, #120	; 0x78
 8000e0e:	20a0      	movs	r0, #160	; 0xa0
 8000e10:	f000 fd0c 	bl	800182c <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	2300      	movs	r3, #0
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2c:	216e      	movs	r1, #110	; 0x6e
 8000e2e:	2087      	movs	r0, #135	; 0x87
 8000e30:	f000 ff1e 	bl	8001c70 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4914      	ldr	r1, [pc, #80]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f00d f8fc 	bl	800e038 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	9303      	str	r3, [sp, #12]
 8000e46:	2301      	movs	r3, #1
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e58:	2196      	movs	r1, #150	; 0x96
 8000e5a:	2087      	movs	r0, #135	; 0x87
 8000e5c:	f000 ff08 	bl	8001c70 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000e62:	881a      	ldrh	r2, [r3, #0]
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <StartDisplayTask+0x1dc>)
 8000e66:	805a      	strh	r2, [r3, #2]
			}
		}

		printTime();
 8000e68:	f7ff fe76 	bl	8000b58 <printTime>
		osDelay(SEC);
 8000e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e70:	f009 fdca 	bl	800aa08 <osDelay>
		if (TIME_ON.m <= TIMEFORSENSORS) {
 8000e74:	e724      	b.n	8000cc0 <StartDisplayTask+0x20>
 8000e76:	bf00      	nop
 8000e78:	2000038c 	.word	0x2000038c
 8000e7c:	20000398 	.word	0x20000398
 8000e80:	0800e80c 	.word	0x0800e80c
 8000e84:	0800e814 	.word	0x0800e814
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	0800e81c 	.word	0x0800e81c
 8000e90:	200003a0 	.word	0x200003a0

08000e94 <StartMotorTask>:
 * @brief Function implementing the MotorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	/* Infinite loop */
	for (;;) {
		if (ch4.actual > 20) {
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <StartMotorTask+0x58>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b14      	cmp	r3, #20
 8000ea2:	d90f      	bls.n	8000ec4 <StartMotorTask+0x30>
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <StartMotorTask+0x5c>)
 8000eaa:	f002 febb 	bl	8003c24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <StartMotorTask+0x5c>)
 8000eb4:	f002 feb6 	bl	8003c24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2120      	movs	r1, #32
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <StartMotorTask+0x5c>)
 8000ebe:	f002 feb1 	bl	8003c24 <HAL_GPIO_WritePin>
 8000ec2:	e00e      	b.n	8000ee2 <StartMotorTask+0x4e>
		} else {
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <StartMotorTask+0x5c>)
 8000eca:	f002 feab 	bl	8003c24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <StartMotorTask+0x5c>)
 8000ed4:	f002 fea6 	bl	8003c24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2120      	movs	r1, #32
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <StartMotorTask+0x5c>)
 8000ede:	f002 fea1 	bl	8003c24 <HAL_GPIO_WritePin>
		}
		osDelay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f009 fd90 	bl	800aa08 <osDelay>
		if (ch4.actual > 20) {
 8000ee8:	e7d8      	b.n	8000e9c <StartMotorTask+0x8>
 8000eea:	bf00      	nop
 8000eec:	20000398 	.word	0x20000398
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <StartADCTask>:
 * @brief Function implementing the ADCTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartADCTask */

	/* Infinite loop */
	for (;;) {
		HAL_ADCEx_InjectedStart(&hadc1);
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <StartADCTask+0x68>)
 8000efe:	f001 ffd7 	bl	8002eb0 <HAL_ADCEx_InjectedStart>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000f02:	2164      	movs	r1, #100	; 0x64
 8000f04:	4815      	ldr	r0, [pc, #84]	; (8000f5c <StartADCTask+0x68>)
 8000f06:	f001 fd1a 	bl	800293e <HAL_ADC_PollForConversion>

		adcVal = HAL_ADCEx_InjectedGetValue(&hadc1,
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4813      	ldr	r0, [pc, #76]	; (8000f5c <StartADCTask+0x68>)
 8000f0e:	f002 f8e5 	bl	80030dc <HAL_ADCEx_InjectedGetValue>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <StartADCTask+0x6c>)
 8000f18:	801a      	strh	r2, [r3, #0]
		ADC_INJECTED_RANK_1);
		ch4.BIT16 = HAL_ADCEx_InjectedGetValue(&hadc1,
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	480f      	ldr	r0, [pc, #60]	; (8000f5c <StartADCTask+0x68>)
 8000f1e:	f002 f8dd 	bl	80030dc <HAL_ADCEx_InjectedGetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <StartADCTask+0x70>)
 8000f28:	809a      	strh	r2, [r3, #4]
		ADC_INJECTED_RANK_1);

		HAL_ADCEx_InjectedStop(&hadc1);
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <StartADCTask+0x68>)
 8000f2c:	f002 f88a 	bl	8003044 <HAL_ADCEx_InjectedStop>

		ch4.actual = (ch4.BIT16 * 100) / SEBSORMAXVAL;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <StartADCTask+0x70>)
 8000f32:	889b      	ldrh	r3, [r3, #4]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <StartADCTask+0x74>)
 8000f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f42:	441a      	add	r2, r3
 8000f44:	12d2      	asrs	r2, r2, #11
 8000f46:	17db      	asrs	r3, r3, #31
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <StartADCTask+0x70>)
 8000f4e:	801a      	strh	r2, [r3, #0]
		osDelay(900);
 8000f50:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000f54:	f009 fd58 	bl	800aa08 <osDelay>
		HAL_ADCEx_InjectedStart(&hadc1);
 8000f58:	e7d0      	b.n	8000efc <StartADCTask+0x8>
 8000f5a:	bf00      	nop
 8000f5c:	20000190 	.word	0x20000190
 8000f60:	20000388 	.word	0x20000388
 8000f64:	20000398 	.word	0x20000398
 8000f68:	a00a00a1 	.word	0xa00a00a1

08000f6c <StartUSBTask>:
 * @brief Function implementing the USBTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUSBTask */
void StartUSBTask(void *argument) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUSBTask */
	/* Infinite loop */
	for (;;) {
		if (ch4.actual != ch4.last) {
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <StartUSBTask+0x3c>)
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <StartUSBTask+0x3c>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d00f      	beq.n	8000fa0 <StartUSBTask+0x34>
			sprintf((char*) data, "CH4 val: %i\n", ch4.BIT16);
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <StartUSBTask+0x3c>)
 8000f82:	889b      	ldrh	r3, [r3, #4]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4909      	ldr	r1, [pc, #36]	; (8000fac <StartUSBTask+0x40>)
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <StartUSBTask+0x44>)
 8000f8a:	f00d f855 	bl	800e038 <siprintf>
			CDC_Transmit_FS(data, strlen((char*) data));
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <StartUSBTask+0x44>)
 8000f90:	f7ff f926 	bl	80001e0 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <StartUSBTask+0x44>)
 8000f9c:	f00c faaa 	bl	800d4f4 <CDC_Transmit_FS>
		}
		osDelay(SEC / 5);
 8000fa0:	20c8      	movs	r0, #200	; 0xc8
 8000fa2:	f009 fd31 	bl	800aa08 <osDelay>
		if (ch4.actual != ch4.last) {
 8000fa6:	e7e5      	b.n	8000f74 <StartUSBTask+0x8>
 8000fa8:	20000398 	.word	0x20000398
 8000fac:	0800e820 	.word	0x0800e820
 8000fb0:	200003b0 	.word	0x200003b0

08000fb4 <StartMotorSpeedTask>:
 * @brief Function implementing the MotorSpeedTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorSpeedTask */
void StartMotorSpeedTask(void *argument) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorSpeedTask */
	motor.TimeForM = T;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <StartMotorSpeedTask+0x68>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000fc2:	6053      	str	r3, [r2, #4]
	/* Infinite loop */
	for (;;) {
		motor.TimeForM = HAL_GetTick() - motor.TimeForM;
 8000fc4:	f001 fc48 	bl	8002858 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000fd2:	6053      	str	r3, [r2, #4]
		motor.TimeForM /= MINUT;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	4a12      	ldr	r2, [pc, #72]	; (8001024 <StartMotorSpeedTask+0x70>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	0b9b      	lsrs	r3, r3, #14
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000fe2:	6053      	str	r3, [r2, #4]

		motor.count = __HAL_TIM_GetCounter(&htim4);
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <StartMotorSpeedTask+0x74>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000fee:	801a      	strh	r2, [r3, #0]
		motor.speed = motor.count / motor.TimeForM / 2; // 2 signal per revolution
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <StartMotorSpeedTask+0x6c>)
 8001004:	811a      	strh	r2, [r3, #8]
		motor.TimeForM = HAL_GetTick();
 8001006:	f001 fc27 	bl	8002858 <HAL_GetTick>
 800100a:	4603      	mov	r3, r0
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <StartMotorSpeedTask+0x6c>)
 800100e:	6053      	str	r3, [r2, #4]
		osDelay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f009 fcf8 	bl	800aa08 <osDelay>
		motor.TimeForM = HAL_GetTick() - motor.TimeForM;
 8001018:	e7d4      	b.n	8000fc4 <StartMotorSpeedTask+0x10>
 800101a:	bf00      	nop
 800101c:	20000384 	.word	0x20000384
 8001020:	200003a4 	.word	0x200003a4
 8001024:	45e7b273 	.word	0x45e7b273
 8001028:	20000328 	.word	0x20000328

0800102c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800103e:	f001 fbf7 	bl	8002830 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40010000 	.word	0x40010000

08001050 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001058:	e7fe      	b.n	8001058 <Error_Handler+0x8>
	...

0800105c <ST7789_Init>:
	  
	  
//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	
	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);	
 8001060:	20c8      	movs	r0, #200	; 0xc8
 8001062:	f001 fc05 	bl	8002870 <HAL_Delay>

	ST7789_Width = ST7789_WIDTH;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <ST7789_Init+0x30>)
 8001068:	22f0      	movs	r2, #240	; 0xf0
 800106a:	801a      	strh	r2, [r3, #0]
	ST7789_Height = ST7789_HEIGHT;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <ST7789_Init+0x34>)
 800106e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001072:	801a      	strh	r2, [r3, #0]


    ST7789_Select();
 8001074:	f000 f810 	bl	8001098 <ST7789_Select>
	
    ST7789_HardReset(); 
 8001078:	f000 f870 	bl	800115c <ST7789_HardReset>
    ST7789_ExecuteCommandList(init_cmds);
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <ST7789_Init+0x38>)
 800107e:	f000 f823 	bl	80010c8 <ST7789_ExecuteCommandList>
	
    ST7789_Unselect();
 8001082:	f000 f815 	bl	80010b0 <ST7789_Unselect>

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000434 	.word	0x20000434
 8001090:	20000436 	.word	0x20000436
 8001094:	080122f8 	.word	0x080122f8

08001098 <ST7789_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Select(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <ST7789_Select+0x14>)
 80010a2:	f002 fdbf 	bl	8003c24 <HAL_GPIO_WritePin>
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020400 	.word	0x40020400

080010b0 <ST7789_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Unselect(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2104      	movs	r1, #4
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <ST7789_Unselect+0x14>)
 80010ba:	f002 fdb3 	bl	8003c24 <HAL_GPIO_WritePin>
			#endif
			//-----------------------------------------------------
	
	#endif
	
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020400 	.word	0x40020400

080010c8 <ST7789_ExecuteCommandList>:


//==============================================================================
// Процедура отправки данных для инициализации дисплея
//==============================================================================
 void ST7789_ExecuteCommandList(const uint8_t *addr) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80010da:	e034      	b.n	8001146 <ST7789_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	72fb      	strb	r3, [r7, #11]
        ST7789_SendCmd(cmd);
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f84b 	bl	8001184 <ST7789_SendCmd>

        numArgs = *addr++;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80010f8:	7abb      	ldrb	r3, [r7, #10]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001100:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001102:	7abb      	ldrb	r3, [r7, #10]
 8001104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001108:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800110a:	7abb      	ldrb	r3, [r7, #10]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <ST7789_ExecuteCommandList+0x5a>
            ST7789_SendDataMASS((uint8_t*)addr, numArgs);
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f875 	bl	8001204 <ST7789_SendDataMASS>
            addr += numArgs;
 800111a:	7abb      	ldrb	r3, [r7, #10]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <ST7789_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001132:	89bb      	ldrh	r3, [r7, #12]
 8001134:	2bff      	cmp	r3, #255	; 0xff
 8001136:	d102      	bne.n	800113e <ST7789_ExecuteCommandList+0x76>
 8001138:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800113c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fb95 	bl	8002870 <HAL_Delay>
    while(numCommands--) {
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	73fa      	strb	r2, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1c5      	bne.n	80010dc <ST7789_ExecuteCommandList+0x14>
        }
    }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <ST7789_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void ST7789_HardReset(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <ST7789_HardReset+0x24>)
 8001166:	f002 fd5d 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_Delay(20);	
 800116a:	2014      	movs	r0, #20
 800116c:	f001 fb80 	bl	8002870 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2101      	movs	r1, #1
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <ST7789_HardReset+0x24>)
 8001176:	f002 fd55 	bl	8003c24 <HAL_GPIO_WritePin>
	
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020400 	.word	0x40020400

08001184 <ST7789_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline void ST7789_SendCmd(uint8_t Cmd){	
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
		
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7789_SPI_HAL
	
		 // pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2102      	movs	r1, #2
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <ST7789_SendCmd+0x44>)
 8001194:	f002 fd46 	bl	8003c24 <HAL_GPIO_WritePin>
					 
		 HAL_SPI_Transmit(&ST7789_SPI_HAL, &Cmd, 1, HAL_MAX_DELAY);
 8001198:	1df9      	adds	r1, r7, #7
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	2201      	movs	r2, #1
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <ST7789_SendCmd+0x48>)
 80011a2:	f004 fcd4 	bl	8005b4e <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 80011a6:	bf00      	nop
 80011a8:	4808      	ldr	r0, [pc, #32]	; (80011cc <ST7789_SendCmd+0x48>)
 80011aa:	f004 fe0c 	bl	8005dc6 <HAL_SPI_GetState>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d1f9      	bne.n	80011a8 <ST7789_SendCmd+0x24>
				
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2102      	movs	r1, #2
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <ST7789_SendCmd+0x44>)
 80011ba:	f002 fd33 	bl	8003c24 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
	
	#endif
	//-----------------------------------------------------------------------------------

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020400 	.word	0x40020400
 80011cc:	200001e0 	.word	0x200001e0

080011d0 <ST7789_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline void ST7789_SendData(uint8_t Data ){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
	
		HAL_SPI_Transmit(&ST7789_SPI_HAL, &Data, 1, HAL_MAX_DELAY);
 80011da:	1df9      	adds	r1, r7, #7
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	2201      	movs	r2, #1
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <ST7789_SendData+0x30>)
 80011e4:	f004 fcb3 	bl	8005b4e <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 80011e8:	bf00      	nop
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <ST7789_SendData+0x30>)
 80011ec:	f004 fdeb 	bl	8005dc6 <HAL_SPI_GetState>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d1f9      	bne.n	80011ea <ST7789_SendData+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200001e0 	.word	0x200001e0

08001204 <ST7789_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
		
		if( buff_size <= 0xFFFF ){
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d21a      	bcs.n	800124c <ST7789_SendDataMASS+0x48>
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b29a      	uxth	r2, r3
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4816      	ldr	r0, [pc, #88]	; (800127c <ST7789_SendDataMASS+0x78>)
 8001222:	f004 fc94 	bl	8005b4e <HAL_SPI_Transmit>
 8001226:	e01d      	b.n	8001264 <ST7789_SendDataMASS+0x60>
		}
		else{
			while( buff_size > 0xFFFF ){
				HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, 0xFFFF, HAL_MAX_DELAY);
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4812      	ldr	r0, [pc, #72]	; (800127c <ST7789_SendDataMASS+0x78>)
 8001234:	f004 fc8b 	bl	8005b4e <HAL_SPI_Transmit>
				buff_size-=0xFFFF;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800123e:	3bff      	subs	r3, #255	; 0xff
 8001240:	603b      	str	r3, [r7, #0]
				buff+=0xFFFF;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001248:	33ff      	adds	r3, #255	; 0xff
 800124a:	607b      	str	r3, [r7, #4]
			while( buff_size > 0xFFFF ){
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001252:	d2e9      	bcs.n	8001228 <ST7789_SendDataMASS+0x24>
			}
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b29a      	uxth	r2, r3
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <ST7789_SendDataMASS+0x78>)
 8001260:	f004 fc75 	bl	8005b4e <HAL_SPI_Transmit>
		}
		
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8001264:	bf00      	nop
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <ST7789_SendDataMASS+0x78>)
 8001268:	f004 fdad 	bl	8005dc6 <HAL_SPI_GetState>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d1f9      	bne.n	8001266 <ST7789_SendDataMASS+0x62>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001e0 	.word	0x200001e0

08001280 <ST7789_FillScreen>:


//==============================================================================
// Процедура закрашивает экран цветом color
//==============================================================================
void ST7789_FillScreen(uint16_t color){
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af02      	add	r7, sp, #8
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
	
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <ST7789_FillScreen+0x2c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <ST7789_FillScreen+0x30>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	b219      	sxth	r1, r3
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	460b      	mov	r3, r1
 800129c:	2100      	movs	r1, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f808 	bl	80012b4 <ST7789_FillRect>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000434 	.word	0x20000434
 80012b0:	20000436 	.word	0x20000436

080012b4 <ST7789_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4623      	mov	r3, r4
 80012c4:	80fb      	strh	r3, [r7, #6]
 80012c6:	4603      	mov	r3, r0
 80012c8:	80bb      	strh	r3, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
 80012ce:	4613      	mov	r3, r2
 80012d0:	803b      	strh	r3, [r7, #0]
	
  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 80012d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d6:	4a24      	ldr	r2, [pc, #144]	; (8001368 <ST7789_FillRect+0xb4>)
 80012d8:	8812      	ldrh	r2, [r2, #0]
 80012da:	4293      	cmp	r3, r2
 80012dc:	da40      	bge.n	8001360 <ST7789_FillRect+0xac>
 80012de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012e2:	4a22      	ldr	r2, [pc, #136]	; (800136c <ST7789_FillRect+0xb8>)
 80012e4:	8812      	ldrh	r2, [r2, #0]
 80012e6:	4293      	cmp	r3, r2
 80012e8:	da3a      	bge.n	8001360 <ST7789_FillRect+0xac>
	  return;
  }
  
  if ((x + w) > ST7789_Width){	  
 80012ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <ST7789_FillRect+0xb4>)
 80012f6:	8812      	ldrh	r2, [r2, #0]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	dd05      	ble.n	8001308 <ST7789_FillRect+0x54>
	  w = ST7789_Width - x;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <ST7789_FillRect+0xb4>)
 80012fe:	881a      	ldrh	r2, [r3, #0]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	b29b      	uxth	r3, r3
 8001306:	807b      	strh	r3, [r7, #2]
  }
  
  if ((y + h) > ST7789_Height){
 8001308:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800130c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001310:	4413      	add	r3, r2
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <ST7789_FillRect+0xb8>)
 8001314:	8812      	ldrh	r2, [r2, #0]
 8001316:	4293      	cmp	r3, r2
 8001318:	dd05      	ble.n	8001326 <ST7789_FillRect+0x72>
	  h = ST7789_Height - y;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <ST7789_FillRect+0xb8>)
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	803b      	strh	r3, [r7, #0]
  }
  
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 8001326:	88f8      	ldrh	r0, [r7, #6]
 8001328:	88b9      	ldrh	r1, [r7, #4]
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b29c      	uxth	r4, r3
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	883b      	ldrh	r3, [r7, #0]
 800133a:	4413      	add	r3, r2
 800133c:	b29b      	uxth	r3, r3
 800133e:	3b01      	subs	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	4622      	mov	r2, r4
 8001344:	f000 f814 	bl	8001370 <ST7789_SetWindow>
  
//  for (uint32_t i = 0; i < (h * w); i++){
//	  ST7789_RamWrite(&color, 1);
//  }
		
  ST7789_RamWrite(&color, (h * w)); 
 8001348:	f9b7 3000 	ldrsh.w	r3, [r7]
 800134c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	4619      	mov	r1, r3
 8001356:	f107 0018 	add.w	r0, r7, #24
 800135a:	f000 f82f 	bl	80013bc <ST7789_RamWrite>
 800135e:	e000      	b.n	8001362 <ST7789_FillRect+0xae>
	  return;
 8001360:	bf00      	nop
}
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20000434 	.word	0x20000434
 800136c:	20000436 	.word	0x20000436

08001370 <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	4611      	mov	r1, r2
 800137c:	461a      	mov	r2, r3
 800137e:	4623      	mov	r3, r4
 8001380:	80fb      	strh	r3, [r7, #6]
 8001382:	4603      	mov	r3, r0
 8001384:	80bb      	strh	r3, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]
 800138a:	4613      	mov	r3, r2
 800138c:	803b      	strh	r3, [r7, #0]
	
	ST7789_Select();
 800138e:	f7ff fe83 	bl	8001098 <ST7789_Select>
	
	ST7789_ColumnSet(x0, x1);
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f833 	bl	8001404 <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 800139e:	883a      	ldrh	r2, [r7, #0]
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f86f 	bl	8001488 <ST7789_RowSet>
	
	// write to RAM
	ST7789_SendCmd(ST7789_RAMWR);
 80013aa:	202c      	movs	r0, #44	; 0x2c
 80013ac:	f7ff feea 	bl	8001184 <ST7789_SendCmd>
	
	ST7789_Unselect();
 80013b0:	f7ff fe7e 	bl	80010b0 <ST7789_Unselect>
	
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}

080013bc <ST7789_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
void ST7789_RamWrite(uint16_t *pBuff, uint32_t Len){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	
  ST7789_Select();
 80013c6:	f7ff fe67 	bl	8001098 <ST7789_Select>
	
  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	737b      	strb	r3, [r7, #13]
	
  while (Len--){
 80013de:	e005      	b.n	80013ec <ST7789_RamWrite+0x30>
//    ST7789_SendData( buff[0] );  
//    ST7789_SendData( buff[1] );
	  ST7789_SendDataMASS( buff, 2);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff0c 	bl	8001204 <ST7789_SendDataMASS>
  while (Len--){
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	1e5a      	subs	r2, r3, #1
 80013f0:	603a      	str	r2, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f4      	bne.n	80013e0 <ST7789_RamWrite+0x24>
  } 
	
  ST7789_Unselect();
 80013f6:	f7ff fe5b 	bl	80010b0 <ST7789_Unselect>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <ST7789_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
 void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	460a      	mov	r2, r1
 800140e:	80fb      	strh	r3, [r7, #6]
 8001410:	4613      	mov	r3, r2
 8001412:	80bb      	strh	r3, [r7, #4]
	
  if (ColumnStart > ColumnEnd){
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	88bb      	ldrh	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d82a      	bhi.n	8001472 <ST7789_ColumnSet+0x6e>
    return;
  }
  
  if (ColumnEnd > ST7789_Width){
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <ST7789_ColumnSet+0x7c>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	88ba      	ldrh	r2, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d827      	bhi.n	8001476 <ST7789_ColumnSet+0x72>
    return;
  }
  
  ColumnStart += ST7789_X_Start;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <ST7789_ColumnSet+0x80>)
 8001428:	881a      	ldrh	r2, [r3, #0]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4413      	add	r3, r2
 800142e:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += ST7789_X_Start;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <ST7789_ColumnSet+0x80>)
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	80bb      	strh	r3, [r7, #4]
  
  ST7789_SendCmd(ST7789_CASET);
 800143a:	202a      	movs	r0, #42	; 0x2a
 800143c:	f7ff fea2 	bl	8001184 <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);  
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fec1 	bl	80011d0 <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);  
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff febc 	bl	80011d0 <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);  
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff feb5 	bl	80011d0 <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);  
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff feb0 	bl	80011d0 <ST7789_SendData>
 8001470:	e002      	b.n	8001478 <ST7789_ColumnSet+0x74>
    return;
 8001472:	bf00      	nop
 8001474:	e000      	b.n	8001478 <ST7789_ColumnSet+0x74>
    return;
 8001476:	bf00      	nop
  
}
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000434 	.word	0x20000434
 8001484:	20000430 	.word	0x20000430

08001488 <ST7789_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
 void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	4613      	mov	r3, r2
 8001496:	80bb      	strh	r3, [r7, #4]
	
  if (RowStart > RowEnd){
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d82a      	bhi.n	80014f6 <ST7789_RowSet+0x6e>
    return;
  }
  
  if (RowEnd > ST7789_Height){
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <ST7789_RowSet+0x7c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	88ba      	ldrh	r2, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d827      	bhi.n	80014fa <ST7789_RowSet+0x72>
    return;
  }
  
  RowStart += ST7789_Y_Start;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <ST7789_RowSet+0x80>)
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	4413      	add	r3, r2
 80014b2:	80fb      	strh	r3, [r7, #6]
  RowEnd += ST7789_Y_Start;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <ST7789_RowSet+0x80>)
 80014b6:	881a      	ldrh	r2, [r3, #0]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	80bb      	strh	r3, [r7, #4]
 
  ST7789_SendCmd(ST7789_RASET);
 80014be:	202b      	movs	r0, #43	; 0x2b
 80014c0:	f7ff fe60 	bl	8001184 <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);  
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe7f 	bl	80011d0 <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);  
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe7a 	bl	80011d0 <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);  
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe73 	bl	80011d0 <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);  
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe6e 	bl	80011d0 <ST7789_SendData>
 80014f4:	e002      	b.n	80014fc <ST7789_RowSet+0x74>
    return;
 80014f6:	bf00      	nop
 80014f8:	e000      	b.n	80014fc <ST7789_RowSet+0x74>
    return;
 80014fa:	bf00      	nop

}
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000436 	.word	0x20000436
 8001508:	20000432 	.word	0x20000432

0800150c <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
 void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	
  int16_t TempValue = *pValue1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	89fa      	ldrh	r2, [r7, #14]
 800152a:	801a      	strh	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <ST7789_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void ST7789_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b085      	sub	sp, #20
 800153c:	af02      	add	r7, sp, #8
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	4603      	mov	r3, r0
 800154c:	80bb      	strh	r3, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	807b      	strh	r3, [r7, #2]
 8001552:	4613      	mov	r3, r2
 8001554:	803b      	strh	r3, [r7, #0]
	
  if (x1 > x2){
 8001556:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800155a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800155e:	429a      	cmp	r2, r3
 8001560:	dd05      	ble.n	800156e <ST7789_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 8001562:	1cba      	adds	r2, r7, #2
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ffcf 	bl	800150c <SwapInt16Values>
  }
  
  if (y1 > y2){
 800156e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001572:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001576:	429a      	cmp	r2, r3
 8001578:	dd05      	ble.n	8001586 <ST7789_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 800157a:	463a      	mov	r2, r7
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ffc3 	bl	800150c <SwapInt16Values>
  }
  
  ST7789_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 8001586:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800158a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800158e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001592:	b29a      	uxth	r2, r3
 8001594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001598:	b29b      	uxth	r3, r3
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	b29b      	uxth	r3, r3
 800159e:	b21c      	sxth	r4, r3
 80015a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	8b3b      	ldrh	r3, [r7, #24]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4613      	mov	r3, r2
 80015b8:	4622      	mov	r2, r4
 80015ba:	f7ff fe7b 	bl	80012b4 <ST7789_FillRect>
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}

080015c6 <ST7789_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
 void ST7789_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80015c6:	b590      	push	{r4, r7, lr}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4604      	mov	r4, r0
 80015ce:	4608      	mov	r0, r1
 80015d0:	4611      	mov	r1, r2
 80015d2:	461a      	mov	r2, r3
 80015d4:	4623      	mov	r3, r4
 80015d6:	80fb      	strh	r3, [r7, #6]
 80015d8:	4603      	mov	r3, r0
 80015da:	80bb      	strh	r3, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	803b      	strh	r3, [r7, #0]
	
  const int16_t deltaX = abs(x2 - x1);
 80015e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bfb8      	it	lt
 80015f2:	425b      	neglt	r3, r3
 80015f4:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80015f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80015fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	bfb8      	it	lt
 8001604:	425b      	neglt	r3, r3
 8001606:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 8001608:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800160c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001610:	429a      	cmp	r2, r3
 8001612:	da01      	bge.n	8001618 <ST7789_DrawLine_Slow+0x52>
 8001614:	2301      	movs	r3, #1
 8001616:	e001      	b.n	800161c <ST7789_DrawLine_Slow+0x56>
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 800161e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001622:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001626:	429a      	cmp	r2, r3
 8001628:	da01      	bge.n	800162e <ST7789_DrawLine_Slow+0x68>
 800162a:	2301      	movs	r3, #1
 800162c:	e001      	b.n	8001632 <ST7789_DrawLine_Slow+0x6c>
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8001634:	8aba      	ldrh	r2, [r7, #20]
 8001636:	8a7b      	ldrh	r3, [r7, #18]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	82fb      	strh	r3, [r7, #22]

  ST7789_DrawPixel(x2, y2, color);
 800163e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001640:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001644:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f8bd 	bl	80017c8 <ST7789_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 800164e:	e02c      	b.n	80016aa <ST7789_DrawLine_Slow+0xe4>
	  
    ST7789_DrawPixel(x1, y1, color);
 8001650:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001652:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f8b4 	bl	80017c8 <ST7789_DrawPixel>
    const int16_t error2 = error * 2;
 8001660:	8afb      	ldrh	r3, [r7, #22]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) {
 8001668:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800166c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001670:	425b      	negs	r3, r3
 8001672:	429a      	cmp	r2, r3
 8001674:	dd09      	ble.n	800168a <ST7789_DrawLine_Slow+0xc4>
		
      error -= deltaY;
 8001676:	8afa      	ldrh	r2, [r7, #22]
 8001678:	8a7b      	ldrh	r3, [r7, #18]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	b29b      	uxth	r3, r3
 800167e:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8001680:	88fa      	ldrh	r2, [r7, #6]
 8001682:	8a3b      	ldrh	r3, [r7, #16]
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 800168a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800168e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001692:	429a      	cmp	r2, r3
 8001694:	da09      	bge.n	80016aa <ST7789_DrawLine_Slow+0xe4>
		
      error += deltaX;
 8001696:	8afa      	ldrh	r2, [r7, #22]
 8001698:	8abb      	ldrh	r3, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 80016a0:	88ba      	ldrh	r2, [r7, #4]
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	4413      	add	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 80016aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d1cc      	bne.n	8001650 <ST7789_DrawLine_Slow+0x8a>
 80016b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d1c6      	bne.n	8001650 <ST7789_DrawLine_Slow+0x8a>
    }
  }
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <ST7789_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	80bb      	strh	r3, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 80016ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d129      	bne.n	800174a <ST7789_DrawLine+0x7e>

    if (y1 > y2){
 80016f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dd11      	ble.n	8001726 <ST7789_DrawLine+0x5a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 8001702:	88ba      	ldrh	r2, [r7, #4]
 8001704:	883b      	ldrh	r3, [r7, #0]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	b21a      	sxth	r2, r3
 8001710:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001714:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001718:	8b3b      	ldrh	r3, [r7, #24]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4613      	mov	r3, r2
 800171e:	2201      	movs	r2, #1
 8001720:	f7ff fdc8 	bl	80012b4 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}
	
    return;
 8001724:	e04c      	b.n	80017c0 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 8001726:	883a      	ldrh	r2, [r7, #0]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	b29b      	uxth	r3, r3
 800172e:	3301      	adds	r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21a      	sxth	r2, r3
 8001734:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001738:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800173c:	8b3b      	ldrh	r3, [r7, #24]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4613      	mov	r3, r2
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fdb6 	bl	80012b4 <ST7789_FillRect>
    return;
 8001748:	e03a      	b.n	80017c0 <ST7789_DrawLine+0xf4>
  }
  
  if (y1 == y2){
 800174a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800174e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001752:	429a      	cmp	r2, r3
 8001754:	d127      	bne.n	80017a6 <ST7789_DrawLine+0xda>
    
    if (x1 > x2){
 8001756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800175a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800175e:	429a      	cmp	r2, r3
 8001760:	dd10      	ble.n	8001784 <ST7789_DrawLine+0xb8>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b29b      	uxth	r3, r3
 800176a:	3301      	adds	r3, #1
 800176c:	b29b      	uxth	r3, r3
 800176e:	b21a      	sxth	r2, r3
 8001770:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001774:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001778:	8b3b      	ldrh	r3, [r7, #24]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	f7ff fd99 	bl	80012b4 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}
	
    return;
 8001782:	e01d      	b.n	80017c0 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8001784:	887a      	ldrh	r2, [r7, #2]
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21a      	sxth	r2, r3
 8001792:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001796:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800179a:	8b3b      	ldrh	r3, [r7, #24]
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	f7ff fd88 	bl	80012b4 <ST7789_FillRect>
    return;
 80017a4:	e00c      	b.n	80017c0 <ST7789_DrawLine+0xf4>
  }
  
  ST7789_DrawLine_Slow(x1, y1, x2, y2, color);
 80017a6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80017aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017b6:	8b3b      	ldrh	r3, [r7, #24]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7ff ff03 	bl	80015c6 <ST7789_DrawLine_Slow>
}
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
	...

080017c8 <ST7789_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	460b      	mov	r3, r1
 80017d4:	80bb      	strh	r3, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	807b      	strh	r3, [r7, #2]
	
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 80017da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db1b      	blt.n	800181a <ST7789_DrawPixel+0x52>
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <ST7789_DrawPixel+0x5c>)
 80017e8:	8812      	ldrh	r2, [r2, #0]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	da15      	bge.n	800181a <ST7789_DrawPixel+0x52>
 80017ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db11      	blt.n	800181a <ST7789_DrawPixel+0x52>
 80017f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <ST7789_DrawPixel+0x60>)
 80017fc:	8812      	ldrh	r2, [r2, #0]
 80017fe:	4293      	cmp	r3, r2
 8001800:	da0b      	bge.n	800181a <ST7789_DrawPixel+0x52>
    return;
  }

  ST7789_SetWindow(x, y, x, y);
 8001802:	88f8      	ldrh	r0, [r7, #6]
 8001804:	88b9      	ldrh	r1, [r7, #4]
 8001806:	88fa      	ldrh	r2, [r7, #6]
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	f7ff fdb1 	bl	8001370 <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 800180e:	1cbb      	adds	r3, r7, #2
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fdd2 	bl	80013bc <ST7789_RamWrite>
 8001818:	e000      	b.n	800181c <ST7789_DrawPixel+0x54>
    return;
 800181a:	bf00      	nop
}
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000434 	.word	0x20000434
 8001828:	20000436 	.word	0x20000436

0800182c <ST7789_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void ST7789_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af02      	add	r7, sp, #8
 8001832:	4604      	mov	r4, r0
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4623      	mov	r3, r4
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	4603      	mov	r3, r0
 8001840:	80bb      	strh	r3, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  int y = radius;
 800184e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001852:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 8001854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	f1c3 0301 	rsb	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
  int error = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 8001864:	e075      	b.n	8001952 <ST7789_DrawCircleFilled+0x126>
	  
    ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	b29a      	uxth	r2, r3
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4413      	add	r3, r2
 800186e:	b29b      	uxth	r3, r3
 8001870:	b218      	sxth	r0, r3
 8001872:	88ba      	ldrh	r2, [r7, #4]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	b29b      	uxth	r3, r3
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	b219      	sxth	r1, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	b29a      	uxth	r2, r3
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	4413      	add	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21c      	sxth	r4, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	b29a      	uxth	r2, r3
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	b21a      	sxth	r2, r3
 8001896:	883b      	ldrh	r3, [r7, #0]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	4622      	mov	r2, r4
 800189e:	f7ff ff15 	bl	80016cc <ST7789_DrawLine>
    ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b218      	sxth	r0, r3
 80018ae:	88ba      	ldrh	r2, [r7, #4]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	b219      	sxth	r1, r3
 80018ba:	88fa      	ldrh	r2, [r7, #6]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b21c      	sxth	r4, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	883b      	ldrh	r3, [r7, #0]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	4622      	mov	r2, r4
 80018da:	f7ff fef7 	bl	80016cc <ST7789_DrawLine>
    error = 2 * (delta + y) - 1;
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da0c      	bge.n	800190a <ST7789_DrawCircleFilled+0xde>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	dc09      	bgt.n	800190a <ST7789_DrawCircleFilled+0xde>
		
      ++x;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	3301      	adds	r3, #1
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
      continue;
 8001908:	e023      	b.n	8001952 <ST7789_DrawCircleFilled+0x126>
    }
	
    error = 2 * (delta - x) - 1;
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	dd0d      	ble.n	8001938 <ST7789_DrawCircleFilled+0x10c>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dd0a      	ble.n	8001938 <ST7789_DrawCircleFilled+0x10c>
		
      --y;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	3b01      	subs	r3, #1
 8001926:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	f1c3 0301 	rsb	r3, r3, #1
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
      continue;
 8001936:	e00c      	b.n	8001952 <ST7789_DrawCircleFilled+0x126>
    }
	
    ++x;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    --y;
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	3b01      	subs	r3, #1
 8001950:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	da86      	bge.n	8001866 <ST7789_DrawCircleFilled+0x3a>
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
	...

08001964 <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4623      	mov	r3, r4
 8001974:	80fb      	strh	r3, [r7, #6]
 8001976:	4603      	mov	r3, r0
 8001978:	80bb      	strh	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	803b      	strh	r3, [r7, #0]
	
	uint32_t i, b, j;
	
	uint32_t X = x, Y = y;
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]
	
	uint8_t xx, yy;
	
	if( multiplier < 1 ){
 800198a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <ST7789_DrawChar+0x34>
		multiplier = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}

	/* Check available space in LCD */
	if (ST7789_Width >= ( x + Font->FontWidth) || ST7789_Height >= ( y + Font->FontHeight)){
 8001998:	4b90      	ldr	r3, [pc, #576]	; (8001bdc <ST7789_DrawChar+0x278>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	4299      	cmp	r1, r3
 80019a8:	da09      	bge.n	80019be <ST7789_DrawChar+0x5a>
 80019aa:	4b8d      	ldr	r3, [pc, #564]	; (8001be0 <ST7789_DrawChar+0x27c>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019b4:	7852      	ldrb	r2, [r2, #1]
 80019b6:	4413      	add	r3, r2
 80019b8:	4299      	cmp	r1, r3
 80019ba:	f2c0 8154 	blt.w	8001c66 <ST7789_DrawChar+0x302>

	
			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {		
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e149      	b.n	8001c58 <ST7789_DrawChar+0x2f4>
				
				if( ch < 127 ){			
 80019c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019c8:	2b7e      	cmp	r3, #126	; 0x7e
 80019ca:	d810      	bhi.n	80019ee <ST7789_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019d4:	3b20      	subs	r3, #32
 80019d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019d8:	7849      	ldrb	r1, [r1, #1]
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	440b      	add	r3, r1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	e0b8      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch > 191 ){
 80019ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019f2:	2bbf      	cmp	r3, #191	; 0xbf
 80019f4:	d910      	bls.n	8001a18 <ST7789_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом 
					// только кирилицу то нужно добавлять 95 если шрифт 
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019fe:	3b60      	subs	r3, #96	; 0x60
 8001a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a02:	7849      	ldrb	r1, [r1, #1]
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	e0a3      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 8001a18:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a1c:	2ba8      	cmp	r3, #168	; 0xa8
 8001a1e:	d110      	bne.n	8001a42 <ST7789_DrawChar+0xde>
					// 160 эллемент ( символ Ё ) 
					b = Font->data[( 160 ) * Font->FontHeight + i];
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	785b      	ldrb	r3, [r3, #1]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	4619      	mov	r1, r3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	440b      	add	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	e08e      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8001a42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a46:	2bb8      	cmp	r3, #184	; 0xb8
 8001a48:	d111      	bne.n	8001a6e <ST7789_DrawChar+0x10a>
					// 161 эллемент  ( символ ё ) 
					b = Font->data[( 161 ) * Font->FontHeight + i];
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	4413      	add	r3, r2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	440b      	add	r3, r1
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	e078      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------
				
				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 8001a6e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a72:	2baa      	cmp	r3, #170	; 0xaa
 8001a74:	d10f      	bne.n	8001a96 <ST7789_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	23a2      	movs	r3, #162	; 0xa2
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4619      	mov	r1, r3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e064      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 8001a96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a9a:	2baf      	cmp	r3, #175	; 0xaf
 8001a9c:	d10f      	bne.n	8001abe <ST7789_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	785b      	ldrb	r3, [r3, #1]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	23a3      	movs	r3, #163	; 0xa3
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	440b      	add	r3, r1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	e050      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 8001abe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001ac2:	2bb2      	cmp	r3, #178	; 0xb2
 8001ac4:	d10f      	bne.n	8001ae6 <ST7789_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	23a4      	movs	r3, #164	; 0xa4
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	440b      	add	r3, r1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e03c      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 8001ae6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001aea:	2bb3      	cmp	r3, #179	; 0xb3
 8001aec:	d111      	bne.n	8001b12 <ST7789_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	4619      	mov	r1, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	0159      	lsls	r1, r3, #5
 8001b00:	440b      	add	r3, r1
 8001b02:	4619      	mov	r1, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	440b      	add	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	e026      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 8001b12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b16:	2bba      	cmp	r3, #186	; 0xba
 8001b18:	d10f      	bne.n	8001b3a <ST7789_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	785b      	ldrb	r3, [r3, #1]
 8001b22:	4619      	mov	r1, r3
 8001b24:	23a6      	movs	r3, #166	; 0xa6
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	440b      	add	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	e012      	b.n	8001b60 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 8001b3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b3e:	2bbf      	cmp	r3, #191	; 0xbf
 8001b40:	d10e      	bne.n	8001b60 <ST7789_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 8001b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	23a7      	movs	r3, #167	; 0xa7
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	440b      	add	r3, r1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------
			
				for (j = 0; j < Font->FontWidth; j++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e068      	b.n	8001c38 <ST7789_DrawChar+0x2d4>
					
					if ((b << j) & 0x8000) {
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d028      	beq.n	8001bc8 <ST7789_DrawChar+0x264>
						
						for (yy = 0; yy < multiplier; yy++){
 8001b76:	2300      	movs	r3, #0
 8001b78:	72bb      	strb	r3, [r7, #10]
 8001b7a:	e01f      	b.n	8001bbc <ST7789_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	72fb      	strb	r3, [r7, #11]
 8001b80:	e014      	b.n	8001bac <ST7789_DrawChar+0x248>
									ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b218      	sxth	r0, r3
 8001b90:	7abb      	ldrb	r3, [r7, #10]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff fe11 	bl	80017c8 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	72fb      	strb	r3, [r7, #11]
 8001bac:	7afa      	ldrb	r2, [r7, #11]
 8001bae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3e5      	bcc.n	8001b82 <ST7789_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 8001bb6:	7abb      	ldrb	r3, [r7, #10]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	72bb      	strb	r3, [r7, #10]
 8001bbc:	7aba      	ldrb	r2, [r7, #10]
 8001bbe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3da      	bcc.n	8001b7c <ST7789_DrawChar+0x218>
 8001bc6:	e02f      	b.n	8001c28 <ST7789_DrawChar+0x2c4>
							}
						}
						
					} 
					else if( TransparentBg ){
 8001bc8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d02b      	beq.n	8001c28 <ST7789_DrawChar+0x2c4>
						
						for (yy = 0; yy < multiplier; yy++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	72bb      	strb	r3, [r7, #10]
 8001bd4:	e023      	b.n	8001c1e <ST7789_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	72fb      	strb	r3, [r7, #11]
 8001bda:	e018      	b.n	8001c0e <ST7789_DrawChar+0x2aa>
 8001bdc:	20000434 	.word	0x20000434
 8001be0:	20000436 	.word	0x20000436
									ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b218      	sxth	r0, r3
 8001bf2:	7abb      	ldrb	r3, [r7, #10]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	883a      	ldrh	r2, [r7, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7ff fde0 	bl	80017c8 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	72fb      	strb	r3, [r7, #11]
 8001c0e:	7afa      	ldrb	r2, [r7, #11]
 8001c10:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d3e5      	bcc.n	8001be4 <ST7789_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8001c18:	7abb      	ldrb	r3, [r7, #10]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	72bb      	strb	r3, [r7, #10]
 8001c1e:	7aba      	ldrb	r2, [r7, #10]
 8001c20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3d6      	bcc.n	8001bd6 <ST7789_DrawChar+0x272>
							}
						}
						
					}
					X = X + multiplier;
 8001c28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d390      	bcc.n	8001b66 <ST7789_DrawChar+0x202>
				}
				X = x;
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8001c48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {		
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	f4ff aeaf 	bcc.w	80019c4 <ST7789_DrawChar+0x60>
			}
	}
}
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop

08001c70 <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	4604      	mov	r4, r0
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	80fb      	strh	r3, [r7, #6]
 8001c82:	4603      	mov	r3, r0
 8001c84:	80bb      	strh	r3, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	807b      	strh	r3, [r7, #2]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	803b      	strh	r3, [r7, #0]
	
	if( multiplier < 1 ){
 8001c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <ST7789_print+0x2c>
		multiplier = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8001c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c9e:	f7fe fa9f 	bl	80001e0 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	81bb      	strh	r3, [r7, #12]
	
	while (len--) {
 8001ca6:	e09c      	b.n	8001de2 <ST7789_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2bbf      	cmp	r3, #191	; 0xbf
 8001cae:	d977      	bls.n	8001da0 <ST7789_print+0x130>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2bd0      	cmp	r3, #208	; 0xd0
 8001cb6:	d002      	beq.n	8001cbe <ST7789_print+0x4e>
 8001cb8:	2bd1      	cmp	r3, #209	; 0xd1
 8001cba:	d02c      	beq.n	8001d16 <ST7789_print+0xa6>
 8001cbc:	e05b      	b.n	8001d76 <ST7789_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b8f      	cmp	r3, #143	; 0x8f
 8001cca:	d908      	bls.n	8001cde <ST7789_print+0x6e>
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2bbf      	cmp	r3, #191	; 0xbf
 8001cd2:	d804      	bhi.n	8001cde <ST7789_print+0x6e>
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3330      	adds	r3, #48	; 0x30
 8001cda:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001cdc:	e048      	b.n	8001d70 <ST7789_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b81      	cmp	r3, #129	; 0x81
 8001ce4:	d102      	bne.n	8001cec <ST7789_print+0x7c>
 8001ce6:	23a8      	movs	r3, #168	; 0xa8
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e044      	b.n	8001d76 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b84      	cmp	r3, #132	; 0x84
 8001cf2:	d102      	bne.n	8001cfa <ST7789_print+0x8a>
 8001cf4:	23aa      	movs	r3, #170	; 0xaa
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e03d      	b.n	8001d76 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b86      	cmp	r3, #134	; 0x86
 8001d00:	d102      	bne.n	8001d08 <ST7789_print+0x98>
 8001d02:	23b2      	movs	r3, #178	; 0xb2
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e036      	b.n	8001d76 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b87      	cmp	r3, #135	; 0x87
 8001d0e:	d12f      	bne.n	8001d70 <ST7789_print+0x100>
 8001d10:	23af      	movs	r3, #175	; 0xaf
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e02f      	b.n	8001d76 <ST7789_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	3301      	adds	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da08      	bge.n	8001d38 <ST7789_print+0xc8>
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b8f      	cmp	r3, #143	; 0x8f
 8001d2c:	d804      	bhi.n	8001d38 <ST7789_print+0xc8>
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3370      	adds	r3, #112	; 0x70
 8001d34:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001d36:	e01d      	b.n	8001d74 <ST7789_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b91      	cmp	r3, #145	; 0x91
 8001d3e:	d102      	bne.n	8001d46 <ST7789_print+0xd6>
 8001d40:	23b8      	movs	r3, #184	; 0xb8
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e017      	b.n	8001d76 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b94      	cmp	r3, #148	; 0x94
 8001d4c:	d102      	bne.n	8001d54 <ST7789_print+0xe4>
 8001d4e:	23ba      	movs	r3, #186	; 0xba
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e010      	b.n	8001d76 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b96      	cmp	r3, #150	; 0x96
 8001d5a:	d102      	bne.n	8001d62 <ST7789_print+0xf2>
 8001d5c:	23b3      	movs	r3, #179	; 0xb3
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e009      	b.n	8001d76 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b97      	cmp	r3, #151	; 0x97
 8001d68:	d104      	bne.n	8001d74 <ST7789_print+0x104>
 8001d6a:	23bf      	movs	r3, #191	; 0xbf
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e002      	b.n	8001d76 <ST7789_print+0x106>
					break;
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <ST7789_print+0x106>
					break;
 8001d74:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001d76:	89bb      	ldrh	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	81bb      	strh	r3, [r7, #12]
			
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8001d7c:	883c      	ldrh	r4, [r7, #0]
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	88b9      	ldrh	r1, [r7, #4]
 8001d82:	88f8      	ldrh	r0, [r7, #6]
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	9303      	str	r3, [sp, #12]
 8001d88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4623      	mov	r3, r4
 8001d9a:	f7ff fde3 	bl	8001964 <ST7789_DrawChar>
 8001d9e:	e011      	b.n	8001dc4 <ST7789_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	883c      	ldrh	r4, [r7, #0]
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	88b9      	ldrh	r1, [r7, #4]
 8001daa:	88f8      	ldrh	r0, [r7, #6]
 8001dac:	9303      	str	r3, [sp, #12]
 8001dae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001db2:	9302      	str	r3, [sp, #8]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	f7ff fdd0 	bl	8001964 <ST7789_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	fb12 f303 	smulbb	r3, r2, r3
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4413      	add	r3, r2
 8001dda:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	3301      	adds	r3, #1
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (len--) {
 8001de2:	89bb      	ldrh	r3, [r7, #12]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	81ba      	strh	r2, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f af5d 	bne.w	8001ca8 <ST7789_print+0x38>
	}
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}

08001df8 <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	
	ST7789_Select();
 8001e02:	f7ff f949 	bl	8001098 <ST7789_Select>
	
	ST7789_SendCmd(ST7789_MADCTL);
 8001e06:	2036      	movs	r0, #54	; 0x36
 8001e08:	f7ff f9bc 	bl	8001184 <ST7789_SendCmd>

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d85b      	bhi.n	8001ecc <ST7789_rotation+0xd4>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <ST7789_rotation+0x24>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e55 	.word	0x08001e55
 8001e24:	08001e7d 	.word	0x08001e7d
 8001e28:	08001ea5 	.word	0x08001ea5
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_RGB);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff f9cf 	bl	80011d0 <ST7789_SendData>
				ST7789_Width = 240;
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <ST7789_rotation+0xe4>)
 8001e34:	22f0      	movs	r2, #240	; 0xf0
 8001e36:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <ST7789_rotation+0xe8>)
 8001e3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e3e:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <ST7789_rotation+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <ST7789_rotation+0xf0>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fa17 	bl	8001280 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001e52:	e03c      	b.n	8001ece <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001e54:	2060      	movs	r0, #96	; 0x60
 8001e56:	f7ff f9bb 	bl	80011d0 <ST7789_SendData>
				ST7789_Width = 320;
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <ST7789_rotation+0xe4>)
 8001e5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e60:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;		
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <ST7789_rotation+0xe8>)
 8001e64:	22f0      	movs	r2, #240	; 0xf0
 8001e66:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <ST7789_rotation+0xec>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <ST7789_rotation+0xf0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fa03 	bl	8001280 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001e7a:	e028      	b.n	8001ece <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001e7c:	20c0      	movs	r0, #192	; 0xc0
 8001e7e:	f7ff f9a7 	bl	80011d0 <ST7789_SendData>
				ST7789_Width = 240;
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <ST7789_rotation+0xe4>)
 8001e84:	22f0      	movs	r2, #240	; 0xf0
 8001e86:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <ST7789_rotation+0xe8>)
 8001e8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e8e:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <ST7789_rotation+0xec>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <ST7789_rotation+0xf0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff f9ef 	bl	8001280 <ST7789_FillScreen>
			#endif
			//==========================================================================
			
		 break;
 8001ea2:	e014      	b.n	8001ece <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001ea4:	20a0      	movs	r0, #160	; 0xa0
 8001ea6:	f7ff f993 	bl	80011d0 <ST7789_SendData>
				ST7789_Width = 320;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <ST7789_rotation+0xe4>)
 8001eac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eb0:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <ST7789_rotation+0xe8>)
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <ST7789_rotation+0xec>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <ST7789_rotation+0xf0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff f9db 	bl	8001280 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001eca:	e000      	b.n	8001ece <ST7789_rotation+0xd6>
	   
	   default:
		 break;
 8001ecc:	bf00      	nop
	  }
	  
	  ST7789_Unselect();
 8001ece:	f7ff f8ef 	bl	80010b0 <ST7789_Unselect>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000434 	.word	0x20000434
 8001ee0:	20000436 	.word	0x20000436
 8001ee4:	20000430 	.word	0x20000430
 8001ee8:	20000432 	.word	0x20000432

08001eec <ST7789_DrawFillRoundRect>:


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( заполненый )
//==============================================================================
void ST7789_DrawFillRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint16_t color) {
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4623      	mov	r3, r4
 8001efc:	80fb      	strh	r3, [r7, #6]
 8001efe:	4603      	mov	r3, r0
 8001f00:	80bb      	strh	r3, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	807b      	strh	r3, [r7, #2]
 8001f06:	4613      	mov	r3, r2
 8001f08:	803b      	strh	r3, [r7, #0]
	
	int16_t max_radius = ((width < height) ? width : height) / 2; // 1/2 minor axis
 8001f0a:	883a      	ldrh	r2, [r7, #0]
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	bf28      	it	cs
 8001f12:	4613      	movcs	r3, r2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	0fda      	lsrs	r2, r3, #31
 8001f18:	4413      	add	r3, r2
 8001f1a:	105b      	asrs	r3, r3, #1
 8001f1c:	81fb      	strh	r3, [r7, #14]
  if (cornerRadius > max_radius){
 8001f1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dd01      	ble.n	8001f2e <ST7789_DrawFillRoundRect+0x42>
    cornerRadius = max_radius;
 8001f2a:	89fb      	ldrh	r3, [r7, #14]
 8001f2c:	843b      	strh	r3, [r7, #32]
	}
	
  ST7789_DrawRectangleFilled(x + cornerRadius, y, x + cornerRadius + width - 2 * cornerRadius, y + height, color);
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	8c3b      	ldrh	r3, [r7, #32]
 8001f32:	4413      	add	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b218      	sxth	r0, r3
 8001f38:	88fa      	ldrh	r2, [r7, #6]
 8001f3a:	8c3b      	ldrh	r3, [r7, #32]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	4413      	add	r3, r2
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	8c3b      	ldrh	r3, [r7, #32]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	b21c      	sxth	r4, r3
 8001f52:	88ba      	ldrh	r2, [r7, #4]
 8001f54:	883b      	ldrh	r3, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	4622      	mov	r2, r4
 8001f68:	f7ff fae6 	bl	8001538 <ST7789_DrawRectangleFilled>
  // draw four corners
  ST7789_DrawFillCircleHelper(x + width - cornerRadius - 1, y + cornerRadius, cornerRadius, 1, height - 2 * cornerRadius - 1, color);
 8001f6c:	88fa      	ldrh	r2, [r7, #6]
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	4413      	add	r3, r2
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	8c3b      	ldrh	r3, [r7, #32]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	b218      	sxth	r0, r3
 8001f80:	88ba      	ldrh	r2, [r7, #4]
 8001f82:	8c3b      	ldrh	r3, [r7, #32]
 8001f84:	4413      	add	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b219      	sxth	r1, r3
 8001f8a:	8c3b      	ldrh	r3, [r7, #32]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	883a      	ldrh	r2, [r7, #0]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fa2:	9201      	str	r2, [sp, #4]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4622      	mov	r2, r4
 8001faa:	f000 f820 	bl	8001fee <ST7789_DrawFillCircleHelper>
  ST7789_DrawFillCircleHelper(x + cornerRadius, y + cornerRadius, cornerRadius, 2, height - 2 * cornerRadius - 1, color);
 8001fae:	88fa      	ldrh	r2, [r7, #6]
 8001fb0:	8c3b      	ldrh	r3, [r7, #32]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	b218      	sxth	r0, r3
 8001fb8:	88ba      	ldrh	r2, [r7, #4]
 8001fba:	8c3b      	ldrh	r3, [r7, #32]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b219      	sxth	r1, r3
 8001fc2:	8c3b      	ldrh	r3, [r7, #32]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	883a      	ldrh	r2, [r7, #0]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001fd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fda:	9201      	str	r2, [sp, #4]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	4622      	mov	r2, r4
 8001fe2:	f000 f804 	bl	8001fee <ST7789_DrawFillCircleHelper>
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}

08001fee <ST7789_DrawFillCircleHelper>:
//==============================================================================

//==============================================================================
// Процедура рисования половины окружности ( правая или левая ) ( заполненый )
//==============================================================================
void ST7789_DrawFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8001fee:	b590      	push	{r4, r7, lr}
 8001ff0:	b089      	sub	sp, #36	; 0x24
 8001ff2:	af02      	add	r7, sp, #8
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4623      	mov	r3, r4
 8001ffe:	80fb      	strh	r3, [r7, #6]
 8002000:	4603      	mov	r3, r0
 8002002:	80bb      	strh	r3, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	f1c3 0301 	rsb	r3, r3, #1
 8002012:	b29b      	uxth	r3, r3
 8002014:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	461a      	mov	r2, r3
 800201e:	03d2      	lsls	r2, r2, #15
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8002030:	8a3b      	ldrh	r3, [r7, #16]
 8002032:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8002034:	89fb      	ldrh	r3, [r7, #14]
 8002036:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8002038:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800203c:	b29b      	uxth	r3, r3
 800203e:	3301      	adds	r3, #1
 8002040:	b29b      	uxth	r3, r3
 8002042:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 8002044:	e0d5      	b.n	80021f2 <ST7789_DrawFillCircleHelper+0x204>
    if (f >= 0) {
 8002046:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800204a:	2b00      	cmp	r3, #0
 800204c:	db0e      	blt.n	800206c <ST7789_DrawFillCircleHelper+0x7e>
      y--;
 800204e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29b      	uxth	r3, r3
 8002058:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800205a:	8a7b      	ldrh	r3, [r7, #18]
 800205c:	3302      	adds	r3, #2
 800205e:	b29b      	uxth	r3, r3
 8002060:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8002062:	8afa      	ldrh	r2, [r7, #22]
 8002064:	8a7b      	ldrh	r3, [r7, #18]
 8002066:	4413      	add	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800206c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002070:	b29b      	uxth	r3, r3
 8002072:	3301      	adds	r3, #1
 8002074:	b29b      	uxth	r3, r3
 8002076:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8002078:	8abb      	ldrh	r3, [r7, #20]
 800207a:	3302      	adds	r3, #2
 800207c:	b29b      	uxth	r3, r3
 800207e:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8002080:	8afa      	ldrh	r2, [r7, #22]
 8002082:	8abb      	ldrh	r3, [r7, #20]
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	82fb      	strh	r3, [r7, #22]

    if (x < (y + 1)) {
 800208a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800208e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002092:	429a      	cmp	r2, r3
 8002094:	db51      	blt.n	800213a <ST7789_DrawFillCircleHelper+0x14c>
      if (corners & 1){
 8002096:	787b      	ldrb	r3, [r7, #1]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d023      	beq.n	80020e8 <ST7789_DrawFillCircleHelper+0xfa>
        ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 - y - 1 + 2 * y + delta, color);
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	8a3b      	ldrh	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b218      	sxth	r0, r3
 80020aa:	88ba      	ldrh	r2, [r7, #4]
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b219      	sxth	r1, r3
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	8a3b      	ldrh	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b21c      	sxth	r4, r3
 80020be:	88ba      	ldrh	r2, [r7, #4]
 80020c0:	89fb      	ldrh	r3, [r7, #14]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	89fb      	ldrh	r3, [r7, #14]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020d2:	4413      	add	r3, r2
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b21a      	sxth	r2, r3
 80020dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	4622      	mov	r2, r4
 80020e4:	f7ff faf2 	bl	80016cc <ST7789_DrawLine>
			}
      if (corners & 2){
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d023      	beq.n	800213a <ST7789_DrawFillCircleHelper+0x14c>
        ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 - y - 1 + 2 * y + delta, color);
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	8a3b      	ldrh	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	b218      	sxth	r0, r3
 80020fc:	88ba      	ldrh	r2, [r7, #4]
 80020fe:	89fb      	ldrh	r3, [r7, #14]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	b29b      	uxth	r3, r3
 8002104:	b219      	sxth	r1, r3
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	8a3b      	ldrh	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	b29b      	uxth	r3, r3
 800210e:	b21c      	sxth	r4, r3
 8002110:	88ba      	ldrh	r2, [r7, #4]
 8002112:	89fb      	ldrh	r3, [r7, #14]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29a      	uxth	r2, r3
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	b29a      	uxth	r2, r3
 8002122:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002124:	4413      	add	r3, r2
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	b21a      	sxth	r2, r3
 800212e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	4622      	mov	r2, r4
 8002136:	f7ff fac9 	bl	80016cc <ST7789_DrawLine>
			}
    }
    if (y != py) {
 800213a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800213e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002142:	429a      	cmp	r2, r3
 8002144:	d053      	beq.n	80021ee <ST7789_DrawFillCircleHelper+0x200>
      if (corners & 1){
 8002146:	787b      	ldrb	r3, [r7, #1]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d023      	beq.n	8002198 <ST7789_DrawFillCircleHelper+0x1aa>
        ST7789_DrawLine(x0 + py, y0 - px, x0 + py, y0 - px - 1 + 2 * px + delta, color);
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	4413      	add	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	b218      	sxth	r0, r3
 800215a:	88ba      	ldrh	r2, [r7, #4]
 800215c:	89bb      	ldrh	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b29b      	uxth	r3, r3
 8002162:	b219      	sxth	r1, r3
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	4413      	add	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	b21c      	sxth	r4, r3
 800216e:	88ba      	ldrh	r2, [r7, #4]
 8002170:	89bb      	ldrh	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b29a      	uxth	r2, r3
 8002176:	89bb      	ldrh	r3, [r7, #12]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	b29b      	uxth	r3, r3
 800217c:	4413      	add	r3, r2
 800217e:	b29a      	uxth	r2, r3
 8002180:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002182:	4413      	add	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29b      	uxth	r3, r3
 800218a:	b21a      	sxth	r2, r3
 800218c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	4622      	mov	r2, r4
 8002194:	f7ff fa9a 	bl	80016cc <ST7789_DrawLine>
			}
      if (corners & 2){
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d023      	beq.n	80021ea <ST7789_DrawFillCircleHelper+0x1fc>
        ST7789_DrawLine(x0 - py, y0 - px, x0 - py, y0 - px - 1 + 2 * px + delta, color);
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	897b      	ldrh	r3, [r7, #10]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b218      	sxth	r0, r3
 80021ac:	88ba      	ldrh	r2, [r7, #4]
 80021ae:	89bb      	ldrh	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b219      	sxth	r1, r3
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	897b      	ldrh	r3, [r7, #10]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b21c      	sxth	r4, r3
 80021c0:	88ba      	ldrh	r2, [r7, #4]
 80021c2:	89bb      	ldrh	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	89bb      	ldrh	r3, [r7, #12]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021d4:	4413      	add	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21a      	sxth	r2, r3
 80021de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	4622      	mov	r2, r4
 80021e6:	f7ff fa71 	bl	80016cc <ST7789_DrawLine>
			}
			py = y;
 80021ea:	89fb      	ldrh	r3, [r7, #14]
 80021ec:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 80021ee:	8a3b      	ldrh	r3, [r7, #16]
 80021f0:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 80021f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	f6ff af23 	blt.w	8002046 <ST7789_DrawFillCircleHelper+0x58>
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd90      	pop	{r4, r7, pc}
	...

0800220c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_MspInit+0x54>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_MspInit+0x54>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_MspInit+0x54>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_MspInit+0x54>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_MspInit+0x54>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_MspInit+0x54>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	210f      	movs	r1, #15
 800224e:	f06f 0001 	mvn.w	r0, #1
 8002252:	f001 f833 	bl	80032bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_ADC_MspInit+0x7c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d127      	bne.n	80022d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_ADC_MspInit+0x80>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_ADC_MspInit+0x80>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_ADC_MspInit+0x80>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_ADC_MspInit+0x80>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_ADC_MspInit+0x80>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_ADC_MspInit+0x80>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Thermistor_Pin|CH4_Pin;
 80022be:	2342      	movs	r3, #66	; 0x42
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c2:	2303      	movs	r3, #3
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_ADC_MspInit+0x84>)
 80022d2:	f001 fb23 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40012000 	.word	0x40012000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020000 	.word	0x40020000

080022ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_CRC_MspInit+0x3c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10d      	bne.n	800231a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_CRC_MspInit+0x40>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_CRC_MspInit+0x40>)
 8002308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_CRC_MspInit+0x40>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40023000 	.word	0x40023000
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_SPI_MspInit+0xe4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d15c      	bne.n	800240c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_SPI_MspInit+0xe8>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <HAL_SPI_MspInit+0xe8>)
 800235c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002360:	6453      	str	r3, [r2, #68]	; 0x44
 8002362:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_SPI_MspInit+0xe8>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_SPI_MspInit+0xe8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a28      	ldr	r2, [pc, #160]	; (8002418 <HAL_SPI_MspInit+0xe8>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_SPI_MspInit+0xe8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800238a:	23a0      	movs	r3, #160	; 0xa0
 800238c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800239a:	2305      	movs	r3, #5
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	481d      	ldr	r0, [pc, #116]	; (800241c <HAL_SPI_MspInit+0xec>)
 80023a6:	f001 fab9 	bl	800391c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_SPI_MspInit+0xf4>)
 80023ae:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 80023f2:	f000 ffa9 	bl	8003348 <HAL_DMA_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 80023fc:	f7fe fe28 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a07      	ldr	r2, [pc, #28]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 8002404:	649a      	str	r2, [r3, #72]	; 0x48
 8002406:	4a06      	ldr	r2, [pc, #24]	; (8002420 <HAL_SPI_MspInit+0xf0>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40013000 	.word	0x40013000
 8002418:	40023800 	.word	0x40023800
 800241c:	40020000 	.word	0x40020000
 8002420:	20000238 	.word	0x20000238
 8002424:	40026440 	.word	0x40026440

08002428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002448:	d116      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2105      	movs	r1, #5
 800246a:	201c      	movs	r0, #28
 800246c:	f000 ff26 	bl	80032bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002470:	201c      	movs	r0, #28
 8002472:	f000 ff3f 	bl	80032f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002476:	e030      	b.n	80024da <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM4)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <HAL_TIM_Base_MspInit+0xc0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d12b      	bne.n	80024da <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_TIM_Base_MspInit+0xbc>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_Spedd_Pin;
 80024ba:	2340      	movs	r3, #64	; 0x40
 80024bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024ca:	2302      	movs	r3, #2
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M_Spedd_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_TIM_Base_MspInit+0xc4>)
 80024d6:	f001 fa21 	bl	800391c <HAL_GPIO_Init>
}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40020400 	.word	0x40020400

080024f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_TIM_PWM_MspInit+0x3c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10d      	bne.n	800251e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_PWM_MspInit+0x40>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_TIM_PWM_MspInit+0x40>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_TIM_PWM_MspInit+0x40>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40000400 	.word	0x40000400
 8002530:	40023800 	.word	0x40023800

08002534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <HAL_TIM_MspPostInit+0x68>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d11d      	bne.n	8002592 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_TIM_MspPostInit+0x6c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_TIM_MspPostInit+0x6c>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_TIM_MspPostInit+0x6c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = M_EN_Pin;
 8002572:	2310      	movs	r3, #16
 8002574:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002582:	2302      	movs	r3, #2
 8002584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M_EN_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <HAL_TIM_MspPostInit+0x70>)
 800258e:	f001 f9c5 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002592:	bf00      	nop
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40000400 	.word	0x40000400
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020400 	.word	0x40020400

080025a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_InitTick+0xd0>)
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_InitTick+0xd0>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6453      	str	r3, [r2, #68]	; 0x44
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_InitTick+0xd0>)
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025d4:	f107 020c 	add.w	r2, r7, #12
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 f9fa 	bl	80059d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025e4:	f003 f9e4 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 80025e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_InitTick+0xd4>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0c9b      	lsrs	r3, r3, #18
 80025f4:	3b01      	subs	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_InitTick+0xd8>)
 80025fa:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_InitTick+0xdc>)
 80025fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_InitTick+0xd8>)
 8002600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002604:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_InitTick+0xd8>)
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_InitTick+0xd8>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_InitTick+0xd8>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_InitTick+0xd8>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800261e:	4818      	ldr	r0, [pc, #96]	; (8002680 <HAL_InitTick+0xd8>)
 8002620:	f003 fcaa 	bl	8005f78 <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800262a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11b      	bne.n	800266a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002632:	4813      	ldr	r0, [pc, #76]	; (8002680 <HAL_InitTick+0xd8>)
 8002634:	f003 fd4a 	bl	80060cc <HAL_TIM_Base_Start_IT>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800263e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002642:	2b00      	cmp	r3, #0
 8002644:	d111      	bne.n	800266a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002646:	2019      	movs	r0, #25
 8002648:	f000 fe54 	bl	80032f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	d808      	bhi.n	8002664 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002652:	2200      	movs	r2, #0
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	2019      	movs	r0, #25
 8002658:	f000 fe30 	bl	80032bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_InitTick+0xe0>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e002      	b.n	800266a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800266a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800266e:	4618      	mov	r0, r3
 8002670:	3730      	adds	r7, #48	; 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	431bde83 	.word	0x431bde83
 8002680:	20000438 	.word	0x20000438
 8002684:	40010000 	.word	0x40010000
 8002688:	20000014 	.word	0x20000014

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <NMI_Handler+0x4>

08002692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002696:	e7fe      	b.n	8002696 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <MemManage_Handler+0x4>

0800269e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <UsageFault_Handler+0x4>

080026aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026be:	f003 fdb6 	bl	800622e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000438 	.word	0x20000438

080026cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM2_IRQHandler+0x10>)
 80026d2:	f003 fdac 	bl	800622e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000298 	.word	0x20000298

080026e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <DMA2_Stream2_IRQHandler+0x10>)
 80026e6:	f000 fedd 	bl	80034a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000238 	.word	0x20000238

080026f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <OTG_FS_IRQHandler+0x10>)
 80026fa:	f001 fbfc 	bl	8003ef6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20006378 	.word	0x20006378

08002708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <_sbrk+0x5c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <_sbrk+0x60>)
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_sbrk+0x64>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <_sbrk+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d207      	bcs.n	8002748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002738:	f00b fb2e 	bl	800dd98 <__errno>
 800273c:	4603      	mov	r3, r0
 800273e:	220c      	movs	r2, #12
 8002740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e009      	b.n	800275c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <_sbrk+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20020000 	.word	0x20020000
 8002768:	00000800 	.word	0x00000800
 800276c:	20000480 	.word	0x20000480
 8002770:	20006ab8 	.word	0x20006ab8

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279e:	490e      	ldr	r1, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b4:	4c0b      	ldr	r4, [pc, #44]	; (80027e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c2:	f7ff ffd7 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f00b faed 	bl	800dda4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7fd fee3 	bl	8000594 <main>
  bx  lr    
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80027dc:	080123e0 	.word	0x080123e0
  ldr r2, =_sbss
 80027e0:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80027e4:	20006ab4 	.word	0x20006ab4

080027e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC_IRQHandler>
	...

080027ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_Init+0x40>)
 80027f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_Init+0x40>)
 8002802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_Init+0x40>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002814:	2003      	movs	r0, #3
 8002816:	f000 fd46 	bl	80032a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281a:	200f      	movs	r0, #15
 800281c:	f7ff fec4 	bl	80025a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002820:	f7ff fcf4 	bl	800220c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00

08002830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000018 	.word	0x20000018
 8002854:	20000484 	.word	0x20000484

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000484 	.word	0x20000484

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff ffee 	bl	8002858 <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffde 	bl	8002858 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000018 	.word	0x20000018

080028b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e033      	b.n	8002936 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fcc4 	bl	8002264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d118      	bne.n	8002928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028fe:	f023 0302 	bic.w	r3, r3, #2
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f9d4 	bl	8002cb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
 8002926:	e001      	b.n	800292c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295a:	d113      	bne.n	8002984 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d10b      	bne.n	8002984 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e063      	b.n	8002a4c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002984:	f7ff ff68 	bl	8002858 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800298a:	e021      	b.n	80029d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d01d      	beq.n	80029d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_ADC_PollForConversion+0x6c>
 800299a:	f7ff ff5d 	bl	8002858 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d212      	bcs.n	80029d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d00b      	beq.n	80029d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e03d      	b.n	8002a4c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d1d6      	bne.n	800298c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f06f 0212 	mvn.w	r2, #18
 80029e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d123      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11f      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d111      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x1c>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e113      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x244>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	d925      	bls.n	8002acc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	3b1e      	subs	r3, #30
 8002a96:	2207      	movs	r2, #7
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68d9      	ldr	r1, [r3, #12]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4603      	mov	r3, r0
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4403      	add	r3, r0
 8002abe:	3b1e      	subs	r3, #30
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	e022      	b.n	8002b12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	400a      	ands	r2, r1
 8002aee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4618      	mov	r0, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4403      	add	r3, r0
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d824      	bhi.n	8002b64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b05      	subs	r3, #5
 8002b2c:	221f      	movs	r2, #31
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	400a      	ands	r2, r1
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	3b05      	subs	r3, #5
 8002b56:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34
 8002b62:	e04c      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	d824      	bhi.n	8002bb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b23      	subs	r3, #35	; 0x23
 8002b7e:	221f      	movs	r2, #31
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43da      	mvns	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b23      	subs	r3, #35	; 0x23
 8002ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb4:	e023      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3b41      	subs	r3, #65	; 0x41
 8002bc8:	221f      	movs	r2, #31
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b41      	subs	r3, #65	; 0x41
 8002bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <HAL_ADC_ConfigChannel+0x250>)
 8002c00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a28      	ldr	r2, [pc, #160]	; (8002ca8 <HAL_ADC_ConfigChannel+0x254>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10f      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1d8>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b12      	cmp	r3, #18
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_ADC_ConfigChannel+0x254>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12b      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x23a>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_ADC_ConfigChannel+0x258>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <HAL_ADC_ConfigChannel+0x1f4>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b11      	cmp	r3, #17
 8002c46:	d122      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <HAL_ADC_ConfigChannel+0x258>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d111      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <HAL_ADC_ConfigChannel+0x260>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	0c9a      	lsrs	r2, r3, #18
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c80:	e002      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f9      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	40012000 	.word	0x40012000
 8002cac:	10000012 	.word	0x10000012
 8002cb0:	20000010 	.word	0x20000010
 8002cb4:	431bde83 	.word	0x431bde83

08002cb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc0:	4b79      	ldr	r3, [pc, #484]	; (8002ea8 <ADC_Init+0x1f0>)
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	021a      	lsls	r2, r3, #8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	4a58      	ldr	r2, [pc, #352]	; (8002eac <ADC_Init+0x1f4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e00f      	b.n	8002db6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0202 	bic.w	r2, r2, #2
 8002dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7e1b      	ldrb	r3, [r3, #24]
 8002dd0:	005a      	lsls	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	035a      	lsls	r2, r3, #13
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e007      	b.n	8002e2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	051a      	lsls	r2, r3, #20
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6e:	025a      	lsls	r2, r3, #9
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	029a      	lsls	r2, r3, #10
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40012300 	.word	0x40012300
 8002eac:	0f000001 	.word	0x0f000001

08002eb0 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADCEx_InjectedStart+0x22>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0aa      	b.n	8003028 <HAL_ADCEx_InjectedStart+0x178>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d018      	beq.n	8002f1a <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <HAL_ADCEx_InjectedStart+0x184>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <HAL_ADCEx_InjectedStart+0x188>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0c9a      	lsrs	r2, r3, #18
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f0c:	e002      	b.n	8002f14 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f9      	bne.n	8002f0e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d172      	bne.n	800300e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0204 	mvn.w	r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_ADCEx_InjectedStart+0x18c>)
 8002f62:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d124      	bne.n	8002fba <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d041      	beq.n	8003026 <HAL_ADCEx_InjectedStart+0x176>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d03e      	beq.n	8003026 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	e035      	b.n	8003026 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a15      	ldr	r2, [pc, #84]	; (8003040 <HAL_ADCEx_InjectedStart+0x190>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d11a      	bne.n	8003026 <HAL_ADCEx_InjectedStart+0x176>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d017      	beq.n	8003026 <HAL_ADCEx_InjectedStart+0x176>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d014      	beq.n	8003026 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	e00b      	b.n	8003026 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000010 	.word	0x20000010
 8003038:	431bde83 	.word	0x431bde83
 800303c:	40012300 	.word	0x40012300
 8003040:	40012000 	.word	0x40012000

08003044 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADCEx_InjectedStop+0x1a>
 800305a:	2302      	movs	r3, #2
 800305c:	e037      	b.n	80030ce <HAL_ADCEx_InjectedStop+0x8a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d120      	bne.n	80030b4 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	d119      	bne.n	80030b4 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d112      	bne.n	80030c4 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030b2:	e007      	b.n	80030c4 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0204 	mvn.w	r2, #4
 80030f2:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d81f      	bhi.n	800313c <HAL_ADCEx_InjectedGetValue+0x60>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <HAL_ADCEx_InjectedGetValue+0x28>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003133 	.word	0x08003133
 8003108:	08003129 	.word	0x08003129
 800310c:	0800311f 	.word	0x0800311f
 8003110:	08003115 	.word	0x08003115
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800311c:	e00f      	b.n	800313e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8003126:	e00a      	b.n	800313e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003130:	e005      	b.n	800313e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	60fb      	str	r3, [r7, #12]
    }
    break;
 800313a:	e000      	b.n	800313e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 800313c:	bf00      	nop
  }
  return tmp;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__NVIC_GetPriorityGrouping+0x18>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0307 	and.w	r3, r3, #7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db0b      	blt.n	80031da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4907      	ldr	r1, [pc, #28]	; (80031e8 <__NVIC_EnableIRQ+0x38>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2001      	movs	r0, #1
 80031d2:	fa00 f202 	lsl.w	r2, r0, r2
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000e100 	.word	0xe000e100

080031ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db0a      	blt.n	8003216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	490c      	ldr	r1, [pc, #48]	; (8003238 <__NVIC_SetPriority+0x4c>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	0112      	lsls	r2, r2, #4
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	440b      	add	r3, r1
 8003210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003214:	e00a      	b.n	800322c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4908      	ldr	r1, [pc, #32]	; (800323c <__NVIC_SetPriority+0x50>)
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	3b04      	subs	r3, #4
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	440b      	add	r3, r1
 800322a:	761a      	strb	r2, [r3, #24]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	2b04      	cmp	r3, #4
 800325c:	bf28      	it	cs
 800325e:	2304      	movcs	r3, #4
 8003260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3304      	adds	r3, #4
 8003266:	2b06      	cmp	r3, #6
 8003268:	d902      	bls.n	8003270 <NVIC_EncodePriority+0x30>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3b03      	subs	r3, #3
 800326e:	e000      	b.n	8003272 <NVIC_EncodePriority+0x32>
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	f04f 32ff 	mov.w	r2, #4294967295
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	401a      	ands	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003288:	f04f 31ff 	mov.w	r1, #4294967295
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	43d9      	mvns	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	4313      	orrs	r3, r2
         );
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	; 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ff4c 	bl	800314c <__NVIC_SetPriorityGrouping>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ce:	f7ff ff61 	bl	8003194 <__NVIC_GetPriorityGrouping>
 80032d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	6978      	ldr	r0, [r7, #20]
 80032da:	f7ff ffb1 	bl	8003240 <NVIC_EncodePriority>
 80032de:	4602      	mov	r2, r0
 80032e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ff80 	bl	80031ec <__NVIC_SetPriority>
}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff ff54 	bl	80031b0 <__NVIC_EnableIRQ>
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00e      	b.n	8003340 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	795b      	ldrb	r3, [r3, #5]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe ffda 	bl	80022ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003354:	f7ff fa80 	bl	8002858 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e099      	b.n	8003498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003384:	e00f      	b.n	80033a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003386:	f7ff fa67 	bl	8002858 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b05      	cmp	r3, #5
 8003392:	d908      	bls.n	80033a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2203      	movs	r2, #3
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e078      	b.n	8003498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e8      	bne.n	8003386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <HAL_DMA_Init+0x158>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d107      	bne.n	8003410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	4313      	orrs	r3, r2
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0307 	bic.w	r3, r3, #7
 8003426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2b04      	cmp	r3, #4
 8003438:	d117      	bne.n	800346a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f9e9 	bl	8003824 <DMA_CheckFifoParam>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2240      	movs	r2, #64	; 0x40
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003466:	2301      	movs	r3, #1
 8003468:	e016      	b.n	8003498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9a0 	bl	80037b8 <DMA_CalcBaseAndBitshift>
 8003478:	4603      	mov	r3, r0
 800347a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	223f      	movs	r2, #63	; 0x3f
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	f010803f 	.word	0xf010803f

080034a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034b0:	4b8e      	ldr	r3, [pc, #568]	; (80036ec <HAL_DMA_IRQHandler+0x248>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a8e      	ldr	r2, [pc, #568]	; (80036f0 <HAL_DMA_IRQHandler+0x24c>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	2208      	movs	r2, #8
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01a      	beq.n	8003510 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0204 	bic.w	r2, r2, #4
 80034f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	2208      	movs	r2, #8
 80034fe:	409a      	lsls	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2201      	movs	r2, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d012      	beq.n	8003546 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	2201      	movs	r2, #1
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2204      	movs	r2, #4
 800354c:	409a      	lsls	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d012      	beq.n	800357c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	2204      	movs	r2, #4
 800356a:	409a      	lsls	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	f043 0204 	orr.w	r2, r3, #4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2210      	movs	r2, #16
 8003582:	409a      	lsls	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d043      	beq.n	8003614 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d03c      	beq.n	8003614 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	2210      	movs	r2, #16
 80035a0:	409a      	lsls	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d018      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d024      	beq.n	8003614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
 80035d2:	e01f      	b.n	8003614 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4798      	blx	r3
 80035e4:	e016      	b.n	8003614 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0208 	bic.w	r2, r2, #8
 8003602:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	2220      	movs	r2, #32
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 808f 	beq.w	8003744 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8087 	beq.w	8003744 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	2220      	movs	r2, #32
 800363c:	409a      	lsls	r2, r3
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b05      	cmp	r3, #5
 800364c:	d136      	bne.n	80036bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0216 	bic.w	r2, r2, #22
 800365c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d103      	bne.n	800367e <HAL_DMA_IRQHandler+0x1da>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0208 	bic.w	r2, r2, #8
 800368c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	223f      	movs	r2, #63	; 0x3f
 8003694:	409a      	lsls	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d07e      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
        }
        return;
 80036ba:	e079      	b.n	80037b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01d      	beq.n	8003706 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d031      	beq.n	8003744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
 80036e8:	e02c      	b.n	8003744 <HAL_DMA_IRQHandler+0x2a0>
 80036ea:	bf00      	nop
 80036ec:	20000010 	.word	0x20000010
 80036f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d023      	beq.n	8003744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e01e      	b.n	8003744 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10f      	bne.n	8003734 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0210 	bic.w	r2, r2, #16
 8003722:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	2b00      	cmp	r3, #0
 800374a:	d032      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d022      	beq.n	800379e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2205      	movs	r2, #5
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	3301      	adds	r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	d307      	bcc.n	800378c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f2      	bne.n	8003770 <HAL_DMA_IRQHandler+0x2cc>
 800378a:	e000      	b.n	800378e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800378c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
 80037ae:	e000      	b.n	80037b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037b0:	bf00      	nop
    }
  }
}
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3b10      	subs	r3, #16
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <DMA_CalcBaseAndBitshift+0x64>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <DMA_CalcBaseAndBitshift+0x68>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d909      	bls.n	80037fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	1d1a      	adds	r2, r3, #4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	659a      	str	r2, [r3, #88]	; 0x58
 80037f8:	e007      	b.n	800380a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	aaaaaaab 	.word	0xaaaaaaab
 8003820:	08012334 	.word	0x08012334

08003824 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11f      	bne.n	800387e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d856      	bhi.n	80038f2 <DMA_CheckFifoParam+0xce>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <DMA_CheckFifoParam+0x28>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	0800385d 	.word	0x0800385d
 8003850:	0800386f 	.word	0x0800386f
 8003854:	0800385d 	.word	0x0800385d
 8003858:	080038f3 	.word	0x080038f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d046      	beq.n	80038f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386c:	e043      	b.n	80038f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003876:	d140      	bne.n	80038fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387c:	e03d      	b.n	80038fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	d121      	bne.n	80038cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d837      	bhi.n	80038fe <DMA_CheckFifoParam+0xda>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <DMA_CheckFifoParam+0x70>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038ab 	.word	0x080038ab
 800389c:	080038a5 	.word	0x080038a5
 80038a0:	080038bd 	.word	0x080038bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      break;
 80038a8:	e030      	b.n	800390c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d025      	beq.n	8003902 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ba:	e022      	b.n	8003902 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038c4:	d11f      	bne.n	8003906 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ca:	e01c      	b.n	8003906 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d903      	bls.n	80038da <DMA_CheckFifoParam+0xb6>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d003      	beq.n	80038e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038d8:	e018      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      break;
 80038de:	e015      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00e      	beq.n	800390a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e00b      	b.n	800390a <DMA_CheckFifoParam+0xe6>
      break;
 80038f2:	bf00      	nop
 80038f4:	e00a      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 80038f6:	bf00      	nop
 80038f8:	e008      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 80038fa:	bf00      	nop
 80038fc:	e006      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 80038fe:	bf00      	nop
 8003900:	e004      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;   
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 800390a:	bf00      	nop
    }
  } 
  
  return status; 
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e159      	b.n	8003bec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003938:	2201      	movs	r2, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	429a      	cmp	r2, r3
 8003952:	f040 8148 	bne.w	8003be6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d005      	beq.n	800396e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396a:	2b02      	cmp	r3, #2
 800396c:	d130      	bne.n	80039d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a4:	2201      	movs	r2, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 0201 	and.w	r2, r3, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d017      	beq.n	8003a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d123      	bne.n	8003a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3208      	adds	r2, #8
 8003a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	220f      	movs	r2, #15
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	08da      	lsrs	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3208      	adds	r2, #8
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a2 	beq.w	8003be6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	4a56      	ldr	r2, [pc, #344]	; (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab2:	4b54      	ldr	r3, [pc, #336]	; (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003abe:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_GPIO_Init+0x2ec>)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a49      	ldr	r2, [pc, #292]	; (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d019      	beq.n	8003b1e <HAL_GPIO_Init+0x202>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a48      	ldr	r2, [pc, #288]	; (8003c10 <HAL_GPIO_Init+0x2f4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_GPIO_Init+0x1fe>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a47      	ldr	r2, [pc, #284]	; (8003c14 <HAL_GPIO_Init+0x2f8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00d      	beq.n	8003b16 <HAL_GPIO_Init+0x1fa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a46      	ldr	r2, [pc, #280]	; (8003c18 <HAL_GPIO_Init+0x2fc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_GPIO_Init+0x1f6>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a45      	ldr	r2, [pc, #276]	; (8003c1c <HAL_GPIO_Init+0x300>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_GPIO_Init+0x1f2>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	e008      	b.n	8003b20 <HAL_GPIO_Init+0x204>
 8003b0e:	2307      	movs	r3, #7
 8003b10:	e006      	b.n	8003b20 <HAL_GPIO_Init+0x204>
 8003b12:	2303      	movs	r3, #3
 8003b14:	e004      	b.n	8003b20 <HAL_GPIO_Init+0x204>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e002      	b.n	8003b20 <HAL_GPIO_Init+0x204>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_GPIO_Init+0x204>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	f002 0203 	and.w	r2, r2, #3
 8003b26:	0092      	lsls	r2, r2, #2
 8003b28:	4093      	lsls	r3, r2
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b30:	4935      	ldr	r1, [pc, #212]	; (8003c08 <HAL_GPIO_Init+0x2ec>)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	3302      	adds	r3, #2
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b3e:	4b38      	ldr	r3, [pc, #224]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b62:	4a2f      	ldr	r2, [pc, #188]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bb6:	4a1a      	ldr	r2, [pc, #104]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bbc:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be0:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3301      	adds	r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	f67f aea2 	bls.w	8003938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40013800 	.word	0x40013800
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	40020400 	.word	0x40020400
 8003c14:	40020800 	.word	0x40020800
 8003c18:	40020c00 	.word	0x40020c00
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40013c00 	.word	0x40013c00

08003c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
 8003c30:	4613      	mov	r3, r2
 8003c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c34:	787b      	ldrb	r3, [r7, #1]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c40:	e003      	b.n	8003c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c42:	887b      	ldrh	r3, [r7, #2]
 8003c44:	041a      	lsls	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	619a      	str	r2, [r3, #24]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c58:	b08f      	sub	sp, #60	; 0x3c
 8003c5a:	af0a      	add	r7, sp, #40	; 0x28
 8003c5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e10f      	b.n	8003e88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f009 fd7e 	bl	800d784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 fa8d 	bl	80071c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	687e      	ldr	r6, [r7, #4]
 8003cb4:	466d      	mov	r5, sp
 8003cb6:	f106 0410 	add.w	r4, r6, #16
 8003cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cca:	1d33      	adds	r3, r6, #4
 8003ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cce:	6838      	ldr	r0, [r7, #0]
 8003cd0:	f003 f964 	bl	8006f9c <USB_CoreInit>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0d0      	b.n	8003e88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fa7b 	bl	80071e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
 8003cf6:	e04a      	b.n	8003d8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cf8:	7bfa      	ldrb	r2, [r7, #15]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	333d      	adds	r3, #61	; 0x3d
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	333c      	adds	r3, #60	; 0x3c
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	b298      	uxth	r0, r3
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3344      	adds	r3, #68	; 0x44
 8003d34:	4602      	mov	r2, r0
 8003d36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	3340      	adds	r3, #64	; 0x40
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3348      	adds	r3, #72	; 0x48
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	334c      	adds	r3, #76	; 0x4c
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	3354      	adds	r3, #84	; 0x54
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d3af      	bcc.n	8003cf8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e044      	b.n	8003e28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d9e:	7bfa      	ldrb	r2, [r7, #15]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	3301      	adds	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d3b5      	bcc.n	8003d9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	687e      	ldr	r6, [r7, #4]
 8003e3a:	466d      	mov	r5, sp
 8003e3c:	f106 0410 	add.w	r4, r6, #16
 8003e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e50:	1d33      	adds	r3, r6, #4
 8003e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e54:	6838      	ldr	r0, [r7, #0]
 8003e56:	f003 fa13 	bl	8007280 <USB_DevInit>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e00d      	b.n	8003e88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f004 fb62 	bl	800854a <USB_DevDisconnect>

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_PCD_Start+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e020      	b.n	8003eee <HAL_PCD_Start+0x5e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d109      	bne.n	8003ed0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d005      	beq.n	8003ed0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 f965 	bl	80071a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 fb12 	bl	8008508 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ef6:	b590      	push	{r4, r7, lr}
 8003ef8:	b08d      	sub	sp, #52	; 0x34
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f004 fbd0 	bl	80086b2 <USB_GetMode>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 848a 	bne.w	800482e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fb34 	bl	800858c <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8480 	beq.w	800482c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 fb21 	bl	800858c <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d107      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f002 0202 	and.w	r2, r2, #2
 8003f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fb0f 	bl	800858c <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d161      	bne.n	800403c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0210 	bic.w	r2, r2, #16
 8003f86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f003 020f 	and.w	r2, r3, #15
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	0c5b      	lsrs	r3, r3, #17
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d124      	bne.n	8003ffe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d035      	beq.n	800402c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6a38      	ldr	r0, [r7, #32]
 8003fd4:	f004 f946 	bl	8008264 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe4:	441a      	add	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ff6:	441a      	add	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	621a      	str	r2, [r3, #32]
 8003ffc:	e016      	b.n	800402c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	0c5b      	lsrs	r3, r3, #17
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	2b06      	cmp	r3, #6
 8004008:	d110      	bne.n	800402c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004010:	2208      	movs	r2, #8
 8004012:	4619      	mov	r1, r3
 8004014:	6a38      	ldr	r0, [r7, #32]
 8004016:	f004 f925 	bl	8008264 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004026:	441a      	add	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0210 	orr.w	r2, r2, #16
 800403a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f004 faa3 	bl	800858c <USB_ReadInterrupts>
 8004046:	4603      	mov	r3, r0
 8004048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004050:	f040 80a7 	bne.w	80041a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f004 faa8 	bl	80085b2 <USB_ReadDevAllOutEpInterrupt>
 8004062:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004064:	e099      	b.n	800419a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 808e 	beq.w	800418e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f004 facc 	bl	800861a <USB_ReadDevOutEPInterrupt>
 8004082:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	2301      	movs	r3, #1
 800409e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fec2 	bl	8004e2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	461a      	mov	r2, r3
 80040c0:	2308      	movs	r3, #8
 80040c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 ff98 	bl	8004ffc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e2:	461a      	mov	r2, r3
 80040e4:	2310      	movs	r3, #16
 80040e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d030      	beq.n	8004154 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d109      	bne.n	8004112 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800410c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004110:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	3304      	adds	r3, #4
 8004126:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	78db      	ldrb	r3, [r3, #3]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d108      	bne.n	8004142 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2200      	movs	r2, #0
 8004134:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f009 fc1d 	bl	800d97c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	461a      	mov	r2, r3
 8004150:	2302      	movs	r3, #2
 8004152:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	461a      	mov	r2, r3
 800416c:	2320      	movs	r3, #32
 800416e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	461a      	mov	r2, r3
 8004188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800418c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	3301      	adds	r3, #1
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	f47f af62 	bne.w	8004066 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f004 f9f0 	bl	800858c <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041b6:	f040 80db 	bne.w	8004370 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 fa11 	bl	80085e6 <USB_ReadDevAllInEpInterrupt>
 80041c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041ca:	e0cd      	b.n	8004368 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 80c2 	beq.w	800435c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 fa37 	bl	8008656 <USB_ReadDevInEPInterrupt>
 80041e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d057      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	2201      	movs	r2, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	43db      	mvns	r3, r3
 800420e:	69f9      	ldr	r1, [r7, #28]
 8004210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004214:	4013      	ands	r3, r2
 8004216:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	461a      	mov	r2, r3
 8004226:	2301      	movs	r3, #1
 8004228:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d132      	bne.n	8004298 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	334c      	adds	r3, #76	; 0x4c
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4403      	add	r3, r0
 8004252:	3348      	adds	r3, #72	; 0x48
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4419      	add	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4403      	add	r3, r0
 8004266:	334c      	adds	r3, #76	; 0x4c
 8004268:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <HAL_PCD_IRQHandler+0x3a2>
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	3354      	adds	r3, #84	; 0x54
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004290:	461a      	mov	r2, r3
 8004292:	2101      	movs	r1, #1
 8004294:	f004 fa3e 	bl	8008714 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f009 faf1 	bl	800d886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ba:	461a      	mov	r2, r3
 80042bc:	2308      	movs	r3, #8
 80042be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	461a      	mov	r2, r3
 80042d8:	2310      	movs	r3, #16
 80042da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	2340      	movs	r3, #64	; 0x40
 80042f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d023      	beq.n	800434a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004304:	6a38      	ldr	r0, [r7, #32]
 8004306:	f003 f91f 	bl	8007548 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	3338      	adds	r3, #56	; 0x38
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	3304      	adds	r3, #4
 800431c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	78db      	ldrb	r3, [r3, #3]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d108      	bne.n	8004338 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2200      	movs	r2, #0
 800432a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	b2db      	uxtb	r3, r3
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f009 fb34 	bl	800d9a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	461a      	mov	r2, r3
 8004346:	2302      	movs	r3, #2
 8004348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fcdb 	bl	8004d12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	3301      	adds	r3, #1
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	f47f af2e 	bne.w	80041cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f004 f909 	bl	800858c <USB_ReadInterrupts>
 800437a:	4603      	mov	r3, r0
 800437c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004384:	d122      	bne.n	80043cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d108      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043ac:	2100      	movs	r1, #0
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fec2 	bl	8005138 <HAL_PCDEx_LPM_Callback>
 80043b4:	e002      	b.n	80043bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f009 fad2 	bl	800d960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f004 f8db 	bl	800858c <USB_ReadInterrupts>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e0:	d112      	bne.n	8004408 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f009 fa8e 	bl	800d914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004406:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f004 f8bd 	bl	800858c <USB_ReadInterrupts>
 8004412:	4603      	mov	r3, r0
 8004414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441c:	f040 80b7 	bne.w	800458e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2110      	movs	r1, #16
 800443a:	4618      	mov	r0, r3
 800443c:	f003 f884 	bl	8007548 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004444:	e046      	b.n	80044d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	461a      	mov	r2, r3
 8004454:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004458:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004478:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800448c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449e:	0151      	lsls	r1, r2, #5
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	440a      	add	r2, r1
 80044a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	3301      	adds	r3, #1
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044da:	429a      	cmp	r2, r3
 80044dc:	d3b3      	bcc.n	8004446 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450a:	f043 030b 	orr.w	r3, r3, #11
 800450e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004520:	f043 030b 	orr.w	r3, r3, #11
 8004524:	6453      	str	r3, [r2, #68]	; 0x44
 8004526:	e015      	b.n	8004554 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004536:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800453a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800453e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454e:	f043 030b 	orr.w	r3, r3, #11
 8004552:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004562:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004566:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004578:	461a      	mov	r2, r3
 800457a:	f004 f8cb 	bl	8008714 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800458c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f003 fffa 	bl	800858c <USB_ReadInterrupts>
 8004598:	4603      	mov	r3, r0
 800459a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a2:	d124      	bne.n	80045ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f004 f890 	bl	80086ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f003 f845 	bl	8007642 <USB_GetDevSpeed>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681c      	ldr	r4, [r3, #0]
 80045c4:	f001 f9e8 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80045c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	4620      	mov	r0, r4
 80045d4:	f002 fd44 	bl	8007060 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f009 f97c 	bl	800d8d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f003 ffca 	bl	800858c <USB_ReadInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d10a      	bne.n	8004618 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f009 f959 	bl	800d8ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f002 0208 	and.w	r2, r2, #8
 8004616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f003 ffb5 	bl	800858c <USB_ReadInterrupts>
 8004622:	4603      	mov	r3, r0
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	2b80      	cmp	r3, #128	; 0x80
 800462a:	d122      	bne.n	8004672 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004638:	2301      	movs	r3, #1
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	e014      	b.n	8004668 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fb27 	bl	8004cb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	d3e5      	bcc.n	800463e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f003 ff88 	bl	800858c <USB_ReadInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d13b      	bne.n	8004700 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004688:	2301      	movs	r3, #1
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
 800468c:	e02b      	b.n	80046e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	3340      	adds	r3, #64	; 0x40
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d115      	bne.n	80046e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80046b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da12      	bge.n	80046e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	333f      	adds	r3, #63	; 0x3f
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fae8 	bl	8004cb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	3301      	adds	r3, #1
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d3ce      	bcc.n	800468e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f003 ff41 	bl	800858c <USB_ReadInterrupts>
 800470a:	4603      	mov	r3, r0
 800470c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004714:	d155      	bne.n	80047c2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004716:	2301      	movs	r3, #1
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
 800471a:	e045      	b.n	80047a8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d12e      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004744:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004746:	2b00      	cmp	r3, #0
 8004748:	da2b      	bge.n	80047a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004756:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800475a:	429a      	cmp	r2, r3
 800475c:	d121      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004770:	2201      	movs	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800479e:	6053      	str	r3, [r2, #4]
            break;
 80047a0:	e007      	b.n	80047b2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	3301      	adds	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d3b4      	bcc.n	800471c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f003 fee0 	bl	800858c <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d10a      	bne.n	80047ee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f009 f8f3 	bl	800d9c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f003 feca 	bl	800858c <USB_ReadInterrupts>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d115      	bne.n	800482e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f009 f8e3 	bl	800d9e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e000      	b.n	800482e <HAL_PCD_IRQHandler+0x938>
      return;
 800482c:	bf00      	nop
    }
  }
}
 800482e:	3734      	adds	r7, #52	; 0x34
 8004830:	46bd      	mov	sp, r7
 8004832:	bd90      	pop	{r4, r7, pc}

08004834 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_PCD_SetAddress+0x1a>
 800484a:	2302      	movs	r3, #2
 800484c:	e013      	b.n	8004876 <HAL_PCD_SetAddress+0x42>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f003 fe28 	bl	80084bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	4608      	mov	r0, r1
 8004888:	4611      	mov	r1, r2
 800488a:	461a      	mov	r2, r3
 800488c:	4603      	mov	r3, r0
 800488e:	70fb      	strb	r3, [r7, #3]
 8004890:	460b      	mov	r3, r1
 8004892:	803b      	strh	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800489c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	da0f      	bge.n	80048c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	f003 020f 	and.w	r2, r3, #15
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	3338      	adds	r3, #56	; 0x38
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	3304      	adds	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	705a      	strb	r2, [r3, #1]
 80048c2:	e00f      	b.n	80048e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 020f 	and.w	r2, r3, #15
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	3304      	adds	r3, #4
 80048dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048f0:	883a      	ldrh	r2, [r7, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	78ba      	ldrb	r2, [r7, #2]
 80048fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800490e:	78bb      	ldrb	r3, [r7, #2]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d102      	bne.n	800491a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_PCD_EP_Open+0xaa>
 8004924:	2302      	movs	r3, #2
 8004926:	e00e      	b.n	8004946 <HAL_PCD_EP_Open+0xc8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	4618      	mov	r0, r3
 8004938:	f002 fea8 	bl	800768c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004944:	7afb      	ldrb	r3, [r7, #11]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800495a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da0f      	bge.n	8004982 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	3338      	adds	r3, #56	; 0x38
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	3304      	adds	r3, #4
 8004978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	705a      	strb	r2, [r3, #1]
 8004980:	e00f      	b.n	80049a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	f003 020f 	and.w	r2, r3, #15
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	3304      	adds	r3, #4
 800499a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_PCD_EP_Close+0x6e>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e00e      	b.n	80049da <HAL_PCD_EP_Close+0x8c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f002 fee6 	bl	800779c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	460b      	mov	r3, r1
 80049f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f2:	7afb      	ldrb	r3, [r7, #11]
 80049f4:	f003 020f 	and.w	r2, r3, #15
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	3304      	adds	r3, #4
 8004a0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a24:	7afb      	ldrb	r3, [r7, #11]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d102      	bne.n	8004a3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	f003 f9c5 	bl	8007de4 <USB_EP0StartXfer>
 8004a5a:	e008      	b.n	8004a6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	6979      	ldr	r1, [r7, #20]
 8004a6a:	f002 ff73 	bl	8007954 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	f003 020f 	and.w	r2, r3, #15
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	f003 020f 	and.w	r2, r3, #15
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	3338      	adds	r3, #56	; 0x38
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	3304      	adds	r3, #4
 8004ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae8:	7afb      	ldrb	r3, [r7, #11]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d102      	bne.n	8004b02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	f003 f963 	bl	8007de4 <USB_EP0StartXfer>
 8004b1e:	e008      	b.n	8004b32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6979      	ldr	r1, [r7, #20]
 8004b2e:	f002 ff11 	bl	8007954 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d901      	bls.n	8004b5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e050      	b.n	8004bfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da0f      	bge.n	8004b82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	f003 020f 	and.w	r2, r3, #15
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	3338      	adds	r3, #56	; 0x38
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	3304      	adds	r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	705a      	strb	r2, [r3, #1]
 8004b80:	e00d      	b.n	8004b9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	4413      	add	r3, r2
 8004b94:	3304      	adds	r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_PCD_EP_SetStall+0x82>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e01e      	b.n	8004bfc <HAL_PCD_EP_SetStall+0xc0>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 fba1 	bl	8008314 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	b2d9      	uxtb	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bec:	461a      	mov	r2, r3
 8004bee:	f003 fd91 	bl	8008714 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d901      	bls.n	8004c22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e042      	b.n	8004ca8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da0f      	bge.n	8004c4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	f003 020f 	and.w	r2, r3, #15
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3338      	adds	r3, #56	; 0x38
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3304      	adds	r3, #4
 8004c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	705a      	strb	r2, [r3, #1]
 8004c48:	e00f      	b.n	8004c6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	3304      	adds	r3, #4
 8004c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_PCD_EP_ClrStall+0x86>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e00e      	b.n	8004ca8 <HAL_PCD_EP_ClrStall+0xa4>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f003 fba9 	bl	80083f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	da0c      	bge.n	8004cde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 020f 	and.w	r2, r3, #15
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	3338      	adds	r3, #56	; 0x38
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3304      	adds	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e00c      	b.n	8004cf8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f003 f9c8 	bl	8008094 <USB_EPStopXfer>
 8004d04:	4603      	mov	r3, r0
 8004d06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d08:	7afb      	ldrb	r3, [r7, #11]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b08a      	sub	sp, #40	; 0x28
 8004d16:	af02      	add	r7, sp, #8
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3338      	adds	r3, #56	; 0x38
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	3304      	adds	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d901      	bls.n	8004d4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e06c      	b.n	8004e24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d902      	bls.n	8004d66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3303      	adds	r3, #3
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d6e:	e02b      	b.n	8004dc8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	699a      	ldr	r2, [r3, #24]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d902      	bls.n	8004d8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	3303      	adds	r3, #3
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6919      	ldr	r1, [r3, #16]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	f003 fa1c 	bl	80081e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	441a      	add	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d809      	bhi.n	8004df2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d203      	bcs.n	8004df2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1be      	bne.n	8004d70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d811      	bhi.n	8004e22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	6939      	ldr	r1, [r7, #16]
 8004e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1e:	4013      	ands	r3, r2
 8004e20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	333c      	adds	r3, #60	; 0x3c
 8004e44:	3304      	adds	r3, #4
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d17b      	bne.n	8004f5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4a61      	ldr	r2, [pc, #388]	; (8004ff4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	f240 80b9 	bls.w	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80b3 	beq.w	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e94:	6093      	str	r3, [r2, #8]
 8004e96:	e0a7      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	6093      	str	r3, [r2, #8]
 8004eb4:	e098      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8093 	bne.w	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	4a4b      	ldr	r2, [pc, #300]	; (8004ff4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d90f      	bls.n	8004eea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee6:	6093      	str	r3, [r2, #8]
 8004ee8:	e07e      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	4413      	add	r3, r2
 8004efc:	3304      	adds	r3, #4
 8004efe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	0159      	lsls	r1, r3, #5
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d114      	bne.n	8004f4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f34:	461a      	mov	r2, r3
 8004f36:	2101      	movs	r1, #1
 8004f38:	f003 fbec 	bl	8008714 <USB_EP0_OutStart>
 8004f3c:	e006      	b.n	8004f4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	441a      	add	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f008 fc7c 	bl	800d850 <HAL_PCD_DataOutStageCallback>
 8004f58:	e046      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d124      	bne.n	8004fac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	6093      	str	r3, [r2, #8]
 8004f80:	e032      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2320      	movs	r3, #32
 8004f9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f008 fc53 	bl	800d850 <HAL_PCD_DataOutStageCallback>
 8004faa:	e01d      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d114      	bne.n	8004fdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d108      	bne.n	8004fdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	f003 fb9c 	bl	8008714 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f008 fc34 	bl	800d850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	4f54300a 	.word	0x4f54300a
 8004ff8:	4f54310a 	.word	0x4f54310a

08004ffc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	333c      	adds	r3, #60	; 0x3c
 8005014:	3304      	adds	r3, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a15      	ldr	r2, [pc, #84]	; (8005084 <PCD_EP_OutSetupPacket_int+0x88>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d90e      	bls.n	8005050 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f008 fbeb 	bl	800d82c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <PCD_EP_OutSetupPacket_int+0x88>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d90c      	bls.n	8005078 <PCD_EP_OutSetupPacket_int+0x7c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d108      	bne.n	8005078 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005070:	461a      	mov	r2, r3
 8005072:	2101      	movs	r1, #1
 8005074:	f003 fb4e 	bl	8008714 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	4f54300a 	.word	0x4f54300a

08005088 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
 8005094:	4613      	mov	r3, r2
 8005096:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050a6:	883b      	ldrh	r3, [r7, #0]
 80050a8:	0419      	lsls	r1, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
 80050b4:	e028      	b.n	8005108 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e00d      	b.n	80050e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	3340      	adds	r3, #64	; 0x40
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4413      	add	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	3301      	adds	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d3ec      	bcc.n	80050ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80050f0:	883b      	ldrh	r3, [r7, #0]
 80050f2:	0418      	lsls	r0, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	4302      	orrs	r2, r0
 8005100:	3340      	adds	r3, #64	; 0x40
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e267      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d075      	beq.n	800525a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800516e:	4b88      	ldr	r3, [pc, #544]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 030c 	and.w	r3, r3, #12
 8005176:	2b04      	cmp	r3, #4
 8005178:	d00c      	beq.n	8005194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800517a:	4b85      	ldr	r3, [pc, #532]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005182:	2b08      	cmp	r3, #8
 8005184:	d112      	bne.n	80051ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005186:	4b82      	ldr	r3, [pc, #520]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005192:	d10b      	bne.n	80051ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005194:	4b7e      	ldr	r3, [pc, #504]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05b      	beq.n	8005258 <HAL_RCC_OscConfig+0x108>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d157      	bne.n	8005258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e242      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b4:	d106      	bne.n	80051c4 <HAL_RCC_OscConfig+0x74>
 80051b6:	4b76      	ldr	r3, [pc, #472]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a75      	ldr	r2, [pc, #468]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e01d      	b.n	8005200 <HAL_RCC_OscConfig+0xb0>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x98>
 80051ce:	4b70      	ldr	r3, [pc, #448]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a6f      	ldr	r2, [pc, #444]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	4b6d      	ldr	r3, [pc, #436]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a6c      	ldr	r2, [pc, #432]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e00b      	b.n	8005200 <HAL_RCC_OscConfig+0xb0>
 80051e8:	4b69      	ldr	r3, [pc, #420]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a68      	ldr	r2, [pc, #416]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	4b66      	ldr	r3, [pc, #408]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80051fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d013      	beq.n	8005230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005208:	f7fd fb26 	bl	8002858 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005210:	f7fd fb22 	bl	8002858 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b64      	cmp	r3, #100	; 0x64
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e207      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b5b      	ldr	r3, [pc, #364]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0xc0>
 800522e:	e014      	b.n	800525a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fd fb12 	bl	8002858 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005238:	f7fd fb0e 	bl	8002858 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	; 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e1f3      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524a:	4b51      	ldr	r3, [pc, #324]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0xe8>
 8005256:	e000      	b.n	800525a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d063      	beq.n	800532e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005266:	4b4a      	ldr	r3, [pc, #296]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005272:	4b47      	ldr	r3, [pc, #284]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800527a:	2b08      	cmp	r3, #8
 800527c:	d11c      	bne.n	80052b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800527e:	4b44      	ldr	r3, [pc, #272]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d116      	bne.n	80052b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528a:	4b41      	ldr	r3, [pc, #260]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_RCC_OscConfig+0x152>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d001      	beq.n	80052a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e1c7      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4937      	ldr	r1, [pc, #220]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052b6:	e03a      	b.n	800532e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d020      	beq.n	8005302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c0:	4b34      	ldr	r3, [pc, #208]	; (8005394 <HAL_RCC_OscConfig+0x244>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c6:	f7fd fac7 	bl	8002858 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ce:	f7fd fac3 	bl	8002858 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e1a8      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e0:	4b2b      	ldr	r3, [pc, #172]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ec:	4b28      	ldr	r3, [pc, #160]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4925      	ldr	r1, [pc, #148]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	600b      	str	r3, [r1, #0]
 8005300:	e015      	b.n	800532e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005302:	4b24      	ldr	r3, [pc, #144]	; (8005394 <HAL_RCC_OscConfig+0x244>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fd faa6 	bl	8002858 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005310:	f7fd faa2 	bl	8002858 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e187      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005322:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d036      	beq.n	80053a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d016      	beq.n	8005370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <HAL_RCC_OscConfig+0x248>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fd fa86 	bl	8002858 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005350:	f7fd fa82 	bl	8002858 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e167      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <HAL_RCC_OscConfig+0x240>)
 8005364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x200>
 800536e:	e01b      	b.n	80053a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <HAL_RCC_OscConfig+0x248>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005376:	f7fd fa6f 	bl	8002858 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800537c:	e00e      	b.n	800539c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800537e:	f7fd fa6b 	bl	8002858 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d907      	bls.n	800539c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e150      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
 8005390:	40023800 	.word	0x40023800
 8005394:	42470000 	.word	0x42470000
 8005398:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800539c:	4b88      	ldr	r3, [pc, #544]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 800539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ea      	bne.n	800537e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8097 	beq.w	80054e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ba:	4b81      	ldr	r3, [pc, #516]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10f      	bne.n	80053e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	4b7d      	ldr	r3, [pc, #500]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	4a7c      	ldr	r2, [pc, #496]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80053d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6413      	str	r3, [r2, #64]	; 0x40
 80053d6:	4b7a      	ldr	r3, [pc, #488]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e2:	2301      	movs	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e6:	4b77      	ldr	r3, [pc, #476]	; (80055c4 <HAL_RCC_OscConfig+0x474>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d118      	bne.n	8005424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053f2:	4b74      	ldr	r3, [pc, #464]	; (80055c4 <HAL_RCC_OscConfig+0x474>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a73      	ldr	r2, [pc, #460]	; (80055c4 <HAL_RCC_OscConfig+0x474>)
 80053f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053fe:	f7fd fa2b 	bl	8002858 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005406:	f7fd fa27 	bl	8002858 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e10c      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005418:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <HAL_RCC_OscConfig+0x474>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d106      	bne.n	800543a <HAL_RCC_OscConfig+0x2ea>
 800542c:	4b64      	ldr	r3, [pc, #400]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	4a63      	ldr	r2, [pc, #396]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	6713      	str	r3, [r2, #112]	; 0x70
 8005438:	e01c      	b.n	8005474 <HAL_RCC_OscConfig+0x324>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b05      	cmp	r3, #5
 8005440:	d10c      	bne.n	800545c <HAL_RCC_OscConfig+0x30c>
 8005442:	4b5f      	ldr	r3, [pc, #380]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	4a5e      	ldr	r2, [pc, #376]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005448:	f043 0304 	orr.w	r3, r3, #4
 800544c:	6713      	str	r3, [r2, #112]	; 0x70
 800544e:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	4a5b      	ldr	r2, [pc, #364]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	6713      	str	r3, [r2, #112]	; 0x70
 800545a:	e00b      	b.n	8005474 <HAL_RCC_OscConfig+0x324>
 800545c:	4b58      	ldr	r3, [pc, #352]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	4a57      	ldr	r2, [pc, #348]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	6713      	str	r3, [r2, #112]	; 0x70
 8005468:	4b55      	ldr	r3, [pc, #340]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	4a54      	ldr	r2, [pc, #336]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 800546e:	f023 0304 	bic.w	r3, r3, #4
 8005472:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d015      	beq.n	80054a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547c:	f7fd f9ec 	bl	8002858 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005482:	e00a      	b.n	800549a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005484:	f7fd f9e8 	bl	8002858 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e0cb      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549a:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ee      	beq.n	8005484 <HAL_RCC_OscConfig+0x334>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a8:	f7fd f9d6 	bl	8002858 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b0:	f7fd f9d2 	bl	8002858 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e0b5      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ee      	bne.n	80054b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d8:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	4a38      	ldr	r2, [pc, #224]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80054de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80a1 	beq.w	8005630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ee:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d05c      	beq.n	80055b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d141      	bne.n	8005586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <HAL_RCC_OscConfig+0x478>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fd f9a6 	bl	8002858 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005510:	f7fd f9a2 	bl	8002858 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e087      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	3b01      	subs	r3, #1
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	491b      	ldr	r1, [pc, #108]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005558:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <HAL_RCC_OscConfig+0x478>)
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555e:	f7fd f97b 	bl	8002858 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005566:	f7fd f977 	bl	8002858 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e05c      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x416>
 8005584:	e054      	b.n	8005630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <HAL_RCC_OscConfig+0x478>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558c:	f7fd f964 	bl	8002858 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005594:	f7fd f960 	bl	8002858 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e045      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCC_OscConfig+0x470>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x444>
 80055b2:	e03d      	b.n	8005630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e038      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40007000 	.word	0x40007000
 80055c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055cc:	4b1b      	ldr	r3, [pc, #108]	; (800563c <HAL_RCC_OscConfig+0x4ec>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d028      	beq.n	800562c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d121      	bne.n	800562c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d11a      	bne.n	800562c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055fc:	4013      	ands	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005604:	4293      	cmp	r3, r2
 8005606:	d111      	bne.n	800562c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	3b01      	subs	r3, #1
 8005616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005618:	429a      	cmp	r2, r3
 800561a:	d107      	bne.n	800562c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800

08005640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0cc      	b.n	80057ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005654:	4b68      	ldr	r3, [pc, #416]	; (80057f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d90c      	bls.n	800567c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b65      	ldr	r3, [pc, #404]	; (80057f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566a:	4b63      	ldr	r3, [pc, #396]	; (80057f8 <HAL_RCC_ClockConfig+0x1b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0b8      	b.n	80057ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d020      	beq.n	80056ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005694:	4b59      	ldr	r3, [pc, #356]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4a58      	ldr	r2, [pc, #352]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800569e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056ac:	4b53      	ldr	r3, [pc, #332]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4a52      	ldr	r2, [pc, #328]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b8:	4b50      	ldr	r3, [pc, #320]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	494d      	ldr	r1, [pc, #308]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d044      	beq.n	8005760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056de:	4b47      	ldr	r3, [pc, #284]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d119      	bne.n	800571e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e07f      	b.n	80057ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d003      	beq.n	80056fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d107      	bne.n	800570e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fe:	4b3f      	ldr	r3, [pc, #252]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e06f      	b.n	80057ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570e:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e067      	b.n	80057ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800571e:	4b37      	ldr	r3, [pc, #220]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4934      	ldr	r1, [pc, #208]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	4313      	orrs	r3, r2
 800572e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005730:	f7fd f892 	bl	8002858 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	e00a      	b.n	800574e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005738:	f7fd f88e 	bl	8002858 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e04f      	b.n	80057ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574e:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 020c 	and.w	r2, r3, #12
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	429a      	cmp	r2, r3
 800575e:	d1eb      	bne.n	8005738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005760:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d20c      	bcs.n	8005788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e032      	b.n	80057ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005794:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4916      	ldr	r1, [pc, #88]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	490e      	ldr	r1, [pc, #56]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057c6:	f000 f821 	bl	800580c <HAL_RCC_GetSysClockFreq>
 80057ca:	4602      	mov	r2, r0
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	490a      	ldr	r1, [pc, #40]	; (8005800 <HAL_RCC_ClockConfig+0x1c0>)
 80057d8:	5ccb      	ldrb	r3, [r1, r3]
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	4a09      	ldr	r2, [pc, #36]	; (8005804 <HAL_RCC_ClockConfig+0x1c4>)
 80057e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <HAL_RCC_ClockConfig+0x1c8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fc fede 	bl	80025a8 <HAL_InitTick>

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40023c00 	.word	0x40023c00
 80057fc:	40023800 	.word	0x40023800
 8005800:	0801231c 	.word	0x0801231c
 8005804:	20000010 	.word	0x20000010
 8005808:	20000014 	.word	0x20000014

0800580c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800580c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005810:	b090      	sub	sp, #64	; 0x40
 8005812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
 8005818:	2300      	movs	r3, #0
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581c:	2300      	movs	r3, #0
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005824:	4b59      	ldr	r3, [pc, #356]	; (800598c <HAL_RCC_GetSysClockFreq+0x180>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	2b08      	cmp	r3, #8
 800582e:	d00d      	beq.n	800584c <HAL_RCC_GetSysClockFreq+0x40>
 8005830:	2b08      	cmp	r3, #8
 8005832:	f200 80a1 	bhi.w	8005978 <HAL_RCC_GetSysClockFreq+0x16c>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_RCC_GetSysClockFreq+0x34>
 800583a:	2b04      	cmp	r3, #4
 800583c:	d003      	beq.n	8005846 <HAL_RCC_GetSysClockFreq+0x3a>
 800583e:	e09b      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005840:	4b53      	ldr	r3, [pc, #332]	; (8005990 <HAL_RCC_GetSysClockFreq+0x184>)
 8005842:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005844:	e09b      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005846:	4b53      	ldr	r3, [pc, #332]	; (8005994 <HAL_RCC_GetSysClockFreq+0x188>)
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800584a:	e098      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800584c:	4b4f      	ldr	r3, [pc, #316]	; (800598c <HAL_RCC_GetSysClockFreq+0x180>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005856:	4b4d      	ldr	r3, [pc, #308]	; (800598c <HAL_RCC_GetSysClockFreq+0x180>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d028      	beq.n	80058b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005862:	4b4a      	ldr	r3, [pc, #296]	; (800598c <HAL_RCC_GetSysClockFreq+0x180>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	2200      	movs	r2, #0
 800586a:	623b      	str	r3, [r7, #32]
 800586c:	627a      	str	r2, [r7, #36]	; 0x24
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005874:	2100      	movs	r1, #0
 8005876:	4b47      	ldr	r3, [pc, #284]	; (8005994 <HAL_RCC_GetSysClockFreq+0x188>)
 8005878:	fb03 f201 	mul.w	r2, r3, r1
 800587c:	2300      	movs	r3, #0
 800587e:	fb00 f303 	mul.w	r3, r0, r3
 8005882:	4413      	add	r3, r2
 8005884:	4a43      	ldr	r2, [pc, #268]	; (8005994 <HAL_RCC_GetSysClockFreq+0x188>)
 8005886:	fba0 1202 	umull	r1, r2, r0, r2
 800588a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800588c:	460a      	mov	r2, r1
 800588e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005892:	4413      	add	r3, r2
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	2200      	movs	r2, #0
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	61fa      	str	r2, [r7, #28]
 800589e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058a6:	f7fa fcf3 	bl	8000290 <__aeabi_uldivmod>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4613      	mov	r3, r2
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b2:	e053      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058b4:	4b35      	ldr	r3, [pc, #212]	; (800598c <HAL_RCC_GetSysClockFreq+0x180>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	099b      	lsrs	r3, r3, #6
 80058ba:	2200      	movs	r2, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	617a      	str	r2, [r7, #20]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80058c6:	f04f 0b00 	mov.w	fp, #0
 80058ca:	4652      	mov	r2, sl
 80058cc:	465b      	mov	r3, fp
 80058ce:	f04f 0000 	mov.w	r0, #0
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	0159      	lsls	r1, r3, #5
 80058d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058dc:	0150      	lsls	r0, r2, #5
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	ebb2 080a 	subs.w	r8, r2, sl
 80058e6:	eb63 090b 	sbc.w	r9, r3, fp
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80058f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80058fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80058fe:	ebb2 0408 	subs.w	r4, r2, r8
 8005902:	eb63 0509 	sbc.w	r5, r3, r9
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	00eb      	lsls	r3, r5, #3
 8005910:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005914:	00e2      	lsls	r2, r4, #3
 8005916:	4614      	mov	r4, r2
 8005918:	461d      	mov	r5, r3
 800591a:	eb14 030a 	adds.w	r3, r4, sl
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	eb45 030b 	adc.w	r3, r5, fp
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005932:	4629      	mov	r1, r5
 8005934:	028b      	lsls	r3, r1, #10
 8005936:	4621      	mov	r1, r4
 8005938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800593c:	4621      	mov	r1, r4
 800593e:	028a      	lsls	r2, r1, #10
 8005940:	4610      	mov	r0, r2
 8005942:	4619      	mov	r1, r3
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	2200      	movs	r2, #0
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	60fa      	str	r2, [r7, #12]
 800594c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005950:	f7fa fc9e 	bl	8000290 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4613      	mov	r3, r2
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_GetSysClockFreq+0x180>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	3301      	adds	r3, #1
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800596c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005976:	e002      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <HAL_RCC_GetSysClockFreq+0x184>)
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800597c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005980:	4618      	mov	r0, r3
 8005982:	3740      	adds	r7, #64	; 0x40
 8005984:	46bd      	mov	sp, r7
 8005986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	00f42400 	.word	0x00f42400
 8005994:	017d7840 	.word	0x017d7840

08005998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800599c:	4b03      	ldr	r3, [pc, #12]	; (80059ac <HAL_RCC_GetHCLKFreq+0x14>)
 800599e:	681b      	ldr	r3, [r3, #0]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000010 	.word	0x20000010

080059b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059b4:	f7ff fff0 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	0b5b      	lsrs	r3, r3, #13
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4903      	ldr	r1, [pc, #12]	; (80059d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40023800 	.word	0x40023800
 80059d4:	0801232c 	.word	0x0801232c

080059d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	220f      	movs	r2, #15
 80059e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059e8:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_RCC_GetClockConfig+0x5c>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0203 	and.w	r2, r3, #3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <HAL_RCC_GetClockConfig+0x5c>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <HAL_RCC_GetClockConfig+0x5c>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_GetClockConfig+0x5c>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	08db      	lsrs	r3, r3, #3
 8005a12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a1a:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <HAL_RCC_GetClockConfig+0x60>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0207 	and.w	r2, r3, #7
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	601a      	str	r2, [r3, #0]
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40023c00 	.word	0x40023c00

08005a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07b      	b.n	8005b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5e:	d009      	beq.n	8005a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	61da      	str	r2, [r3, #28]
 8005a66:	e005      	b.n	8005a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fc fc4e 	bl	8002330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	ea42 0103 	orr.w	r1, r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	f003 0104 	and.w	r1, r3, #4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	f003 0210 	and.w	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b088      	sub	sp, #32
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_SPI_Transmit+0x22>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e126      	b.n	8005dbe <HAL_SPI_Transmit+0x270>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b78:	f7fc fe6e 	bl	8002858 <HAL_GetTick>
 8005b7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d002      	beq.n	8005b94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b92:	e10b      	b.n	8005dac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Transmit+0x52>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ba4:	e102      	b.n	8005dac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bec:	d10f      	bne.n	8005c0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d007      	beq.n	8005c2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c34:	d14b      	bne.n	8005cce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Transmit+0xf6>
 8005c3e:	8afb      	ldrh	r3, [r7, #22]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d13e      	bne.n	8005cc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c68:	e02b      	b.n	8005cc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d112      	bne.n	8005c9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	881a      	ldrh	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c9c:	e011      	b.n	8005cc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9e:	f7fc fddb 	bl	8002858 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d803      	bhi.n	8005cb6 <HAL_SPI_Transmit+0x168>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d102      	bne.n	8005cbc <HAL_SPI_Transmit+0x16e>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cc0:	e074      	b.n	8005dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1ce      	bne.n	8005c6a <HAL_SPI_Transmit+0x11c>
 8005ccc:	e04c      	b.n	8005d68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Transmit+0x18e>
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d140      	bne.n	8005d5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d02:	e02c      	b.n	8005d5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d113      	bne.n	8005d3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d38:	e011      	b.n	8005d5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d3a:	f7fc fd8d 	bl	8002858 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d803      	bhi.n	8005d52 <HAL_SPI_Transmit+0x204>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d102      	bne.n	8005d58 <HAL_SPI_Transmit+0x20a>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d5c:	e026      	b.n	8005dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1cd      	bne.n	8005d04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f8c1 	bl	8005ef4 <SPI_EndRxTxTransaction>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e000      	b.n	8005dac <HAL_SPI_Transmit+0x25e>
  }

error:
 8005daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dd4:	b2db      	uxtb	r3, r3
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005df4:	f7fc fd30 	bl	8002858 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	4413      	add	r3, r2
 8005e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e04:	f7fc fd28 	bl	8002858 <HAL_GetTick>
 8005e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e0a:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	015b      	lsls	r3, r3, #5
 8005e10:	0d1b      	lsrs	r3, r3, #20
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	fb02 f303 	mul.w	r3, r2, r3
 8005e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e1a:	e054      	b.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d050      	beq.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e24:	f7fc fd18 	bl	8002858 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d902      	bls.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d13d      	bne.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e52:	d111      	bne.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5c:	d004      	beq.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e66:	d107      	bne.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e80:	d10f      	bne.n	8005ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e017      	b.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d19b      	bne.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000010 	.word	0x20000010

08005ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f00:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <SPI_EndRxTxTransaction+0x7c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <SPI_EndRxTxTransaction+0x80>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	0d5b      	lsrs	r3, r3, #21
 8005f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d112      	bne.n	8005f46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	2180      	movs	r1, #128	; 0x80
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff ff5a 	bl	8005de4 <SPI_WaitFlagStateUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d016      	beq.n	8005f64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e00f      	b.n	8005f66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	d0f2      	beq.n	8005f46 <SPI_EndRxTxTransaction+0x52>
 8005f60:	e000      	b.n	8005f64 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f62:	bf00      	nop
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000010 	.word	0x20000010
 8005f74:	165e9f81 	.word	0x165e9f81

08005f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e041      	b.n	800600e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fa42 	bl	8002428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 fc36 	bl	8006828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e03c      	b.n	80060aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1e      	ldr	r2, [pc, #120]	; (80060b8 <HAL_TIM_Base_Start+0xa0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d018      	beq.n	8006074 <HAL_TIM_Base_Start+0x5c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d013      	beq.n	8006074 <HAL_TIM_Base_Start+0x5c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <HAL_TIM_Base_Start+0xa4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00e      	beq.n	8006074 <HAL_TIM_Base_Start+0x5c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a19      	ldr	r2, [pc, #100]	; (80060c0 <HAL_TIM_Base_Start+0xa8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d009      	beq.n	8006074 <HAL_TIM_Base_Start+0x5c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_TIM_Base_Start+0xac>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_TIM_Base_Start+0x5c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <HAL_TIM_Base_Start+0xb0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d111      	bne.n	8006098 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b06      	cmp	r3, #6
 8006084:	d010      	beq.n	80060a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006096:	e007      	b.n	80060a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40000400 	.word	0x40000400
 80060c0:	40000800 	.word	0x40000800
 80060c4:	40000c00 	.word	0x40000c00
 80060c8:	40014000 	.word	0x40014000

080060cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d001      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e044      	b.n	800616e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1e      	ldr	r2, [pc, #120]	; (800617c <HAL_TIM_Base_Start_IT+0xb0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d013      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <HAL_TIM_Base_Start_IT+0xb4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_TIM_Base_Start_IT+0xb8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_TIM_Base_Start_IT+0xbc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x6c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_TIM_Base_Start_IT+0xc0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d111      	bne.n	800615c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b06      	cmp	r3, #6
 8006148:	d010      	beq.n	800616c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615a:	e007      	b.n	800616c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40014000 	.word	0x40014000

08006190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e041      	b.n	8006226 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fc f99a 	bl	80024f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f000 fb2a 	bl	8006828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d122      	bne.n	800628a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b02      	cmp	r3, #2
 8006250:	d11b      	bne.n	800628a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f06f 0202 	mvn.w	r2, #2
 800625a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 faba 	bl	80067ea <HAL_TIM_IC_CaptureCallback>
 8006276:	e005      	b.n	8006284 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 faac 	bl	80067d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fabd 	bl	80067fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b04      	cmp	r3, #4
 8006296:	d122      	bne.n	80062de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d11b      	bne.n	80062de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f06f 0204 	mvn.w	r2, #4
 80062ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fa90 	bl	80067ea <HAL_TIM_IC_CaptureCallback>
 80062ca:	e005      	b.n	80062d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fa82 	bl	80067d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa93 	bl	80067fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d122      	bne.n	8006332 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d11b      	bne.n	8006332 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f06f 0208 	mvn.w	r2, #8
 8006302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fa66 	bl	80067ea <HAL_TIM_IC_CaptureCallback>
 800631e:	e005      	b.n	800632c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fa58 	bl	80067d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa69 	bl	80067fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b10      	cmp	r3, #16
 800633e:	d122      	bne.n	8006386 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b10      	cmp	r3, #16
 800634c:	d11b      	bne.n	8006386 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f06f 0210 	mvn.w	r2, #16
 8006356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2208      	movs	r2, #8
 800635c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fa3c 	bl	80067ea <HAL_TIM_IC_CaptureCallback>
 8006372:	e005      	b.n	8006380 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa2e 	bl	80067d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa3f 	bl	80067fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b01      	cmp	r3, #1
 8006392:	d10e      	bne.n	80063b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d107      	bne.n	80063b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f06f 0201 	mvn.w	r2, #1
 80063aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fa fe3d 	bl	800102c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063bc:	2b80      	cmp	r3, #128	; 0x80
 80063be:	d10e      	bne.n	80063de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b80      	cmp	r3, #128	; 0x80
 80063cc:	d107      	bne.n	80063de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fdd5 	bl	8006f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d10e      	bne.n	800640a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d107      	bne.n	800640a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa04 	bl	8006812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b20      	cmp	r3, #32
 8006416:	d10e      	bne.n	8006436 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b20      	cmp	r3, #32
 8006424:	d107      	bne.n	8006436 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f06f 0220 	mvn.w	r2, #32
 800642e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fd9f 	bl	8006f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800645a:	2302      	movs	r3, #2
 800645c:	e0ae      	b.n	80065bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b0c      	cmp	r3, #12
 800646a:	f200 809f 	bhi.w	80065ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	080064a9 	.word	0x080064a9
 8006478:	080065ad 	.word	0x080065ad
 800647c:	080065ad 	.word	0x080065ad
 8006480:	080065ad 	.word	0x080065ad
 8006484:	080064e9 	.word	0x080064e9
 8006488:	080065ad 	.word	0x080065ad
 800648c:	080065ad 	.word	0x080065ad
 8006490:	080065ad 	.word	0x080065ad
 8006494:	0800652b 	.word	0x0800652b
 8006498:	080065ad 	.word	0x080065ad
 800649c:	080065ad 	.word	0x080065ad
 80064a0:	080065ad 	.word	0x080065ad
 80064a4:	0800656b 	.word	0x0800656b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fa3a 	bl	8006928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0208 	orr.w	r2, r2, #8
 80064c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0204 	bic.w	r2, r2, #4
 80064d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6999      	ldr	r1, [r3, #24]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	619a      	str	r2, [r3, #24]
      break;
 80064e6:	e064      	b.n	80065b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fa80 	bl	80069f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6999      	ldr	r1, [r3, #24]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	021a      	lsls	r2, r3, #8
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	619a      	str	r2, [r3, #24]
      break;
 8006528:	e043      	b.n	80065b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 facb 	bl	8006acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0208 	orr.w	r2, r2, #8
 8006544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0204 	bic.w	r2, r2, #4
 8006554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69d9      	ldr	r1, [r3, #28]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	61da      	str	r2, [r3, #28]
      break;
 8006568:	e023      	b.n	80065b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fb15 	bl	8006ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69da      	ldr	r2, [r3, #28]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69d9      	ldr	r1, [r3, #28]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	021a      	lsls	r2, r3, #8
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	61da      	str	r2, [r3, #28]
      break;
 80065aa:	e002      	b.n	80065b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	75fb      	strb	r3, [r7, #23]
      break;
 80065b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c>
 80065dc:	2302      	movs	r3, #2
 80065de:	e0b4      	b.n	800674a <HAL_TIM_ConfigClockSource+0x186>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006618:	d03e      	beq.n	8006698 <HAL_TIM_ConfigClockSource+0xd4>
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661e:	f200 8087 	bhi.w	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	f000 8086 	beq.w	8006736 <HAL_TIM_ConfigClockSource+0x172>
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d87f      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b70      	cmp	r3, #112	; 0x70
 8006632:	d01a      	beq.n	800666a <HAL_TIM_ConfigClockSource+0xa6>
 8006634:	2b70      	cmp	r3, #112	; 0x70
 8006636:	d87b      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006638:	2b60      	cmp	r3, #96	; 0x60
 800663a:	d050      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x11a>
 800663c:	2b60      	cmp	r3, #96	; 0x60
 800663e:	d877      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b50      	cmp	r3, #80	; 0x50
 8006642:	d03c      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xfa>
 8006644:	2b50      	cmp	r3, #80	; 0x50
 8006646:	d873      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d058      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x13a>
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d86f      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b30      	cmp	r3, #48	; 0x30
 8006652:	d064      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15a>
 8006654:	2b30      	cmp	r3, #48	; 0x30
 8006656:	d86b      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b20      	cmp	r3, #32
 800665a:	d060      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15a>
 800665c:	2b20      	cmp	r3, #32
 800665e:	d867      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d05c      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15a>
 8006664:	2b10      	cmp	r3, #16
 8006666:	d05a      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15a>
 8006668:	e062      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6899      	ldr	r1, [r3, #8]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f000 fbec 	bl	8006e56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800668c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	609a      	str	r2, [r3, #8]
      break;
 8006696:	e04f      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	6899      	ldr	r1, [r3, #8]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f000 fbd5 	bl	8006e56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ba:	609a      	str	r2, [r3, #8]
      break;
 80066bc:	e03c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 fb49 	bl	8006d62 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2150      	movs	r1, #80	; 0x50
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fba2 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 80066dc:	e02c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 fb68 	bl	8006dc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2160      	movs	r1, #96	; 0x60
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fb92 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 80066fc:	e01c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	461a      	mov	r2, r3
 800670c:	f000 fb29 	bl	8006d62 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2140      	movs	r1, #64	; 0x40
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fb82 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 800671c:	e00c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f000 fb79 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 800672e:	e003      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
      break;
 8006734:	e000      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <HAL_TIM_SlaveConfigSynchro+0x18>
 8006766:	2302      	movs	r3, #2
 8006768:	e031      	b.n	80067ce <HAL_TIM_SlaveConfigSynchro+0x7c>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa5f 	bl	8006c40 <TIM_SlaveTimer_SetConfig>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e018      	b.n	80067ce <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067aa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067ba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a34      	ldr	r2, [pc, #208]	; (800690c <TIM_Base_SetConfig+0xe4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00f      	beq.n	8006860 <TIM_Base_SetConfig+0x38>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006846:	d00b      	beq.n	8006860 <TIM_Base_SetConfig+0x38>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a31      	ldr	r2, [pc, #196]	; (8006910 <TIM_Base_SetConfig+0xe8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d007      	beq.n	8006860 <TIM_Base_SetConfig+0x38>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a30      	ldr	r2, [pc, #192]	; (8006914 <TIM_Base_SetConfig+0xec>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_Base_SetConfig+0x38>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <TIM_Base_SetConfig+0xf0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a25      	ldr	r2, [pc, #148]	; (800690c <TIM_Base_SetConfig+0xe4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01b      	beq.n	80068b2 <TIM_Base_SetConfig+0x8a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d017      	beq.n	80068b2 <TIM_Base_SetConfig+0x8a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a22      	ldr	r2, [pc, #136]	; (8006910 <TIM_Base_SetConfig+0xe8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <TIM_Base_SetConfig+0x8a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a21      	ldr	r2, [pc, #132]	; (8006914 <TIM_Base_SetConfig+0xec>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00f      	beq.n	80068b2 <TIM_Base_SetConfig+0x8a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a20      	ldr	r2, [pc, #128]	; (8006918 <TIM_Base_SetConfig+0xf0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00b      	beq.n	80068b2 <TIM_Base_SetConfig+0x8a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a1f      	ldr	r2, [pc, #124]	; (800691c <TIM_Base_SetConfig+0xf4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_Base_SetConfig+0x8a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <TIM_Base_SetConfig+0xf8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_Base_SetConfig+0x8a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a1d      	ldr	r2, [pc, #116]	; (8006924 <TIM_Base_SetConfig+0xfc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d108      	bne.n	80068c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a08      	ldr	r2, [pc, #32]	; (800690c <TIM_Base_SetConfig+0xe4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d103      	bne.n	80068f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	615a      	str	r2, [r3, #20]
}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40010000 	.word	0x40010000
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 0302 	bic.w	r3, r3, #2
 8006970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <TIM_OC1_SetConfig+0xc8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10c      	bne.n	800699e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0308 	bic.w	r3, r3, #8
 800698a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <TIM_OC1_SetConfig+0xc8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d111      	bne.n	80069ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	40010000 	.word	0x40010000

080069f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0210 	bic.w	r2, r3, #16
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 0320 	bic.w	r3, r3, #32
 8006a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <TIM_OC2_SetConfig+0xd4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10d      	bne.n	8006a70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <TIM_OC2_SetConfig+0xd4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d113      	bne.n	8006aa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40010000 	.word	0x40010000

08006acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <TIM_OC3_SetConfig+0xd0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d10d      	bne.n	8006b46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a14      	ldr	r2, [pc, #80]	; (8006b9c <TIM_OC3_SetConfig+0xd0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d113      	bne.n	8006b76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	621a      	str	r2, [r3, #32]
}
 8006b90:	bf00      	nop
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	40010000 	.word	0x40010000

08006ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	031b      	lsls	r3, r3, #12
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a10      	ldr	r2, [pc, #64]	; (8006c3c <TIM_OC4_SetConfig+0x9c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d109      	bne.n	8006c14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	019b      	lsls	r3, r3, #6
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000

08006c40 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b70      	cmp	r3, #112	; 0x70
 8006c88:	d01a      	beq.n	8006cc0 <TIM_SlaveTimer_SetConfig+0x80>
 8006c8a:	2b70      	cmp	r3, #112	; 0x70
 8006c8c:	d860      	bhi.n	8006d50 <TIM_SlaveTimer_SetConfig+0x110>
 8006c8e:	2b60      	cmp	r3, #96	; 0x60
 8006c90:	d054      	beq.n	8006d3c <TIM_SlaveTimer_SetConfig+0xfc>
 8006c92:	2b60      	cmp	r3, #96	; 0x60
 8006c94:	d85c      	bhi.n	8006d50 <TIM_SlaveTimer_SetConfig+0x110>
 8006c96:	2b50      	cmp	r3, #80	; 0x50
 8006c98:	d046      	beq.n	8006d28 <TIM_SlaveTimer_SetConfig+0xe8>
 8006c9a:	2b50      	cmp	r3, #80	; 0x50
 8006c9c:	d858      	bhi.n	8006d50 <TIM_SlaveTimer_SetConfig+0x110>
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d019      	beq.n	8006cd6 <TIM_SlaveTimer_SetConfig+0x96>
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d854      	bhi.n	8006d50 <TIM_SlaveTimer_SetConfig+0x110>
 8006ca6:	2b30      	cmp	r3, #48	; 0x30
 8006ca8:	d055      	beq.n	8006d56 <TIM_SlaveTimer_SetConfig+0x116>
 8006caa:	2b30      	cmp	r3, #48	; 0x30
 8006cac:	d850      	bhi.n	8006d50 <TIM_SlaveTimer_SetConfig+0x110>
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d051      	beq.n	8006d56 <TIM_SlaveTimer_SetConfig+0x116>
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d84c      	bhi.n	8006d50 <TIM_SlaveTimer_SetConfig+0x110>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d04d      	beq.n	8006d56 <TIM_SlaveTimer_SetConfig+0x116>
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d04b      	beq.n	8006d56 <TIM_SlaveTimer_SetConfig+0x116>
 8006cbe:	e047      	b.n	8006d50 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68d9      	ldr	r1, [r3, #12]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f000 f8c1 	bl	8006e56 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006cd4:	e040      	b.n	8006d58 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d101      	bne.n	8006ce2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e03b      	b.n	8006d5a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6a1a      	ldr	r2, [r3, #32]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d08:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
      break;
 8006d26:	e017      	b.n	8006d58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	461a      	mov	r2, r3
 8006d36:	f000 f814 	bl	8006d62 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d3a:	e00d      	b.n	8006d58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6899      	ldr	r1, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f000 f839 	bl	8006dc0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d4e:	e003      	b.n	8006d58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	75fb      	strb	r3, [r7, #23]
      break;
 8006d54:	e000      	b.n	8006d58 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006d56:	bf00      	nop
  }

  return status;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f023 0201 	bic.w	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 030a 	bic.w	r3, r3, #10
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	621a      	str	r2, [r3, #32]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	f023 0210 	bic.w	r2, r3, #16
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	031b      	lsls	r3, r3, #12
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	621a      	str	r2, [r3, #32]
}
 8006e14:	bf00      	nop
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f043 0307 	orr.w	r3, r3, #7
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	609a      	str	r2, [r3, #8]
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b087      	sub	sp, #28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	021a      	lsls	r2, r3, #8
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	609a      	str	r2, [r3, #8]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e050      	b.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efc:	d013      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00e      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d10c      	bne.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40010000 	.word	0x40010000
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40000800 	.word	0x40000800
 8006f6c:	40000c00 	.word	0x40000c00
 8006f70:	40014000 	.word	0x40014000

08006f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	f107 001c 	add.w	r0, r7, #28
 8006faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d122      	bne.n	8006ffa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d105      	bne.n	8006fee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fbee 	bl	80087d0 <USB_CoreReset>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
 8006ff8:	e01a      	b.n	8007030 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fbe2 	bl	80087d0 <USB_CoreReset>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
 8007022:	e005      	b.n	8007030 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	2b01      	cmp	r3, #1
 8007034:	d10b      	bne.n	800704e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f043 0206 	orr.w	r2, r3, #6
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f043 0220 	orr.w	r2, r3, #32
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800705a:	b004      	add	sp, #16
 800705c:	4770      	bx	lr
	...

08007060 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	4613      	mov	r3, r2
 800706c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d165      	bne.n	8007140 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4a41      	ldr	r2, [pc, #260]	; (800717c <USB_SetTurnaroundTime+0x11c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d906      	bls.n	800708a <USB_SetTurnaroundTime+0x2a>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4a40      	ldr	r2, [pc, #256]	; (8007180 <USB_SetTurnaroundTime+0x120>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d202      	bcs.n	800708a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007084:	230f      	movs	r3, #15
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e062      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4a3c      	ldr	r2, [pc, #240]	; (8007180 <USB_SetTurnaroundTime+0x120>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d306      	bcc.n	80070a0 <USB_SetTurnaroundTime+0x40>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4a3b      	ldr	r2, [pc, #236]	; (8007184 <USB_SetTurnaroundTime+0x124>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d202      	bcs.n	80070a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800709a:	230e      	movs	r3, #14
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	e057      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4a38      	ldr	r2, [pc, #224]	; (8007184 <USB_SetTurnaroundTime+0x124>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d306      	bcc.n	80070b6 <USB_SetTurnaroundTime+0x56>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4a37      	ldr	r2, [pc, #220]	; (8007188 <USB_SetTurnaroundTime+0x128>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d202      	bcs.n	80070b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070b0:	230d      	movs	r3, #13
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e04c      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4a33      	ldr	r2, [pc, #204]	; (8007188 <USB_SetTurnaroundTime+0x128>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d306      	bcc.n	80070cc <USB_SetTurnaroundTime+0x6c>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4a32      	ldr	r2, [pc, #200]	; (800718c <USB_SetTurnaroundTime+0x12c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d802      	bhi.n	80070cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070c6:	230c      	movs	r3, #12
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	e041      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a2f      	ldr	r2, [pc, #188]	; (800718c <USB_SetTurnaroundTime+0x12c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d906      	bls.n	80070e2 <USB_SetTurnaroundTime+0x82>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4a2e      	ldr	r2, [pc, #184]	; (8007190 <USB_SetTurnaroundTime+0x130>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d802      	bhi.n	80070e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80070dc:	230b      	movs	r3, #11
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e036      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4a2a      	ldr	r2, [pc, #168]	; (8007190 <USB_SetTurnaroundTime+0x130>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d906      	bls.n	80070f8 <USB_SetTurnaroundTime+0x98>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4a29      	ldr	r2, [pc, #164]	; (8007194 <USB_SetTurnaroundTime+0x134>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d802      	bhi.n	80070f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80070f2:	230a      	movs	r3, #10
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	e02b      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4a26      	ldr	r2, [pc, #152]	; (8007194 <USB_SetTurnaroundTime+0x134>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d906      	bls.n	800710e <USB_SetTurnaroundTime+0xae>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4a25      	ldr	r2, [pc, #148]	; (8007198 <USB_SetTurnaroundTime+0x138>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d202      	bcs.n	800710e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007108:	2309      	movs	r3, #9
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	e020      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4a21      	ldr	r2, [pc, #132]	; (8007198 <USB_SetTurnaroundTime+0x138>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d306      	bcc.n	8007124 <USB_SetTurnaroundTime+0xc4>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	4a20      	ldr	r2, [pc, #128]	; (800719c <USB_SetTurnaroundTime+0x13c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d802      	bhi.n	8007124 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800711e:	2308      	movs	r3, #8
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e015      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4a1d      	ldr	r2, [pc, #116]	; (800719c <USB_SetTurnaroundTime+0x13c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d906      	bls.n	800713a <USB_SetTurnaroundTime+0xda>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4a1c      	ldr	r2, [pc, #112]	; (80071a0 <USB_SetTurnaroundTime+0x140>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d202      	bcs.n	800713a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007134:	2307      	movs	r3, #7
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	e00a      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800713a:	2306      	movs	r3, #6
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e007      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007146:	2309      	movs	r3, #9
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e001      	b.n	8007150 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800714c:	2309      	movs	r3, #9
 800714e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007168:	431a      	orrs	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	00d8acbf 	.word	0x00d8acbf
 8007180:	00e4e1c0 	.word	0x00e4e1c0
 8007184:	00f42400 	.word	0x00f42400
 8007188:	01067380 	.word	0x01067380
 800718c:	011a499f 	.word	0x011a499f
 8007190:	01312cff 	.word	0x01312cff
 8007194:	014ca43f 	.word	0x014ca43f
 8007198:	016e3600 	.word	0x016e3600
 800719c:	01a6ab1f 	.word	0x01a6ab1f
 80071a0:	01e84800 	.word	0x01e84800

080071a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f043 0201 	orr.w	r2, r3, #1
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d115      	bne.n	8007236 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007216:	2001      	movs	r0, #1
 8007218:	f7fb fb2a 	bl	8002870 <HAL_Delay>
      ms++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fa45 	bl	80086b2 <USB_GetMode>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d01e      	beq.n	800726c <USB_SetCurrentMode+0x84>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b31      	cmp	r3, #49	; 0x31
 8007232:	d9f0      	bls.n	8007216 <USB_SetCurrentMode+0x2e>
 8007234:	e01a      	b.n	800726c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d115      	bne.n	8007268 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007248:	2001      	movs	r0, #1
 800724a:	f7fb fb11 	bl	8002870 <HAL_Delay>
      ms++;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 fa2c 	bl	80086b2 <USB_GetMode>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <USB_SetCurrentMode+0x84>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b31      	cmp	r3, #49	; 0x31
 8007264:	d9f0      	bls.n	8007248 <USB_SetCurrentMode+0x60>
 8007266:	e001      	b.n	800726c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e005      	b.n	8007278 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b32      	cmp	r3, #50	; 0x32
 8007270:	d101      	bne.n	8007276 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007280:	b084      	sub	sp, #16
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800728e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	e009      	b.n	80072b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3340      	adds	r3, #64	; 0x40
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	2200      	movs	r2, #0
 80072ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	3301      	adds	r3, #1
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b0e      	cmp	r3, #14
 80072b8:	d9f2      	bls.n	80072a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d11c      	bne.n	80072fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ce:	f043 0302 	orr.w	r3, r3, #2
 80072d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
 80072f8:	e00b      	b.n	8007312 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007318:	461a      	mov	r2, r3
 800731a:	2300      	movs	r3, #0
 800731c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007324:	4619      	mov	r1, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732c:	461a      	mov	r2, r3
 800732e:	680b      	ldr	r3, [r1, #0]
 8007330:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10c      	bne.n	8007352 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f965 	bl	8007610 <USB_SetDevSpeed>
 8007346:	e008      	b.n	800735a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007348:	2101      	movs	r1, #1
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f960 	bl	8007610 <USB_SetDevSpeed>
 8007350:	e003      	b.n	800735a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007352:	2103      	movs	r1, #3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f95b 	bl	8007610 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800735a:	2110      	movs	r1, #16
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8f3 	bl	8007548 <USB_FlushTxFifo>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f91f 	bl	80075b0 <USB_FlushRxFifo>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	461a      	mov	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738e:	461a      	mov	r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	461a      	mov	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	e043      	b.n	800742e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073bc:	d118      	bne.n	80073f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	461a      	mov	r2, r3
 80073d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	e013      	b.n	8007402 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	461a      	mov	r2, r3
 80073e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e008      	b.n	8007402 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	461a      	mov	r2, r3
 80073fe:	2300      	movs	r3, #0
 8007400:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	461a      	mov	r2, r3
 8007410:	2300      	movs	r3, #0
 8007412:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007420:	461a      	mov	r2, r3
 8007422:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007426:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3301      	adds	r3, #1
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	429a      	cmp	r2, r3
 8007434:	d3b7      	bcc.n	80073a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	e043      	b.n	80074c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800744e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007452:	d118      	bne.n	8007486 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007466:	461a      	mov	r2, r3
 8007468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	e013      	b.n	8007498 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	461a      	mov	r2, r3
 800747e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	e008      	b.n	8007498 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007492:	461a      	mov	r2, r3
 8007494:	2300      	movs	r3, #0
 8007496:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	461a      	mov	r2, r3
 80074a6:	2300      	movs	r3, #0
 80074a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	461a      	mov	r2, r3
 80074b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	3301      	adds	r3, #1
 80074c2:	613b      	str	r3, [r7, #16]
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3b7      	bcc.n	800743c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f043 0210 	orr.w	r2, r3, #16
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <USB_DevInit+0x2c4>)
 8007506:	4313      	orrs	r3, r2
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f043 0208 	orr.w	r2, r3, #8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800751e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007520:	2b01      	cmp	r3, #1
 8007522:	d107      	bne.n	8007534 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800752c:	f043 0304 	orr.w	r3, r3, #4
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007540:	b004      	add	sp, #16
 8007542:	4770      	bx	lr
 8007544:	803c3800 	.word	0x803c3800

08007548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a13      	ldr	r2, [pc, #76]	; (80075ac <USB_FlushTxFifo+0x64>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d901      	bls.n	8007568 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e01b      	b.n	80075a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	daf2      	bge.n	8007556 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	019b      	lsls	r3, r3, #6
 8007578:	f043 0220 	orr.w	r2, r3, #32
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a08      	ldr	r2, [pc, #32]	; (80075ac <USB_FlushTxFifo+0x64>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d901      	bls.n	8007592 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e006      	b.n	80075a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b20      	cmp	r3, #32
 800759c:	d0f0      	beq.n	8007580 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	00030d40 	.word	0x00030d40

080075b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4a11      	ldr	r2, [pc, #68]	; (800760c <USB_FlushRxFifo+0x5c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d901      	bls.n	80075ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e018      	b.n	8007600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	daf2      	bge.n	80075bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2210      	movs	r2, #16
 80075de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4a08      	ldr	r2, [pc, #32]	; (800760c <USB_FlushRxFifo+0x5c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d901      	bls.n	80075f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e006      	b.n	8007600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d0f0      	beq.n	80075e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	00030d40 	.word	0x00030d40

08007610 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007630:	4313      	orrs	r3, r2
 8007632:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007642:	b480      	push	{r7}
 8007644:	b087      	sub	sp, #28
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 0306 	and.w	r3, r3, #6
 800765a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007662:	2300      	movs	r3, #0
 8007664:	75fb      	strb	r3, [r7, #23]
 8007666:	e00a      	b.n	800767e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d002      	beq.n	8007674 <USB_GetDevSpeed+0x32>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b06      	cmp	r3, #6
 8007672:	d102      	bne.n	800767a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007674:	2302      	movs	r3, #2
 8007676:	75fb      	strb	r3, [r7, #23]
 8007678:	e001      	b.n	800767e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800767a:	230f      	movs	r3, #15
 800767c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d13a      	bne.n	800771e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	2101      	movs	r1, #1
 80076ba:	fa01 f303 	lsl.w	r3, r1, r3
 80076be:	b29b      	uxth	r3, r3
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076c6:	4313      	orrs	r3, r2
 80076c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d155      	bne.n	800778c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	791b      	ldrb	r3, [r3, #4]
 80076fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	059b      	lsls	r3, r3, #22
 8007702:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007704:	4313      	orrs	r3, r2
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	e036      	b.n	800778c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007724:	69da      	ldr	r2, [r3, #28]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	2101      	movs	r1, #1
 8007730:	fa01 f303 	lsl.w	r3, r1, r3
 8007734:	041b      	lsls	r3, r3, #16
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800773c:	4313      	orrs	r3, r2
 800773e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d11a      	bne.n	800778c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	791b      	ldrb	r3, [r3, #4]
 8007770:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007772:	430b      	orrs	r3, r1
 8007774:	4313      	orrs	r3, r2
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d161      	bne.n	800787c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ce:	d11f      	bne.n	8007810 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	0151      	lsls	r1, r2, #5
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	440a      	add	r2, r1
 80077e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800780e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	b29b      	uxth	r3, r3
 8007828:	43db      	mvns	r3, r3
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007830:	4013      	ands	r3, r2
 8007832:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	2101      	movs	r1, #1
 8007846:	fa01 f303 	lsl.w	r3, r1, r3
 800784a:	b29b      	uxth	r3, r3
 800784c:	43db      	mvns	r3, r3
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007854:	4013      	ands	r3, r2
 8007856:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	0159      	lsls	r1, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	440b      	add	r3, r1
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	4619      	mov	r1, r3
 8007874:	4b35      	ldr	r3, [pc, #212]	; (800794c <USB_DeactivateEndpoint+0x1b0>)
 8007876:	4013      	ands	r3, r2
 8007878:	600b      	str	r3, [r1, #0]
 800787a:	e060      	b.n	800793e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800788e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007892:	d11f      	bne.n	80078d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	0151      	lsls	r1, r2, #5
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	440a      	add	r2, r1
 80078ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	2101      	movs	r1, #1
 80078e6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	43db      	mvns	r3, r3
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f4:	4013      	ands	r3, r2
 80078f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	2101      	movs	r1, #1
 800790a:	fa01 f303 	lsl.w	r3, r1, r3
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	43db      	mvns	r3, r3
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007918:	4013      	ands	r3, r2
 800791a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	0159      	lsls	r1, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	440b      	add	r3, r1
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	4619      	mov	r1, r3
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <USB_DeactivateEndpoint+0x1b4>)
 800793a:	4013      	ands	r3, r2
 800793c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	ec337800 	.word	0xec337800
 8007950:	eff37800 	.word	0xeff37800

08007954 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08a      	sub	sp, #40	; 0x28
 8007958:	af02      	add	r7, sp, #8
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	2b01      	cmp	r3, #1
 8007972:	f040 815c 	bne.w	8007c2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d132      	bne.n	80079e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	440a      	add	r2, r1
 8007994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800799c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	0151      	lsls	r1, r2, #5
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	440a      	add	r2, r1
 80079d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079dc:	0cdb      	lsrs	r3, r3, #19
 80079de:	04db      	lsls	r3, r3, #19
 80079e0:	6113      	str	r3, [r2, #16]
 80079e2:	e074      	b.n	8007ace <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fe:	0cdb      	lsrs	r3, r3, #19
 8007a00:	04db      	lsls	r3, r3, #19
 8007a02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6999      	ldr	r1, [r3, #24]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	440b      	add	r3, r1
 8007a40:	1e59      	subs	r1, r3, #1
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a4c:	4b9d      	ldr	r3, [pc, #628]	; (8007cc4 <USB_EPStartXfer+0x370>)
 8007a4e:	400b      	ands	r3, r1
 8007a50:	69b9      	ldr	r1, [r7, #24]
 8007a52:	0148      	lsls	r0, r1, #5
 8007a54:	69f9      	ldr	r1, [r7, #28]
 8007a56:	4401      	add	r1, r0
 8007a58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	691a      	ldr	r2, [r3, #16]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a76:	69b9      	ldr	r1, [r7, #24]
 8007a78:	0148      	lsls	r0, r1, #5
 8007a7a:	69f9      	ldr	r1, [r7, #28]
 8007a7c:	4401      	add	r1, r0
 8007a7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a82:	4313      	orrs	r3, r2
 8007a84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	791b      	ldrb	r3, [r3, #4]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d11f      	bne.n	8007ace <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007aac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007acc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d14b      	bne.n	8007b6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d009      	beq.n	8007af0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	461a      	mov	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	791b      	ldrb	r3, [r3, #4]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d128      	bne.n	8007b4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d110      	bne.n	8007b2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	e00f      	b.n	8007b4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	0151      	lsls	r1, r2, #5
 8007b5c:	69fa      	ldr	r2, [r7, #28]
 8007b5e:	440a      	add	r2, r1
 8007b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e133      	b.n	8007dd4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	791b      	ldrb	r3, [r3, #4]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d015      	beq.n	8007bc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 811b 	beq.w	8007dd4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	2101      	movs	r1, #1
 8007bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb4:	69f9      	ldr	r1, [r7, #28]
 8007bb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	634b      	str	r3, [r1, #52]	; 0x34
 8007bbe:	e109      	b.n	8007dd4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d110      	bne.n	8007bf2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	0151      	lsls	r1, r2, #5
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	440a      	add	r2, r1
 8007be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	e00f      	b.n	8007c12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6919      	ldr	r1, [r3, #16]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	781a      	ldrb	r2, [r3, #0]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	b298      	uxth	r0, r3
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4603      	mov	r3, r0
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fade 	bl	80081e8 <USB_WritePacket>
 8007c2c:	e0d2      	b.n	8007dd4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c48:	0cdb      	lsrs	r3, r3, #19
 8007c4a:	04db      	lsls	r3, r3, #19
 8007c4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d126      	bne.n	8007cc8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c90:	69b9      	ldr	r1, [r7, #24]
 8007c92:	0148      	lsls	r0, r1, #5
 8007c94:	69f9      	ldr	r1, [r7, #28]
 8007c96:	4401      	add	r1, r0
 8007c98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	0151      	lsls	r1, r2, #5
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cbe:	6113      	str	r3, [r2, #16]
 8007cc0:	e03a      	b.n	8007d38 <USB_EPStartXfer+0x3e4>
 8007cc2:	bf00      	nop
 8007cc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	699a      	ldr	r2, [r3, #24]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	1e5a      	subs	r2, r3, #1
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cdc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	8afa      	ldrh	r2, [r7, #22]
 8007ce4:	fb03 f202 	mul.w	r2, r3, r2
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf8:	691a      	ldr	r2, [r3, #16]
 8007cfa:	8afb      	ldrh	r3, [r7, #22]
 8007cfc:	04d9      	lsls	r1, r3, #19
 8007cfe:	4b38      	ldr	r3, [pc, #224]	; (8007de0 <USB_EPStartXfer+0x48c>)
 8007d00:	400b      	ands	r3, r1
 8007d02:	69b9      	ldr	r1, [r7, #24]
 8007d04:	0148      	lsls	r0, r1, #5
 8007d06:	69f9      	ldr	r1, [r7, #28]
 8007d08:	4401      	add	r1, r0
 8007d0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d28:	69b9      	ldr	r1, [r7, #24]
 8007d2a:	0148      	lsls	r0, r1, #5
 8007d2c:	69f9      	ldr	r1, [r7, #28]
 8007d2e:	4401      	add	r1, r0
 8007d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d34:	4313      	orrs	r3, r2
 8007d36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10d      	bne.n	8007d5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6919      	ldr	r1, [r3, #16]
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	460a      	mov	r2, r1
 8007d58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d128      	bne.n	8007db4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d110      	bne.n	8007d94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	e00f      	b.n	8007db4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3720      	adds	r7, #32
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	1ff80000 	.word	0x1ff80000

08007de4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	f040 80ce 	bne.w	8007fa2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d132      	bne.n	8007e74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6c:	0cdb      	lsrs	r3, r3, #19
 8007e6e:	04db      	lsls	r3, r3, #19
 8007e70:	6113      	str	r3, [r2, #16]
 8007e72:	e04e      	b.n	8007f12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e8e:	0cdb      	lsrs	r3, r3, #19
 8007e90:	04db      	lsls	r3, r3, #19
 8007e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d903      	bls.n	8007ecc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f02:	6939      	ldr	r1, [r7, #16]
 8007f04:	0148      	lsls	r0, r1, #5
 8007f06:	6979      	ldr	r1, [r7, #20]
 8007f08:	4401      	add	r1, r0
 8007f0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d11e      	bne.n	8007f56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e097      	b.n	8008086 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 8083 	beq.w	8008086 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f303 	lsl.w	r3, r1, r3
 8007f96:	6979      	ldr	r1, [r7, #20]
 8007f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	634b      	str	r3, [r1, #52]	; 0x34
 8007fa0:	e071      	b.n	8008086 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fbc:	0cdb      	lsrs	r3, r3, #19
 8007fbe:	04db      	lsls	r3, r3, #19
 8007fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	0151      	lsls	r1, r2, #5
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	440a      	add	r2, r1
 8007fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fe4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800801c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008034:	6939      	ldr	r1, [r7, #16]
 8008036:	0148      	lsls	r0, r1, #5
 8008038:	6979      	ldr	r1, [r7, #20]
 800803a:	4401      	add	r1, r0
 800803c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008040:	4313      	orrs	r3, r2
 8008042:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d10d      	bne.n	8008066 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6919      	ldr	r1, [r3, #16]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008062:	460a      	mov	r2, r1
 8008064:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008084:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d14a      	bne.n	8008148 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ca:	f040 8086 	bne.w	80081da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	0151      	lsls	r1, r2, #5
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	440a      	add	r2, r1
 80080e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	7812      	ldrb	r2, [r2, #0]
 8008106:	0151      	lsls	r1, r2, #5
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	440a      	add	r2, r1
 800810c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008114:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3301      	adds	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008122:	4293      	cmp	r3, r2
 8008124:	d902      	bls.n	800812c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	75fb      	strb	r3, [r7, #23]
          break;
 800812a:	e056      	b.n	80081da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008144:	d0e7      	beq.n	8008116 <USB_EPStopXfer+0x82>
 8008146:	e048      	b.n	80081da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800815c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008160:	d13b      	bne.n	80081da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	7812      	ldrb	r2, [r2, #0]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008180:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008184:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	7812      	ldrb	r2, [r2, #0]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d902      	bls.n	80081c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]
          break;
 80081be:	e00c      	b.n	80081da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d8:	d0e7      	beq.n	80081aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	371c      	adds	r7, #28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b089      	sub	sp, #36	; 0x24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	4611      	mov	r1, r2
 80081f4:	461a      	mov	r2, r3
 80081f6:	460b      	mov	r3, r1
 80081f8:	71fb      	strb	r3, [r7, #7]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d123      	bne.n	8008256 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800820e:	88bb      	ldrh	r3, [r7, #4]
 8008210:	3303      	adds	r3, #3
 8008212:	089b      	lsrs	r3, r3, #2
 8008214:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
 800821a:	e018      	b.n	800824e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	031a      	lsls	r2, r3, #12
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	4413      	add	r3, r2
 8008224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008228:	461a      	mov	r2, r3
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	3301      	adds	r3, #1
 8008234:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	3301      	adds	r3, #1
 800823a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	3301      	adds	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	3301      	adds	r3, #1
 8008246:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	3301      	adds	r3, #1
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	429a      	cmp	r2, r3
 8008254:	d3e2      	bcc.n	800821c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3724      	adds	r7, #36	; 0x24
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008264:	b480      	push	{r7}
 8008266:	b08b      	sub	sp, #44	; 0x2c
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	b29b      	uxth	r3, r3
 8008280:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008282:	88fb      	ldrh	r3, [r7, #6]
 8008284:	f003 0303 	and.w	r3, r3, #3
 8008288:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800828a:	2300      	movs	r3, #0
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	e014      	b.n	80082ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	601a      	str	r2, [r3, #0]
    pDest++;
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	3301      	adds	r3, #1
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	3301      	adds	r3, #1
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	3301      	adds	r3, #1
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	3301      	adds	r3, #1
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	3301      	adds	r3, #1
 80082b8:	623b      	str	r3, [r7, #32]
 80082ba:	6a3a      	ldr	r2, [r7, #32]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d3e6      	bcc.n	8008290 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082c2:	8bfb      	ldrh	r3, [r7, #30]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01e      	beq.n	8008306 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d2:	461a      	mov	r2, r3
 80082d4:	f107 0310 	add.w	r3, r7, #16
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	701a      	strb	r2, [r3, #0]
      i++;
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	3301      	adds	r3, #1
 80082f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	3301      	adds	r3, #1
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80082fa:	8bfb      	ldrh	r3, [r7, #30]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008300:	8bfb      	ldrh	r3, [r7, #30]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1ea      	bne.n	80082dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008308:	4618      	mov	r0, r3
 800830a:	372c      	adds	r7, #44	; 0x2c
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d12c      	bne.n	800838a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	db12      	blt.n	8008368 <USB_EPSetStall+0x54>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00f      	beq.n	8008368 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008366:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	e02b      	b.n	80083e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	db12      	blt.n	80083c2 <USB_EPSetStall+0xae>
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00f      	beq.n	80083c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	0151      	lsls	r1, r2, #5
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	440a      	add	r2, r1
 80083b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d128      	bne.n	800845e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800842a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	791b      	ldrb	r3, [r3, #4]
 8008430:	2b03      	cmp	r3, #3
 8008432:	d003      	beq.n	800843c <USB_EPClearStall+0x4c>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	791b      	ldrb	r3, [r3, #4]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d138      	bne.n	80084ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	440a      	add	r2, r1
 8008452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	e027      	b.n	80084ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	440a      	add	r2, r1
 8008474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008478:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800847c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	2b03      	cmp	r3, #3
 8008484:	d003      	beq.n	800848e <USB_EPClearStall+0x9e>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	791b      	ldrb	r3, [r3, #4]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d10f      	bne.n	80084ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	0151      	lsls	r1, r2, #5
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	440a      	add	r2, r1
 80084a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80084f0:	68f9      	ldr	r1, [r7, #12]
 80084f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084f6:	4313      	orrs	r3, r2
 80084f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008522:	f023 0303 	bic.w	r3, r3, #3
 8008526:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008536:	f023 0302 	bic.w	r3, r3, #2
 800853a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008564:	f023 0303 	bic.w	r3, r3, #3
 8008568:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008578:	f043 0302 	orr.w	r3, r3, #2
 800857c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4013      	ands	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085a4:	68fb      	ldr	r3, [r7, #12]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b085      	sub	sp, #20
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	4013      	ands	r3, r2
 80085d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	0c1b      	lsrs	r3, r3, #16
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b085      	sub	sp, #20
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	4013      	ands	r3, r2
 8008608:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	b29b      	uxth	r3, r3
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800861a:	b480      	push	{r7}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	4013      	ands	r3, r2
 8008646:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008648:	68bb      	ldr	r3, [r7, #8]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008656:	b480      	push	{r7}
 8008658:	b087      	sub	sp, #28
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008678:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	fa22 f303 	lsr.w	r3, r2, r3
 8008686:	01db      	lsls	r3, r3, #7
 8008688:	b2db      	uxtb	r3, r3
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4013      	ands	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086a4:	68bb      	ldr	r3, [r7, #8]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f003 0301 	and.w	r3, r3, #1
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086ec:	f023 0307 	bic.w	r3, r3, #7
 80086f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008704:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	460b      	mov	r3, r1
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	333c      	adds	r3, #60	; 0x3c
 800872a:	3304      	adds	r3, #4
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4a26      	ldr	r2, [pc, #152]	; (80087cc <USB_EP0_OutStart+0xb8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d90a      	bls.n	800874e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008748:	d101      	bne.n	800874e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	e037      	b.n	80087be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008754:	461a      	mov	r2, r3
 8008756:	2300      	movs	r3, #0
 8008758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800876c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800877c:	f043 0318 	orr.w	r3, r3, #24
 8008780:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008790:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008794:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008796:	7afb      	ldrb	r3, [r7, #11]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10f      	bne.n	80087bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a2:	461a      	mov	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80087ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	4f54300a 	.word	0x4f54300a

080087d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3301      	adds	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4a13      	ldr	r2, [pc, #76]	; (8008834 <USB_CoreReset+0x64>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d901      	bls.n	80087ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e01b      	b.n	8008826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	daf2      	bge.n	80087dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	f043 0201 	orr.w	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3301      	adds	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4a09      	ldr	r2, [pc, #36]	; (8008834 <USB_CoreReset+0x64>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d901      	bls.n	8008818 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e006      	b.n	8008826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b01      	cmp	r3, #1
 8008822:	d0f0      	beq.n	8008806 <USB_CoreReset+0x36>

  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	00030d40 	.word	0x00030d40

08008838 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008844:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008848:	f005 fa62 	bl	800dd10 <USBD_static_malloc>
 800884c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d109      	bne.n	8008868 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32b0      	adds	r2, #176	; 0xb0
 800885e:	2100      	movs	r1, #0
 8008860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008864:	2302      	movs	r3, #2
 8008866:	e0d4      	b.n	8008a12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008868:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f005 facc 	bl	800de0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	32b0      	adds	r2, #176	; 0xb0
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32b0      	adds	r2, #176	; 0xb0
 800888e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7c1b      	ldrb	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d138      	bne.n	8008912 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088a0:	4b5e      	ldr	r3, [pc, #376]	; (8008a1c <USBD_CDC_Init+0x1e4>)
 80088a2:	7819      	ldrb	r1, [r3, #0]
 80088a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a8:	2202      	movs	r2, #2
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f005 f90d 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088b0:	4b5a      	ldr	r3, [pc, #360]	; (8008a1c <USBD_CDC_Init+0x1e4>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f003 020f 	and.w	r2, r3, #15
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	3324      	adds	r3, #36	; 0x24
 80088c6:	2201      	movs	r2, #1
 80088c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088ca:	4b55      	ldr	r3, [pc, #340]	; (8008a20 <USBD_CDC_Init+0x1e8>)
 80088cc:	7819      	ldrb	r1, [r3, #0]
 80088ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d2:	2202      	movs	r2, #2
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f005 f8f8 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088da:	4b51      	ldr	r3, [pc, #324]	; (8008a20 <USBD_CDC_Init+0x1e8>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f003 020f 	and.w	r2, r3, #15
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088f2:	2201      	movs	r2, #1
 80088f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088f6:	4b4b      	ldr	r3, [pc, #300]	; (8008a24 <USBD_CDC_Init+0x1ec>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	f003 020f 	and.w	r2, r3, #15
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	3326      	adds	r3, #38	; 0x26
 800890c:	2210      	movs	r2, #16
 800890e:	801a      	strh	r2, [r3, #0]
 8008910:	e035      	b.n	800897e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008912:	4b42      	ldr	r3, [pc, #264]	; (8008a1c <USBD_CDC_Init+0x1e4>)
 8008914:	7819      	ldrb	r1, [r3, #0]
 8008916:	2340      	movs	r3, #64	; 0x40
 8008918:	2202      	movs	r2, #2
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f005 f8d5 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008920:	4b3e      	ldr	r3, [pc, #248]	; (8008a1c <USBD_CDC_Init+0x1e4>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 020f 	and.w	r2, r3, #15
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	440b      	add	r3, r1
 8008934:	3324      	adds	r3, #36	; 0x24
 8008936:	2201      	movs	r2, #1
 8008938:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800893a:	4b39      	ldr	r3, [pc, #228]	; (8008a20 <USBD_CDC_Init+0x1e8>)
 800893c:	7819      	ldrb	r1, [r3, #0]
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	2202      	movs	r2, #2
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f005 f8c1 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008948:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <USBD_CDC_Init+0x1e8>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f003 020f 	and.w	r2, r3, #15
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	4613      	mov	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	440b      	add	r3, r1
 800895c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008960:	2201      	movs	r2, #1
 8008962:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008964:	4b2f      	ldr	r3, [pc, #188]	; (8008a24 <USBD_CDC_Init+0x1ec>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	f003 020f 	and.w	r2, r3, #15
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	3326      	adds	r3, #38	; 0x26
 800897a:	2210      	movs	r2, #16
 800897c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800897e:	4b29      	ldr	r3, [pc, #164]	; (8008a24 <USBD_CDC_Init+0x1ec>)
 8008980:	7819      	ldrb	r1, [r3, #0]
 8008982:	2308      	movs	r3, #8
 8008984:	2203      	movs	r2, #3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f005 f89f 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800898c:	4b25      	ldr	r3, [pc, #148]	; (8008a24 <USBD_CDC_Init+0x1ec>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 020f 	and.w	r2, r3, #15
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	3324      	adds	r3, #36	; 0x24
 80089a2:	2201      	movs	r2, #1
 80089a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	33b0      	adds	r3, #176	; 0xb0
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089dc:	2302      	movs	r3, #2
 80089de:	e018      	b.n	8008a12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7c1b      	ldrb	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <USBD_CDC_Init+0x1e8>)
 80089ea:	7819      	ldrb	r1, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f005 f956 	bl	800dca8 <USBD_LL_PrepareReceive>
 80089fc:	e008      	b.n	8008a10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089fe:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <USBD_CDC_Init+0x1e8>)
 8008a00:	7819      	ldrb	r1, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a08:	2340      	movs	r3, #64	; 0x40
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f005 f94c 	bl	800dca8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200000a3 	.word	0x200000a3
 8008a20:	200000a4 	.word	0x200000a4
 8008a24:	200000a5 	.word	0x200000a5

08008a28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a34:	4b3a      	ldr	r3, [pc, #232]	; (8008b20 <USBD_CDC_DeInit+0xf8>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f005 f86b 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a40:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <USBD_CDC_DeInit+0xf8>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	f003 020f 	and.w	r2, r3, #15
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	3324      	adds	r3, #36	; 0x24
 8008a56:	2200      	movs	r2, #0
 8008a58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a5a:	4b32      	ldr	r3, [pc, #200]	; (8008b24 <USBD_CDC_DeInit+0xfc>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f005 f858 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a66:	4b2f      	ldr	r3, [pc, #188]	; (8008b24 <USBD_CDC_DeInit+0xfc>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	f003 020f 	and.w	r2, r3, #15
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a7e:	2200      	movs	r2, #0
 8008a80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a82:	4b29      	ldr	r3, [pc, #164]	; (8008b28 <USBD_CDC_DeInit+0x100>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f005 f844 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a8e:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <USBD_CDC_DeInit+0x100>)
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	f003 020f 	and.w	r2, r3, #15
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	3324      	adds	r3, #36	; 0x24
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008aa8:	4b1f      	ldr	r3, [pc, #124]	; (8008b28 <USBD_CDC_DeInit+0x100>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	f003 020f 	and.w	r2, r3, #15
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	3326      	adds	r3, #38	; 0x26
 8008abe:	2200      	movs	r2, #0
 8008ac0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	32b0      	adds	r2, #176	; 0xb0
 8008acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01f      	beq.n	8008b14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	; 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	32b0      	adds	r2, #176	; 0xb0
 8008af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f005 f918 	bl	800dd2c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	32b0      	adds	r2, #176	; 0xb0
 8008b06:	2100      	movs	r1, #0
 8008b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200000a3 	.word	0x200000a3
 8008b24:	200000a4 	.word	0x200000a4
 8008b28:	200000a5 	.word	0x200000a5

08008b2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32b0      	adds	r2, #176	; 0xb0
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e0bf      	b.n	8008cdc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d050      	beq.n	8008c0a <USBD_CDC_Setup+0xde>
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	f040 80af 	bne.w	8008ccc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d03a      	beq.n	8008bec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	b25b      	sxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	da1b      	bge.n	8008bb8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	33b0      	adds	r3, #176	; 0xb0
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	88d2      	ldrh	r2, [r2, #6]
 8008b9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	88db      	ldrh	r3, [r3, #6]
 8008ba2:	2b07      	cmp	r3, #7
 8008ba4:	bf28      	it	cs
 8008ba6:	2307      	movcs	r3, #7
 8008ba8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	89fa      	ldrh	r2, [r7, #14]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fd89 	bl	800a6c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bb6:	e090      	b.n	8008cda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	785a      	ldrb	r2, [r3, #1]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	88db      	ldrh	r3, [r3, #6]
 8008bc6:	2b3f      	cmp	r3, #63	; 0x3f
 8008bc8:	d803      	bhi.n	8008bd2 <USBD_CDC_Setup+0xa6>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	88db      	ldrh	r3, [r3, #6]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	e000      	b.n	8008bd4 <USBD_CDC_Setup+0xa8>
 8008bd2:	2240      	movs	r2, #64	; 0x40
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008bda:	6939      	ldr	r1, [r7, #16]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008be2:	461a      	mov	r2, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 fd9b 	bl	800a720 <USBD_CtlPrepareRx>
      break;
 8008bea:	e076      	b.n	8008cda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	33b0      	adds	r3, #176	; 0xb0
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	7850      	ldrb	r0, [r2, #1]
 8008c02:	2200      	movs	r2, #0
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	4798      	blx	r3
      break;
 8008c08:	e067      	b.n	8008cda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	2b0b      	cmp	r3, #11
 8008c10:	d851      	bhi.n	8008cb6 <USBD_CDC_Setup+0x18a>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <USBD_CDC_Setup+0xec>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c49 	.word	0x08008c49
 8008c1c:	08008cc5 	.word	0x08008cc5
 8008c20:	08008cb7 	.word	0x08008cb7
 8008c24:	08008cb7 	.word	0x08008cb7
 8008c28:	08008cb7 	.word	0x08008cb7
 8008c2c:	08008cb7 	.word	0x08008cb7
 8008c30:	08008cb7 	.word	0x08008cb7
 8008c34:	08008cb7 	.word	0x08008cb7
 8008c38:	08008cb7 	.word	0x08008cb7
 8008c3c:	08008cb7 	.word	0x08008cb7
 8008c40:	08008c73 	.word	0x08008c73
 8008c44:	08008c9d 	.word	0x08008c9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d107      	bne.n	8008c64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c54:	f107 030a 	add.w	r3, r7, #10
 8008c58:	2202      	movs	r2, #2
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 fd33 	bl	800a6c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c62:	e032      	b.n	8008cca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fcbd 	bl	800a5e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008c70:	e02b      	b.n	8008cca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d107      	bne.n	8008c8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c7e:	f107 030d 	add.w	r3, r7, #13
 8008c82:	2201      	movs	r2, #1
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 fd1e 	bl	800a6c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c8c:	e01d      	b.n	8008cca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 fca8 	bl	800a5e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c96:	2303      	movs	r3, #3
 8008c98:	75fb      	strb	r3, [r7, #23]
          break;
 8008c9a:	e016      	b.n	8008cca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d00f      	beq.n	8008cc8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fc9b 	bl	800a5e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008cb4:	e008      	b.n	8008cc8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 fc94 	bl	800a5e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cc2:	e002      	b.n	8008cca <USBD_CDC_Setup+0x19e>
          break;
 8008cc4:	bf00      	nop
 8008cc6:	e008      	b.n	8008cda <USBD_CDC_Setup+0x1ae>
          break;
 8008cc8:	bf00      	nop
      }
      break;
 8008cca:	e006      	b.n	8008cda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fc89 	bl	800a5e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	32b0      	adds	r2, #176	; 0xb0
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e065      	b.n	8008dda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	32b0      	adds	r2, #176	; 0xb0
 8008d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	f003 020f 	and.w	r2, r3, #15
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	3318      	adds	r3, #24
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d02f      	beq.n	8008d98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	f003 020f 	and.w	r2, r3, #15
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	440b      	add	r3, r1
 8008d4a:	3318      	adds	r3, #24
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	f003 010f 	and.w	r1, r3, #15
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	460b      	mov	r3, r1
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	440b      	add	r3, r1
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4403      	add	r3, r0
 8008d60:	3348      	adds	r3, #72	; 0x48
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d68:	fb01 f303 	mul.w	r3, r1, r3
 8008d6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d112      	bne.n	8008d98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	f003 020f 	and.w	r2, r3, #15
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	3318      	adds	r3, #24
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d8a:	78f9      	ldrb	r1, [r7, #3]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2200      	movs	r2, #0
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f004 ff68 	bl	800dc66 <USBD_LL_Transmit>
 8008d96:	e01f      	b.n	8008dd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	33b0      	adds	r3, #176	; 0xb0
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d010      	beq.n	8008dd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	33b0      	adds	r3, #176	; 0xb0
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	32b0      	adds	r2, #176	; 0xb0
 8008df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	32b0      	adds	r2, #176	; 0xb0
 8008e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e01a      	b.n	8008e4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f004 ff66 	bl	800dcea <USBD_LL_GetRxDataSize>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	33b0      	adds	r3, #176	; 0xb0
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e44:	4611      	mov	r1, r2
 8008e46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	32b0      	adds	r2, #176	; 0xb0
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e025      	b.n	8008ec0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	33b0      	adds	r3, #176	; 0xb0
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01a      	beq.n	8008ebe <USBD_CDC_EP0_RxReady+0x6c>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e8e:	2bff      	cmp	r3, #255	; 0xff
 8008e90:	d015      	beq.n	8008ebe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	33b0      	adds	r3, #176	; 0xb0
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008eaa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eb2:	b292      	uxth	r2, r2
 8008eb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	22ff      	movs	r2, #255	; 0xff
 8008eba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ed0:	2182      	movs	r1, #130	; 0x82
 8008ed2:	4818      	ldr	r0, [pc, #96]	; (8008f34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ed4:	f000 fd4f 	bl	8009976 <USBD_GetEpDesc>
 8008ed8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eda:	2101      	movs	r1, #1
 8008edc:	4815      	ldr	r0, [pc, #84]	; (8008f34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ede:	f000 fd4a 	bl	8009976 <USBD_GetEpDesc>
 8008ee2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ee4:	2181      	movs	r1, #129	; 0x81
 8008ee6:	4813      	ldr	r0, [pc, #76]	; (8008f34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ee8:	f000 fd45 	bl	8009976 <USBD_GetEpDesc>
 8008eec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d006      	beq.n	8008f0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f08:	711a      	strb	r2, [r3, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1c:	711a      	strb	r2, [r3, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2243      	movs	r2, #67	; 0x43
 8008f26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000060 	.word	0x20000060

08008f38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f40:	2182      	movs	r1, #130	; 0x82
 8008f42:	4818      	ldr	r0, [pc, #96]	; (8008fa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f44:	f000 fd17 	bl	8009976 <USBD_GetEpDesc>
 8008f48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4815      	ldr	r0, [pc, #84]	; (8008fa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f4e:	f000 fd12 	bl	8009976 <USBD_GetEpDesc>
 8008f52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f54:	2181      	movs	r1, #129	; 0x81
 8008f56:	4813      	ldr	r0, [pc, #76]	; (8008fa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f58:	f000 fd0d 	bl	8009976 <USBD_GetEpDesc>
 8008f5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2210      	movs	r2, #16
 8008f68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2200      	movs	r2, #0
 8008f74:	711a      	strb	r2, [r3, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f042 0202 	orr.w	r2, r2, #2
 8008f7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	711a      	strb	r2, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f042 0202 	orr.w	r2, r2, #2
 8008f90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2243      	movs	r2, #67	; 0x43
 8008f96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000060 	.word	0x20000060

08008fa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb0:	2182      	movs	r1, #130	; 0x82
 8008fb2:	4818      	ldr	r0, [pc, #96]	; (8009014 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fb4:	f000 fcdf 	bl	8009976 <USBD_GetEpDesc>
 8008fb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fba:	2101      	movs	r1, #1
 8008fbc:	4815      	ldr	r0, [pc, #84]	; (8009014 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fbe:	f000 fcda 	bl	8009976 <USBD_GetEpDesc>
 8008fc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fc4:	2181      	movs	r1, #129	; 0x81
 8008fc6:	4813      	ldr	r0, [pc, #76]	; (8009014 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fc8:	f000 fcd5 	bl	8009976 <USBD_GetEpDesc>
 8008fcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2210      	movs	r2, #16
 8008fd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d006      	beq.n	8008fee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe8:	711a      	strb	r2, [r3, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d006      	beq.n	8009002 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ffc:	711a      	strb	r2, [r3, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2243      	movs	r2, #67	; 0x43
 8009006:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000060 	.word	0x20000060

08009018 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	220a      	movs	r2, #10
 8009024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009026:	4b03      	ldr	r3, [pc, #12]	; (8009034 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	2000001c 	.word	0x2000001c

08009038 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009048:	2303      	movs	r3, #3
 800904a:	e009      	b.n	8009060 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	33b0      	adds	r3, #176	; 0xb0
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	32b0      	adds	r2, #176	; 0xb0
 8009082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009086:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800908e:	2303      	movs	r3, #3
 8009090:	e008      	b.n	80090a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	32b0      	adds	r2, #176	; 0xb0
 80090c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e004      	b.n	80090de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	32b0      	adds	r2, #176	; 0xb0
 80090fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009102:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	32b0      	adds	r2, #176	; 0xb0
 8009112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800911a:	2303      	movs	r3, #3
 800911c:	e025      	b.n	800916a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11f      	bne.n	8009168 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2201      	movs	r2, #1
 800912c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009130:	4b10      	ldr	r3, [pc, #64]	; (8009174 <USBD_CDC_TransmitPacket+0x88>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4403      	add	r3, r0
 800914a:	3318      	adds	r3, #24
 800914c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <USBD_CDC_TransmitPacket+0x88>)
 8009150:	7819      	ldrb	r1, [r3, #0]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f004 fd81 	bl	800dc66 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009168:	7bfb      	ldrb	r3, [r7, #15]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200000a3 	.word	0x200000a3

08009178 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	32b0      	adds	r2, #176	; 0xb0
 800918a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	32b0      	adds	r2, #176	; 0xb0
 800919a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e018      	b.n	80091d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	7c1b      	ldrb	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10a      	bne.n	80091c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <USBD_CDC_ReceivePacket+0x68>)
 80091b0:	7819      	ldrb	r1, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f004 fd73 	bl	800dca8 <USBD_LL_PrepareReceive>
 80091c2:	e008      	b.n	80091d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091c4:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <USBD_CDC_ReceivePacket+0x68>)
 80091c6:	7819      	ldrb	r1, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091ce:	2340      	movs	r3, #64	; 0x40
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f004 fd69 	bl	800dca8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200000a4 	.word	0x200000a4

080091e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	4613      	mov	r3, r2
 80091f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e01f      	b.n	800923c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	79fa      	ldrb	r2, [r7, #7]
 800922e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f004 fbe3 	bl	800d9fc <USBD_LL_Init>
 8009236:	4603      	mov	r3, r0
 8009238:	75fb      	strb	r3, [r7, #23]

  return ret;
 800923a:	7dfb      	ldrb	r3, [r7, #23]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009258:	2303      	movs	r3, #3
 800925a:	e025      	b.n	80092a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	32ae      	adds	r2, #174	; 0xae
 800926e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00f      	beq.n	8009298 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	32ae      	adds	r2, #174	; 0xae
 8009282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	f107 020e 	add.w	r2, r7, #14
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	4602      	mov	r2, r0
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f004 fbeb 	bl	800da94 <USBD_LL_Start>
 80092be:	4603      	mov	r3, r0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d009      	beq.n	800930c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	4611      	mov	r1, r2
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800930c:	7bfb      	ldrb	r3, [r7, #15]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	4611      	mov	r1, r2
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800933c:	2303      	movs	r3, #3
 800933e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	4618      	mov	r0, r3
 800935e:	f001 f908 	bl	800a572 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009370:	461a      	mov	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	2b02      	cmp	r3, #2
 8009384:	d01a      	beq.n	80093bc <USBD_LL_SetupStage+0x72>
 8009386:	2b02      	cmp	r3, #2
 8009388:	d822      	bhi.n	80093d0 <USBD_LL_SetupStage+0x86>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <USBD_LL_SetupStage+0x4a>
 800938e:	2b01      	cmp	r3, #1
 8009390:	d00a      	beq.n	80093a8 <USBD_LL_SetupStage+0x5e>
 8009392:	e01d      	b.n	80093d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fb5f 	bl	8009a60 <USBD_StdDevReq>
 80093a2:	4603      	mov	r3, r0
 80093a4:	73fb      	strb	r3, [r7, #15]
      break;
 80093a6:	e020      	b.n	80093ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fbc7 	bl	8009b44 <USBD_StdItfReq>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ba:	e016      	b.n	80093ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc29 	bl	8009c1c <USBD_StdEPReq>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73fb      	strb	r3, [r7, #15]
      break;
 80093ce:	e00c      	b.n	80093ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f004 fbb8 	bl	800db54 <USBD_LL_StallEP>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73fb      	strb	r3, [r7, #15]
      break;
 80093e8:	bf00      	nop
  }

  return ret;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	460b      	mov	r3, r1
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009406:	7afb      	ldrb	r3, [r7, #11]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d16e      	bne.n	80094ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009412:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800941a:	2b03      	cmp	r3, #3
 800941c:	f040 8098 	bne.w	8009550 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	429a      	cmp	r2, r3
 800942a:	d913      	bls.n	8009454 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	1ad2      	subs	r2, r2, r3
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	4293      	cmp	r3, r2
 8009444:	bf28      	it	cs
 8009446:	4613      	movcs	r3, r2
 8009448:	461a      	mov	r2, r3
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f001 f984 	bl	800a75a <USBD_CtlContinueRx>
 8009452:	e07d      	b.n	8009550 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800945a:	f003 031f 	and.w	r3, r3, #31
 800945e:	2b02      	cmp	r3, #2
 8009460:	d014      	beq.n	800948c <USBD_LL_DataOutStage+0x98>
 8009462:	2b02      	cmp	r3, #2
 8009464:	d81d      	bhi.n	80094a2 <USBD_LL_DataOutStage+0xae>
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <USBD_LL_DataOutStage+0x7c>
 800946a:	2b01      	cmp	r3, #1
 800946c:	d003      	beq.n	8009476 <USBD_LL_DataOutStage+0x82>
 800946e:	e018      	b.n	80094a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	75bb      	strb	r3, [r7, #22]
            break;
 8009474:	e018      	b.n	80094a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800947c:	b2db      	uxtb	r3, r3
 800947e:	4619      	mov	r1, r3
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 fa5e 	bl	8009942 <USBD_CoreFindIF>
 8009486:	4603      	mov	r3, r0
 8009488:	75bb      	strb	r3, [r7, #22]
            break;
 800948a:	e00d      	b.n	80094a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009492:	b2db      	uxtb	r3, r3
 8009494:	4619      	mov	r1, r3
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 fa60 	bl	800995c <USBD_CoreFindEP>
 800949c:	4603      	mov	r3, r0
 800949e:	75bb      	strb	r3, [r7, #22]
            break;
 80094a0:	e002      	b.n	80094a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75bb      	strb	r3, [r7, #22]
            break;
 80094a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80094a8:	7dbb      	ldrb	r3, [r7, #22]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d119      	bne.n	80094e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d113      	bne.n	80094e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80094ba:	7dba      	ldrb	r2, [r7, #22]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	32ae      	adds	r2, #174	; 0xae
 80094c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80094ca:	7dba      	ldrb	r2, [r7, #22]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094d2:	7dba      	ldrb	r2, [r7, #22]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	32ae      	adds	r2, #174	; 0xae
 80094d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f001 f94a 	bl	800a77c <USBD_CtlSendStatus>
 80094e8:	e032      	b.n	8009550 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	4619      	mov	r1, r3
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 fa31 	bl	800995c <USBD_CoreFindEP>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094fe:	7dbb      	ldrb	r3, [r7, #22]
 8009500:	2bff      	cmp	r3, #255	; 0xff
 8009502:	d025      	beq.n	8009550 <USBD_LL_DataOutStage+0x15c>
 8009504:	7dbb      	ldrb	r3, [r7, #22]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d122      	bne.n	8009550 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b03      	cmp	r3, #3
 8009514:	d117      	bne.n	8009546 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009516:	7dba      	ldrb	r2, [r7, #22]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	32ae      	adds	r2, #174	; 0xae
 800951c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00f      	beq.n	8009546 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009526:	7dba      	ldrb	r2, [r7, #22]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800952e:	7dba      	ldrb	r2, [r7, #22]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	32ae      	adds	r2, #174	; 0xae
 8009534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	7afa      	ldrb	r2, [r7, #11]
 800953c:	4611      	mov	r1, r2
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	4798      	blx	r3
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	e000      	b.n	8009552 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b086      	sub	sp, #24
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	460b      	mov	r3, r1
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009568:	7afb      	ldrb	r3, [r7, #11]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d16f      	bne.n	800964e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3314      	adds	r3, #20
 8009572:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800957a:	2b02      	cmp	r3, #2
 800957c:	d15a      	bne.n	8009634 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	429a      	cmp	r2, r3
 8009588:	d914      	bls.n	80095b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	1ad2      	subs	r2, r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	461a      	mov	r2, r3
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f001 f8ac 	bl	800a6fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095a6:	2300      	movs	r3, #0
 80095a8:	2200      	movs	r2, #0
 80095aa:	2100      	movs	r1, #0
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f004 fb7b 	bl	800dca8 <USBD_LL_PrepareReceive>
 80095b2:	e03f      	b.n	8009634 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d11c      	bne.n	80095fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d316      	bcc.n	80095fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d20f      	bcs.n	80095fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f001 f88d 	bl	800a6fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095ec:	2300      	movs	r3, #0
 80095ee:	2200      	movs	r2, #0
 80095f0:	2100      	movs	r1, #0
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f004 fb58 	bl	800dca8 <USBD_LL_PrepareReceive>
 80095f8:	e01c      	b.n	8009634 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b03      	cmp	r3, #3
 8009604:	d10f      	bne.n	8009626 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d009      	beq.n	8009626 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009626:	2180      	movs	r1, #128	; 0x80
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f004 fa93 	bl	800db54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f001 f8b7 	bl	800a7a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d03a      	beq.n	80096b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff fe42 	bl	80092c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800964c:	e032      	b.n	80096b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800964e:	7afb      	ldrb	r3, [r7, #11]
 8009650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009654:	b2db      	uxtb	r3, r3
 8009656:	4619      	mov	r1, r3
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 f97f 	bl	800995c <USBD_CoreFindEP>
 800965e:	4603      	mov	r3, r0
 8009660:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	2bff      	cmp	r3, #255	; 0xff
 8009666:	d025      	beq.n	80096b4 <USBD_LL_DataInStage+0x15a>
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d122      	bne.n	80096b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b03      	cmp	r3, #3
 8009678:	d11c      	bne.n	80096b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800967a:	7dfa      	ldrb	r2, [r7, #23]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	32ae      	adds	r2, #174	; 0xae
 8009680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d014      	beq.n	80096b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800968a:	7dfa      	ldrb	r2, [r7, #23]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009692:	7dfa      	ldrb	r2, [r7, #23]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	32ae      	adds	r2, #174	; 0xae
 8009698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	7afa      	ldrb	r2, [r7, #11]
 80096a0:	4611      	mov	r1, r2
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80096aa:	7dbb      	ldrb	r3, [r7, #22]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80096b0:	7dbb      	ldrb	r3, [r7, #22]
 80096b2:	e000      	b.n	80096b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d014      	beq.n	8009724 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00e      	beq.n	8009724 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	6852      	ldr	r2, [r2, #4]
 8009712:	b2d2      	uxtb	r2, r2
 8009714:	4611      	mov	r1, r2
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009720:	2303      	movs	r3, #3
 8009722:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009724:	2340      	movs	r3, #64	; 0x40
 8009726:	2200      	movs	r2, #0
 8009728:	2100      	movs	r1, #0
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f004 f9cd 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2240      	movs	r2, #64	; 0x40
 800973c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009740:	2340      	movs	r3, #64	; 0x40
 8009742:	2200      	movs	r2, #0
 8009744:	2180      	movs	r1, #128	; 0x80
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f004 f9bf 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2240      	movs	r2, #64	; 0x40
 8009756:	621a      	str	r2, [r3, #32]

  return ret;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009790:	b2da      	uxtb	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2204      	movs	r2, #4
 800979c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d106      	bne.n	80097d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d110      	bne.n	8009814 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	32ae      	adds	r2, #174	; 0xae
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800983c:	2303      	movs	r3, #3
 800983e:	e01c      	b.n	800987a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b03      	cmp	r3, #3
 800984a:	d115      	bne.n	8009878 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	32ae      	adds	r2, #174	; 0xae
 8009856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	32ae      	adds	r2, #174	; 0xae
 800986a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	78fa      	ldrb	r2, [r7, #3]
 8009872:	4611      	mov	r1, r2
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	32ae      	adds	r2, #174	; 0xae
 8009898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e01c      	b.n	80098de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d115      	bne.n	80098dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	32ae      	adds	r2, #174	; 0xae
 80098ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	32ae      	adds	r2, #174	; 0xae
 80098ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	78fa      	ldrb	r2, [r7, #3]
 80098d6:	4611      	mov	r1, r2
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00e      	beq.n	8009938 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6852      	ldr	r2, [r2, #4]
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	4611      	mov	r1, r2
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	4798      	blx	r3
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009934:	2303      	movs	r3, #3
 8009936:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009938:	7bfb      	ldrb	r3, [r7, #15]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800994e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009968:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b086      	sub	sp, #24
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	885b      	ldrh	r3, [r3, #2]
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	429a      	cmp	r2, r3
 800999c:	d920      	bls.n	80099e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099a6:	e013      	b.n	80099d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099a8:	f107 030a 	add.w	r3, r7, #10
 80099ac:	4619      	mov	r1, r3
 80099ae:	6978      	ldr	r0, [r7, #20]
 80099b0:	f000 f81b 	bl	80099ea <USBD_GetNextDesc>
 80099b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	785b      	ldrb	r3, [r3, #1]
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d108      	bne.n	80099d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	789b      	ldrb	r3, [r3, #2]
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d008      	beq.n	80099de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80099cc:	2300      	movs	r3, #0
 80099ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	885b      	ldrh	r3, [r3, #2]
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	897b      	ldrh	r3, [r7, #10]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d8e5      	bhi.n	80099a8 <USBD_GetEpDesc+0x32>
 80099dc:	e000      	b.n	80099e0 <USBD_GetEpDesc+0x6a>
          break;
 80099de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099e0:	693b      	ldr	r3, [r7, #16]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b085      	sub	sp, #20
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	881a      	ldrh	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	4413      	add	r3, r2
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a16:	68fb      	ldr	r3, [r7, #12]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a42:	8a3b      	ldrh	r3, [r7, #16]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	b21a      	sxth	r2, r3
 8009a48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	b21b      	sxth	r3, r3
 8009a50:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a52:	89fb      	ldrh	r3, [r7, #14]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	371c      	adds	r7, #28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a76:	2b40      	cmp	r3, #64	; 0x40
 8009a78:	d005      	beq.n	8009a86 <USBD_StdDevReq+0x26>
 8009a7a:	2b40      	cmp	r3, #64	; 0x40
 8009a7c:	d857      	bhi.n	8009b2e <USBD_StdDevReq+0xce>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00f      	beq.n	8009aa2 <USBD_StdDevReq+0x42>
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d153      	bne.n	8009b2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	32ae      	adds	r2, #174	; 0xae
 8009a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa0:	e04a      	b.n	8009b38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	2b09      	cmp	r3, #9
 8009aa8:	d83b      	bhi.n	8009b22 <USBD_StdDevReq+0xc2>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <USBD_StdDevReq+0x50>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009b05 	.word	0x08009b05
 8009ab4:	08009b19 	.word	0x08009b19
 8009ab8:	08009b23 	.word	0x08009b23
 8009abc:	08009b0f 	.word	0x08009b0f
 8009ac0:	08009b23 	.word	0x08009b23
 8009ac4:	08009ae3 	.word	0x08009ae3
 8009ac8:	08009ad9 	.word	0x08009ad9
 8009acc:	08009b23 	.word	0x08009b23
 8009ad0:	08009afb 	.word	0x08009afb
 8009ad4:	08009aed 	.word	0x08009aed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa3c 	bl	8009f58 <USBD_GetDescriptor>
          break;
 8009ae0:	e024      	b.n	8009b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fba1 	bl	800a22c <USBD_SetAddress>
          break;
 8009aea:	e01f      	b.n	8009b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fbe0 	bl	800a2b4 <USBD_SetConfig>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]
          break;
 8009af8:	e018      	b.n	8009b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fc83 	bl	800a408 <USBD_GetConfig>
          break;
 8009b02:	e013      	b.n	8009b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fcb4 	bl	800a474 <USBD_GetStatus>
          break;
 8009b0c:	e00e      	b.n	8009b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fce3 	bl	800a4dc <USBD_SetFeature>
          break;
 8009b16:	e009      	b.n	8009b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fd07 	bl	800a52e <USBD_ClrFeature>
          break;
 8009b20:	e004      	b.n	8009b2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fd5e 	bl	800a5e6 <USBD_CtlError>
          break;
 8009b2a:	bf00      	nop
      }
      break;
 8009b2c:	e004      	b.n	8009b38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fd58 	bl	800a5e6 <USBD_CtlError>
      break;
 8009b36:	bf00      	nop
  }

  return ret;
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop

08009b44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b5a:	2b40      	cmp	r3, #64	; 0x40
 8009b5c:	d005      	beq.n	8009b6a <USBD_StdItfReq+0x26>
 8009b5e:	2b40      	cmp	r3, #64	; 0x40
 8009b60:	d852      	bhi.n	8009c08 <USBD_StdItfReq+0xc4>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <USBD_StdItfReq+0x26>
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d14e      	bne.n	8009c08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d840      	bhi.n	8009bfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	889b      	ldrh	r3, [r3, #4]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d836      	bhi.n	8009bf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	889b      	ldrh	r3, [r3, #4]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fed9 	bl	8009942 <USBD_CoreFindIF>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	2bff      	cmp	r3, #255	; 0xff
 8009b98:	d01d      	beq.n	8009bd6 <USBD_StdItfReq+0x92>
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d11a      	bne.n	8009bd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ba0:	7bba      	ldrb	r2, [r7, #14]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	32ae      	adds	r2, #174	; 0xae
 8009ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00f      	beq.n	8009bd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009bb0:	7bba      	ldrb	r2, [r7, #14]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bb8:	7bba      	ldrb	r2, [r7, #14]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32ae      	adds	r2, #174	; 0xae
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bce:	e004      	b.n	8009bda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bd4:	e001      	b.n	8009bda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	88db      	ldrh	r3, [r3, #6]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d110      	bne.n	8009c04 <USBD_StdItfReq+0xc0>
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10d      	bne.n	8009c04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fdc7 	bl	800a77c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bee:	e009      	b.n	8009c04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fcf7 	bl	800a5e6 <USBD_CtlError>
          break;
 8009bf8:	e004      	b.n	8009c04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fcf2 	bl	800a5e6 <USBD_CtlError>
          break;
 8009c02:	e000      	b.n	8009c06 <USBD_StdItfReq+0xc2>
          break;
 8009c04:	bf00      	nop
      }
      break;
 8009c06:	e004      	b.n	8009c12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fceb 	bl	800a5e6 <USBD_CtlError>
      break;
 8009c10:	bf00      	nop
  }

  return ret;
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	889b      	ldrh	r3, [r3, #4]
 8009c2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c38:	2b40      	cmp	r3, #64	; 0x40
 8009c3a:	d007      	beq.n	8009c4c <USBD_StdEPReq+0x30>
 8009c3c:	2b40      	cmp	r3, #64	; 0x40
 8009c3e:	f200 817f 	bhi.w	8009f40 <USBD_StdEPReq+0x324>
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d02a      	beq.n	8009c9c <USBD_StdEPReq+0x80>
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	f040 817a 	bne.w	8009f40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff fe83 	bl	800995c <USBD_CoreFindEP>
 8009c56:	4603      	mov	r3, r0
 8009c58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c5a:	7b7b      	ldrb	r3, [r7, #13]
 8009c5c:	2bff      	cmp	r3, #255	; 0xff
 8009c5e:	f000 8174 	beq.w	8009f4a <USBD_StdEPReq+0x32e>
 8009c62:	7b7b      	ldrb	r3, [r7, #13]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f040 8170 	bne.w	8009f4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c6a:	7b7a      	ldrb	r2, [r7, #13]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c72:	7b7a      	ldrb	r2, [r7, #13]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	32ae      	adds	r2, #174	; 0xae
 8009c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8163 	beq.w	8009f4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c84:	7b7a      	ldrb	r2, [r7, #13]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	32ae      	adds	r2, #174	; 0xae
 8009c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c9a:	e156      	b.n	8009f4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	785b      	ldrb	r3, [r3, #1]
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d008      	beq.n	8009cb6 <USBD_StdEPReq+0x9a>
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	f300 8145 	bgt.w	8009f34 <USBD_StdEPReq+0x318>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 809b 	beq.w	8009de6 <USBD_StdEPReq+0x1ca>
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d03c      	beq.n	8009d2e <USBD_StdEPReq+0x112>
 8009cb4:	e13e      	b.n	8009f34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d002      	beq.n	8009cc8 <USBD_StdEPReq+0xac>
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d016      	beq.n	8009cf4 <USBD_StdEPReq+0xd8>
 8009cc6:	e02c      	b.n	8009d22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00d      	beq.n	8009cea <USBD_StdEPReq+0xce>
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b80      	cmp	r3, #128	; 0x80
 8009cd2:	d00a      	beq.n	8009cea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f003 ff3b 	bl	800db54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cde:	2180      	movs	r1, #128	; 0x80
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f003 ff37 	bl	800db54 <USBD_LL_StallEP>
 8009ce6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ce8:	e020      	b.n	8009d2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fc7a 	bl	800a5e6 <USBD_CtlError>
              break;
 8009cf2:	e01b      	b.n	8009d2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	885b      	ldrh	r3, [r3, #2]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10e      	bne.n	8009d1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cfc:	7bbb      	ldrb	r3, [r7, #14]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00b      	beq.n	8009d1a <USBD_StdEPReq+0xfe>
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	2b80      	cmp	r3, #128	; 0x80
 8009d06:	d008      	beq.n	8009d1a <USBD_StdEPReq+0xfe>
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	88db      	ldrh	r3, [r3, #6]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f003 ff1d 	bl	800db54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fd2e 	bl	800a77c <USBD_CtlSendStatus>

              break;
 8009d20:	e004      	b.n	8009d2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fc5e 	bl	800a5e6 <USBD_CtlError>
              break;
 8009d2a:	bf00      	nop
          }
          break;
 8009d2c:	e107      	b.n	8009f3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d002      	beq.n	8009d40 <USBD_StdEPReq+0x124>
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d016      	beq.n	8009d6c <USBD_StdEPReq+0x150>
 8009d3e:	e04b      	b.n	8009dd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00d      	beq.n	8009d62 <USBD_StdEPReq+0x146>
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	2b80      	cmp	r3, #128	; 0x80
 8009d4a:	d00a      	beq.n	8009d62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f003 feff 	bl	800db54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d56:	2180      	movs	r1, #128	; 0x80
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f003 fefb 	bl	800db54 <USBD_LL_StallEP>
 8009d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d60:	e040      	b.n	8009de4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fc3e 	bl	800a5e6 <USBD_CtlError>
              break;
 8009d6a:	e03b      	b.n	8009de4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	885b      	ldrh	r3, [r3, #2]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d136      	bne.n	8009de2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
 8009d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d7e:	7bbb      	ldrb	r3, [r7, #14]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f003 ff05 	bl	800db92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fcf7 	bl	800a77c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff fde2 	bl	800995c <USBD_CoreFindEP>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d9c:	7b7b      	ldrb	r3, [r7, #13]
 8009d9e:	2bff      	cmp	r3, #255	; 0xff
 8009da0:	d01f      	beq.n	8009de2 <USBD_StdEPReq+0x1c6>
 8009da2:	7b7b      	ldrb	r3, [r7, #13]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d11c      	bne.n	8009de2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009da8:	7b7a      	ldrb	r2, [r7, #13]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009db0:	7b7a      	ldrb	r2, [r7, #13]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	32ae      	adds	r2, #174	; 0xae
 8009db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d010      	beq.n	8009de2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009dc0:	7b7a      	ldrb	r2, [r7, #13]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	32ae      	adds	r2, #174	; 0xae
 8009dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009dd6:	e004      	b.n	8009de2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc03 	bl	800a5e6 <USBD_CtlError>
              break;
 8009de0:	e000      	b.n	8009de4 <USBD_StdEPReq+0x1c8>
              break;
 8009de2:	bf00      	nop
          }
          break;
 8009de4:	e0ab      	b.n	8009f3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d002      	beq.n	8009df8 <USBD_StdEPReq+0x1dc>
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d032      	beq.n	8009e5c <USBD_StdEPReq+0x240>
 8009df6:	e097      	b.n	8009f28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d007      	beq.n	8009e0e <USBD_StdEPReq+0x1f2>
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b80      	cmp	r3, #128	; 0x80
 8009e02:	d004      	beq.n	8009e0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fbed 	bl	800a5e6 <USBD_CtlError>
                break;
 8009e0c:	e091      	b.n	8009f32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	da0b      	bge.n	8009e2e <USBD_StdEPReq+0x212>
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	3310      	adds	r3, #16
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	4413      	add	r3, r2
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	e00b      	b.n	8009e46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	4413      	add	r3, r2
 8009e44:	3304      	adds	r3, #4
 8009e46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2202      	movs	r2, #2
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fc37 	bl	800a6c8 <USBD_CtlSendData>
              break;
 8009e5a:	e06a      	b.n	8009f32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	da11      	bge.n	8009e88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	f003 020f 	and.w	r2, r3, #15
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	440b      	add	r3, r1
 8009e76:	3324      	adds	r3, #36	; 0x24
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d117      	bne.n	8009eae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fbb0 	bl	800a5e6 <USBD_CtlError>
                  break;
 8009e86:	e054      	b.n	8009f32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	f003 020f 	and.w	r2, r3, #15
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d104      	bne.n	8009eae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fb9d 	bl	800a5e6 <USBD_CtlError>
                  break;
 8009eac:	e041      	b.n	8009f32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	da0b      	bge.n	8009ece <USBD_StdEPReq+0x2b2>
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	3310      	adds	r3, #16
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	4413      	add	r3, r2
 8009eca:	3304      	adds	r3, #4
 8009ecc:	e00b      	b.n	8009ee6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <USBD_StdEPReq+0x2d8>
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b80      	cmp	r3, #128	; 0x80
 8009ef2:	d103      	bne.n	8009efc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	e00e      	b.n	8009f1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f003 fe65 	bl	800dbd0 <USBD_LL_IsStallEP>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	e002      	b.n	8009f1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fbd1 	bl	800a6c8 <USBD_CtlSendData>
              break;
 8009f26:	e004      	b.n	8009f32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fb5b 	bl	800a5e6 <USBD_CtlError>
              break;
 8009f30:	bf00      	nop
          }
          break;
 8009f32:	e004      	b.n	8009f3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fb55 	bl	800a5e6 <USBD_CtlError>
          break;
 8009f3c:	bf00      	nop
      }
      break;
 8009f3e:	e005      	b.n	8009f4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb4f 	bl	800a5e6 <USBD_CtlError>
      break;
 8009f48:	e000      	b.n	8009f4c <USBD_StdEPReq+0x330>
      break;
 8009f4a:	bf00      	nop
  }

  return ret;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	885b      	ldrh	r3, [r3, #2]
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	3b01      	subs	r3, #1
 8009f78:	2b06      	cmp	r3, #6
 8009f7a:	f200 8128 	bhi.w	800a1ce <USBD_GetDescriptor+0x276>
 8009f7e:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <USBD_GetDescriptor+0x2c>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	08009fa1 	.word	0x08009fa1
 8009f88:	08009fb9 	.word	0x08009fb9
 8009f8c:	08009ff9 	.word	0x08009ff9
 8009f90:	0800a1cf 	.word	0x0800a1cf
 8009f94:	0800a1cf 	.word	0x0800a1cf
 8009f98:	0800a16f 	.word	0x0800a16f
 8009f9c:	0800a19b 	.word	0x0800a19b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	7c12      	ldrb	r2, [r2, #16]
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
      break;
 8009fb6:	e112      	b.n	800a1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	7c1b      	ldrb	r3, [r3, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10d      	bne.n	8009fdc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc8:	f107 0208 	add.w	r2, r7, #8
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fda:	e100      	b.n	800a1de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	f107 0208 	add.w	r2, r7, #8
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4798      	blx	r3
 8009fec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	701a      	strb	r2, [r3, #0]
      break;
 8009ff6:	e0f2      	b.n	800a1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	885b      	ldrh	r3, [r3, #2]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b05      	cmp	r3, #5
 800a000:	f200 80ac 	bhi.w	800a15c <USBD_GetDescriptor+0x204>
 800a004:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <USBD_GetDescriptor+0xb4>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a025 	.word	0x0800a025
 800a010:	0800a059 	.word	0x0800a059
 800a014:	0800a08d 	.word	0x0800a08d
 800a018:	0800a0c1 	.word	0x0800a0c1
 800a01c:	0800a0f5 	.word	0x0800a0f5
 800a020:	0800a129 	.word	0x0800a129
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00b      	beq.n	800a048 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	7c12      	ldrb	r2, [r2, #16]
 800a03c:	f107 0108 	add.w	r1, r7, #8
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
 800a044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a046:	e091      	b.n	800a16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 facb 	bl	800a5e6 <USBD_CtlError>
            err++;
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	3301      	adds	r3, #1
 800a054:	72fb      	strb	r3, [r7, #11]
          break;
 800a056:	e089      	b.n	800a16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7c12      	ldrb	r2, [r2, #16]
 800a070:	f107 0108 	add.w	r1, r7, #8
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07a:	e077      	b.n	800a16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fab1 	bl	800a5e6 <USBD_CtlError>
            err++;
 800a084:	7afb      	ldrb	r3, [r7, #11]
 800a086:	3301      	adds	r3, #1
 800a088:	72fb      	strb	r3, [r7, #11]
          break;
 800a08a:	e06f      	b.n	800a16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00b      	beq.n	800a0b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7c12      	ldrb	r2, [r2, #16]
 800a0a4:	f107 0108 	add.w	r1, r7, #8
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ae:	e05d      	b.n	800a16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fa97 	bl	800a5e6 <USBD_CtlError>
            err++;
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0be:	e055      	b.n	800a16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00b      	beq.n	800a0e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	7c12      	ldrb	r2, [r2, #16]
 800a0d8:	f107 0108 	add.w	r1, r7, #8
 800a0dc:	4610      	mov	r0, r2
 800a0de:	4798      	blx	r3
 800a0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e2:	e043      	b.n	800a16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fa7d 	bl	800a5e6 <USBD_CtlError>
            err++;
 800a0ec:	7afb      	ldrb	r3, [r7, #11]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f2:	e03b      	b.n	800a16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00b      	beq.n	800a118 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	7c12      	ldrb	r2, [r2, #16]
 800a10c:	f107 0108 	add.w	r1, r7, #8
 800a110:	4610      	mov	r0, r2
 800a112:	4798      	blx	r3
 800a114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a116:	e029      	b.n	800a16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fa63 	bl	800a5e6 <USBD_CtlError>
            err++;
 800a120:	7afb      	ldrb	r3, [r7, #11]
 800a122:	3301      	adds	r3, #1
 800a124:	72fb      	strb	r3, [r7, #11]
          break;
 800a126:	e021      	b.n	800a16c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	7c12      	ldrb	r2, [r2, #16]
 800a140:	f107 0108 	add.w	r1, r7, #8
 800a144:	4610      	mov	r0, r2
 800a146:	4798      	blx	r3
 800a148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a14a:	e00f      	b.n	800a16c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa49 	bl	800a5e6 <USBD_CtlError>
            err++;
 800a154:	7afb      	ldrb	r3, [r7, #11]
 800a156:	3301      	adds	r3, #1
 800a158:	72fb      	strb	r3, [r7, #11]
          break;
 800a15a:	e007      	b.n	800a16c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fa41 	bl	800a5e6 <USBD_CtlError>
          err++;
 800a164:	7afb      	ldrb	r3, [r7, #11]
 800a166:	3301      	adds	r3, #1
 800a168:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a16a:	bf00      	nop
      }
      break;
 800a16c:	e037      	b.n	800a1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	7c1b      	ldrb	r3, [r3, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d109      	bne.n	800a18a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a17e:	f107 0208 	add.w	r2, r7, #8
 800a182:	4610      	mov	r0, r2
 800a184:	4798      	blx	r3
 800a186:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a188:	e029      	b.n	800a1de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fa2a 	bl	800a5e6 <USBD_CtlError>
        err++;
 800a192:	7afb      	ldrb	r3, [r7, #11]
 800a194:	3301      	adds	r3, #1
 800a196:	72fb      	strb	r3, [r7, #11]
      break;
 800a198:	e021      	b.n	800a1de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	7c1b      	ldrb	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10d      	bne.n	800a1be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	f107 0208 	add.w	r2, r7, #8
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4798      	blx	r3
 800a1b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	2207      	movs	r2, #7
 800a1ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1bc:	e00f      	b.n	800a1de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fa10 	bl	800a5e6 <USBD_CtlError>
        err++;
 800a1c6:	7afb      	ldrb	r3, [r7, #11]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	72fb      	strb	r3, [r7, #11]
      break;
 800a1cc:	e007      	b.n	800a1de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fa08 	bl	800a5e6 <USBD_CtlError>
      err++;
 800a1d6:	7afb      	ldrb	r3, [r7, #11]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	72fb      	strb	r3, [r7, #11]
      break;
 800a1dc:	bf00      	nop
  }

  if (err != 0U)
 800a1de:	7afb      	ldrb	r3, [r7, #11]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d11e      	bne.n	800a222 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	88db      	ldrh	r3, [r3, #6]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d016      	beq.n	800a21a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a1ec:	893b      	ldrh	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00e      	beq.n	800a210 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	88da      	ldrh	r2, [r3, #6]
 800a1f6:	893b      	ldrh	r3, [r7, #8]
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	bf28      	it	cs
 800a1fc:	4613      	movcs	r3, r2
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a202:	893b      	ldrh	r3, [r7, #8]
 800a204:	461a      	mov	r2, r3
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fa5d 	bl	800a6c8 <USBD_CtlSendData>
 800a20e:	e009      	b.n	800a224 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f9e7 	bl	800a5e6 <USBD_CtlError>
 800a218:	e004      	b.n	800a224 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 faae 	bl	800a77c <USBD_CtlSendStatus>
 800a220:	e000      	b.n	800a224 <USBD_GetDescriptor+0x2cc>
    return;
 800a222:	bf00      	nop
  }
}
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop

0800a22c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	889b      	ldrh	r3, [r3, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d131      	bne.n	800a2a2 <USBD_SetAddress+0x76>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	88db      	ldrh	r3, [r3, #6]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d12d      	bne.n	800a2a2 <USBD_SetAddress+0x76>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	885b      	ldrh	r3, [r3, #2]
 800a24a:	2b7f      	cmp	r3, #127	; 0x7f
 800a24c:	d829      	bhi.n	800a2a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	885b      	ldrh	r3, [r3, #2]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a258:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b03      	cmp	r3, #3
 800a264:	d104      	bne.n	800a270 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f9bc 	bl	800a5e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26e:	e01d      	b.n	800a2ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	7bfa      	ldrb	r2, [r7, #15]
 800a274:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f003 fcd3 	bl	800dc28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa7a 	bl	800a77c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d004      	beq.n	800a298 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2202      	movs	r2, #2
 800a292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a296:	e009      	b.n	800a2ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a0:	e004      	b.n	800a2ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f99e 	bl	800a5e6 <USBD_CtlError>
  }
}
 800a2aa:	bf00      	nop
 800a2ac:	bf00      	nop
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	885b      	ldrh	r3, [r3, #2]
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	4b4e      	ldr	r3, [pc, #312]	; (800a404 <USBD_SetConfig+0x150>)
 800a2ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2cc:	4b4d      	ldr	r3, [pc, #308]	; (800a404 <USBD_SetConfig+0x150>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d905      	bls.n	800a2e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f985 	bl	800a5e6 <USBD_CtlError>
    return USBD_FAIL;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e08c      	b.n	800a3fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d002      	beq.n	800a2f2 <USBD_SetConfig+0x3e>
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d029      	beq.n	800a344 <USBD_SetConfig+0x90>
 800a2f0:	e075      	b.n	800a3de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2f2:	4b44      	ldr	r3, [pc, #272]	; (800a404 <USBD_SetConfig+0x150>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d020      	beq.n	800a33c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2fa:	4b42      	ldr	r3, [pc, #264]	; (800a404 <USBD_SetConfig+0x150>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a304:	4b3f      	ldr	r3, [pc, #252]	; (800a404 <USBD_SetConfig+0x150>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fe ffe7 	bl	80092de <USBD_SetClassConfig>
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d008      	beq.n	800a32c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f962 	bl	800a5e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2202      	movs	r2, #2
 800a326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a32a:	e065      	b.n	800a3f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa25 	bl	800a77c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2203      	movs	r2, #3
 800a336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a33a:	e05d      	b.n	800a3f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fa1d 	bl	800a77c <USBD_CtlSendStatus>
      break;
 800a342:	e059      	b.n	800a3f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a344:	4b2f      	ldr	r3, [pc, #188]	; (800a404 <USBD_SetConfig+0x150>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d112      	bne.n	800a372 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a354:	4b2b      	ldr	r3, [pc, #172]	; (800a404 <USBD_SetConfig+0x150>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	461a      	mov	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a35e:	4b29      	ldr	r3, [pc, #164]	; (800a404 <USBD_SetConfig+0x150>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7fe ffd6 	bl	8009316 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa06 	bl	800a77c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a370:	e042      	b.n	800a3f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a372:	4b24      	ldr	r3, [pc, #144]	; (800a404 <USBD_SetConfig+0x150>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d02a      	beq.n	800a3d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7fe ffc4 	bl	8009316 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a38e:	4b1d      	ldr	r3, [pc, #116]	; (800a404 <USBD_SetConfig+0x150>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a398:	4b1a      	ldr	r3, [pc, #104]	; (800a404 <USBD_SetConfig+0x150>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	4619      	mov	r1, r3
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f7fe ff9d 	bl	80092de <USBD_SetClassConfig>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00f      	beq.n	800a3ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f918 	bl	800a5e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7fe ffa9 	bl	8009316 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3cc:	e014      	b.n	800a3f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f9d4 	bl	800a77c <USBD_CtlSendStatus>
      break;
 800a3d4:	e010      	b.n	800a3f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f9d0 	bl	800a77c <USBD_CtlSendStatus>
      break;
 800a3dc:	e00c      	b.n	800a3f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f900 	bl	800a5e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3e6:	4b07      	ldr	r3, [pc, #28]	; (800a404 <USBD_SetConfig+0x150>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7fe ff92 	bl	8009316 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f6:	bf00      	nop
  }

  return ret;
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20000488 	.word	0x20000488

0800a408 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	88db      	ldrh	r3, [r3, #6]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d004      	beq.n	800a424 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f8e2 	bl	800a5e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a422:	e023      	b.n	800a46c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	dc02      	bgt.n	800a436 <USBD_GetConfig+0x2e>
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc03      	bgt.n	800a43c <USBD_GetConfig+0x34>
 800a434:	e015      	b.n	800a462 <USBD_GetConfig+0x5a>
 800a436:	2b03      	cmp	r3, #3
 800a438:	d00b      	beq.n	800a452 <USBD_GetConfig+0x4a>
 800a43a:	e012      	b.n	800a462 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3308      	adds	r3, #8
 800a446:	2201      	movs	r2, #1
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f93c 	bl	800a6c8 <USBD_CtlSendData>
        break;
 800a450:	e00c      	b.n	800a46c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3304      	adds	r3, #4
 800a456:	2201      	movs	r2, #1
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f934 	bl	800a6c8 <USBD_CtlSendData>
        break;
 800a460:	e004      	b.n	800a46c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f8be 	bl	800a5e6 <USBD_CtlError>
        break;
 800a46a:	bf00      	nop
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a484:	b2db      	uxtb	r3, r3
 800a486:	3b01      	subs	r3, #1
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d81e      	bhi.n	800a4ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	88db      	ldrh	r3, [r3, #6]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d004      	beq.n	800a49e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f8a5 	bl	800a5e6 <USBD_CtlError>
        break;
 800a49c:	e01a      	b.n	800a4d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d005      	beq.n	800a4ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	f043 0202 	orr.w	r2, r3, #2
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	330c      	adds	r3, #12
 800a4be:	2202      	movs	r2, #2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f900 	bl	800a6c8 <USBD_CtlSendData>
      break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f88a 	bl	800a5e6 <USBD_CtlError>
      break;
 800a4d2:	bf00      	nop
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	885b      	ldrh	r3, [r3, #2]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d107      	bne.n	800a4fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f940 	bl	800a77c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4fc:	e013      	b.n	800a526 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	885b      	ldrh	r3, [r3, #2]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d10b      	bne.n	800a51e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	889b      	ldrh	r3, [r3, #4]
 800a50a:	0a1b      	lsrs	r3, r3, #8
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f930 	bl	800a77c <USBD_CtlSendStatus>
}
 800a51c:	e003      	b.n	800a526 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f860 	bl	800a5e6 <USBD_CtlError>
}
 800a526:	bf00      	nop
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	3b01      	subs	r3, #1
 800a542:	2b02      	cmp	r3, #2
 800a544:	d80b      	bhi.n	800a55e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	885b      	ldrh	r3, [r3, #2]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d10c      	bne.n	800a568 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f910 	bl	800a77c <USBD_CtlSendStatus>
      }
      break;
 800a55c:	e004      	b.n	800a568 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f840 	bl	800a5e6 <USBD_CtlError>
      break;
 800a566:	e000      	b.n	800a56a <USBD_ClrFeature+0x3c>
      break;
 800a568:	bf00      	nop
  }
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	781a      	ldrb	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	781a      	ldrb	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3301      	adds	r3, #1
 800a59a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f7ff fa41 	bl	8009a24 <SWAPBYTE>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7ff fa34 	bl	8009a24 <SWAPBYTE>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	461a      	mov	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f7ff fa27 	bl	8009a24 <SWAPBYTE>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	461a      	mov	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	80da      	strh	r2, [r3, #6]
}
 800a5de:	bf00      	nop
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5f0:	2180      	movs	r1, #128	; 0x80
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f003 faae 	bl	800db54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f003 faaa 	bl	800db54 <USBD_LL_StallEP>
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d036      	beq.n	800a68c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a622:	6938      	ldr	r0, [r7, #16]
 800a624:	f000 f836 	bl	800a694 <USBD_GetLen>
 800a628:	4603      	mov	r3, r0
 800a62a:	3301      	adds	r3, #1
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	b29a      	uxth	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	4413      	add	r3, r2
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	7812      	ldrb	r2, [r2, #0]
 800a640:	701a      	strb	r2, [r3, #0]
  idx++;
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	3301      	adds	r3, #1
 800a646:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a648:	7dfb      	ldrb	r3, [r7, #23]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	4413      	add	r3, r2
 800a64e:	2203      	movs	r2, #3
 800a650:	701a      	strb	r2, [r3, #0]
  idx++;
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	3301      	adds	r3, #1
 800a656:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a658:	e013      	b.n	800a682 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	4413      	add	r3, r2
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	3301      	adds	r3, #1
 800a66a:	613b      	str	r3, [r7, #16]
    idx++;
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	3301      	adds	r3, #1
 800a670:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4413      	add	r3, r2
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
 800a67e:	3301      	adds	r3, #1
 800a680:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1e7      	bne.n	800a65a <USBD_GetString+0x52>
 800a68a:	e000      	b.n	800a68e <USBD_GetString+0x86>
    return;
 800a68c:	bf00      	nop
  }
}
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6a4:	e005      	b.n	800a6b2 <USBD_GetLen+0x1e>
  {
    len++;
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1f5      	bne.n	800a6a6 <USBD_GetLen+0x12>
  }

  return len;
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f003 fab9 	bl	800dc66 <USBD_LL_Transmit>

  return USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	2100      	movs	r1, #0
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f003 faa8 	bl	800dc66 <USBD_LL_Transmit>

  return USBD_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2203      	movs	r2, #3
 800a730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	2100      	movs	r1, #0
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f003 faac 	bl	800dca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	60b9      	str	r1, [r7, #8]
 800a764:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	2100      	movs	r1, #0
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f003 fa9b 	bl	800dca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2204      	movs	r2, #4
 800a788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a78c:	2300      	movs	r3, #0
 800a78e:	2200      	movs	r2, #0
 800a790:	2100      	movs	r1, #0
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f003 fa67 	bl	800dc66 <USBD_LL_Transmit>

  return USBD_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2205      	movs	r2, #5
 800a7ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f003 fa75 	bl	800dca8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <__NVIC_SetPriority>:
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	db0a      	blt.n	800a7f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	490c      	ldr	r1, [pc, #48]	; (800a814 <__NVIC_SetPriority+0x4c>)
 800a7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7e6:	0112      	lsls	r2, r2, #4
 800a7e8:	b2d2      	uxtb	r2, r2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a7f0:	e00a      	b.n	800a808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	4908      	ldr	r1, [pc, #32]	; (800a818 <__NVIC_SetPriority+0x50>)
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	f003 030f 	and.w	r3, r3, #15
 800a7fe:	3b04      	subs	r3, #4
 800a800:	0112      	lsls	r2, r2, #4
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	440b      	add	r3, r1
 800a806:	761a      	strb	r2, [r3, #24]
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	e000e100 	.word	0xe000e100
 800a818:	e000ed00 	.word	0xe000ed00

0800a81c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <SysTick_Handler+0x1c>)
 800a822:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a824:	f001 fd28 	bl	800c278 <xTaskGetSchedulerState>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d001      	beq.n	800a832 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a82e:	f002 fb13 	bl	800ce58 <xPortSysTickHandler>
  }
}
 800a832:	bf00      	nop
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	e000e010 	.word	0xe000e010

0800a83c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a83c:	b580      	push	{r7, lr}
 800a83e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a840:	2100      	movs	r1, #0
 800a842:	f06f 0004 	mvn.w	r0, #4
 800a846:	f7ff ffbf 	bl	800a7c8 <__NVIC_SetPriority>
#endif
}
 800a84a:	bf00      	nop
 800a84c:	bd80      	pop	{r7, pc}
	...

0800a850 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a856:	f3ef 8305 	mrs	r3, IPSR
 800a85a:	603b      	str	r3, [r7, #0]
  return(result);
 800a85c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a862:	f06f 0305 	mvn.w	r3, #5
 800a866:	607b      	str	r3, [r7, #4]
 800a868:	e00c      	b.n	800a884 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a86a:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <osKernelInitialize+0x44>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d105      	bne.n	800a87e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a872:	4b08      	ldr	r3, [pc, #32]	; (800a894 <osKernelInitialize+0x44>)
 800a874:	2201      	movs	r2, #1
 800a876:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a878:	2300      	movs	r3, #0
 800a87a:	607b      	str	r3, [r7, #4]
 800a87c:	e002      	b.n	800a884 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a87e:	f04f 33ff 	mov.w	r3, #4294967295
 800a882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a884:	687b      	ldr	r3, [r7, #4]
}
 800a886:	4618      	mov	r0, r3
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	2000048c 	.word	0x2000048c

0800a898 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a89e:	f3ef 8305 	mrs	r3, IPSR
 800a8a2:	603b      	str	r3, [r7, #0]
  return(result);
 800a8a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a8aa:	f06f 0305 	mvn.w	r3, #5
 800a8ae:	607b      	str	r3, [r7, #4]
 800a8b0:	e010      	b.n	800a8d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a8b2:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <osKernelStart+0x48>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d109      	bne.n	800a8ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a8ba:	f7ff ffbf 	bl	800a83c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8be:	4b08      	ldr	r3, [pc, #32]	; (800a8e0 <osKernelStart+0x48>)
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a8c4:	f001 f87c 	bl	800b9c0 <vTaskStartScheduler>
      stat = osOK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	607b      	str	r3, [r7, #4]
 800a8cc:	e002      	b.n	800a8d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8d4:	687b      	ldr	r3, [r7, #4]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	2000048c 	.word	0x2000048c

0800a8e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08e      	sub	sp, #56	; 0x38
 800a8e8:	af04      	add	r7, sp, #16
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8f4:	f3ef 8305 	mrs	r3, IPSR
 800a8f8:	617b      	str	r3, [r7, #20]
  return(result);
 800a8fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d17e      	bne.n	800a9fe <osThreadNew+0x11a>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d07b      	beq.n	800a9fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a906:	2380      	movs	r3, #128	; 0x80
 800a908:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a90a:	2318      	movs	r3, #24
 800a90c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a912:	f04f 33ff 	mov.w	r3, #4294967295
 800a916:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d045      	beq.n	800a9aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <osThreadNew+0x48>
        name = attr->name;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d008      	beq.n	800a952 <osThreadNew+0x6e>
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	2b38      	cmp	r3, #56	; 0x38
 800a944:	d805      	bhi.n	800a952 <osThreadNew+0x6e>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <osThreadNew+0x72>
        return (NULL);
 800a952:	2300      	movs	r3, #0
 800a954:	e054      	b.n	800aa00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	089b      	lsrs	r3, r3, #2
 800a964:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00e      	beq.n	800a98c <osThreadNew+0xa8>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	2bbb      	cmp	r3, #187	; 0xbb
 800a974:	d90a      	bls.n	800a98c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d006      	beq.n	800a98c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <osThreadNew+0xa8>
        mem = 1;
 800a986:	2301      	movs	r3, #1
 800a988:	61bb      	str	r3, [r7, #24]
 800a98a:	e010      	b.n	800a9ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10c      	bne.n	800a9ae <osThreadNew+0xca>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <osThreadNew+0xca>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d104      	bne.n	800a9ae <osThreadNew+0xca>
          mem = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	61bb      	str	r3, [r7, #24]
 800a9a8:	e001      	b.n	800a9ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d110      	bne.n	800a9d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9bc:	9202      	str	r2, [sp, #8]
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6a3a      	ldr	r2, [r7, #32]
 800a9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 fe0c 	bl	800b5e8 <xTaskCreateStatic>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	613b      	str	r3, [r7, #16]
 800a9d4:	e013      	b.n	800a9fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d110      	bne.n	800a9fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	f107 0310 	add.w	r3, r7, #16
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 fe57 	bl	800b6a2 <xTaskCreate>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d001      	beq.n	800a9fe <osThreadNew+0x11a>
            hTask = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a9fe:	693b      	ldr	r3, [r7, #16]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3728      	adds	r7, #40	; 0x28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa10:	f3ef 8305 	mrs	r3, IPSR
 800aa14:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <osDelay+0x1c>
    stat = osErrorISR;
 800aa1c:	f06f 0305 	mvn.w	r3, #5
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e007      	b.n	800aa34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 ff92 	bl	800b958 <vTaskDelay>
    }
  }

  return (stat);
 800aa34:	68fb      	ldr	r3, [r7, #12]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4a07      	ldr	r2, [pc, #28]	; (800aa6c <vApplicationGetIdleTaskMemory+0x2c>)
 800aa50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	4a06      	ldr	r2, [pc, #24]	; (800aa70 <vApplicationGetIdleTaskMemory+0x30>)
 800aa56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2280      	movs	r2, #128	; 0x80
 800aa5c:	601a      	str	r2, [r3, #0]
}
 800aa5e:	bf00      	nop
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20000490 	.word	0x20000490
 800aa70:	2000054c 	.word	0x2000054c

0800aa74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4a07      	ldr	r2, [pc, #28]	; (800aaa0 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	4a06      	ldr	r2, [pc, #24]	; (800aaa4 <vApplicationGetTimerTaskMemory+0x30>)
 800aa8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa92:	601a      	str	r2, [r3, #0]
}
 800aa94:	bf00      	nop
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	2000074c 	.word	0x2000074c
 800aaa4:	20000808 	.word	0x20000808

0800aaa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f103 0208 	add.w	r2, r3, #8
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f04f 32ff 	mov.w	r2, #4294967295
 800aac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f103 0208 	add.w	r2, r3, #8
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f103 0208 	add.w	r2, r3, #8
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b085      	sub	sp, #20
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab60:	d103      	bne.n	800ab6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	60fb      	str	r3, [r7, #12]
 800ab68:	e00c      	b.n	800ab84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	e002      	b.n	800ab78 <vListInsert+0x2e>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d2f6      	bcs.n	800ab72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	1c5a      	adds	r2, r3, #1
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	601a      	str	r2, [r3, #0]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	6892      	ldr	r2, [r2, #8]
 800abd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	6852      	ldr	r2, [r2, #4]
 800abdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d103      	bne.n	800abf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	1e5a      	subs	r2, r3, #1
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac3a:	f002 f87b 	bl	800cd34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac4a:	fb01 f303 	mul.w	r3, r1, r3
 800ac4e:	441a      	add	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	68f9      	ldr	r1, [r7, #12]
 800ac6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac70:	fb01 f303 	mul.w	r3, r1, r3
 800ac74:	441a      	add	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	22ff      	movs	r2, #255	; 0xff
 800ac7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	22ff      	movs	r2, #255	; 0xff
 800ac86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d114      	bne.n	800acba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d01a      	beq.n	800acce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	3310      	adds	r3, #16
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f001 f929 	bl	800bef4 <xTaskRemoveFromEventList>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d012      	beq.n	800acce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aca8:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <xQueueGenericReset+0xcc>)
 800acaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	e009      	b.n	800acce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3310      	adds	r3, #16
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fef2 	bl	800aaa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3324      	adds	r3, #36	; 0x24
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff feed 	bl	800aaa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acce:	f002 f861 	bl	800cd94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acd2:	2301      	movs	r3, #1
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08e      	sub	sp, #56	; 0x38
 800ace4:	af02      	add	r7, sp, #8
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10a      	bne.n	800ad0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad06:	bf00      	nop
 800ad08:	e7fe      	b.n	800ad08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10a      	bne.n	800ad26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <xQueueGenericCreateStatic+0x52>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <xQueueGenericCreateStatic+0x56>
 800ad32:	2301      	movs	r3, #1
 800ad34:	e000      	b.n	800ad38 <xQueueGenericCreateStatic+0x58>
 800ad36:	2300      	movs	r3, #0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	623b      	str	r3, [r7, #32]
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <xQueueGenericCreateStatic+0x7e>
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <xQueueGenericCreateStatic+0x82>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <xQueueGenericCreateStatic+0x84>
 800ad62:	2300      	movs	r3, #0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	61fb      	str	r3, [r7, #28]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad7e:	2350      	movs	r3, #80	; 0x50
 800ad80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b50      	cmp	r3, #80	; 0x50
 800ad86:	d00a      	beq.n	800ad9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	61bb      	str	r3, [r7, #24]
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00d      	beq.n	800adc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	2201      	movs	r2, #1
 800adae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	4613      	mov	r3, r2
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 f805 	bl	800add0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800adc8:	4618      	mov	r0, r3
 800adca:	3730      	adds	r7, #48	; 0x30
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	e002      	b.n	800adf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adfe:	2101      	movs	r1, #1
 800ae00:	69b8      	ldr	r0, [r7, #24]
 800ae02:	f7ff ff05 	bl	800ac10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	78fa      	ldrb	r2, [r7, #3]
 800ae0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae0e:	bf00      	nop
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08e      	sub	sp, #56	; 0x38
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae26:	2300      	movs	r3, #0
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <xQueueGenericSend+0x32>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d103      	bne.n	800ae58 <xQueueGenericSend+0x40>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <xQueueGenericSend+0x44>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e000      	b.n	800ae5e <xQueueGenericSend+0x46>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <xQueueGenericSend+0x60>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d103      	bne.n	800ae86 <xQueueGenericSend+0x6e>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d101      	bne.n	800ae8a <xQueueGenericSend+0x72>
 800ae86:	2301      	movs	r3, #1
 800ae88:	e000      	b.n	800ae8c <xQueueGenericSend+0x74>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xQueueGenericSend+0x8e>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	623b      	str	r3, [r7, #32]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aea6:	f001 f9e7 	bl	800c278 <xTaskGetSchedulerState>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <xQueueGenericSend+0x9e>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <xQueueGenericSend+0xa2>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e000      	b.n	800aebc <xQueueGenericSend+0xa4>
 800aeba:	2300      	movs	r3, #0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <xQueueGenericSend+0xbe>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	61fb      	str	r3, [r7, #28]
}
 800aed2:	bf00      	nop
 800aed4:	e7fe      	b.n	800aed4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aed6:	f001 ff2d 	bl	800cd34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d302      	bcc.n	800aeec <xQueueGenericSend+0xd4>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d129      	bne.n	800af40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	68b9      	ldr	r1, [r7, #8]
 800aef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef2:	f000 fa0b 	bl	800b30c <prvCopyDataToQueue>
 800aef6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d010      	beq.n	800af22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	3324      	adds	r3, #36	; 0x24
 800af04:	4618      	mov	r0, r3
 800af06:	f000 fff5 	bl	800bef4 <xTaskRemoveFromEventList>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d013      	beq.n	800af38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af10:	4b3f      	ldr	r3, [pc, #252]	; (800b010 <xQueueGenericSend+0x1f8>)
 800af12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	e00a      	b.n	800af38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d007      	beq.n	800af38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af28:	4b39      	ldr	r3, [pc, #228]	; (800b010 <xQueueGenericSend+0x1f8>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af38:	f001 ff2c 	bl	800cd94 <vPortExitCritical>
				return pdPASS;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e063      	b.n	800b008 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d103      	bne.n	800af4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af46:	f001 ff25 	bl	800cd94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	e05c      	b.n	800b008 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af54:	f107 0314 	add.w	r3, r7, #20
 800af58:	4618      	mov	r0, r3
 800af5a:	f001 f82f 	bl	800bfbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af5e:	2301      	movs	r3, #1
 800af60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af62:	f001 ff17 	bl	800cd94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af66:	f000 fd9b 	bl	800baa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af6a:	f001 fee3 	bl	800cd34 <vPortEnterCritical>
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af74:	b25b      	sxtb	r3, r3
 800af76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7a:	d103      	bne.n	800af84 <xQueueGenericSend+0x16c>
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af8a:	b25b      	sxtb	r3, r3
 800af8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af90:	d103      	bne.n	800af9a <xQueueGenericSend+0x182>
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af9a:	f001 fefb 	bl	800cd94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af9e:	1d3a      	adds	r2, r7, #4
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	4611      	mov	r1, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 f81e 	bl	800bfe8 <xTaskCheckForTimeOut>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d124      	bne.n	800affc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afb4:	f000 faa2 	bl	800b4fc <prvIsQueueFull>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d018      	beq.n	800aff0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	3310      	adds	r3, #16
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	4611      	mov	r1, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 ff44 	bl	800be54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afce:	f000 fa2d 	bl	800b42c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afd2:	f000 fd73 	bl	800babc <xTaskResumeAll>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f47f af7c 	bne.w	800aed6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800afde:	4b0c      	ldr	r3, [pc, #48]	; (800b010 <xQueueGenericSend+0x1f8>)
 800afe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	e772      	b.n	800aed6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aff2:	f000 fa1b 	bl	800b42c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aff6:	f000 fd61 	bl	800babc <xTaskResumeAll>
 800affa:	e76c      	b.n	800aed6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800affc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800affe:	f000 fa15 	bl	800b42c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b002:	f000 fd5b 	bl	800babc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3738      	adds	r7, #56	; 0x38
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	e000ed04 	.word	0xe000ed04

0800b014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b090      	sub	sp, #64	; 0x40
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10a      	bne.n	800b042 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <xQueueGenericSendFromISR+0x3c>
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <xQueueGenericSendFromISR+0x40>
 800b050:	2301      	movs	r3, #1
 800b052:	e000      	b.n	800b056 <xQueueGenericSendFromISR+0x42>
 800b054:	2300      	movs	r3, #0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b02      	cmp	r3, #2
 800b074:	d103      	bne.n	800b07e <xQueueGenericSendFromISR+0x6a>
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d101      	bne.n	800b082 <xQueueGenericSendFromISR+0x6e>
 800b07e:	2301      	movs	r3, #1
 800b080:	e000      	b.n	800b084 <xQueueGenericSendFromISR+0x70>
 800b082:	2300      	movs	r3, #0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	623b      	str	r3, [r7, #32]
}
 800b09a:	bf00      	nop
 800b09c:	e7fe      	b.n	800b09c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b09e:	f001 ff2b 	bl	800cef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	61fa      	str	r2, [r7, #28]
 800b0b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d302      	bcc.n	800b0d0 <xQueueGenericSendFromISR+0xbc>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d12f      	bne.n	800b130 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0e6:	f000 f911 	bl	800b30c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f2:	d112      	bne.n	800b11a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d016      	beq.n	800b12a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	3324      	adds	r3, #36	; 0x24
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fef7 	bl	800bef4 <xTaskRemoveFromEventList>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00b      	beq.n	800b12a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	e007      	b.n	800b12a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b11a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b11e:	3301      	adds	r3, #1
 800b120:	b2db      	uxtb	r3, r3
 800b122:	b25a      	sxtb	r2, r3
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b12a:	2301      	movs	r3, #1
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b12e:	e001      	b.n	800b134 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b130:	2300      	movs	r3, #0
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b136:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b13e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b142:	4618      	mov	r0, r3
 800b144:	3740      	adds	r7, #64	; 0x40
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08c      	sub	sp, #48	; 0x30
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b158:	2300      	movs	r3, #0
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <xQueueReceive+0x30>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	623b      	str	r3, [r7, #32]
}
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d103      	bne.n	800b18a <xQueueReceive+0x3e>
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <xQueueReceive+0x42>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e000      	b.n	800b190 <xQueueReceive+0x44>
 800b18e:	2300      	movs	r3, #0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10a      	bne.n	800b1aa <xQueueReceive+0x5e>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	61fb      	str	r3, [r7, #28]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1aa:	f001 f865 	bl	800c278 <xTaskGetSchedulerState>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d102      	bne.n	800b1ba <xQueueReceive+0x6e>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <xQueueReceive+0x72>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e000      	b.n	800b1c0 <xQueueReceive+0x74>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <xQueueReceive+0x8e>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	61bb      	str	r3, [r7, #24]
}
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1da:	f001 fdab 	bl	800cd34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d01f      	beq.n	800b22a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ee:	f000 f8f7 	bl	800b3e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	1e5a      	subs	r2, r3, #1
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00f      	beq.n	800b222 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	3310      	adds	r3, #16
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fe74 	bl	800bef4 <xTaskRemoveFromEventList>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d007      	beq.n	800b222 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b212:	4b3d      	ldr	r3, [pc, #244]	; (800b308 <xQueueReceive+0x1bc>)
 800b214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b222:	f001 fdb7 	bl	800cd94 <vPortExitCritical>
				return pdPASS;
 800b226:	2301      	movs	r3, #1
 800b228:	e069      	b.n	800b2fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d103      	bne.n	800b238 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b230:	f001 fdb0 	bl	800cd94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b234:	2300      	movs	r3, #0
 800b236:	e062      	b.n	800b2fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b23e:	f107 0310 	add.w	r3, r7, #16
 800b242:	4618      	mov	r0, r3
 800b244:	f000 feba 	bl	800bfbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b248:	2301      	movs	r3, #1
 800b24a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b24c:	f001 fda2 	bl	800cd94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b250:	f000 fc26 	bl	800baa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b254:	f001 fd6e 	bl	800cd34 <vPortEnterCritical>
 800b258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b25e:	b25b      	sxtb	r3, r3
 800b260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b264:	d103      	bne.n	800b26e <xQueueReceive+0x122>
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b274:	b25b      	sxtb	r3, r3
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27a:	d103      	bne.n	800b284 <xQueueReceive+0x138>
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b284:	f001 fd86 	bl	800cd94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b288:	1d3a      	adds	r2, r7, #4
 800b28a:	f107 0310 	add.w	r3, r7, #16
 800b28e:	4611      	mov	r1, r2
 800b290:	4618      	mov	r0, r3
 800b292:	f000 fea9 	bl	800bfe8 <xTaskCheckForTimeOut>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d123      	bne.n	800b2e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b29c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29e:	f000 f917 	bl	800b4d0 <prvIsQueueEmpty>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d017      	beq.n	800b2d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	3324      	adds	r3, #36	; 0x24
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 fdcf 	bl	800be54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b8:	f000 f8b8 	bl	800b42c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2bc:	f000 fbfe 	bl	800babc <xTaskResumeAll>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d189      	bne.n	800b1da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b2c6:	4b10      	ldr	r3, [pc, #64]	; (800b308 <xQueueReceive+0x1bc>)
 800b2c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	e780      	b.n	800b1da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2da:	f000 f8a7 	bl	800b42c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2de:	f000 fbed 	bl	800babc <xTaskResumeAll>
 800b2e2:	e77a      	b.n	800b1da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e6:	f000 f8a1 	bl	800b42c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ea:	f000 fbe7 	bl	800babc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f0:	f000 f8ee 	bl	800b4d0 <prvIsQueueEmpty>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f43f af6f 	beq.w	800b1da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3730      	adds	r7, #48	; 0x30
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10d      	bne.n	800b346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d14d      	bne.n	800b3ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	4618      	mov	r0, r3
 800b338:	f000 ffbc 	bl	800c2b4 <xTaskPriorityDisinherit>
 800b33c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	609a      	str	r2, [r3, #8]
 800b344:	e043      	b.n	800b3ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d119      	bne.n	800b380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6858      	ldr	r0, [r3, #4]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b354:	461a      	mov	r2, r3
 800b356:	68b9      	ldr	r1, [r7, #8]
 800b358:	f002 fd4a 	bl	800ddf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b364:	441a      	add	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	429a      	cmp	r2, r3
 800b374:	d32b      	bcc.n	800b3ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	e026      	b.n	800b3ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	68d8      	ldr	r0, [r3, #12]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b388:	461a      	mov	r2, r3
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	f002 fd30 	bl	800ddf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	68da      	ldr	r2, [r3, #12]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b398:	425b      	negs	r3, r3
 800b39a:	441a      	add	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d207      	bcs.n	800b3bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b4:	425b      	negs	r3, r3
 800b3b6:	441a      	add	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d105      	bne.n	800b3ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3d6:	697b      	ldr	r3, [r7, #20]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d018      	beq.n	800b424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68da      	ldr	r2, [r3, #12]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	441a      	add	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	68da      	ldr	r2, [r3, #12]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d303      	bcc.n	800b414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68d9      	ldr	r1, [r3, #12]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41c:	461a      	mov	r2, r3
 800b41e:	6838      	ldr	r0, [r7, #0]
 800b420:	f002 fce6 	bl	800ddf0 <memcpy>
	}
}
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b434:	f001 fc7e 	bl	800cd34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b43e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b440:	e011      	b.n	800b466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	2b00      	cmp	r3, #0
 800b448:	d012      	beq.n	800b470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3324      	adds	r3, #36	; 0x24
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 fd50 	bl	800bef4 <xTaskRemoveFromEventList>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b45a:	f000 fe27 	bl	800c0ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	3b01      	subs	r3, #1
 800b462:	b2db      	uxtb	r3, r3
 800b464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	dce9      	bgt.n	800b442 <prvUnlockQueue+0x16>
 800b46e:	e000      	b.n	800b472 <prvUnlockQueue+0x46>
					break;
 800b470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	22ff      	movs	r2, #255	; 0xff
 800b476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b47a:	f001 fc8b 	bl	800cd94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b47e:	f001 fc59 	bl	800cd34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b48a:	e011      	b.n	800b4b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d012      	beq.n	800b4ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	3310      	adds	r3, #16
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 fd2b 	bl	800bef4 <xTaskRemoveFromEventList>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4a4:	f000 fe02 	bl	800c0ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dce9      	bgt.n	800b48c <prvUnlockQueue+0x60>
 800b4b8:	e000      	b.n	800b4bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	22ff      	movs	r2, #255	; 0xff
 800b4c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4c4:	f001 fc66 	bl	800cd94 <vPortExitCritical>
}
 800b4c8:	bf00      	nop
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4d8:	f001 fc2c 	bl	800cd34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	e001      	b.n	800b4ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4ee:	f001 fc51 	bl	800cd94 <vPortExitCritical>

	return xReturn;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b504:	f001 fc16 	bl	800cd34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b510:	429a      	cmp	r2, r3
 800b512:	d102      	bne.n	800b51a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b514:	2301      	movs	r3, #1
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	e001      	b.n	800b51e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b51e:	f001 fc39 	bl	800cd94 <vPortExitCritical>

	return xReturn;
 800b522:	68fb      	ldr	r3, [r7, #12]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b536:	2300      	movs	r3, #0
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	e014      	b.n	800b566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b53c:	4a0f      	ldr	r2, [pc, #60]	; (800b57c <vQueueAddToRegistry+0x50>)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10b      	bne.n	800b560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b548:	490c      	ldr	r1, [pc, #48]	; (800b57c <vQueueAddToRegistry+0x50>)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b552:	4a0a      	ldr	r2, [pc, #40]	; (800b57c <vQueueAddToRegistry+0x50>)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	00db      	lsls	r3, r3, #3
 800b558:	4413      	add	r3, r2
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b55e:	e006      	b.n	800b56e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	3301      	adds	r3, #1
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b07      	cmp	r3, #7
 800b56a:	d9e7      	bls.n	800b53c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b56c:	bf00      	nop
 800b56e:	bf00      	nop
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20000c08 	.word	0x20000c08

0800b580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b590:	f001 fbd0 	bl	800cd34 <vPortEnterCritical>
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b59a:	b25b      	sxtb	r3, r3
 800b59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a0:	d103      	bne.n	800b5aa <vQueueWaitForMessageRestricted+0x2a>
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5b0:	b25b      	sxtb	r3, r3
 800b5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b6:	d103      	bne.n	800b5c0 <vQueueWaitForMessageRestricted+0x40>
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5c0:	f001 fbe8 	bl	800cd94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	3324      	adds	r3, #36	; 0x24
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f000 fc61 	bl	800be9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5da:	6978      	ldr	r0, [r7, #20]
 800b5dc:	f7ff ff26 	bl	800b42c <prvUnlockQueue>
	}
 800b5e0:	bf00      	nop
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08e      	sub	sp, #56	; 0x38
 800b5ec:	af04      	add	r7, sp, #16
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10a      	bne.n	800b612 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	623b      	str	r3, [r7, #32]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10a      	bne.n	800b62e <xTaskCreateStatic+0x46>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	61fb      	str	r3, [r7, #28]
}
 800b62a:	bf00      	nop
 800b62c:	e7fe      	b.n	800b62c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b62e:	23bc      	movs	r3, #188	; 0xbc
 800b630:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2bbc      	cmp	r3, #188	; 0xbc
 800b636:	d00a      	beq.n	800b64e <xTaskCreateStatic+0x66>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	61bb      	str	r3, [r7, #24]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b64e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	2b00      	cmp	r3, #0
 800b654:	d01e      	beq.n	800b694 <xTaskCreateStatic+0xac>
 800b656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d01b      	beq.n	800b694 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b664:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	2202      	movs	r2, #2
 800b66a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b66e:	2300      	movs	r3, #0
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	f107 0314 	add.w	r3, r7, #20
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	68b9      	ldr	r1, [r7, #8]
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 f850 	bl	800b72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b68c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b68e:	f000 f8f3 	bl	800b878 <prvAddNewTaskToReadyList>
 800b692:	e001      	b.n	800b698 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b694:	2300      	movs	r3, #0
 800b696:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b698:	697b      	ldr	r3, [r7, #20]
	}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3728      	adds	r7, #40	; 0x28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b08c      	sub	sp, #48	; 0x30
 800b6a6:	af04      	add	r7, sp, #16
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f001 fc5e 	bl	800cf78 <pvPortMalloc>
 800b6bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00e      	beq.n	800b6e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6c4:	20bc      	movs	r0, #188	; 0xbc
 800b6c6:	f001 fc57 	bl	800cf78 <pvPortMalloc>
 800b6ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	631a      	str	r2, [r3, #48]	; 0x30
 800b6d8:	e005      	b.n	800b6e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6da:	6978      	ldr	r0, [r7, #20]
 800b6dc:	f001 fd18 	bl	800d110 <vPortFree>
 800b6e0:	e001      	b.n	800b6e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d017      	beq.n	800b71c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6f4:	88fa      	ldrh	r2, [r7, #6]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	9302      	str	r3, [sp, #8]
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68b9      	ldr	r1, [r7, #8]
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f000 f80e 	bl	800b72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b710:	69f8      	ldr	r0, [r7, #28]
 800b712:	f000 f8b1 	bl	800b878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b716:	2301      	movs	r3, #1
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	e002      	b.n	800b722 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b71c:	f04f 33ff 	mov.w	r3, #4294967295
 800b720:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b722:	69bb      	ldr	r3, [r7, #24]
	}
 800b724:	4618      	mov	r0, r3
 800b726:	3720      	adds	r7, #32
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	461a      	mov	r2, r3
 800b744:	21a5      	movs	r1, #165	; 0xa5
 800b746:	f002 fb61 	bl	800de0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b754:	3b01      	subs	r3, #1
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	f023 0307 	bic.w	r3, r3, #7
 800b762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	f003 0307 	and.w	r3, r3, #7
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00a      	beq.n	800b784 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	617b      	str	r3, [r7, #20]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d01f      	beq.n	800b7ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b78a:	2300      	movs	r3, #0
 800b78c:	61fb      	str	r3, [r7, #28]
 800b78e:	e012      	b.n	800b7b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	4413      	add	r3, r2
 800b796:	7819      	ldrb	r1, [r3, #0]
 800b798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	4413      	add	r3, r2
 800b79e:	3334      	adds	r3, #52	; 0x34
 800b7a0:	460a      	mov	r2, r1
 800b7a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d006      	beq.n	800b7be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	61fb      	str	r3, [r7, #28]
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	2b0f      	cmp	r3, #15
 800b7ba:	d9e9      	bls.n	800b790 <prvInitialiseNewTask+0x64>
 800b7bc:	e000      	b.n	800b7c0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b7be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7c8:	e003      	b.n	800b7d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d4:	2b37      	cmp	r3, #55	; 0x37
 800b7d6:	d901      	bls.n	800b7dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7d8:	2337      	movs	r3, #55	; 0x37
 800b7da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff f978 	bl	800aae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	3318      	adds	r3, #24
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff f973 	bl	800aae8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b816:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	2200      	movs	r2, #0
 800b824:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	3354      	adds	r3, #84	; 0x54
 800b82c:	2260      	movs	r2, #96	; 0x60
 800b82e:	2100      	movs	r1, #0
 800b830:	4618      	mov	r0, r3
 800b832:	f002 faeb 	bl	800de0c <memset>
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	4a0c      	ldr	r2, [pc, #48]	; (800b86c <prvInitialiseNewTask+0x140>)
 800b83a:	659a      	str	r2, [r3, #88]	; 0x58
 800b83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83e:	4a0c      	ldr	r2, [pc, #48]	; (800b870 <prvInitialiseNewTask+0x144>)
 800b840:	65da      	str	r2, [r3, #92]	; 0x5c
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	4a0b      	ldr	r2, [pc, #44]	; (800b874 <prvInitialiseNewTask+0x148>)
 800b846:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	68f9      	ldr	r1, [r7, #12]
 800b84c:	69b8      	ldr	r0, [r7, #24]
 800b84e:	f001 f941 	bl	800cad4 <pxPortInitialiseStack>
 800b852:	4602      	mov	r2, r0
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b862:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b864:	bf00      	nop
 800b866:	3720      	adds	r7, #32
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	0801235c 	.word	0x0801235c
 800b870:	0801237c 	.word	0x0801237c
 800b874:	0801233c 	.word	0x0801233c

0800b878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b880:	f001 fa58 	bl	800cd34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b884:	4b2d      	ldr	r3, [pc, #180]	; (800b93c <prvAddNewTaskToReadyList+0xc4>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3301      	adds	r3, #1
 800b88a:	4a2c      	ldr	r2, [pc, #176]	; (800b93c <prvAddNewTaskToReadyList+0xc4>)
 800b88c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b88e:	4b2c      	ldr	r3, [pc, #176]	; (800b940 <prvAddNewTaskToReadyList+0xc8>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b896:	4a2a      	ldr	r2, [pc, #168]	; (800b940 <prvAddNewTaskToReadyList+0xc8>)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b89c:	4b27      	ldr	r3, [pc, #156]	; (800b93c <prvAddNewTaskToReadyList+0xc4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d110      	bne.n	800b8c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8a4:	f000 fc26 	bl	800c0f4 <prvInitialiseTaskLists>
 800b8a8:	e00d      	b.n	800b8c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b8aa:	4b26      	ldr	r3, [pc, #152]	; (800b944 <prvAddNewTaskToReadyList+0xcc>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d109      	bne.n	800b8c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8b2:	4b23      	ldr	r3, [pc, #140]	; (800b940 <prvAddNewTaskToReadyList+0xc8>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d802      	bhi.n	800b8c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8c0:	4a1f      	ldr	r2, [pc, #124]	; (800b940 <prvAddNewTaskToReadyList+0xc8>)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8c6:	4b20      	ldr	r3, [pc, #128]	; (800b948 <prvAddNewTaskToReadyList+0xd0>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	4a1e      	ldr	r2, [pc, #120]	; (800b948 <prvAddNewTaskToReadyList+0xd0>)
 800b8ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b8d0:	4b1d      	ldr	r3, [pc, #116]	; (800b948 <prvAddNewTaskToReadyList+0xd0>)
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8dc:	4b1b      	ldr	r3, [pc, #108]	; (800b94c <prvAddNewTaskToReadyList+0xd4>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d903      	bls.n	800b8ec <prvAddNewTaskToReadyList+0x74>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e8:	4a18      	ldr	r2, [pc, #96]	; (800b94c <prvAddNewTaskToReadyList+0xd4>)
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4a15      	ldr	r2, [pc, #84]	; (800b950 <prvAddNewTaskToReadyList+0xd8>)
 800b8fa:	441a      	add	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3304      	adds	r3, #4
 800b900:	4619      	mov	r1, r3
 800b902:	4610      	mov	r0, r2
 800b904:	f7ff f8fd 	bl	800ab02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b908:	f001 fa44 	bl	800cd94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b90c:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <prvAddNewTaskToReadyList+0xcc>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00e      	beq.n	800b932 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <prvAddNewTaskToReadyList+0xc8>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	429a      	cmp	r2, r3
 800b920:	d207      	bcs.n	800b932 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b922:	4b0c      	ldr	r3, [pc, #48]	; (800b954 <prvAddNewTaskToReadyList+0xdc>)
 800b924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000111c 	.word	0x2000111c
 800b940:	20000c48 	.word	0x20000c48
 800b944:	20001128 	.word	0x20001128
 800b948:	20001138 	.word	0x20001138
 800b94c:	20001124 	.word	0x20001124
 800b950:	20000c4c 	.word	0x20000c4c
 800b954:	e000ed04 	.word	0xe000ed04

0800b958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d017      	beq.n	800b99a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <vTaskDelay+0x60>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <vTaskDelay+0x30>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60bb      	str	r3, [r7, #8]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b988:	f000 f88a 	bl	800baa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b98c:	2100      	movs	r1, #0
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fcfe 	bl	800c390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b994:	f000 f892 	bl	800babc <xTaskResumeAll>
 800b998:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b9a0:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <vTaskDelay+0x64>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9b0:	bf00      	nop
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	20001144 	.word	0x20001144
 800b9bc:	e000ed04 	.word	0xe000ed04

0800b9c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08a      	sub	sp, #40	; 0x28
 800b9c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9ce:	463a      	mov	r2, r7
 800b9d0:	1d39      	adds	r1, r7, #4
 800b9d2:	f107 0308 	add.w	r3, r7, #8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff f832 	bl	800aa40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	9202      	str	r2, [sp, #8]
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	460a      	mov	r2, r1
 800b9ee:	4924      	ldr	r1, [pc, #144]	; (800ba80 <vTaskStartScheduler+0xc0>)
 800b9f0:	4824      	ldr	r0, [pc, #144]	; (800ba84 <vTaskStartScheduler+0xc4>)
 800b9f2:	f7ff fdf9 	bl	800b5e8 <xTaskCreateStatic>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4a23      	ldr	r2, [pc, #140]	; (800ba88 <vTaskStartScheduler+0xc8>)
 800b9fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b9fc:	4b22      	ldr	r3, [pc, #136]	; (800ba88 <vTaskStartScheduler+0xc8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	e001      	b.n	800ba0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d102      	bne.n	800ba1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba14:	f000 fd10 	bl	800c438 <xTimerCreateTimerTask>
 800ba18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d11b      	bne.n	800ba58 <vTaskStartScheduler+0x98>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	613b      	str	r3, [r7, #16]
}
 800ba32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba34:	4b15      	ldr	r3, [pc, #84]	; (800ba8c <vTaskStartScheduler+0xcc>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3354      	adds	r3, #84	; 0x54
 800ba3a:	4a15      	ldr	r2, [pc, #84]	; (800ba90 <vTaskStartScheduler+0xd0>)
 800ba3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba3e:	4b15      	ldr	r3, [pc, #84]	; (800ba94 <vTaskStartScheduler+0xd4>)
 800ba40:	f04f 32ff 	mov.w	r2, #4294967295
 800ba44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba46:	4b14      	ldr	r3, [pc, #80]	; (800ba98 <vTaskStartScheduler+0xd8>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba4c:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <vTaskStartScheduler+0xdc>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba52:	f001 f8cd 	bl	800cbf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba56:	e00e      	b.n	800ba76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5e:	d10a      	bne.n	800ba76 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <vTaskStartScheduler+0xb4>
}
 800ba76:	bf00      	nop
 800ba78:	3718      	adds	r7, #24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	0800e830 	.word	0x0800e830
 800ba84:	0800c0c5 	.word	0x0800c0c5
 800ba88:	20001140 	.word	0x20001140
 800ba8c:	20000c48 	.word	0x20000c48
 800ba90:	20000110 	.word	0x20000110
 800ba94:	2000113c 	.word	0x2000113c
 800ba98:	20001128 	.word	0x20001128
 800ba9c:	20001120 	.word	0x20001120

0800baa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800baa4:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <vTaskSuspendAll+0x18>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3301      	adds	r3, #1
 800baaa:	4a03      	ldr	r2, [pc, #12]	; (800bab8 <vTaskSuspendAll+0x18>)
 800baac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800baae:	bf00      	nop
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	20001144 	.word	0x20001144

0800babc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800baca:	4b42      	ldr	r3, [pc, #264]	; (800bbd4 <xTaskResumeAll+0x118>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <xTaskResumeAll+0x2c>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	603b      	str	r3, [r7, #0]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bae8:	f001 f924 	bl	800cd34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800baec:	4b39      	ldr	r3, [pc, #228]	; (800bbd4 <xTaskResumeAll+0x118>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	4a38      	ldr	r2, [pc, #224]	; (800bbd4 <xTaskResumeAll+0x118>)
 800baf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baf6:	4b37      	ldr	r3, [pc, #220]	; (800bbd4 <xTaskResumeAll+0x118>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d162      	bne.n	800bbc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bafe:	4b36      	ldr	r3, [pc, #216]	; (800bbd8 <xTaskResumeAll+0x11c>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d05e      	beq.n	800bbc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb06:	e02f      	b.n	800bb68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb08:	4b34      	ldr	r3, [pc, #208]	; (800bbdc <xTaskResumeAll+0x120>)
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	3318      	adds	r3, #24
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff f851 	bl	800abbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff f84c 	bl	800abbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb28:	4b2d      	ldr	r3, [pc, #180]	; (800bbe0 <xTaskResumeAll+0x124>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d903      	bls.n	800bb38 <xTaskResumeAll+0x7c>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb34:	4a2a      	ldr	r2, [pc, #168]	; (800bbe0 <xTaskResumeAll+0x124>)
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4a27      	ldr	r2, [pc, #156]	; (800bbe4 <xTaskResumeAll+0x128>)
 800bb46:	441a      	add	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f7fe ffd7 	bl	800ab02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb58:	4b23      	ldr	r3, [pc, #140]	; (800bbe8 <xTaskResumeAll+0x12c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d302      	bcc.n	800bb68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bb62:	4b22      	ldr	r3, [pc, #136]	; (800bbec <xTaskResumeAll+0x130>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb68:	4b1c      	ldr	r3, [pc, #112]	; (800bbdc <xTaskResumeAll+0x120>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1cb      	bne.n	800bb08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb76:	f000 fb5f 	bl	800c238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb7a:	4b1d      	ldr	r3, [pc, #116]	; (800bbf0 <xTaskResumeAll+0x134>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d010      	beq.n	800bba8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb86:	f000 f847 	bl	800bc18 <xTaskIncrementTick>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb90:	4b16      	ldr	r3, [pc, #88]	; (800bbec <xTaskResumeAll+0x130>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1f1      	bne.n	800bb86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bba2:	4b13      	ldr	r3, [pc, #76]	; (800bbf0 <xTaskResumeAll+0x134>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bba8:	4b10      	ldr	r3, [pc, #64]	; (800bbec <xTaskResumeAll+0x130>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d009      	beq.n	800bbc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bbb4:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <xTaskResumeAll+0x138>)
 800bbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbc4:	f001 f8e6 	bl	800cd94 <vPortExitCritical>

	return xAlreadyYielded;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20001144 	.word	0x20001144
 800bbd8:	2000111c 	.word	0x2000111c
 800bbdc:	200010dc 	.word	0x200010dc
 800bbe0:	20001124 	.word	0x20001124
 800bbe4:	20000c4c 	.word	0x20000c4c
 800bbe8:	20000c48 	.word	0x20000c48
 800bbec:	20001130 	.word	0x20001130
 800bbf0:	2000112c 	.word	0x2000112c
 800bbf4:	e000ed04 	.word	0xe000ed04

0800bbf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bbfe:	4b05      	ldr	r3, [pc, #20]	; (800bc14 <xTaskGetTickCount+0x1c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc04:	687b      	ldr	r3, [r7, #4]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20001120 	.word	0x20001120

0800bc18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc22:	4b4f      	ldr	r3, [pc, #316]	; (800bd60 <xTaskIncrementTick+0x148>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f040 808f 	bne.w	800bd4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc2c:	4b4d      	ldr	r3, [pc, #308]	; (800bd64 <xTaskIncrementTick+0x14c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3301      	adds	r3, #1
 800bc32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc34:	4a4b      	ldr	r2, [pc, #300]	; (800bd64 <xTaskIncrementTick+0x14c>)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d120      	bne.n	800bc82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc40:	4b49      	ldr	r3, [pc, #292]	; (800bd68 <xTaskIncrementTick+0x150>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00a      	beq.n	800bc60 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	603b      	str	r3, [r7, #0]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <xTaskIncrementTick+0x46>
 800bc60:	4b41      	ldr	r3, [pc, #260]	; (800bd68 <xTaskIncrementTick+0x150>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	4b41      	ldr	r3, [pc, #260]	; (800bd6c <xTaskIncrementTick+0x154>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a3f      	ldr	r2, [pc, #252]	; (800bd68 <xTaskIncrementTick+0x150>)
 800bc6c:	6013      	str	r3, [r2, #0]
 800bc6e:	4a3f      	ldr	r2, [pc, #252]	; (800bd6c <xTaskIncrementTick+0x154>)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	4b3e      	ldr	r3, [pc, #248]	; (800bd70 <xTaskIncrementTick+0x158>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	4a3d      	ldr	r2, [pc, #244]	; (800bd70 <xTaskIncrementTick+0x158>)
 800bc7c:	6013      	str	r3, [r2, #0]
 800bc7e:	f000 fadb 	bl	800c238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc82:	4b3c      	ldr	r3, [pc, #240]	; (800bd74 <xTaskIncrementTick+0x15c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d349      	bcc.n	800bd20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc8c:	4b36      	ldr	r3, [pc, #216]	; (800bd68 <xTaskIncrementTick+0x150>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d104      	bne.n	800bca0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc96:	4b37      	ldr	r3, [pc, #220]	; (800bd74 <xTaskIncrementTick+0x15c>)
 800bc98:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9c:	601a      	str	r2, [r3, #0]
					break;
 800bc9e:	e03f      	b.n	800bd20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca0:	4b31      	ldr	r3, [pc, #196]	; (800bd68 <xTaskIncrementTick+0x150>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d203      	bcs.n	800bcc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcb8:	4a2e      	ldr	r2, [pc, #184]	; (800bd74 <xTaskIncrementTick+0x15c>)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bcbe:	e02f      	b.n	800bd20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe ff79 	bl	800abbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d004      	beq.n	800bcdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	3318      	adds	r3, #24
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fe ff70 	bl	800abbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce0:	4b25      	ldr	r3, [pc, #148]	; (800bd78 <xTaskIncrementTick+0x160>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d903      	bls.n	800bcf0 <xTaskIncrementTick+0xd8>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	4a22      	ldr	r2, [pc, #136]	; (800bd78 <xTaskIncrementTick+0x160>)
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4a1f      	ldr	r2, [pc, #124]	; (800bd7c <xTaskIncrementTick+0x164>)
 800bcfe:	441a      	add	r2, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	3304      	adds	r3, #4
 800bd04:	4619      	mov	r1, r3
 800bd06:	4610      	mov	r0, r2
 800bd08:	f7fe fefb 	bl	800ab02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd10:	4b1b      	ldr	r3, [pc, #108]	; (800bd80 <xTaskIncrementTick+0x168>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d3b8      	bcc.n	800bc8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd1e:	e7b5      	b.n	800bc8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd20:	4b17      	ldr	r3, [pc, #92]	; (800bd80 <xTaskIncrementTick+0x168>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd26:	4915      	ldr	r1, [pc, #84]	; (800bd7c <xTaskIncrementTick+0x164>)
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	440b      	add	r3, r1
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d901      	bls.n	800bd3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd3c:	4b11      	ldr	r3, [pc, #68]	; (800bd84 <xTaskIncrementTick+0x16c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d007      	beq.n	800bd54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bd44:	2301      	movs	r3, #1
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	e004      	b.n	800bd54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd4a:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <xTaskIncrementTick+0x170>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	4a0d      	ldr	r2, [pc, #52]	; (800bd88 <xTaskIncrementTick+0x170>)
 800bd52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd54:	697b      	ldr	r3, [r7, #20]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20001144 	.word	0x20001144
 800bd64:	20001120 	.word	0x20001120
 800bd68:	200010d4 	.word	0x200010d4
 800bd6c:	200010d8 	.word	0x200010d8
 800bd70:	20001134 	.word	0x20001134
 800bd74:	2000113c 	.word	0x2000113c
 800bd78:	20001124 	.word	0x20001124
 800bd7c:	20000c4c 	.word	0x20000c4c
 800bd80:	20000c48 	.word	0x20000c48
 800bd84:	20001130 	.word	0x20001130
 800bd88:	2000112c 	.word	0x2000112c

0800bd8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd92:	4b2a      	ldr	r3, [pc, #168]	; (800be3c <vTaskSwitchContext+0xb0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd9a:	4b29      	ldr	r3, [pc, #164]	; (800be40 <vTaskSwitchContext+0xb4>)
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bda0:	e046      	b.n	800be30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bda2:	4b27      	ldr	r3, [pc, #156]	; (800be40 <vTaskSwitchContext+0xb4>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda8:	4b26      	ldr	r3, [pc, #152]	; (800be44 <vTaskSwitchContext+0xb8>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	e010      	b.n	800bdd2 <vTaskSwitchContext+0x46>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10a      	bne.n	800bdcc <vTaskSwitchContext+0x40>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	607b      	str	r3, [r7, #4]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <vTaskSwitchContext+0x3e>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	491d      	ldr	r1, [pc, #116]	; (800be48 <vTaskSwitchContext+0xbc>)
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4413      	add	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	440b      	add	r3, r1
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d0e4      	beq.n	800bdb0 <vTaskSwitchContext+0x24>
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4a15      	ldr	r2, [pc, #84]	; (800be48 <vTaskSwitchContext+0xbc>)
 800bdf2:	4413      	add	r3, r2
 800bdf4:	60bb      	str	r3, [r7, #8]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	605a      	str	r2, [r3, #4]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3308      	adds	r3, #8
 800be08:	429a      	cmp	r2, r3
 800be0a:	d104      	bne.n	800be16 <vTaskSwitchContext+0x8a>
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	605a      	str	r2, [r3, #4]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	4a0b      	ldr	r2, [pc, #44]	; (800be4c <vTaskSwitchContext+0xc0>)
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	4a08      	ldr	r2, [pc, #32]	; (800be44 <vTaskSwitchContext+0xb8>)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be26:	4b09      	ldr	r3, [pc, #36]	; (800be4c <vTaskSwitchContext+0xc0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3354      	adds	r3, #84	; 0x54
 800be2c:	4a08      	ldr	r2, [pc, #32]	; (800be50 <vTaskSwitchContext+0xc4>)
 800be2e:	6013      	str	r3, [r2, #0]
}
 800be30:	bf00      	nop
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20001144 	.word	0x20001144
 800be40:	20001130 	.word	0x20001130
 800be44:	20001124 	.word	0x20001124
 800be48:	20000c4c 	.word	0x20000c4c
 800be4c:	20000c48 	.word	0x20000c48
 800be50:	20000110 	.word	0x20000110

0800be54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10a      	bne.n	800be7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	60fb      	str	r3, [r7, #12]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be7a:	4b07      	ldr	r3, [pc, #28]	; (800be98 <vTaskPlaceOnEventList+0x44>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3318      	adds	r3, #24
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7fe fe61 	bl	800ab4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be88:	2101      	movs	r1, #1
 800be8a:	6838      	ldr	r0, [r7, #0]
 800be8c:	f000 fa80 	bl	800c390 <prvAddCurrentTaskToDelayedList>
}
 800be90:	bf00      	nop
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20000c48 	.word	0x20000c48

0800be9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10a      	bne.n	800bec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	617b      	str	r3, [r7, #20]
}
 800bec0:	bf00      	nop
 800bec2:	e7fe      	b.n	800bec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bec4:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3318      	adds	r3, #24
 800beca:	4619      	mov	r1, r3
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f7fe fe18 	bl	800ab02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bed8:	f04f 33ff 	mov.w	r3, #4294967295
 800bedc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	68b8      	ldr	r0, [r7, #8]
 800bee2:	f000 fa55 	bl	800c390 <prvAddCurrentTaskToDelayedList>
	}
 800bee6:	bf00      	nop
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20000c48 	.word	0x20000c48

0800bef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10a      	bne.n	800bf20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	60fb      	str	r3, [r7, #12]
}
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	3318      	adds	r3, #24
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fe49 	bl	800abbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf2a:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <xTaskRemoveFromEventList+0xb0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d11d      	bne.n	800bf6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	3304      	adds	r3, #4
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fe40 	bl	800abbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf40:	4b19      	ldr	r3, [pc, #100]	; (800bfa8 <xTaskRemoveFromEventList+0xb4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d903      	bls.n	800bf50 <xTaskRemoveFromEventList+0x5c>
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	4a16      	ldr	r2, [pc, #88]	; (800bfa8 <xTaskRemoveFromEventList+0xb4>)
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf54:	4613      	mov	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4a13      	ldr	r2, [pc, #76]	; (800bfac <xTaskRemoveFromEventList+0xb8>)
 800bf5e:	441a      	add	r2, r3
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4619      	mov	r1, r3
 800bf66:	4610      	mov	r0, r2
 800bf68:	f7fe fdcb 	bl	800ab02 <vListInsertEnd>
 800bf6c:	e005      	b.n	800bf7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	3318      	adds	r3, #24
 800bf72:	4619      	mov	r1, r3
 800bf74:	480e      	ldr	r0, [pc, #56]	; (800bfb0 <xTaskRemoveFromEventList+0xbc>)
 800bf76:	f7fe fdc4 	bl	800ab02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <xTaskRemoveFromEventList+0xc0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d905      	bls.n	800bf94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <xTaskRemoveFromEventList+0xc4>)
 800bf8e:	2201      	movs	r2, #1
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	e001      	b.n	800bf98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf94:	2300      	movs	r3, #0
 800bf96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf98:	697b      	ldr	r3, [r7, #20]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20001144 	.word	0x20001144
 800bfa8:	20001124 	.word	0x20001124
 800bfac:	20000c4c 	.word	0x20000c4c
 800bfb0:	200010dc 	.word	0x200010dc
 800bfb4:	20000c48 	.word	0x20000c48
 800bfb8:	20001130 	.word	0x20001130

0800bfbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfc4:	4b06      	ldr	r3, [pc, #24]	; (800bfe0 <vTaskInternalSetTimeOutState+0x24>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <vTaskInternalSetTimeOutState+0x28>)
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	605a      	str	r2, [r3, #4]
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	20001134 	.word	0x20001134
 800bfe4:	20001120 	.word	0x20001120

0800bfe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b088      	sub	sp, #32
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	613b      	str	r3, [r7, #16]
}
 800c00a:	bf00      	nop
 800c00c:	e7fe      	b.n	800c00c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10a      	bne.n	800c02a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	60fb      	str	r3, [r7, #12]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c02a:	f000 fe83 	bl	800cd34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c02e:	4b1d      	ldr	r3, [pc, #116]	; (800c0a4 <xTaskCheckForTimeOut+0xbc>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	d102      	bne.n	800c04e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c048:	2300      	movs	r3, #0
 800c04a:	61fb      	str	r3, [r7, #28]
 800c04c:	e023      	b.n	800c096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <xTaskCheckForTimeOut+0xc0>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d007      	beq.n	800c06a <xTaskCheckForTimeOut+0x82>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	429a      	cmp	r2, r3
 800c062:	d302      	bcc.n	800c06a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c064:	2301      	movs	r3, #1
 800c066:	61fb      	str	r3, [r7, #28]
 800c068:	e015      	b.n	800c096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	429a      	cmp	r2, r3
 800c072:	d20b      	bcs.n	800c08c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	1ad2      	subs	r2, r2, r3
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7ff ff9b 	bl	800bfbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c086:	2300      	movs	r3, #0
 800c088:	61fb      	str	r3, [r7, #28]
 800c08a:	e004      	b.n	800c096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2200      	movs	r2, #0
 800c090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c092:	2301      	movs	r3, #1
 800c094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c096:	f000 fe7d 	bl	800cd94 <vPortExitCritical>

	return xReturn;
 800c09a:	69fb      	ldr	r3, [r7, #28]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3720      	adds	r7, #32
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20001120 	.word	0x20001120
 800c0a8:	20001134 	.word	0x20001134

0800c0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0b0:	4b03      	ldr	r3, [pc, #12]	; (800c0c0 <vTaskMissedYield+0x14>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
}
 800c0b6:	bf00      	nop
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	20001130 	.word	0x20001130

0800c0c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0cc:	f000 f852 	bl	800c174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0d0:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <prvIdleTask+0x28>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d9f9      	bls.n	800c0cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0d8:	4b05      	ldr	r3, [pc, #20]	; (800c0f0 <prvIdleTask+0x2c>)
 800c0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0e8:	e7f0      	b.n	800c0cc <prvIdleTask+0x8>
 800c0ea:	bf00      	nop
 800c0ec:	20000c4c 	.word	0x20000c4c
 800c0f0:	e000ed04 	.word	0xe000ed04

0800c0f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	607b      	str	r3, [r7, #4]
 800c0fe:	e00c      	b.n	800c11a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4a12      	ldr	r2, [pc, #72]	; (800c154 <prvInitialiseTaskLists+0x60>)
 800c10c:	4413      	add	r3, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe fcca 	bl	800aaa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3301      	adds	r3, #1
 800c118:	607b      	str	r3, [r7, #4]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b37      	cmp	r3, #55	; 0x37
 800c11e:	d9ef      	bls.n	800c100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c120:	480d      	ldr	r0, [pc, #52]	; (800c158 <prvInitialiseTaskLists+0x64>)
 800c122:	f7fe fcc1 	bl	800aaa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c126:	480d      	ldr	r0, [pc, #52]	; (800c15c <prvInitialiseTaskLists+0x68>)
 800c128:	f7fe fcbe 	bl	800aaa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c12c:	480c      	ldr	r0, [pc, #48]	; (800c160 <prvInitialiseTaskLists+0x6c>)
 800c12e:	f7fe fcbb 	bl	800aaa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c132:	480c      	ldr	r0, [pc, #48]	; (800c164 <prvInitialiseTaskLists+0x70>)
 800c134:	f7fe fcb8 	bl	800aaa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c138:	480b      	ldr	r0, [pc, #44]	; (800c168 <prvInitialiseTaskLists+0x74>)
 800c13a:	f7fe fcb5 	bl	800aaa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c13e:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <prvInitialiseTaskLists+0x78>)
 800c140:	4a05      	ldr	r2, [pc, #20]	; (800c158 <prvInitialiseTaskLists+0x64>)
 800c142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c144:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <prvInitialiseTaskLists+0x7c>)
 800c146:	4a05      	ldr	r2, [pc, #20]	; (800c15c <prvInitialiseTaskLists+0x68>)
 800c148:	601a      	str	r2, [r3, #0]
}
 800c14a:	bf00      	nop
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	20000c4c 	.word	0x20000c4c
 800c158:	200010ac 	.word	0x200010ac
 800c15c:	200010c0 	.word	0x200010c0
 800c160:	200010dc 	.word	0x200010dc
 800c164:	200010f0 	.word	0x200010f0
 800c168:	20001108 	.word	0x20001108
 800c16c:	200010d4 	.word	0x200010d4
 800c170:	200010d8 	.word	0x200010d8

0800c174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c17a:	e019      	b.n	800c1b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c17c:	f000 fdda 	bl	800cd34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c180:	4b10      	ldr	r3, [pc, #64]	; (800c1c4 <prvCheckTasksWaitingTermination+0x50>)
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe fd15 	bl	800abbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c192:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <prvCheckTasksWaitingTermination+0x54>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3b01      	subs	r3, #1
 800c198:	4a0b      	ldr	r2, [pc, #44]	; (800c1c8 <prvCheckTasksWaitingTermination+0x54>)
 800c19a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c19c:	4b0b      	ldr	r3, [pc, #44]	; (800c1cc <prvCheckTasksWaitingTermination+0x58>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	4a0a      	ldr	r2, [pc, #40]	; (800c1cc <prvCheckTasksWaitingTermination+0x58>)
 800c1a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1a6:	f000 fdf5 	bl	800cd94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f810 	bl	800c1d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1b0:	4b06      	ldr	r3, [pc, #24]	; (800c1cc <prvCheckTasksWaitingTermination+0x58>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1e1      	bne.n	800c17c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1b8:	bf00      	nop
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	200010f0 	.word	0x200010f0
 800c1c8:	2000111c 	.word	0x2000111c
 800c1cc:	20001104 	.word	0x20001104

0800c1d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3354      	adds	r3, #84	; 0x54
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f001 febf 	bl	800df60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d108      	bne.n	800c1fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 ff8d 	bl	800d110 <vPortFree>
				vPortFree( pxTCB );
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 ff8a 	bl	800d110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1fc:	e018      	b.n	800c230 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c204:	2b01      	cmp	r3, #1
 800c206:	d103      	bne.n	800c210 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 ff81 	bl	800d110 <vPortFree>
	}
 800c20e:	e00f      	b.n	800c230 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c216:	2b02      	cmp	r3, #2
 800c218:	d00a      	beq.n	800c230 <prvDeleteTCB+0x60>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	60fb      	str	r3, [r7, #12]
}
 800c22c:	bf00      	nop
 800c22e:	e7fe      	b.n	800c22e <prvDeleteTCB+0x5e>
	}
 800c230:	bf00      	nop
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c23e:	4b0c      	ldr	r3, [pc, #48]	; (800c270 <prvResetNextTaskUnblockTime+0x38>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d104      	bne.n	800c252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c248:	4b0a      	ldr	r3, [pc, #40]	; (800c274 <prvResetNextTaskUnblockTime+0x3c>)
 800c24a:	f04f 32ff 	mov.w	r2, #4294967295
 800c24e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c250:	e008      	b.n	800c264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c252:	4b07      	ldr	r3, [pc, #28]	; (800c270 <prvResetNextTaskUnblockTime+0x38>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	4a04      	ldr	r2, [pc, #16]	; (800c274 <prvResetNextTaskUnblockTime+0x3c>)
 800c262:	6013      	str	r3, [r2, #0]
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr
 800c270:	200010d4 	.word	0x200010d4
 800c274:	2000113c 	.word	0x2000113c

0800c278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c27e:	4b0b      	ldr	r3, [pc, #44]	; (800c2ac <xTaskGetSchedulerState+0x34>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d102      	bne.n	800c28c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c286:	2301      	movs	r3, #1
 800c288:	607b      	str	r3, [r7, #4]
 800c28a:	e008      	b.n	800c29e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c28c:	4b08      	ldr	r3, [pc, #32]	; (800c2b0 <xTaskGetSchedulerState+0x38>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d102      	bne.n	800c29a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c294:	2302      	movs	r3, #2
 800c296:	607b      	str	r3, [r7, #4]
 800c298:	e001      	b.n	800c29e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c29a:	2300      	movs	r3, #0
 800c29c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c29e:	687b      	ldr	r3, [r7, #4]
	}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20001128 	.word	0x20001128
 800c2b0:	20001144 	.word	0x20001144

0800c2b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d056      	beq.n	800c378 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2ca:	4b2e      	ldr	r3, [pc, #184]	; (800c384 <xTaskPriorityDisinherit+0xd0>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d00a      	beq.n	800c2ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	60fb      	str	r3, [r7, #12]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10a      	bne.n	800c308 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	60bb      	str	r3, [r7, #8]
}
 800c304:	bf00      	nop
 800c306:	e7fe      	b.n	800c306 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c30c:	1e5a      	subs	r2, r3, #1
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d02c      	beq.n	800c378 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c322:	2b00      	cmp	r3, #0
 800c324:	d128      	bne.n	800c378 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	3304      	adds	r3, #4
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fc46 	bl	800abbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c348:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <xTaskPriorityDisinherit+0xd4>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d903      	bls.n	800c358 <xTaskPriorityDisinherit+0xa4>
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	4a0c      	ldr	r2, [pc, #48]	; (800c388 <xTaskPriorityDisinherit+0xd4>)
 800c356:	6013      	str	r3, [r2, #0]
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c35c:	4613      	mov	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4a09      	ldr	r2, [pc, #36]	; (800c38c <xTaskPriorityDisinherit+0xd8>)
 800c366:	441a      	add	r2, r3
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	3304      	adds	r3, #4
 800c36c:	4619      	mov	r1, r3
 800c36e:	4610      	mov	r0, r2
 800c370:	f7fe fbc7 	bl	800ab02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c374:	2301      	movs	r3, #1
 800c376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c378:	697b      	ldr	r3, [r7, #20]
	}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20000c48 	.word	0x20000c48
 800c388:	20001124 	.word	0x20001124
 800c38c:	20000c4c 	.word	0x20000c4c

0800c390 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c39a:	4b21      	ldr	r3, [pc, #132]	; (800c420 <prvAddCurrentTaskToDelayedList+0x90>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3a0:	4b20      	ldr	r3, [pc, #128]	; (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe fc08 	bl	800abbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b2:	d10a      	bne.n	800c3ca <prvAddCurrentTaskToDelayedList+0x3a>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d007      	beq.n	800c3ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ba:	4b1a      	ldr	r3, [pc, #104]	; (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4819      	ldr	r0, [pc, #100]	; (800c428 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3c4:	f7fe fb9d 	bl	800ab02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3c8:	e026      	b.n	800c418 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3d2:	4b14      	ldr	r3, [pc, #80]	; (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d209      	bcs.n	800c3f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3e2:	4b12      	ldr	r3, [pc, #72]	; (800c42c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	4b0f      	ldr	r3, [pc, #60]	; (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	f7fe fbab 	bl	800ab4a <vListInsert>
}
 800c3f4:	e010      	b.n	800c418 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3f6:	4b0e      	ldr	r3, [pc, #56]	; (800c430 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f7fe fba1 	bl	800ab4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c408:	4b0a      	ldr	r3, [pc, #40]	; (800c434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d202      	bcs.n	800c418 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c412:	4a08      	ldr	r2, [pc, #32]	; (800c434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	6013      	str	r3, [r2, #0]
}
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20001120 	.word	0x20001120
 800c424:	20000c48 	.word	0x20000c48
 800c428:	20001108 	.word	0x20001108
 800c42c:	200010d8 	.word	0x200010d8
 800c430:	200010d4 	.word	0x200010d4
 800c434:	2000113c 	.word	0x2000113c

0800c438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	; 0x28
 800c43c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c43e:	2300      	movs	r3, #0
 800c440:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c442:	f000 fb07 	bl	800ca54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c446:	4b1c      	ldr	r3, [pc, #112]	; (800c4b8 <xTimerCreateTimerTask+0x80>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d021      	beq.n	800c492 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c456:	1d3a      	adds	r2, r7, #4
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	f107 030c 	add.w	r3, r7, #12
 800c460:	4618      	mov	r0, r3
 800c462:	f7fe fb07 	bl	800aa74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	9202      	str	r2, [sp, #8]
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	2302      	movs	r3, #2
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	2300      	movs	r3, #0
 800c476:	460a      	mov	r2, r1
 800c478:	4910      	ldr	r1, [pc, #64]	; (800c4bc <xTimerCreateTimerTask+0x84>)
 800c47a:	4811      	ldr	r0, [pc, #68]	; (800c4c0 <xTimerCreateTimerTask+0x88>)
 800c47c:	f7ff f8b4 	bl	800b5e8 <xTaskCreateStatic>
 800c480:	4603      	mov	r3, r0
 800c482:	4a10      	ldr	r2, [pc, #64]	; (800c4c4 <xTimerCreateTimerTask+0x8c>)
 800c484:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c486:	4b0f      	ldr	r3, [pc, #60]	; (800c4c4 <xTimerCreateTimerTask+0x8c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d001      	beq.n	800c492 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c48e:	2301      	movs	r3, #1
 800c490:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10a      	bne.n	800c4ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	613b      	str	r3, [r7, #16]
}
 800c4aa:	bf00      	nop
 800c4ac:	e7fe      	b.n	800c4ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4ae:	697b      	ldr	r3, [r7, #20]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	20001178 	.word	0x20001178
 800c4bc:	0800e838 	.word	0x0800e838
 800c4c0:	0800c5fd 	.word	0x0800c5fd
 800c4c4:	2000117c 	.word	0x2000117c

0800c4c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08a      	sub	sp, #40	; 0x28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	623b      	str	r3, [r7, #32]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4f6:	4b1a      	ldr	r3, [pc, #104]	; (800c560 <xTimerGenericCommand+0x98>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d02a      	beq.n	800c554 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2b05      	cmp	r3, #5
 800c50e:	dc18      	bgt.n	800c542 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c510:	f7ff feb2 	bl	800c278 <xTaskGetSchedulerState>
 800c514:	4603      	mov	r3, r0
 800c516:	2b02      	cmp	r3, #2
 800c518:	d109      	bne.n	800c52e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c51a:	4b11      	ldr	r3, [pc, #68]	; (800c560 <xTimerGenericCommand+0x98>)
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	f107 0110 	add.w	r1, r7, #16
 800c522:	2300      	movs	r3, #0
 800c524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c526:	f7fe fc77 	bl	800ae18 <xQueueGenericSend>
 800c52a:	6278      	str	r0, [r7, #36]	; 0x24
 800c52c:	e012      	b.n	800c554 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c52e:	4b0c      	ldr	r3, [pc, #48]	; (800c560 <xTimerGenericCommand+0x98>)
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	f107 0110 	add.w	r1, r7, #16
 800c536:	2300      	movs	r3, #0
 800c538:	2200      	movs	r2, #0
 800c53a:	f7fe fc6d 	bl	800ae18 <xQueueGenericSend>
 800c53e:	6278      	str	r0, [r7, #36]	; 0x24
 800c540:	e008      	b.n	800c554 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c542:	4b07      	ldr	r3, [pc, #28]	; (800c560 <xTimerGenericCommand+0x98>)
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	f107 0110 	add.w	r1, r7, #16
 800c54a:	2300      	movs	r3, #0
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	f7fe fd61 	bl	800b014 <xQueueGenericSendFromISR>
 800c552:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c556:	4618      	mov	r0, r3
 800c558:	3728      	adds	r7, #40	; 0x28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	20001178 	.word	0x20001178

0800c564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af02      	add	r7, sp, #8
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c56e:	4b22      	ldr	r3, [pc, #136]	; (800c5f8 <prvProcessExpiredTimer+0x94>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	3304      	adds	r3, #4
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fe fb1d 	bl	800abbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d022      	beq.n	800c5d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	699a      	ldr	r2, [r3, #24]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	18d1      	adds	r1, r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	6978      	ldr	r0, [r7, #20]
 800c59e:	f000 f8d1 	bl	800c744 <prvInsertTimerInActiveList>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01f      	beq.n	800c5e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6978      	ldr	r0, [r7, #20]
 800c5b4:	f7ff ff88 	bl	800c4c8 <xTimerGenericCommand>
 800c5b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d113      	bne.n	800c5e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	60fb      	str	r3, [r7, #12]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5dc:	f023 0301 	bic.w	r3, r3, #1
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	6a1b      	ldr	r3, [r3, #32]
 800c5ec:	6978      	ldr	r0, [r7, #20]
 800c5ee:	4798      	blx	r3
}
 800c5f0:	bf00      	nop
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	20001170 	.word	0x20001170

0800c5fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 f857 	bl	800c6bc <prvGetNextExpireTime>
 800c60e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	4619      	mov	r1, r3
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 f803 	bl	800c620 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c61a:	f000 f8d5 	bl	800c7c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c61e:	e7f1      	b.n	800c604 <prvTimerTask+0x8>

0800c620 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c62a:	f7ff fa39 	bl	800baa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c62e:	f107 0308 	add.w	r3, r7, #8
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f866 	bl	800c704 <prvSampleTimeNow>
 800c638:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d130      	bne.n	800c6a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <prvProcessTimerOrBlockTask+0x3c>
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d806      	bhi.n	800c65c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c64e:	f7ff fa35 	bl	800babc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c652:	68f9      	ldr	r1, [r7, #12]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff ff85 	bl	800c564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c65a:	e024      	b.n	800c6a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d008      	beq.n	800c674 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c662:	4b13      	ldr	r3, [pc, #76]	; (800c6b0 <prvProcessTimerOrBlockTask+0x90>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <prvProcessTimerOrBlockTask+0x50>
 800c66c:	2301      	movs	r3, #1
 800c66e:	e000      	b.n	800c672 <prvProcessTimerOrBlockTask+0x52>
 800c670:	2300      	movs	r3, #0
 800c672:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c674:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <prvProcessTimerOrBlockTask+0x94>)
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	683a      	ldr	r2, [r7, #0]
 800c680:	4619      	mov	r1, r3
 800c682:	f7fe ff7d 	bl	800b580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c686:	f7ff fa19 	bl	800babc <xTaskResumeAll>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10a      	bne.n	800c6a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c690:	4b09      	ldr	r3, [pc, #36]	; (800c6b8 <prvProcessTimerOrBlockTask+0x98>)
 800c692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
}
 800c6a0:	e001      	b.n	800c6a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6a2:	f7ff fa0b 	bl	800babc <xTaskResumeAll>
}
 800c6a6:	bf00      	nop
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20001174 	.word	0x20001174
 800c6b4:	20001178 	.word	0x20001178
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6c4:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <prvGetNextExpireTime+0x44>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <prvGetNextExpireTime+0x16>
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	e000      	b.n	800c6d4 <prvGetNextExpireTime+0x18>
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d105      	bne.n	800c6ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <prvGetNextExpireTime+0x44>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	60fb      	str	r3, [r7, #12]
 800c6ea:	e001      	b.n	800c6f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	20001170 	.word	0x20001170

0800c704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c70c:	f7ff fa74 	bl	800bbf8 <xTaskGetTickCount>
 800c710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c712:	4b0b      	ldr	r3, [pc, #44]	; (800c740 <prvSampleTimeNow+0x3c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d205      	bcs.n	800c728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c71c:	f000 f936 	bl	800c98c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	601a      	str	r2, [r3, #0]
 800c726:	e002      	b.n	800c72e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c72e:	4a04      	ldr	r2, [pc, #16]	; (800c740 <prvSampleTimeNow+0x3c>)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c734:	68fb      	ldr	r3, [r7, #12]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20001180 	.word	0x20001180

0800c744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68fa      	ldr	r2, [r7, #12]
 800c760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	429a      	cmp	r2, r3
 800c768:	d812      	bhi.n	800c790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	1ad2      	subs	r2, r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	429a      	cmp	r2, r3
 800c776:	d302      	bcc.n	800c77e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c778:	2301      	movs	r3, #1
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	e01b      	b.n	800c7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c77e:	4b10      	ldr	r3, [pc, #64]	; (800c7c0 <prvInsertTimerInActiveList+0x7c>)
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3304      	adds	r3, #4
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f7fe f9de 	bl	800ab4a <vListInsert>
 800c78e:	e012      	b.n	800c7b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	429a      	cmp	r2, r3
 800c796:	d206      	bcs.n	800c7a6 <prvInsertTimerInActiveList+0x62>
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d302      	bcc.n	800c7a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	617b      	str	r3, [r7, #20]
 800c7a4:	e007      	b.n	800c7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7a6:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <prvInsertTimerInActiveList+0x80>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	f7fe f9ca 	bl	800ab4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7b6:	697b      	ldr	r3, [r7, #20]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	20001174 	.word	0x20001174
 800c7c4:	20001170 	.word	0x20001170

0800c7c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08e      	sub	sp, #56	; 0x38
 800c7cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ce:	e0ca      	b.n	800c966 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	da18      	bge.n	800c808 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7d6:	1d3b      	adds	r3, r7, #4
 800c7d8:	3304      	adds	r3, #4
 800c7da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	61fb      	str	r3, [r7, #28]
}
 800c7f4:	bf00      	nop
 800c7f6:	e7fe      	b.n	800c7f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7fe:	6850      	ldr	r0, [r2, #4]
 800c800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c802:	6892      	ldr	r2, [r2, #8]
 800c804:	4611      	mov	r1, r2
 800c806:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f2c0 80aa 	blt.w	800c964 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	695b      	ldr	r3, [r3, #20]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d004      	beq.n	800c826 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	3304      	adds	r3, #4
 800c820:	4618      	mov	r0, r3
 800c822:	f7fe f9cb 	bl	800abbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c826:	463b      	mov	r3, r7
 800c828:	4618      	mov	r0, r3
 800c82a:	f7ff ff6b 	bl	800c704 <prvSampleTimeNow>
 800c82e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b09      	cmp	r3, #9
 800c834:	f200 8097 	bhi.w	800c966 <prvProcessReceivedCommands+0x19e>
 800c838:	a201      	add	r2, pc, #4	; (adr r2, 800c840 <prvProcessReceivedCommands+0x78>)
 800c83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83e:	bf00      	nop
 800c840:	0800c869 	.word	0x0800c869
 800c844:	0800c869 	.word	0x0800c869
 800c848:	0800c869 	.word	0x0800c869
 800c84c:	0800c8dd 	.word	0x0800c8dd
 800c850:	0800c8f1 	.word	0x0800c8f1
 800c854:	0800c93b 	.word	0x0800c93b
 800c858:	0800c869 	.word	0x0800c869
 800c85c:	0800c869 	.word	0x0800c869
 800c860:	0800c8dd 	.word	0x0800c8dd
 800c864:	0800c8f1 	.word	0x0800c8f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	18d1      	adds	r1, r2, r3
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c888:	f7ff ff5c 	bl	800c744 <prvInsertTimerInActiveList>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d069      	beq.n	800c966 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c898:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d05e      	beq.n	800c966 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	699b      	ldr	r3, [r3, #24]
 800c8ae:	441a      	add	r2, r3
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ba:	f7ff fe05 	bl	800c4c8 <xTimerGenericCommand>
 800c8be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d14f      	bne.n	800c966 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	61bb      	str	r3, [r7, #24]
}
 800c8d8:	bf00      	nop
 800c8da:	e7fe      	b.n	800c8da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8e2:	f023 0301 	bic.w	r3, r3, #1
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c8ee:	e03a      	b.n	800c966 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8f6:	f043 0301 	orr.w	r3, r3, #1
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10a      	bne.n	800c926 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	617b      	str	r3, [r7, #20]
}
 800c922:	bf00      	nop
 800c924:	e7fe      	b.n	800c924 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	699a      	ldr	r2, [r3, #24]
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	18d1      	adds	r1, r2, r3
 800c92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c934:	f7ff ff06 	bl	800c744 <prvInsertTimerInActiveList>
					break;
 800c938:	e015      	b.n	800c966 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c940:	f003 0302 	and.w	r3, r3, #2
 800c944:	2b00      	cmp	r3, #0
 800c946:	d103      	bne.n	800c950 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c94a:	f000 fbe1 	bl	800d110 <vPortFree>
 800c94e:	e00a      	b.n	800c966 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c956:	f023 0301 	bic.w	r3, r3, #1
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c962:	e000      	b.n	800c966 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c964:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c966:	4b08      	ldr	r3, [pc, #32]	; (800c988 <prvProcessReceivedCommands+0x1c0>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	1d39      	adds	r1, r7, #4
 800c96c:	2200      	movs	r2, #0
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fbec 	bl	800b14c <xQueueReceive>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	f47f af2a 	bne.w	800c7d0 <prvProcessReceivedCommands+0x8>
	}
}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	3730      	adds	r7, #48	; 0x30
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20001178 	.word	0x20001178

0800c98c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c992:	e048      	b.n	800ca26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c994:	4b2d      	ldr	r3, [pc, #180]	; (800ca4c <prvSwitchTimerLists+0xc0>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c99e:	4b2b      	ldr	r3, [pc, #172]	; (800ca4c <prvSwitchTimerLists+0xc0>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fe f905 	bl	800abbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6a1b      	ldr	r3, [r3, #32]
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9c0:	f003 0304 	and.w	r3, r3, #4
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d02e      	beq.n	800ca26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	699b      	ldr	r3, [r3, #24]
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d90e      	bls.n	800c9f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9e6:	4b19      	ldr	r3, [pc, #100]	; (800ca4c <prvSwitchTimerLists+0xc0>)
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	f7fe f8aa 	bl	800ab4a <vListInsert>
 800c9f6:	e016      	b.n	800ca26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	2100      	movs	r1, #0
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f7ff fd60 	bl	800c4c8 <xTimerGenericCommand>
 800ca08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10a      	bne.n	800ca26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	603b      	str	r3, [r7, #0]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca26:	4b09      	ldr	r3, [pc, #36]	; (800ca4c <prvSwitchTimerLists+0xc0>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1b1      	bne.n	800c994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca30:	4b06      	ldr	r3, [pc, #24]	; (800ca4c <prvSwitchTimerLists+0xc0>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca36:	4b06      	ldr	r3, [pc, #24]	; (800ca50 <prvSwitchTimerLists+0xc4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a04      	ldr	r2, [pc, #16]	; (800ca4c <prvSwitchTimerLists+0xc0>)
 800ca3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca3e:	4a04      	ldr	r2, [pc, #16]	; (800ca50 <prvSwitchTimerLists+0xc4>)
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	6013      	str	r3, [r2, #0]
}
 800ca44:	bf00      	nop
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20001170 	.word	0x20001170
 800ca50:	20001174 	.word	0x20001174

0800ca54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca5a:	f000 f96b 	bl	800cd34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca5e:	4b15      	ldr	r3, [pc, #84]	; (800cab4 <prvCheckForValidListAndQueue+0x60>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d120      	bne.n	800caa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca66:	4814      	ldr	r0, [pc, #80]	; (800cab8 <prvCheckForValidListAndQueue+0x64>)
 800ca68:	f7fe f81e 	bl	800aaa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca6c:	4813      	ldr	r0, [pc, #76]	; (800cabc <prvCheckForValidListAndQueue+0x68>)
 800ca6e:	f7fe f81b 	bl	800aaa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca72:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <prvCheckForValidListAndQueue+0x6c>)
 800ca74:	4a10      	ldr	r2, [pc, #64]	; (800cab8 <prvCheckForValidListAndQueue+0x64>)
 800ca76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca78:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <prvCheckForValidListAndQueue+0x70>)
 800ca7a:	4a10      	ldr	r2, [pc, #64]	; (800cabc <prvCheckForValidListAndQueue+0x68>)
 800ca7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca7e:	2300      	movs	r3, #0
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	4b11      	ldr	r3, [pc, #68]	; (800cac8 <prvCheckForValidListAndQueue+0x74>)
 800ca84:	4a11      	ldr	r2, [pc, #68]	; (800cacc <prvCheckForValidListAndQueue+0x78>)
 800ca86:	2110      	movs	r1, #16
 800ca88:	200a      	movs	r0, #10
 800ca8a:	f7fe f929 	bl	800ace0 <xQueueGenericCreateStatic>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	4a08      	ldr	r2, [pc, #32]	; (800cab4 <prvCheckForValidListAndQueue+0x60>)
 800ca92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca94:	4b07      	ldr	r3, [pc, #28]	; (800cab4 <prvCheckForValidListAndQueue+0x60>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d005      	beq.n	800caa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca9c:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <prvCheckForValidListAndQueue+0x60>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	490b      	ldr	r1, [pc, #44]	; (800cad0 <prvCheckForValidListAndQueue+0x7c>)
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fd42 	bl	800b52c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800caa8:	f000 f974 	bl	800cd94 <vPortExitCritical>
}
 800caac:	bf00      	nop
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20001178 	.word	0x20001178
 800cab8:	20001148 	.word	0x20001148
 800cabc:	2000115c 	.word	0x2000115c
 800cac0:	20001170 	.word	0x20001170
 800cac4:	20001174 	.word	0x20001174
 800cac8:	20001224 	.word	0x20001224
 800cacc:	20001184 	.word	0x20001184
 800cad0:	0800e840 	.word	0x0800e840

0800cad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	3b04      	subs	r3, #4
 800cae4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800caec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3b04      	subs	r3, #4
 800caf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	f023 0201 	bic.w	r2, r3, #1
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3b04      	subs	r3, #4
 800cb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb04:	4a0c      	ldr	r2, [pc, #48]	; (800cb38 <pxPortInitialiseStack+0x64>)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	3b14      	subs	r3, #20
 800cb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3b04      	subs	r3, #4
 800cb1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f06f 0202 	mvn.w	r2, #2
 800cb22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	3b20      	subs	r3, #32
 800cb28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	0800cb3d 	.word	0x0800cb3d

0800cb3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b085      	sub	sp, #20
 800cb40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb46:	4b12      	ldr	r3, [pc, #72]	; (800cb90 <prvTaskExitError+0x54>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4e:	d00a      	beq.n	800cb66 <prvTaskExitError+0x2a>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	60fb      	str	r3, [r7, #12]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <prvTaskExitError+0x28>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	60bb      	str	r3, [r7, #8]
}
 800cb78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb7a:	bf00      	nop
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0fc      	beq.n	800cb7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb82:	bf00      	nop
 800cb84:	bf00      	nop
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	200000a8 	.word	0x200000a8
	...

0800cba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cba0:	4b07      	ldr	r3, [pc, #28]	; (800cbc0 <pxCurrentTCBConst2>)
 800cba2:	6819      	ldr	r1, [r3, #0]
 800cba4:	6808      	ldr	r0, [r1, #0]
 800cba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbaa:	f380 8809 	msr	PSP, r0
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f04f 0000 	mov.w	r0, #0
 800cbb6:	f380 8811 	msr	BASEPRI, r0
 800cbba:	4770      	bx	lr
 800cbbc:	f3af 8000 	nop.w

0800cbc0 <pxCurrentTCBConst2>:
 800cbc0:	20000c48 	.word	0x20000c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbc4:	bf00      	nop
 800cbc6:	bf00      	nop

0800cbc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbc8:	4808      	ldr	r0, [pc, #32]	; (800cbec <prvPortStartFirstTask+0x24>)
 800cbca:	6800      	ldr	r0, [r0, #0]
 800cbcc:	6800      	ldr	r0, [r0, #0]
 800cbce:	f380 8808 	msr	MSP, r0
 800cbd2:	f04f 0000 	mov.w	r0, #0
 800cbd6:	f380 8814 	msr	CONTROL, r0
 800cbda:	b662      	cpsie	i
 800cbdc:	b661      	cpsie	f
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	df00      	svc	0
 800cbe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbea:	bf00      	nop
 800cbec:	e000ed08 	.word	0xe000ed08

0800cbf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cbf6:	4b46      	ldr	r3, [pc, #280]	; (800cd10 <xPortStartScheduler+0x120>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a46      	ldr	r2, [pc, #280]	; (800cd14 <xPortStartScheduler+0x124>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d10a      	bne.n	800cc16 <xPortStartScheduler+0x26>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	f383 8811 	msr	BASEPRI, r3
 800cc08:	f3bf 8f6f 	isb	sy
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	613b      	str	r3, [r7, #16]
}
 800cc12:	bf00      	nop
 800cc14:	e7fe      	b.n	800cc14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc16:	4b3e      	ldr	r3, [pc, #248]	; (800cd10 <xPortStartScheduler+0x120>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a3f      	ldr	r2, [pc, #252]	; (800cd18 <xPortStartScheduler+0x128>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d10a      	bne.n	800cc36 <xPortStartScheduler+0x46>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	60fb      	str	r3, [r7, #12]
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc36:	4b39      	ldr	r3, [pc, #228]	; (800cd1c <xPortStartScheduler+0x12c>)
 800cc38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	22ff      	movs	r2, #255	; 0xff
 800cc46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc50:	78fb      	ldrb	r3, [r7, #3]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc58:	b2da      	uxtb	r2, r3
 800cc5a:	4b31      	ldr	r3, [pc, #196]	; (800cd20 <xPortStartScheduler+0x130>)
 800cc5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc5e:	4b31      	ldr	r3, [pc, #196]	; (800cd24 <xPortStartScheduler+0x134>)
 800cc60:	2207      	movs	r2, #7
 800cc62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc64:	e009      	b.n	800cc7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc66:	4b2f      	ldr	r3, [pc, #188]	; (800cd24 <xPortStartScheduler+0x134>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	4a2d      	ldr	r2, [pc, #180]	; (800cd24 <xPortStartScheduler+0x134>)
 800cc6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc70:	78fb      	ldrb	r3, [r7, #3]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc7a:	78fb      	ldrb	r3, [r7, #3]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc82:	2b80      	cmp	r3, #128	; 0x80
 800cc84:	d0ef      	beq.n	800cc66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc86:	4b27      	ldr	r3, [pc, #156]	; (800cd24 <xPortStartScheduler+0x134>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f1c3 0307 	rsb	r3, r3, #7
 800cc8e:	2b04      	cmp	r3, #4
 800cc90:	d00a      	beq.n	800cca8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	60bb      	str	r3, [r7, #8]
}
 800cca4:	bf00      	nop
 800cca6:	e7fe      	b.n	800cca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cca8:	4b1e      	ldr	r3, [pc, #120]	; (800cd24 <xPortStartScheduler+0x134>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	4a1d      	ldr	r2, [pc, #116]	; (800cd24 <xPortStartScheduler+0x134>)
 800ccb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccb2:	4b1c      	ldr	r3, [pc, #112]	; (800cd24 <xPortStartScheduler+0x134>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccba:	4a1a      	ldr	r2, [pc, #104]	; (800cd24 <xPortStartScheduler+0x134>)
 800ccbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccc6:	4b18      	ldr	r3, [pc, #96]	; (800cd28 <xPortStartScheduler+0x138>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a17      	ldr	r2, [pc, #92]	; (800cd28 <xPortStartScheduler+0x138>)
 800cccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccd2:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <xPortStartScheduler+0x138>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a14      	ldr	r2, [pc, #80]	; (800cd28 <xPortStartScheduler+0x138>)
 800ccd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccde:	f000 f8dd 	bl	800ce9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cce2:	4b12      	ldr	r3, [pc, #72]	; (800cd2c <xPortStartScheduler+0x13c>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cce8:	f000 f8fc 	bl	800cee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccec:	4b10      	ldr	r3, [pc, #64]	; (800cd30 <xPortStartScheduler+0x140>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a0f      	ldr	r2, [pc, #60]	; (800cd30 <xPortStartScheduler+0x140>)
 800ccf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ccf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ccf8:	f7ff ff66 	bl	800cbc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ccfc:	f7ff f846 	bl	800bd8c <vTaskSwitchContext>
	prvTaskExitError();
 800cd00:	f7ff ff1c 	bl	800cb3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3718      	adds	r7, #24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	e000ed00 	.word	0xe000ed00
 800cd14:	410fc271 	.word	0x410fc271
 800cd18:	410fc270 	.word	0x410fc270
 800cd1c:	e000e400 	.word	0xe000e400
 800cd20:	20001274 	.word	0x20001274
 800cd24:	20001278 	.word	0x20001278
 800cd28:	e000ed20 	.word	0xe000ed20
 800cd2c:	200000a8 	.word	0x200000a8
 800cd30:	e000ef34 	.word	0xe000ef34

0800cd34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	607b      	str	r3, [r7, #4]
}
 800cd4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd4e:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <vPortEnterCritical+0x58>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3301      	adds	r3, #1
 800cd54:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <vPortEnterCritical+0x58>)
 800cd56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd58:	4b0c      	ldr	r3, [pc, #48]	; (800cd8c <vPortEnterCritical+0x58>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d10f      	bne.n	800cd80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd60:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <vPortEnterCritical+0x5c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00a      	beq.n	800cd80 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	603b      	str	r3, [r7, #0]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <vPortEnterCritical+0x4a>
	}
}
 800cd80:	bf00      	nop
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	200000a8 	.word	0x200000a8
 800cd90:	e000ed04 	.word	0xe000ed04

0800cd94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd9a:	4b12      	ldr	r3, [pc, #72]	; (800cde4 <vPortExitCritical+0x50>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10a      	bne.n	800cdb8 <vPortExitCritical+0x24>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	607b      	str	r3, [r7, #4]
}
 800cdb4:	bf00      	nop
 800cdb6:	e7fe      	b.n	800cdb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdb8:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <vPortExitCritical+0x50>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	4a09      	ldr	r2, [pc, #36]	; (800cde4 <vPortExitCritical+0x50>)
 800cdc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdc2:	4b08      	ldr	r3, [pc, #32]	; (800cde4 <vPortExitCritical+0x50>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d105      	bne.n	800cdd6 <vPortExitCritical+0x42>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	f383 8811 	msr	BASEPRI, r3
}
 800cdd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdd6:	bf00      	nop
 800cdd8:	370c      	adds	r7, #12
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	200000a8 	.word	0x200000a8
	...

0800cdf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdf0:	f3ef 8009 	mrs	r0, PSP
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <pxCurrentTCBConst>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	f01e 0f10 	tst.w	lr, #16
 800ce00:	bf08      	it	eq
 800ce02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0a:	6010      	str	r0, [r2, #0]
 800ce0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce14:	f380 8811 	msr	BASEPRI, r0
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f7fe ffb4 	bl	800bd8c <vTaskSwitchContext>
 800ce24:	f04f 0000 	mov.w	r0, #0
 800ce28:	f380 8811 	msr	BASEPRI, r0
 800ce2c:	bc09      	pop	{r0, r3}
 800ce2e:	6819      	ldr	r1, [r3, #0]
 800ce30:	6808      	ldr	r0, [r1, #0]
 800ce32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce36:	f01e 0f10 	tst.w	lr, #16
 800ce3a:	bf08      	it	eq
 800ce3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce40:	f380 8809 	msr	PSP, r0
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w

0800ce50 <pxCurrentTCBConst>:
 800ce50:	20000c48 	.word	0x20000c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop

0800ce58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	607b      	str	r3, [r7, #4]
}
 800ce70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce72:	f7fe fed1 	bl	800bc18 <xTaskIncrementTick>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d003      	beq.n	800ce84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce7c:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <xPortSysTickHandler+0x40>)
 800ce7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	2300      	movs	r3, #0
 800ce86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	f383 8811 	msr	BASEPRI, r3
}
 800ce8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	e000ed04 	.word	0xe000ed04

0800ce9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cea0:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <vPortSetupTimerInterrupt+0x34>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cea6:	4b0b      	ldr	r3, [pc, #44]	; (800ced4 <vPortSetupTimerInterrupt+0x38>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ceac:	4b0a      	ldr	r3, [pc, #40]	; (800ced8 <vPortSetupTimerInterrupt+0x3c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a0a      	ldr	r2, [pc, #40]	; (800cedc <vPortSetupTimerInterrupt+0x40>)
 800ceb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb6:	099b      	lsrs	r3, r3, #6
 800ceb8:	4a09      	ldr	r2, [pc, #36]	; (800cee0 <vPortSetupTimerInterrupt+0x44>)
 800ceba:	3b01      	subs	r3, #1
 800cebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cebe:	4b04      	ldr	r3, [pc, #16]	; (800ced0 <vPortSetupTimerInterrupt+0x34>)
 800cec0:	2207      	movs	r2, #7
 800cec2:	601a      	str	r2, [r3, #0]
}
 800cec4:	bf00      	nop
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	e000e010 	.word	0xe000e010
 800ced4:	e000e018 	.word	0xe000e018
 800ced8:	20000010 	.word	0x20000010
 800cedc:	10624dd3 	.word	0x10624dd3
 800cee0:	e000e014 	.word	0xe000e014

0800cee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cef4 <vPortEnableVFP+0x10>
 800cee8:	6801      	ldr	r1, [r0, #0]
 800ceea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ceee:	6001      	str	r1, [r0, #0]
 800cef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cef2:	bf00      	nop
 800cef4:	e000ed88 	.word	0xe000ed88

0800cef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cefe:	f3ef 8305 	mrs	r3, IPSR
 800cf02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b0f      	cmp	r3, #15
 800cf08:	d914      	bls.n	800cf34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf0a:	4a17      	ldr	r2, [pc, #92]	; (800cf68 <vPortValidateInterruptPriority+0x70>)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4413      	add	r3, r2
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf14:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <vPortValidateInterruptPriority+0x74>)
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	7afa      	ldrb	r2, [r7, #11]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d20a      	bcs.n	800cf34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	607b      	str	r3, [r7, #4]
}
 800cf30:	bf00      	nop
 800cf32:	e7fe      	b.n	800cf32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf34:	4b0e      	ldr	r3, [pc, #56]	; (800cf70 <vPortValidateInterruptPriority+0x78>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf3c:	4b0d      	ldr	r3, [pc, #52]	; (800cf74 <vPortValidateInterruptPriority+0x7c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d90a      	bls.n	800cf5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	603b      	str	r3, [r7, #0]
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <vPortValidateInterruptPriority+0x60>
	}
 800cf5a:	bf00      	nop
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	e000e3f0 	.word	0xe000e3f0
 800cf6c:	20001274 	.word	0x20001274
 800cf70:	e000ed0c 	.word	0xe000ed0c
 800cf74:	20001278 	.word	0x20001278

0800cf78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08a      	sub	sp, #40	; 0x28
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf80:	2300      	movs	r3, #0
 800cf82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf84:	f7fe fd8c 	bl	800baa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf88:	4b5b      	ldr	r3, [pc, #364]	; (800d0f8 <pvPortMalloc+0x180>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d101      	bne.n	800cf94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf90:	f000 f920 	bl	800d1d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf94:	4b59      	ldr	r3, [pc, #356]	; (800d0fc <pvPortMalloc+0x184>)
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f040 8093 	bne.w	800d0c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d01d      	beq.n	800cfe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfa8:	2208      	movs	r2, #8
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4413      	add	r3, r2
 800cfae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f003 0307 	and.w	r3, r3, #7
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d014      	beq.n	800cfe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f023 0307 	bic.w	r3, r3, #7
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f003 0307 	and.w	r3, r3, #7
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00a      	beq.n	800cfe4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	617b      	str	r3, [r7, #20]
}
 800cfe0:	bf00      	nop
 800cfe2:	e7fe      	b.n	800cfe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d06e      	beq.n	800d0c8 <pvPortMalloc+0x150>
 800cfea:	4b45      	ldr	r3, [pc, #276]	; (800d100 <pvPortMalloc+0x188>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d869      	bhi.n	800d0c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cff4:	4b43      	ldr	r3, [pc, #268]	; (800d104 <pvPortMalloc+0x18c>)
 800cff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cff8:	4b42      	ldr	r3, [pc, #264]	; (800d104 <pvPortMalloc+0x18c>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cffe:	e004      	b.n	800d00a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	429a      	cmp	r2, r3
 800d012:	d903      	bls.n	800d01c <pvPortMalloc+0xa4>
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1f1      	bne.n	800d000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d01c:	4b36      	ldr	r3, [pc, #216]	; (800d0f8 <pvPortMalloc+0x180>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d022:	429a      	cmp	r2, r3
 800d024:	d050      	beq.n	800d0c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2208      	movs	r2, #8
 800d02c:	4413      	add	r3, r2
 800d02e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	6a3b      	ldr	r3, [r7, #32]
 800d036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	1ad2      	subs	r2, r2, r3
 800d040:	2308      	movs	r3, #8
 800d042:	005b      	lsls	r3, r3, #1
 800d044:	429a      	cmp	r2, r3
 800d046:	d91f      	bls.n	800d088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4413      	add	r3, r2
 800d04e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	f003 0307 	and.w	r3, r3, #7
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00a      	beq.n	800d070 <pvPortMalloc+0xf8>
	__asm volatile
 800d05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05e:	f383 8811 	msr	BASEPRI, r3
 800d062:	f3bf 8f6f 	isb	sy
 800d066:	f3bf 8f4f 	dsb	sy
 800d06a:	613b      	str	r3, [r7, #16]
}
 800d06c:	bf00      	nop
 800d06e:	e7fe      	b.n	800d06e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	685a      	ldr	r2, [r3, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	1ad2      	subs	r2, r2, r3
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d082:	69b8      	ldr	r0, [r7, #24]
 800d084:	f000 f908 	bl	800d298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d088:	4b1d      	ldr	r3, [pc, #116]	; (800d100 <pvPortMalloc+0x188>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	4a1b      	ldr	r2, [pc, #108]	; (800d100 <pvPortMalloc+0x188>)
 800d094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d096:	4b1a      	ldr	r3, [pc, #104]	; (800d100 <pvPortMalloc+0x188>)
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	4b1b      	ldr	r3, [pc, #108]	; (800d108 <pvPortMalloc+0x190>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d203      	bcs.n	800d0aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0a2:	4b17      	ldr	r3, [pc, #92]	; (800d100 <pvPortMalloc+0x188>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a18      	ldr	r2, [pc, #96]	; (800d108 <pvPortMalloc+0x190>)
 800d0a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	4b13      	ldr	r3, [pc, #76]	; (800d0fc <pvPortMalloc+0x184>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	431a      	orrs	r2, r3
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <pvPortMalloc+0x194>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	4a11      	ldr	r2, [pc, #68]	; (800d10c <pvPortMalloc+0x194>)
 800d0c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0c8:	f7fe fcf8 	bl	800babc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	f003 0307 	and.w	r3, r3, #7
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00a      	beq.n	800d0ec <pvPortMalloc+0x174>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	60fb      	str	r3, [r7, #12]
}
 800d0e8:	bf00      	nop
 800d0ea:	e7fe      	b.n	800d0ea <pvPortMalloc+0x172>
	return pvReturn;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3728      	adds	r7, #40	; 0x28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20004e84 	.word	0x20004e84
 800d0fc:	20004e98 	.word	0x20004e98
 800d100:	20004e88 	.word	0x20004e88
 800d104:	20004e7c 	.word	0x20004e7c
 800d108:	20004e8c 	.word	0x20004e8c
 800d10c:	20004e90 	.word	0x20004e90

0800d110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d04d      	beq.n	800d1be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d122:	2308      	movs	r3, #8
 800d124:	425b      	negs	r3, r3
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	4413      	add	r3, r2
 800d12a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	685a      	ldr	r2, [r3, #4]
 800d134:	4b24      	ldr	r3, [pc, #144]	; (800d1c8 <vPortFree+0xb8>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4013      	ands	r3, r2
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10a      	bne.n	800d154 <vPortFree+0x44>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	60fb      	str	r3, [r7, #12]
}
 800d150:	bf00      	nop
 800d152:	e7fe      	b.n	800d152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <vPortFree+0x62>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	60bb      	str	r3, [r7, #8]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	4b14      	ldr	r3, [pc, #80]	; (800d1c8 <vPortFree+0xb8>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4013      	ands	r3, r2
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d01e      	beq.n	800d1be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d11a      	bne.n	800d1be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	4b0e      	ldr	r3, [pc, #56]	; (800d1c8 <vPortFree+0xb8>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	43db      	mvns	r3, r3
 800d192:	401a      	ands	r2, r3
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d198:	f7fe fc82 	bl	800baa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	685a      	ldr	r2, [r3, #4]
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <vPortFree+0xbc>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	4a09      	ldr	r2, [pc, #36]	; (800d1cc <vPortFree+0xbc>)
 800d1a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1aa:	6938      	ldr	r0, [r7, #16]
 800d1ac:	f000 f874 	bl	800d298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <vPortFree+0xc0>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	4a06      	ldr	r2, [pc, #24]	; (800d1d0 <vPortFree+0xc0>)
 800d1b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1ba:	f7fe fc7f 	bl	800babc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1be:	bf00      	nop
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20004e98 	.word	0x20004e98
 800d1cc:	20004e88 	.word	0x20004e88
 800d1d0:	20004e94 	.word	0x20004e94

0800d1d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d1de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1e0:	4b27      	ldr	r3, [pc, #156]	; (800d280 <prvHeapInit+0xac>)
 800d1e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f003 0307 	and.w	r3, r3, #7
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00c      	beq.n	800d208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3307      	adds	r3, #7
 800d1f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f023 0307 	bic.w	r3, r3, #7
 800d1fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	4a1f      	ldr	r2, [pc, #124]	; (800d280 <prvHeapInit+0xac>)
 800d204:	4413      	add	r3, r2
 800d206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d20c:	4a1d      	ldr	r2, [pc, #116]	; (800d284 <prvHeapInit+0xb0>)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d212:	4b1c      	ldr	r3, [pc, #112]	; (800d284 <prvHeapInit+0xb0>)
 800d214:	2200      	movs	r2, #0
 800d216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	4413      	add	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d220:	2208      	movs	r2, #8
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	1a9b      	subs	r3, r3, r2
 800d226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f023 0307 	bic.w	r3, r3, #7
 800d22e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4a15      	ldr	r2, [pc, #84]	; (800d288 <prvHeapInit+0xb4>)
 800d234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d236:	4b14      	ldr	r3, [pc, #80]	; (800d288 <prvHeapInit+0xb4>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2200      	movs	r2, #0
 800d23c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d23e:	4b12      	ldr	r3, [pc, #72]	; (800d288 <prvHeapInit+0xb4>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	1ad2      	subs	r2, r2, r3
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d254:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <prvHeapInit+0xb4>)
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	4a0a      	ldr	r2, [pc, #40]	; (800d28c <prvHeapInit+0xb8>)
 800d262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	4a09      	ldr	r2, [pc, #36]	; (800d290 <prvHeapInit+0xbc>)
 800d26a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d26c:	4b09      	ldr	r3, [pc, #36]	; (800d294 <prvHeapInit+0xc0>)
 800d26e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d272:	601a      	str	r2, [r3, #0]
}
 800d274:	bf00      	nop
 800d276:	3714      	adds	r7, #20
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	2000127c 	.word	0x2000127c
 800d284:	20004e7c 	.word	0x20004e7c
 800d288:	20004e84 	.word	0x20004e84
 800d28c:	20004e8c 	.word	0x20004e8c
 800d290:	20004e88 	.word	0x20004e88
 800d294:	20004e98 	.word	0x20004e98

0800d298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2a0:	4b28      	ldr	r3, [pc, #160]	; (800d344 <prvInsertBlockIntoFreeList+0xac>)
 800d2a2:	60fb      	str	r3, [r7, #12]
 800d2a4:	e002      	b.n	800d2ac <prvInsertBlockIntoFreeList+0x14>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	60fb      	str	r3, [r7, #12]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d8f7      	bhi.n	800d2a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	68ba      	ldr	r2, [r7, #8]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d108      	bne.n	800d2da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	441a      	add	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	441a      	add	r2, r3
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d118      	bne.n	800d320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	4b15      	ldr	r3, [pc, #84]	; (800d348 <prvInsertBlockIntoFreeList+0xb0>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d00d      	beq.n	800d316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	441a      	add	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	e008      	b.n	800d328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d316:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <prvInsertBlockIntoFreeList+0xb0>)
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	e003      	b.n	800d328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d002      	beq.n	800d336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d336:	bf00      	nop
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	20004e7c 	.word	0x20004e7c
 800d348:	20004e84 	.word	0x20004e84

0800d34c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d350:	2200      	movs	r2, #0
 800d352:	4912      	ldr	r1, [pc, #72]	; (800d39c <MX_USB_DEVICE_Init+0x50>)
 800d354:	4812      	ldr	r0, [pc, #72]	; (800d3a0 <MX_USB_DEVICE_Init+0x54>)
 800d356:	f7fb ff45 	bl	80091e4 <USBD_Init>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d360:	f7f3 fe76 	bl	8001050 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d364:	490f      	ldr	r1, [pc, #60]	; (800d3a4 <MX_USB_DEVICE_Init+0x58>)
 800d366:	480e      	ldr	r0, [pc, #56]	; (800d3a0 <MX_USB_DEVICE_Init+0x54>)
 800d368:	f7fb ff6c 	bl	8009244 <USBD_RegisterClass>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d372:	f7f3 fe6d 	bl	8001050 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d376:	490c      	ldr	r1, [pc, #48]	; (800d3a8 <MX_USB_DEVICE_Init+0x5c>)
 800d378:	4809      	ldr	r0, [pc, #36]	; (800d3a0 <MX_USB_DEVICE_Init+0x54>)
 800d37a:	f7fb fe5d 	bl	8009038 <USBD_CDC_RegisterInterface>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d384:	f7f3 fe64 	bl	8001050 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d388:	4805      	ldr	r0, [pc, #20]	; (800d3a0 <MX_USB_DEVICE_Init+0x54>)
 800d38a:	f7fb ff91 	bl	80092b0 <USBD_Start>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d394:	f7f3 fe5c 	bl	8001050 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d398:	bf00      	nop
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	200000c0 	.word	0x200000c0
 800d3a0:	20004e9c 	.word	0x20004e9c
 800d3a4:	20000028 	.word	0x20000028
 800d3a8:	200000ac 	.word	0x200000ac

0800d3ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4905      	ldr	r1, [pc, #20]	; (800d3c8 <CDC_Init_FS+0x1c>)
 800d3b4:	4805      	ldr	r0, [pc, #20]	; (800d3cc <CDC_Init_FS+0x20>)
 800d3b6:	f7fb fe59 	bl	800906c <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d3ba:	4905      	ldr	r1, [pc, #20]	; (800d3d0 <CDC_Init_FS+0x24>)
 800d3bc:	4803      	ldr	r0, [pc, #12]	; (800d3cc <CDC_Init_FS+0x20>)
 800d3be:	f7fb fe77 	bl	80090b0 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800d3c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	20005978 	.word	0x20005978
 800d3cc:	20004e9c 	.word	0x20004e9c
 800d3d0:	20005178 	.word	0x20005178

0800d3d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800d3d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	6039      	str	r1, [r7, #0]
 800d3ee:	71fb      	strb	r3, [r7, #7]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800d3f4:	79fb      	ldrb	r3, [r7, #7]
 800d3f6:	2b23      	cmp	r3, #35	; 0x23
 800d3f8:	d84a      	bhi.n	800d490 <CDC_Control_FS+0xac>
 800d3fa:	a201      	add	r2, pc, #4	; (adr r2, 800d400 <CDC_Control_FS+0x1c>)
 800d3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d400:	0800d491 	.word	0x0800d491
 800d404:	0800d491 	.word	0x0800d491
 800d408:	0800d491 	.word	0x0800d491
 800d40c:	0800d491 	.word	0x0800d491
 800d410:	0800d491 	.word	0x0800d491
 800d414:	0800d491 	.word	0x0800d491
 800d418:	0800d491 	.word	0x0800d491
 800d41c:	0800d491 	.word	0x0800d491
 800d420:	0800d491 	.word	0x0800d491
 800d424:	0800d491 	.word	0x0800d491
 800d428:	0800d491 	.word	0x0800d491
 800d42c:	0800d491 	.word	0x0800d491
 800d430:	0800d491 	.word	0x0800d491
 800d434:	0800d491 	.word	0x0800d491
 800d438:	0800d491 	.word	0x0800d491
 800d43c:	0800d491 	.word	0x0800d491
 800d440:	0800d491 	.word	0x0800d491
 800d444:	0800d491 	.word	0x0800d491
 800d448:	0800d491 	.word	0x0800d491
 800d44c:	0800d491 	.word	0x0800d491
 800d450:	0800d491 	.word	0x0800d491
 800d454:	0800d491 	.word	0x0800d491
 800d458:	0800d491 	.word	0x0800d491
 800d45c:	0800d491 	.word	0x0800d491
 800d460:	0800d491 	.word	0x0800d491
 800d464:	0800d491 	.word	0x0800d491
 800d468:	0800d491 	.word	0x0800d491
 800d46c:	0800d491 	.word	0x0800d491
 800d470:	0800d491 	.word	0x0800d491
 800d474:	0800d491 	.word	0x0800d491
 800d478:	0800d491 	.word	0x0800d491
 800d47c:	0800d491 	.word	0x0800d491
 800d480:	0800d491 	.word	0x0800d491
 800d484:	0800d491 	.word	0x0800d491
 800d488:	0800d491 	.word	0x0800d491
 800d48c:	0800d491 	.word	0x0800d491
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800d490:	bf00      	nop
	}

	return (USBD_OK);
 800d492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	480f      	ldr	r0, [pc, #60]	; (800d4ec <CDC_Receive_FS+0x4c>)
 800d4ae:	f7fb fdff 	bl	80090b0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d4b2:	480e      	ldr	r0, [pc, #56]	; (800d4ec <CDC_Receive_FS+0x4c>)
 800d4b4:	f7fb fe60 	bl	8009178 <USBD_CDC_ReceivePacket>

	memset(USB_Buff, '\0', 64);  // clear the buffer
 800d4b8:	2240      	movs	r2, #64	; 0x40
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	480c      	ldr	r0, [pc, #48]	; (800d4f0 <CDC_Receive_FS+0x50>)
 800d4be:	f000 fca5 	bl	800de0c <memset>
	uint8_t len = (uint8_t) *Len;
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	73fb      	strb	r3, [r7, #15]
	memcpy(USB_Buff, Buf, len);  // copy the data to the buffer
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	6879      	ldr	r1, [r7, #4]
 800d4ce:	4808      	ldr	r0, [pc, #32]	; (800d4f0 <CDC_Receive_FS+0x50>)
 800d4d0:	f000 fc8e 	bl	800ddf0 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	2100      	movs	r1, #0
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fc96 	bl	800de0c <memset>

	return (USBD_OK);
 800d4e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20004e9c 	.word	0x20004e9c
 800d4f0:	200003f0 	.word	0x200003f0

0800d4f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 800d504:	4b0d      	ldr	r3, [pc, #52]	; (800d53c <CDC_Transmit_FS+0x48>)
 800d506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d50a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800d516:	2301      	movs	r3, #1
 800d518:	e00b      	b.n	800d532 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d51a:	887b      	ldrh	r3, [r7, #2]
 800d51c:	461a      	mov	r2, r3
 800d51e:	6879      	ldr	r1, [r7, #4]
 800d520:	4806      	ldr	r0, [pc, #24]	; (800d53c <CDC_Transmit_FS+0x48>)
 800d522:	f7fb fda3 	bl	800906c <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d526:	4805      	ldr	r0, [pc, #20]	; (800d53c <CDC_Transmit_FS+0x48>)
 800d528:	f7fb fde0 	bl	80090ec <USBD_CDC_TransmitPacket>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d530:	7bfb      	ldrb	r3, [r7, #15]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	20004e9c 	.word	0x20004e9c

0800d540 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	4613      	mov	r3, r2
 800d54c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d556:	4618      	mov	r0, r3
 800d558:	371c      	adds	r7, #28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
	...

0800d564 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	4603      	mov	r3, r0
 800d56c:	6039      	str	r1, [r7, #0]
 800d56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2212      	movs	r2, #18
 800d574:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d576:	4b03      	ldr	r3, [pc, #12]	; (800d584 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d578:	4618      	mov	r0, r3
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	200000dc 	.word	0x200000dc

0800d588 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	4603      	mov	r3, r0
 800d590:	6039      	str	r1, [r7, #0]
 800d592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	2204      	movs	r2, #4
 800d598:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d59a:	4b03      	ldr	r3, [pc, #12]	; (800d5a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr
 800d5a8:	200000f0 	.word	0x200000f0

0800d5ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	6039      	str	r1, [r7, #0]
 800d5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d105      	bne.n	800d5ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	4907      	ldr	r1, [pc, #28]	; (800d5e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5c2:	4808      	ldr	r0, [pc, #32]	; (800d5e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5c4:	f7fd f820 	bl	800a608 <USBD_GetString>
 800d5c8:	e004      	b.n	800d5d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	4904      	ldr	r1, [pc, #16]	; (800d5e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5ce:	4805      	ldr	r0, [pc, #20]	; (800d5e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5d0:	f7fd f81a 	bl	800a608 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5d4:	4b02      	ldr	r3, [pc, #8]	; (800d5e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	20006178 	.word	0x20006178
 800d5e4:	0800e848 	.word	0x0800e848

0800d5e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	6039      	str	r1, [r7, #0]
 800d5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	4904      	ldr	r1, [pc, #16]	; (800d608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d5f8:	4804      	ldr	r0, [pc, #16]	; (800d60c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5fa:	f7fd f805 	bl	800a608 <USBD_GetString>
  return USBD_StrDesc;
 800d5fe:	4b02      	ldr	r3, [pc, #8]	; (800d608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d600:	4618      	mov	r0, r3
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20006178 	.word	0x20006178
 800d60c:	0800e854 	.word	0x0800e854

0800d610 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	6039      	str	r1, [r7, #0]
 800d61a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	221a      	movs	r2, #26
 800d620:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d622:	f000 f843 	bl	800d6ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d626:	4b02      	ldr	r3, [pc, #8]	; (800d630 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	200000f4 	.word	0x200000f4

0800d634 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	4603      	mov	r3, r0
 800d63c:	6039      	str	r1, [r7, #0]
 800d63e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d640:	79fb      	ldrb	r3, [r7, #7]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d105      	bne.n	800d652 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	4907      	ldr	r1, [pc, #28]	; (800d668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d64a:	4808      	ldr	r0, [pc, #32]	; (800d66c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d64c:	f7fc ffdc 	bl	800a608 <USBD_GetString>
 800d650:	e004      	b.n	800d65c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	4904      	ldr	r1, [pc, #16]	; (800d668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d656:	4805      	ldr	r0, [pc, #20]	; (800d66c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d658:	f7fc ffd6 	bl	800a608 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d65c:	4b02      	ldr	r3, [pc, #8]	; (800d668 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20006178 	.word	0x20006178
 800d66c:	0800e868 	.word	0x0800e868

0800d670 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	6039      	str	r1, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d67c:	79fb      	ldrb	r3, [r7, #7]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d105      	bne.n	800d68e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	4907      	ldr	r1, [pc, #28]	; (800d6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d686:	4808      	ldr	r0, [pc, #32]	; (800d6a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d688:	f7fc ffbe 	bl	800a608 <USBD_GetString>
 800d68c:	e004      	b.n	800d698 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d68e:	683a      	ldr	r2, [r7, #0]
 800d690:	4904      	ldr	r1, [pc, #16]	; (800d6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d692:	4805      	ldr	r0, [pc, #20]	; (800d6a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d694:	f7fc ffb8 	bl	800a608 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d698:	4b02      	ldr	r3, [pc, #8]	; (800d6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20006178 	.word	0x20006178
 800d6a8:	0800e874 	.word	0x0800e874

0800d6ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d6b2:	4b0f      	ldr	r3, [pc, #60]	; (800d6f0 <Get_SerialNum+0x44>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d6b8:	4b0e      	ldr	r3, [pc, #56]	; (800d6f4 <Get_SerialNum+0x48>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d6be:	4b0e      	ldr	r3, [pc, #56]	; (800d6f8 <Get_SerialNum+0x4c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d009      	beq.n	800d6e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d6d2:	2208      	movs	r2, #8
 800d6d4:	4909      	ldr	r1, [pc, #36]	; (800d6fc <Get_SerialNum+0x50>)
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 f814 	bl	800d704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d6dc:	2204      	movs	r2, #4
 800d6de:	4908      	ldr	r1, [pc, #32]	; (800d700 <Get_SerialNum+0x54>)
 800d6e0:	68b8      	ldr	r0, [r7, #8]
 800d6e2:	f000 f80f 	bl	800d704 <IntToUnicode>
  }
}
 800d6e6:	bf00      	nop
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	1fff7a10 	.word	0x1fff7a10
 800d6f4:	1fff7a14 	.word	0x1fff7a14
 800d6f8:	1fff7a18 	.word	0x1fff7a18
 800d6fc:	200000f6 	.word	0x200000f6
 800d700:	20000106 	.word	0x20000106

0800d704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d704:	b480      	push	{r7}
 800d706:	b087      	sub	sp, #28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	4613      	mov	r3, r2
 800d710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d716:	2300      	movs	r3, #0
 800d718:	75fb      	strb	r3, [r7, #23]
 800d71a:	e027      	b.n	800d76c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	0f1b      	lsrs	r3, r3, #28
 800d720:	2b09      	cmp	r3, #9
 800d722:	d80b      	bhi.n	800d73c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	0f1b      	lsrs	r3, r3, #28
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4619      	mov	r1, r3
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	440b      	add	r3, r1
 800d734:	3230      	adds	r2, #48	; 0x30
 800d736:	b2d2      	uxtb	r2, r2
 800d738:	701a      	strb	r2, [r3, #0]
 800d73a:	e00a      	b.n	800d752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	0f1b      	lsrs	r3, r3, #28
 800d740:	b2da      	uxtb	r2, r3
 800d742:	7dfb      	ldrb	r3, [r7, #23]
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	4619      	mov	r1, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	440b      	add	r3, r1
 800d74c:	3237      	adds	r2, #55	; 0x37
 800d74e:	b2d2      	uxtb	r2, r2
 800d750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	011b      	lsls	r3, r3, #4
 800d756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d758:	7dfb      	ldrb	r3, [r7, #23]
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	3301      	adds	r3, #1
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	4413      	add	r3, r2
 800d762:	2200      	movs	r2, #0
 800d764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d766:	7dfb      	ldrb	r3, [r7, #23]
 800d768:	3301      	adds	r3, #1
 800d76a:	75fb      	strb	r3, [r7, #23]
 800d76c:	7dfa      	ldrb	r2, [r7, #23]
 800d76e:	79fb      	ldrb	r3, [r7, #7]
 800d770:	429a      	cmp	r2, r3
 800d772:	d3d3      	bcc.n	800d71c <IntToUnicode+0x18>
  }
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop
 800d778:	371c      	adds	r7, #28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
	...

0800d784 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08a      	sub	sp, #40	; 0x28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d78c:	f107 0314 	add.w	r3, r7, #20
 800d790:	2200      	movs	r2, #0
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	605a      	str	r2, [r3, #4]
 800d796:	609a      	str	r2, [r3, #8]
 800d798:	60da      	str	r2, [r3, #12]
 800d79a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7a4:	d13a      	bne.n	800d81c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	613b      	str	r3, [r7, #16]
 800d7aa:	4b1e      	ldr	r3, [pc, #120]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ae:	4a1d      	ldr	r2, [pc, #116]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d7b0:	f043 0301 	orr.w	r3, r3, #1
 800d7b4:	6313      	str	r3, [r2, #48]	; 0x30
 800d7b6:	4b1b      	ldr	r3, [pc, #108]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	613b      	str	r3, [r7, #16]
 800d7c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d7c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d7c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7d0:	2303      	movs	r3, #3
 800d7d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d7d4:	230a      	movs	r3, #10
 800d7d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7d8:	f107 0314 	add.w	r3, r7, #20
 800d7dc:	4619      	mov	r1, r3
 800d7de:	4812      	ldr	r0, [pc, #72]	; (800d828 <HAL_PCD_MspInit+0xa4>)
 800d7e0:	f7f6 f89c 	bl	800391c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7e4:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e8:	4a0e      	ldr	r2, [pc, #56]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d7ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7ee:	6353      	str	r3, [r2, #52]	; 0x34
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	4b0b      	ldr	r3, [pc, #44]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7f8:	4a0a      	ldr	r2, [pc, #40]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d7fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7fe:	6453      	str	r3, [r2, #68]	; 0x44
 800d800:	4b08      	ldr	r3, [pc, #32]	; (800d824 <HAL_PCD_MspInit+0xa0>)
 800d802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d808:	60fb      	str	r3, [r7, #12]
 800d80a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d80c:	2200      	movs	r2, #0
 800d80e:	2105      	movs	r1, #5
 800d810:	2043      	movs	r0, #67	; 0x43
 800d812:	f7f5 fd53 	bl	80032bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d816:	2043      	movs	r0, #67	; 0x43
 800d818:	f7f5 fd6c 	bl	80032f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d81c:	bf00      	nop
 800d81e:	3728      	adds	r7, #40	; 0x28
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	40023800 	.word	0x40023800
 800d828:	40020000 	.word	0x40020000

0800d82c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d840:	4619      	mov	r1, r3
 800d842:	4610      	mov	r0, r2
 800d844:	f7fb fd81 	bl	800934a <USBD_LL_SetupStage>
}
 800d848:	bf00      	nop
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	460b      	mov	r3, r1
 800d85a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d862:	78fa      	ldrb	r2, [r7, #3]
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	4613      	mov	r3, r2
 800d868:	00db      	lsls	r3, r3, #3
 800d86a:	4413      	add	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	440b      	add	r3, r1
 800d870:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	78fb      	ldrb	r3, [r7, #3]
 800d878:	4619      	mov	r1, r3
 800d87a:	f7fb fdbb 	bl	80093f4 <USBD_LL_DataOutStage>
}
 800d87e:	bf00      	nop
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b082      	sub	sp, #8
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	460b      	mov	r3, r1
 800d890:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d898:	78fa      	ldrb	r2, [r7, #3]
 800d89a:	6879      	ldr	r1, [r7, #4]
 800d89c:	4613      	mov	r3, r2
 800d89e:	00db      	lsls	r3, r3, #3
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	440b      	add	r3, r1
 800d8a6:	334c      	adds	r3, #76	; 0x4c
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	f7fb fe54 	bl	800955a <USBD_LL_DataInStage>
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fb ff88 	bl	80097de <USBD_LL_SOF>
}
 800d8ce:	bf00      	nop
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b084      	sub	sp, #16
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d001      	beq.n	800d8ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d8ea:	f7f3 fbb1 	bl	8001050 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8f4:	7bfa      	ldrb	r2, [r7, #15]
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fb ff32 	bl	8009762 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d904:	4618      	mov	r0, r3
 800d906:	f7fb feda 	bl	80096be <USBD_LL_Reset>
}
 800d90a:	bf00      	nop
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
	...

0800d914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d922:	4618      	mov	r0, r3
 800d924:	f7fb ff2d 	bl	8009782 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	6812      	ldr	r2, [r2, #0]
 800d936:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d93a:	f043 0301 	orr.w	r3, r3, #1
 800d93e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d005      	beq.n	800d954 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d948:	4b04      	ldr	r3, [pc, #16]	; (800d95c <HAL_PCD_SuspendCallback+0x48>)
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	4a03      	ldr	r2, [pc, #12]	; (800d95c <HAL_PCD_SuspendCallback+0x48>)
 800d94e:	f043 0306 	orr.w	r3, r3, #6
 800d952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d954:	bf00      	nop
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	e000ed00 	.word	0xe000ed00

0800d960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fb ff1d 	bl	80097ae <USBD_LL_Resume>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d98e:	78fa      	ldrb	r2, [r7, #3]
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f7fb ff75 	bl	8009882 <USBD_LL_IsoOUTIncomplete>
}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9b2:	78fa      	ldrb	r2, [r7, #3]
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fb ff31 	bl	800981e <USBD_LL_IsoINIncomplete>
}
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fb ff87 	bl	80098e6 <USBD_LL_DevConnected>
}
 800d9d8:	bf00      	nop
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fb ff84 	bl	80098fc <USBD_LL_DevDisconnected>
}
 800d9f4:	bf00      	nop
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d13c      	bne.n	800da86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800da0c:	4a20      	ldr	r2, [pc, #128]	; (800da90 <USBD_LL_Init+0x94>)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a1e      	ldr	r2, [pc, #120]	; (800da90 <USBD_LL_Init+0x94>)
 800da18:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da1c:	4b1c      	ldr	r3, [pc, #112]	; (800da90 <USBD_LL_Init+0x94>)
 800da1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800da22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800da24:	4b1a      	ldr	r3, [pc, #104]	; (800da90 <USBD_LL_Init+0x94>)
 800da26:	2204      	movs	r2, #4
 800da28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800da2a:	4b19      	ldr	r3, [pc, #100]	; (800da90 <USBD_LL_Init+0x94>)
 800da2c:	2202      	movs	r2, #2
 800da2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da30:	4b17      	ldr	r3, [pc, #92]	; (800da90 <USBD_LL_Init+0x94>)
 800da32:	2200      	movs	r2, #0
 800da34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da36:	4b16      	ldr	r3, [pc, #88]	; (800da90 <USBD_LL_Init+0x94>)
 800da38:	2202      	movs	r2, #2
 800da3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da3c:	4b14      	ldr	r3, [pc, #80]	; (800da90 <USBD_LL_Init+0x94>)
 800da3e:	2200      	movs	r2, #0
 800da40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da42:	4b13      	ldr	r3, [pc, #76]	; (800da90 <USBD_LL_Init+0x94>)
 800da44:	2200      	movs	r2, #0
 800da46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da48:	4b11      	ldr	r3, [pc, #68]	; (800da90 <USBD_LL_Init+0x94>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <USBD_LL_Init+0x94>)
 800da50:	2200      	movs	r2, #0
 800da52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da54:	4b0e      	ldr	r3, [pc, #56]	; (800da90 <USBD_LL_Init+0x94>)
 800da56:	2200      	movs	r2, #0
 800da58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da5a:	480d      	ldr	r0, [pc, #52]	; (800da90 <USBD_LL_Init+0x94>)
 800da5c:	f7f6 f8fb 	bl	8003c56 <HAL_PCD_Init>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da66:	f7f3 faf3 	bl	8001050 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da6a:	2180      	movs	r1, #128	; 0x80
 800da6c:	4808      	ldr	r0, [pc, #32]	; (800da90 <USBD_LL_Init+0x94>)
 800da6e:	f7f7 fb52 	bl	8005116 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da72:	2240      	movs	r2, #64	; 0x40
 800da74:	2100      	movs	r1, #0
 800da76:	4806      	ldr	r0, [pc, #24]	; (800da90 <USBD_LL_Init+0x94>)
 800da78:	f7f7 fb06 	bl	8005088 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da7c:	2280      	movs	r2, #128	; 0x80
 800da7e:	2101      	movs	r1, #1
 800da80:	4803      	ldr	r0, [pc, #12]	; (800da90 <USBD_LL_Init+0x94>)
 800da82:	f7f7 fb01 	bl	8005088 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	20006378 	.word	0x20006378

0800da94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800daaa:	4618      	mov	r0, r3
 800daac:	f7f6 f9f0 	bl	8003e90 <HAL_PCD_Start>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 f942 	bl	800dd40 <USBD_Get_USB_Status>
 800dabc:	4603      	mov	r3, r0
 800dabe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	4608      	mov	r0, r1
 800dad4:	4611      	mov	r1, r2
 800dad6:	461a      	mov	r2, r3
 800dad8:	4603      	mov	r3, r0
 800dada:	70fb      	strb	r3, [r7, #3]
 800dadc:	460b      	mov	r3, r1
 800dade:	70bb      	strb	r3, [r7, #2]
 800dae0:	4613      	mov	r3, r2
 800dae2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800daf2:	78bb      	ldrb	r3, [r7, #2]
 800daf4:	883a      	ldrh	r2, [r7, #0]
 800daf6:	78f9      	ldrb	r1, [r7, #3]
 800daf8:	f7f6 fec1 	bl	800487e <HAL_PCD_EP_Open>
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db00:	7bfb      	ldrb	r3, [r7, #15]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 f91c 	bl	800dd40 <USBD_Get_USB_Status>
 800db08:	4603      	mov	r3, r0
 800db0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b084      	sub	sp, #16
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	460b      	mov	r3, r1
 800db20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db30:	78fa      	ldrb	r2, [r7, #3]
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7f6 ff0a 	bl	800494e <HAL_PCD_EP_Close>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f8fd 	bl	800dd40 <USBD_Get_USB_Status>
 800db46:	4603      	mov	r3, r0
 800db48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f7f6 ffe2 	bl	8004b3c <HAL_PCD_EP_SetStall>
 800db78:	4603      	mov	r3, r0
 800db7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f8de 	bl	800dd40 <USBD_Get_USB_Status>
 800db84:	4603      	mov	r3, r0
 800db86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db88:	7bbb      	ldrb	r3, [r7, #14]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbac:	78fa      	ldrb	r2, [r7, #3]
 800dbae:	4611      	mov	r1, r2
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7f7 f827 	bl	8004c04 <HAL_PCD_EP_ClrStall>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 f8bf 	bl	800dd40 <USBD_Get_USB_Status>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	da0b      	bge.n	800dc04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbec:	78fb      	ldrb	r3, [r7, #3]
 800dbee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	00db      	lsls	r3, r3, #3
 800dbf8:	4413      	add	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	440b      	add	r3, r1
 800dbfe:	333e      	adds	r3, #62	; 0x3e
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	e00b      	b.n	800dc1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc04:	78fb      	ldrb	r3, [r7, #3]
 800dc06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc0a:	68f9      	ldr	r1, [r7, #12]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	4413      	add	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	440b      	add	r3, r1
 800dc16:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dc1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3714      	adds	r7, #20
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	460b      	mov	r3, r1
 800dc32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc42:	78fa      	ldrb	r2, [r7, #3]
 800dc44:	4611      	mov	r1, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7f6 fdf4 	bl	8004834 <HAL_PCD_SetAddress>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 f874 	bl	800dd40 <USBD_Get_USB_Status>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b086      	sub	sp, #24
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
 800dc72:	460b      	mov	r3, r1
 800dc74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc84:	7af9      	ldrb	r1, [r7, #11]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	f7f6 ff0d 	bl	8004aa8 <HAL_PCD_EP_Transmit>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 f853 	bl	800dd40 <USBD_Get_USB_Status>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3718      	adds	r7, #24
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	607a      	str	r2, [r7, #4]
 800dcb2:	603b      	str	r3, [r7, #0]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcc6:	7af9      	ldrb	r1, [r7, #11]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	f7f6 fe89 	bl	80049e2 <HAL_PCD_EP_Receive>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcd4:	7dfb      	ldrb	r3, [r7, #23]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 f832 	bl	800dd40 <USBD_Get_USB_Status>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dce0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3718      	adds	r7, #24
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b082      	sub	sp, #8
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dcfc:	78fa      	ldrb	r2, [r7, #3]
 800dcfe:	4611      	mov	r1, r2
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7f6 feb9 	bl	8004a78 <HAL_PCD_EP_GetRxCount>
 800dd06:	4603      	mov	r3, r0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b083      	sub	sp, #12
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd18:	4b03      	ldr	r3, [pc, #12]	; (800dd28 <USBD_static_malloc+0x18>)
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	370c      	adds	r7, #12
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	20006884 	.word	0x20006884

0800dd2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]

}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d817      	bhi.n	800dd84 <USBD_Get_USB_Status+0x44>
 800dd54:	a201      	add	r2, pc, #4	; (adr r2, 800dd5c <USBD_Get_USB_Status+0x1c>)
 800dd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd5a:	bf00      	nop
 800dd5c:	0800dd6d 	.word	0x0800dd6d
 800dd60:	0800dd73 	.word	0x0800dd73
 800dd64:	0800dd79 	.word	0x0800dd79
 800dd68:	0800dd7f 	.word	0x0800dd7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd70:	e00b      	b.n	800dd8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd72:	2303      	movs	r3, #3
 800dd74:	73fb      	strb	r3, [r7, #15]
    break;
 800dd76:	e008      	b.n	800dd8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd7c:	e005      	b.n	800dd8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	73fb      	strb	r3, [r7, #15]
    break;
 800dd82:	e002      	b.n	800dd8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd84:	2303      	movs	r3, #3
 800dd86:	73fb      	strb	r3, [r7, #15]
    break;
 800dd88:	bf00      	nop
  }
  return usb_status;
 800dd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <__errno>:
 800dd98:	4b01      	ldr	r3, [pc, #4]	; (800dda0 <__errno+0x8>)
 800dd9a:	6818      	ldr	r0, [r3, #0]
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	20000110 	.word	0x20000110

0800dda4 <__libc_init_array>:
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	4d0d      	ldr	r5, [pc, #52]	; (800dddc <__libc_init_array+0x38>)
 800dda8:	4c0d      	ldr	r4, [pc, #52]	; (800dde0 <__libc_init_array+0x3c>)
 800ddaa:	1b64      	subs	r4, r4, r5
 800ddac:	10a4      	asrs	r4, r4, #2
 800ddae:	2600      	movs	r6, #0
 800ddb0:	42a6      	cmp	r6, r4
 800ddb2:	d109      	bne.n	800ddc8 <__libc_init_array+0x24>
 800ddb4:	4d0b      	ldr	r5, [pc, #44]	; (800dde4 <__libc_init_array+0x40>)
 800ddb6:	4c0c      	ldr	r4, [pc, #48]	; (800dde8 <__libc_init_array+0x44>)
 800ddb8:	f000 fcf8 	bl	800e7ac <_init>
 800ddbc:	1b64      	subs	r4, r4, r5
 800ddbe:	10a4      	asrs	r4, r4, #2
 800ddc0:	2600      	movs	r6, #0
 800ddc2:	42a6      	cmp	r6, r4
 800ddc4:	d105      	bne.n	800ddd2 <__libc_init_array+0x2e>
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}
 800ddc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddcc:	4798      	blx	r3
 800ddce:	3601      	adds	r6, #1
 800ddd0:	e7ee      	b.n	800ddb0 <__libc_init_array+0xc>
 800ddd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddd6:	4798      	blx	r3
 800ddd8:	3601      	adds	r6, #1
 800ddda:	e7f2      	b.n	800ddc2 <__libc_init_array+0x1e>
 800dddc:	080123d8 	.word	0x080123d8
 800dde0:	080123d8 	.word	0x080123d8
 800dde4:	080123d8 	.word	0x080123d8
 800dde8:	080123dc 	.word	0x080123dc

0800ddec <__retarget_lock_acquire_recursive>:
 800ddec:	4770      	bx	lr

0800ddee <__retarget_lock_release_recursive>:
 800ddee:	4770      	bx	lr

0800ddf0 <memcpy>:
 800ddf0:	440a      	add	r2, r1
 800ddf2:	4291      	cmp	r1, r2
 800ddf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddf8:	d100      	bne.n	800ddfc <memcpy+0xc>
 800ddfa:	4770      	bx	lr
 800ddfc:	b510      	push	{r4, lr}
 800ddfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de06:	4291      	cmp	r1, r2
 800de08:	d1f9      	bne.n	800ddfe <memcpy+0xe>
 800de0a:	bd10      	pop	{r4, pc}

0800de0c <memset>:
 800de0c:	4402      	add	r2, r0
 800de0e:	4603      	mov	r3, r0
 800de10:	4293      	cmp	r3, r2
 800de12:	d100      	bne.n	800de16 <memset+0xa>
 800de14:	4770      	bx	lr
 800de16:	f803 1b01 	strb.w	r1, [r3], #1
 800de1a:	e7f9      	b.n	800de10 <memset+0x4>

0800de1c <sbrk_aligned>:
 800de1c:	b570      	push	{r4, r5, r6, lr}
 800de1e:	4e0e      	ldr	r6, [pc, #56]	; (800de58 <sbrk_aligned+0x3c>)
 800de20:	460c      	mov	r4, r1
 800de22:	6831      	ldr	r1, [r6, #0]
 800de24:	4605      	mov	r5, r0
 800de26:	b911      	cbnz	r1, 800de2e <sbrk_aligned+0x12>
 800de28:	f000 f8f6 	bl	800e018 <_sbrk_r>
 800de2c:	6030      	str	r0, [r6, #0]
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	f000 f8f1 	bl	800e018 <_sbrk_r>
 800de36:	1c43      	adds	r3, r0, #1
 800de38:	d00a      	beq.n	800de50 <sbrk_aligned+0x34>
 800de3a:	1cc4      	adds	r4, r0, #3
 800de3c:	f024 0403 	bic.w	r4, r4, #3
 800de40:	42a0      	cmp	r0, r4
 800de42:	d007      	beq.n	800de54 <sbrk_aligned+0x38>
 800de44:	1a21      	subs	r1, r4, r0
 800de46:	4628      	mov	r0, r5
 800de48:	f000 f8e6 	bl	800e018 <_sbrk_r>
 800de4c:	3001      	adds	r0, #1
 800de4e:	d101      	bne.n	800de54 <sbrk_aligned+0x38>
 800de50:	f04f 34ff 	mov.w	r4, #4294967295
 800de54:	4620      	mov	r0, r4
 800de56:	bd70      	pop	{r4, r5, r6, pc}
 800de58:	20006aac 	.word	0x20006aac

0800de5c <_malloc_r>:
 800de5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de60:	1ccd      	adds	r5, r1, #3
 800de62:	f025 0503 	bic.w	r5, r5, #3
 800de66:	3508      	adds	r5, #8
 800de68:	2d0c      	cmp	r5, #12
 800de6a:	bf38      	it	cc
 800de6c:	250c      	movcc	r5, #12
 800de6e:	2d00      	cmp	r5, #0
 800de70:	4607      	mov	r7, r0
 800de72:	db01      	blt.n	800de78 <_malloc_r+0x1c>
 800de74:	42a9      	cmp	r1, r5
 800de76:	d905      	bls.n	800de84 <_malloc_r+0x28>
 800de78:	230c      	movs	r3, #12
 800de7a:	603b      	str	r3, [r7, #0]
 800de7c:	2600      	movs	r6, #0
 800de7e:	4630      	mov	r0, r6
 800de80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de84:	4e2e      	ldr	r6, [pc, #184]	; (800df40 <_malloc_r+0xe4>)
 800de86:	f000 f8f7 	bl	800e078 <__malloc_lock>
 800de8a:	6833      	ldr	r3, [r6, #0]
 800de8c:	461c      	mov	r4, r3
 800de8e:	bb34      	cbnz	r4, 800dede <_malloc_r+0x82>
 800de90:	4629      	mov	r1, r5
 800de92:	4638      	mov	r0, r7
 800de94:	f7ff ffc2 	bl	800de1c <sbrk_aligned>
 800de98:	1c43      	adds	r3, r0, #1
 800de9a:	4604      	mov	r4, r0
 800de9c:	d14d      	bne.n	800df3a <_malloc_r+0xde>
 800de9e:	6834      	ldr	r4, [r6, #0]
 800dea0:	4626      	mov	r6, r4
 800dea2:	2e00      	cmp	r6, #0
 800dea4:	d140      	bne.n	800df28 <_malloc_r+0xcc>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	4631      	mov	r1, r6
 800deaa:	4638      	mov	r0, r7
 800deac:	eb04 0803 	add.w	r8, r4, r3
 800deb0:	f000 f8b2 	bl	800e018 <_sbrk_r>
 800deb4:	4580      	cmp	r8, r0
 800deb6:	d13a      	bne.n	800df2e <_malloc_r+0xd2>
 800deb8:	6821      	ldr	r1, [r4, #0]
 800deba:	3503      	adds	r5, #3
 800debc:	1a6d      	subs	r5, r5, r1
 800debe:	f025 0503 	bic.w	r5, r5, #3
 800dec2:	3508      	adds	r5, #8
 800dec4:	2d0c      	cmp	r5, #12
 800dec6:	bf38      	it	cc
 800dec8:	250c      	movcc	r5, #12
 800deca:	4629      	mov	r1, r5
 800decc:	4638      	mov	r0, r7
 800dece:	f7ff ffa5 	bl	800de1c <sbrk_aligned>
 800ded2:	3001      	adds	r0, #1
 800ded4:	d02b      	beq.n	800df2e <_malloc_r+0xd2>
 800ded6:	6823      	ldr	r3, [r4, #0]
 800ded8:	442b      	add	r3, r5
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	e00e      	b.n	800defc <_malloc_r+0xa0>
 800dede:	6822      	ldr	r2, [r4, #0]
 800dee0:	1b52      	subs	r2, r2, r5
 800dee2:	d41e      	bmi.n	800df22 <_malloc_r+0xc6>
 800dee4:	2a0b      	cmp	r2, #11
 800dee6:	d916      	bls.n	800df16 <_malloc_r+0xba>
 800dee8:	1961      	adds	r1, r4, r5
 800deea:	42a3      	cmp	r3, r4
 800deec:	6025      	str	r5, [r4, #0]
 800deee:	bf18      	it	ne
 800def0:	6059      	strne	r1, [r3, #4]
 800def2:	6863      	ldr	r3, [r4, #4]
 800def4:	bf08      	it	eq
 800def6:	6031      	streq	r1, [r6, #0]
 800def8:	5162      	str	r2, [r4, r5]
 800defa:	604b      	str	r3, [r1, #4]
 800defc:	4638      	mov	r0, r7
 800defe:	f104 060b 	add.w	r6, r4, #11
 800df02:	f000 f8bf 	bl	800e084 <__malloc_unlock>
 800df06:	f026 0607 	bic.w	r6, r6, #7
 800df0a:	1d23      	adds	r3, r4, #4
 800df0c:	1af2      	subs	r2, r6, r3
 800df0e:	d0b6      	beq.n	800de7e <_malloc_r+0x22>
 800df10:	1b9b      	subs	r3, r3, r6
 800df12:	50a3      	str	r3, [r4, r2]
 800df14:	e7b3      	b.n	800de7e <_malloc_r+0x22>
 800df16:	6862      	ldr	r2, [r4, #4]
 800df18:	42a3      	cmp	r3, r4
 800df1a:	bf0c      	ite	eq
 800df1c:	6032      	streq	r2, [r6, #0]
 800df1e:	605a      	strne	r2, [r3, #4]
 800df20:	e7ec      	b.n	800defc <_malloc_r+0xa0>
 800df22:	4623      	mov	r3, r4
 800df24:	6864      	ldr	r4, [r4, #4]
 800df26:	e7b2      	b.n	800de8e <_malloc_r+0x32>
 800df28:	4634      	mov	r4, r6
 800df2a:	6876      	ldr	r6, [r6, #4]
 800df2c:	e7b9      	b.n	800dea2 <_malloc_r+0x46>
 800df2e:	230c      	movs	r3, #12
 800df30:	603b      	str	r3, [r7, #0]
 800df32:	4638      	mov	r0, r7
 800df34:	f000 f8a6 	bl	800e084 <__malloc_unlock>
 800df38:	e7a1      	b.n	800de7e <_malloc_r+0x22>
 800df3a:	6025      	str	r5, [r4, #0]
 800df3c:	e7de      	b.n	800defc <_malloc_r+0xa0>
 800df3e:	bf00      	nop
 800df40:	20006aa8 	.word	0x20006aa8

0800df44 <cleanup_glue>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	460c      	mov	r4, r1
 800df48:	6809      	ldr	r1, [r1, #0]
 800df4a:	4605      	mov	r5, r0
 800df4c:	b109      	cbz	r1, 800df52 <cleanup_glue+0xe>
 800df4e:	f7ff fff9 	bl	800df44 <cleanup_glue>
 800df52:	4621      	mov	r1, r4
 800df54:	4628      	mov	r0, r5
 800df56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df5a:	f000 b899 	b.w	800e090 <_free_r>
	...

0800df60 <_reclaim_reent>:
 800df60:	4b2c      	ldr	r3, [pc, #176]	; (800e014 <_reclaim_reent+0xb4>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4283      	cmp	r3, r0
 800df66:	b570      	push	{r4, r5, r6, lr}
 800df68:	4604      	mov	r4, r0
 800df6a:	d051      	beq.n	800e010 <_reclaim_reent+0xb0>
 800df6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df6e:	b143      	cbz	r3, 800df82 <_reclaim_reent+0x22>
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d14a      	bne.n	800e00c <_reclaim_reent+0xac>
 800df76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df78:	6819      	ldr	r1, [r3, #0]
 800df7a:	b111      	cbz	r1, 800df82 <_reclaim_reent+0x22>
 800df7c:	4620      	mov	r0, r4
 800df7e:	f000 f887 	bl	800e090 <_free_r>
 800df82:	6961      	ldr	r1, [r4, #20]
 800df84:	b111      	cbz	r1, 800df8c <_reclaim_reent+0x2c>
 800df86:	4620      	mov	r0, r4
 800df88:	f000 f882 	bl	800e090 <_free_r>
 800df8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df8e:	b111      	cbz	r1, 800df96 <_reclaim_reent+0x36>
 800df90:	4620      	mov	r0, r4
 800df92:	f000 f87d 	bl	800e090 <_free_r>
 800df96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800df98:	b111      	cbz	r1, 800dfa0 <_reclaim_reent+0x40>
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 f878 	bl	800e090 <_free_r>
 800dfa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dfa2:	b111      	cbz	r1, 800dfaa <_reclaim_reent+0x4a>
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f000 f873 	bl	800e090 <_free_r>
 800dfaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dfac:	b111      	cbz	r1, 800dfb4 <_reclaim_reent+0x54>
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 f86e 	bl	800e090 <_free_r>
 800dfb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dfb6:	b111      	cbz	r1, 800dfbe <_reclaim_reent+0x5e>
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 f869 	bl	800e090 <_free_r>
 800dfbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dfc0:	b111      	cbz	r1, 800dfc8 <_reclaim_reent+0x68>
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 f864 	bl	800e090 <_free_r>
 800dfc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfca:	b111      	cbz	r1, 800dfd2 <_reclaim_reent+0x72>
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f000 f85f 	bl	800e090 <_free_r>
 800dfd2:	69a3      	ldr	r3, [r4, #24]
 800dfd4:	b1e3      	cbz	r3, 800e010 <_reclaim_reent+0xb0>
 800dfd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dfd8:	4620      	mov	r0, r4
 800dfda:	4798      	blx	r3
 800dfdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dfde:	b1b9      	cbz	r1, 800e010 <_reclaim_reent+0xb0>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfe6:	f7ff bfad 	b.w	800df44 <cleanup_glue>
 800dfea:	5949      	ldr	r1, [r1, r5]
 800dfec:	b941      	cbnz	r1, 800e000 <_reclaim_reent+0xa0>
 800dfee:	3504      	adds	r5, #4
 800dff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dff2:	2d80      	cmp	r5, #128	; 0x80
 800dff4:	68d9      	ldr	r1, [r3, #12]
 800dff6:	d1f8      	bne.n	800dfea <_reclaim_reent+0x8a>
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 f849 	bl	800e090 <_free_r>
 800dffe:	e7ba      	b.n	800df76 <_reclaim_reent+0x16>
 800e000:	680e      	ldr	r6, [r1, #0]
 800e002:	4620      	mov	r0, r4
 800e004:	f000 f844 	bl	800e090 <_free_r>
 800e008:	4631      	mov	r1, r6
 800e00a:	e7ef      	b.n	800dfec <_reclaim_reent+0x8c>
 800e00c:	2500      	movs	r5, #0
 800e00e:	e7ef      	b.n	800dff0 <_reclaim_reent+0x90>
 800e010:	bd70      	pop	{r4, r5, r6, pc}
 800e012:	bf00      	nop
 800e014:	20000110 	.word	0x20000110

0800e018 <_sbrk_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d06      	ldr	r5, [pc, #24]	; (800e034 <_sbrk_r+0x1c>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	4604      	mov	r4, r0
 800e020:	4608      	mov	r0, r1
 800e022:	602b      	str	r3, [r5, #0]
 800e024:	f7f4 fb70 	bl	8002708 <_sbrk>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_sbrk_r+0x1a>
 800e02c:	682b      	ldr	r3, [r5, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_sbrk_r+0x1a>
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	20006ab0 	.word	0x20006ab0

0800e038 <siprintf>:
 800e038:	b40e      	push	{r1, r2, r3}
 800e03a:	b500      	push	{lr}
 800e03c:	b09c      	sub	sp, #112	; 0x70
 800e03e:	ab1d      	add	r3, sp, #116	; 0x74
 800e040:	9002      	str	r0, [sp, #8]
 800e042:	9006      	str	r0, [sp, #24]
 800e044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e048:	4809      	ldr	r0, [pc, #36]	; (800e070 <siprintf+0x38>)
 800e04a:	9107      	str	r1, [sp, #28]
 800e04c:	9104      	str	r1, [sp, #16]
 800e04e:	4909      	ldr	r1, [pc, #36]	; (800e074 <siprintf+0x3c>)
 800e050:	f853 2b04 	ldr.w	r2, [r3], #4
 800e054:	9105      	str	r1, [sp, #20]
 800e056:	6800      	ldr	r0, [r0, #0]
 800e058:	9301      	str	r3, [sp, #4]
 800e05a:	a902      	add	r1, sp, #8
 800e05c:	f000 f8c0 	bl	800e1e0 <_svfiprintf_r>
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	2200      	movs	r2, #0
 800e064:	701a      	strb	r2, [r3, #0]
 800e066:	b01c      	add	sp, #112	; 0x70
 800e068:	f85d eb04 	ldr.w	lr, [sp], #4
 800e06c:	b003      	add	sp, #12
 800e06e:	4770      	bx	lr
 800e070:	20000110 	.word	0x20000110
 800e074:	ffff0208 	.word	0xffff0208

0800e078 <__malloc_lock>:
 800e078:	4801      	ldr	r0, [pc, #4]	; (800e080 <__malloc_lock+0x8>)
 800e07a:	f7ff beb7 	b.w	800ddec <__retarget_lock_acquire_recursive>
 800e07e:	bf00      	nop
 800e080:	20006aa4 	.word	0x20006aa4

0800e084 <__malloc_unlock>:
 800e084:	4801      	ldr	r0, [pc, #4]	; (800e08c <__malloc_unlock+0x8>)
 800e086:	f7ff beb2 	b.w	800ddee <__retarget_lock_release_recursive>
 800e08a:	bf00      	nop
 800e08c:	20006aa4 	.word	0x20006aa4

0800e090 <_free_r>:
 800e090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e092:	2900      	cmp	r1, #0
 800e094:	d044      	beq.n	800e120 <_free_r+0x90>
 800e096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e09a:	9001      	str	r0, [sp, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f1a1 0404 	sub.w	r4, r1, #4
 800e0a2:	bfb8      	it	lt
 800e0a4:	18e4      	addlt	r4, r4, r3
 800e0a6:	f7ff ffe7 	bl	800e078 <__malloc_lock>
 800e0aa:	4a1e      	ldr	r2, [pc, #120]	; (800e124 <_free_r+0x94>)
 800e0ac:	9801      	ldr	r0, [sp, #4]
 800e0ae:	6813      	ldr	r3, [r2, #0]
 800e0b0:	b933      	cbnz	r3, 800e0c0 <_free_r+0x30>
 800e0b2:	6063      	str	r3, [r4, #4]
 800e0b4:	6014      	str	r4, [r2, #0]
 800e0b6:	b003      	add	sp, #12
 800e0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0bc:	f7ff bfe2 	b.w	800e084 <__malloc_unlock>
 800e0c0:	42a3      	cmp	r3, r4
 800e0c2:	d908      	bls.n	800e0d6 <_free_r+0x46>
 800e0c4:	6825      	ldr	r5, [r4, #0]
 800e0c6:	1961      	adds	r1, r4, r5
 800e0c8:	428b      	cmp	r3, r1
 800e0ca:	bf01      	itttt	eq
 800e0cc:	6819      	ldreq	r1, [r3, #0]
 800e0ce:	685b      	ldreq	r3, [r3, #4]
 800e0d0:	1949      	addeq	r1, r1, r5
 800e0d2:	6021      	streq	r1, [r4, #0]
 800e0d4:	e7ed      	b.n	800e0b2 <_free_r+0x22>
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	b10b      	cbz	r3, 800e0e0 <_free_r+0x50>
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	d9fa      	bls.n	800e0d6 <_free_r+0x46>
 800e0e0:	6811      	ldr	r1, [r2, #0]
 800e0e2:	1855      	adds	r5, r2, r1
 800e0e4:	42a5      	cmp	r5, r4
 800e0e6:	d10b      	bne.n	800e100 <_free_r+0x70>
 800e0e8:	6824      	ldr	r4, [r4, #0]
 800e0ea:	4421      	add	r1, r4
 800e0ec:	1854      	adds	r4, r2, r1
 800e0ee:	42a3      	cmp	r3, r4
 800e0f0:	6011      	str	r1, [r2, #0]
 800e0f2:	d1e0      	bne.n	800e0b6 <_free_r+0x26>
 800e0f4:	681c      	ldr	r4, [r3, #0]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	6053      	str	r3, [r2, #4]
 800e0fa:	4421      	add	r1, r4
 800e0fc:	6011      	str	r1, [r2, #0]
 800e0fe:	e7da      	b.n	800e0b6 <_free_r+0x26>
 800e100:	d902      	bls.n	800e108 <_free_r+0x78>
 800e102:	230c      	movs	r3, #12
 800e104:	6003      	str	r3, [r0, #0]
 800e106:	e7d6      	b.n	800e0b6 <_free_r+0x26>
 800e108:	6825      	ldr	r5, [r4, #0]
 800e10a:	1961      	adds	r1, r4, r5
 800e10c:	428b      	cmp	r3, r1
 800e10e:	bf04      	itt	eq
 800e110:	6819      	ldreq	r1, [r3, #0]
 800e112:	685b      	ldreq	r3, [r3, #4]
 800e114:	6063      	str	r3, [r4, #4]
 800e116:	bf04      	itt	eq
 800e118:	1949      	addeq	r1, r1, r5
 800e11a:	6021      	streq	r1, [r4, #0]
 800e11c:	6054      	str	r4, [r2, #4]
 800e11e:	e7ca      	b.n	800e0b6 <_free_r+0x26>
 800e120:	b003      	add	sp, #12
 800e122:	bd30      	pop	{r4, r5, pc}
 800e124:	20006aa8 	.word	0x20006aa8

0800e128 <__ssputs_r>:
 800e128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e12c:	688e      	ldr	r6, [r1, #8]
 800e12e:	429e      	cmp	r6, r3
 800e130:	4682      	mov	sl, r0
 800e132:	460c      	mov	r4, r1
 800e134:	4690      	mov	r8, r2
 800e136:	461f      	mov	r7, r3
 800e138:	d838      	bhi.n	800e1ac <__ssputs_r+0x84>
 800e13a:	898a      	ldrh	r2, [r1, #12]
 800e13c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e140:	d032      	beq.n	800e1a8 <__ssputs_r+0x80>
 800e142:	6825      	ldr	r5, [r4, #0]
 800e144:	6909      	ldr	r1, [r1, #16]
 800e146:	eba5 0901 	sub.w	r9, r5, r1
 800e14a:	6965      	ldr	r5, [r4, #20]
 800e14c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e154:	3301      	adds	r3, #1
 800e156:	444b      	add	r3, r9
 800e158:	106d      	asrs	r5, r5, #1
 800e15a:	429d      	cmp	r5, r3
 800e15c:	bf38      	it	cc
 800e15e:	461d      	movcc	r5, r3
 800e160:	0553      	lsls	r3, r2, #21
 800e162:	d531      	bpl.n	800e1c8 <__ssputs_r+0xa0>
 800e164:	4629      	mov	r1, r5
 800e166:	f7ff fe79 	bl	800de5c <_malloc_r>
 800e16a:	4606      	mov	r6, r0
 800e16c:	b950      	cbnz	r0, 800e184 <__ssputs_r+0x5c>
 800e16e:	230c      	movs	r3, #12
 800e170:	f8ca 3000 	str.w	r3, [sl]
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e17a:	81a3      	strh	r3, [r4, #12]
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e184:	6921      	ldr	r1, [r4, #16]
 800e186:	464a      	mov	r2, r9
 800e188:	f7ff fe32 	bl	800ddf0 <memcpy>
 800e18c:	89a3      	ldrh	r3, [r4, #12]
 800e18e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	6126      	str	r6, [r4, #16]
 800e19a:	6165      	str	r5, [r4, #20]
 800e19c:	444e      	add	r6, r9
 800e19e:	eba5 0509 	sub.w	r5, r5, r9
 800e1a2:	6026      	str	r6, [r4, #0]
 800e1a4:	60a5      	str	r5, [r4, #8]
 800e1a6:	463e      	mov	r6, r7
 800e1a8:	42be      	cmp	r6, r7
 800e1aa:	d900      	bls.n	800e1ae <__ssputs_r+0x86>
 800e1ac:	463e      	mov	r6, r7
 800e1ae:	6820      	ldr	r0, [r4, #0]
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	4641      	mov	r1, r8
 800e1b4:	f000 faa8 	bl	800e708 <memmove>
 800e1b8:	68a3      	ldr	r3, [r4, #8]
 800e1ba:	1b9b      	subs	r3, r3, r6
 800e1bc:	60a3      	str	r3, [r4, #8]
 800e1be:	6823      	ldr	r3, [r4, #0]
 800e1c0:	4433      	add	r3, r6
 800e1c2:	6023      	str	r3, [r4, #0]
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	e7db      	b.n	800e180 <__ssputs_r+0x58>
 800e1c8:	462a      	mov	r2, r5
 800e1ca:	f000 fab7 	bl	800e73c <_realloc_r>
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d1e1      	bne.n	800e198 <__ssputs_r+0x70>
 800e1d4:	6921      	ldr	r1, [r4, #16]
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	f7ff ff5a 	bl	800e090 <_free_r>
 800e1dc:	e7c7      	b.n	800e16e <__ssputs_r+0x46>
	...

0800e1e0 <_svfiprintf_r>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	4698      	mov	r8, r3
 800e1e6:	898b      	ldrh	r3, [r1, #12]
 800e1e8:	061b      	lsls	r3, r3, #24
 800e1ea:	b09d      	sub	sp, #116	; 0x74
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	4614      	mov	r4, r2
 800e1f2:	d50e      	bpl.n	800e212 <_svfiprintf_r+0x32>
 800e1f4:	690b      	ldr	r3, [r1, #16]
 800e1f6:	b963      	cbnz	r3, 800e212 <_svfiprintf_r+0x32>
 800e1f8:	2140      	movs	r1, #64	; 0x40
 800e1fa:	f7ff fe2f 	bl	800de5c <_malloc_r>
 800e1fe:	6028      	str	r0, [r5, #0]
 800e200:	6128      	str	r0, [r5, #16]
 800e202:	b920      	cbnz	r0, 800e20e <_svfiprintf_r+0x2e>
 800e204:	230c      	movs	r3, #12
 800e206:	603b      	str	r3, [r7, #0]
 800e208:	f04f 30ff 	mov.w	r0, #4294967295
 800e20c:	e0d1      	b.n	800e3b2 <_svfiprintf_r+0x1d2>
 800e20e:	2340      	movs	r3, #64	; 0x40
 800e210:	616b      	str	r3, [r5, #20]
 800e212:	2300      	movs	r3, #0
 800e214:	9309      	str	r3, [sp, #36]	; 0x24
 800e216:	2320      	movs	r3, #32
 800e218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e21c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e220:	2330      	movs	r3, #48	; 0x30
 800e222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3cc <_svfiprintf_r+0x1ec>
 800e226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e22a:	f04f 0901 	mov.w	r9, #1
 800e22e:	4623      	mov	r3, r4
 800e230:	469a      	mov	sl, r3
 800e232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e236:	b10a      	cbz	r2, 800e23c <_svfiprintf_r+0x5c>
 800e238:	2a25      	cmp	r2, #37	; 0x25
 800e23a:	d1f9      	bne.n	800e230 <_svfiprintf_r+0x50>
 800e23c:	ebba 0b04 	subs.w	fp, sl, r4
 800e240:	d00b      	beq.n	800e25a <_svfiprintf_r+0x7a>
 800e242:	465b      	mov	r3, fp
 800e244:	4622      	mov	r2, r4
 800e246:	4629      	mov	r1, r5
 800e248:	4638      	mov	r0, r7
 800e24a:	f7ff ff6d 	bl	800e128 <__ssputs_r>
 800e24e:	3001      	adds	r0, #1
 800e250:	f000 80aa 	beq.w	800e3a8 <_svfiprintf_r+0x1c8>
 800e254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e256:	445a      	add	r2, fp
 800e258:	9209      	str	r2, [sp, #36]	; 0x24
 800e25a:	f89a 3000 	ldrb.w	r3, [sl]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f000 80a2 	beq.w	800e3a8 <_svfiprintf_r+0x1c8>
 800e264:	2300      	movs	r3, #0
 800e266:	f04f 32ff 	mov.w	r2, #4294967295
 800e26a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e26e:	f10a 0a01 	add.w	sl, sl, #1
 800e272:	9304      	str	r3, [sp, #16]
 800e274:	9307      	str	r3, [sp, #28]
 800e276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e27a:	931a      	str	r3, [sp, #104]	; 0x68
 800e27c:	4654      	mov	r4, sl
 800e27e:	2205      	movs	r2, #5
 800e280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e284:	4851      	ldr	r0, [pc, #324]	; (800e3cc <_svfiprintf_r+0x1ec>)
 800e286:	f7f1 ffb3 	bl	80001f0 <memchr>
 800e28a:	9a04      	ldr	r2, [sp, #16]
 800e28c:	b9d8      	cbnz	r0, 800e2c6 <_svfiprintf_r+0xe6>
 800e28e:	06d0      	lsls	r0, r2, #27
 800e290:	bf44      	itt	mi
 800e292:	2320      	movmi	r3, #32
 800e294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e298:	0711      	lsls	r1, r2, #28
 800e29a:	bf44      	itt	mi
 800e29c:	232b      	movmi	r3, #43	; 0x2b
 800e29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e2a8:	d015      	beq.n	800e2d6 <_svfiprintf_r+0xf6>
 800e2aa:	9a07      	ldr	r2, [sp, #28]
 800e2ac:	4654      	mov	r4, sl
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	f04f 0c0a 	mov.w	ip, #10
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ba:	3b30      	subs	r3, #48	; 0x30
 800e2bc:	2b09      	cmp	r3, #9
 800e2be:	d94e      	bls.n	800e35e <_svfiprintf_r+0x17e>
 800e2c0:	b1b0      	cbz	r0, 800e2f0 <_svfiprintf_r+0x110>
 800e2c2:	9207      	str	r2, [sp, #28]
 800e2c4:	e014      	b.n	800e2f0 <_svfiprintf_r+0x110>
 800e2c6:	eba0 0308 	sub.w	r3, r0, r8
 800e2ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	9304      	str	r3, [sp, #16]
 800e2d2:	46a2      	mov	sl, r4
 800e2d4:	e7d2      	b.n	800e27c <_svfiprintf_r+0x9c>
 800e2d6:	9b03      	ldr	r3, [sp, #12]
 800e2d8:	1d19      	adds	r1, r3, #4
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	9103      	str	r1, [sp, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bfbb      	ittet	lt
 800e2e2:	425b      	neglt	r3, r3
 800e2e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e2e8:	9307      	strge	r3, [sp, #28]
 800e2ea:	9307      	strlt	r3, [sp, #28]
 800e2ec:	bfb8      	it	lt
 800e2ee:	9204      	strlt	r2, [sp, #16]
 800e2f0:	7823      	ldrb	r3, [r4, #0]
 800e2f2:	2b2e      	cmp	r3, #46	; 0x2e
 800e2f4:	d10c      	bne.n	800e310 <_svfiprintf_r+0x130>
 800e2f6:	7863      	ldrb	r3, [r4, #1]
 800e2f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e2fa:	d135      	bne.n	800e368 <_svfiprintf_r+0x188>
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	1d1a      	adds	r2, r3, #4
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	9203      	str	r2, [sp, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	bfb8      	it	lt
 800e308:	f04f 33ff 	movlt.w	r3, #4294967295
 800e30c:	3402      	adds	r4, #2
 800e30e:	9305      	str	r3, [sp, #20]
 800e310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3dc <_svfiprintf_r+0x1fc>
 800e314:	7821      	ldrb	r1, [r4, #0]
 800e316:	2203      	movs	r2, #3
 800e318:	4650      	mov	r0, sl
 800e31a:	f7f1 ff69 	bl	80001f0 <memchr>
 800e31e:	b140      	cbz	r0, 800e332 <_svfiprintf_r+0x152>
 800e320:	2340      	movs	r3, #64	; 0x40
 800e322:	eba0 000a 	sub.w	r0, r0, sl
 800e326:	fa03 f000 	lsl.w	r0, r3, r0
 800e32a:	9b04      	ldr	r3, [sp, #16]
 800e32c:	4303      	orrs	r3, r0
 800e32e:	3401      	adds	r4, #1
 800e330:	9304      	str	r3, [sp, #16]
 800e332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e336:	4826      	ldr	r0, [pc, #152]	; (800e3d0 <_svfiprintf_r+0x1f0>)
 800e338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e33c:	2206      	movs	r2, #6
 800e33e:	f7f1 ff57 	bl	80001f0 <memchr>
 800e342:	2800      	cmp	r0, #0
 800e344:	d038      	beq.n	800e3b8 <_svfiprintf_r+0x1d8>
 800e346:	4b23      	ldr	r3, [pc, #140]	; (800e3d4 <_svfiprintf_r+0x1f4>)
 800e348:	bb1b      	cbnz	r3, 800e392 <_svfiprintf_r+0x1b2>
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	3307      	adds	r3, #7
 800e34e:	f023 0307 	bic.w	r3, r3, #7
 800e352:	3308      	adds	r3, #8
 800e354:	9303      	str	r3, [sp, #12]
 800e356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e358:	4433      	add	r3, r6
 800e35a:	9309      	str	r3, [sp, #36]	; 0x24
 800e35c:	e767      	b.n	800e22e <_svfiprintf_r+0x4e>
 800e35e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e362:	460c      	mov	r4, r1
 800e364:	2001      	movs	r0, #1
 800e366:	e7a5      	b.n	800e2b4 <_svfiprintf_r+0xd4>
 800e368:	2300      	movs	r3, #0
 800e36a:	3401      	adds	r4, #1
 800e36c:	9305      	str	r3, [sp, #20]
 800e36e:	4619      	mov	r1, r3
 800e370:	f04f 0c0a 	mov.w	ip, #10
 800e374:	4620      	mov	r0, r4
 800e376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e37a:	3a30      	subs	r2, #48	; 0x30
 800e37c:	2a09      	cmp	r2, #9
 800e37e:	d903      	bls.n	800e388 <_svfiprintf_r+0x1a8>
 800e380:	2b00      	cmp	r3, #0
 800e382:	d0c5      	beq.n	800e310 <_svfiprintf_r+0x130>
 800e384:	9105      	str	r1, [sp, #20]
 800e386:	e7c3      	b.n	800e310 <_svfiprintf_r+0x130>
 800e388:	fb0c 2101 	mla	r1, ip, r1, r2
 800e38c:	4604      	mov	r4, r0
 800e38e:	2301      	movs	r3, #1
 800e390:	e7f0      	b.n	800e374 <_svfiprintf_r+0x194>
 800e392:	ab03      	add	r3, sp, #12
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	462a      	mov	r2, r5
 800e398:	4b0f      	ldr	r3, [pc, #60]	; (800e3d8 <_svfiprintf_r+0x1f8>)
 800e39a:	a904      	add	r1, sp, #16
 800e39c:	4638      	mov	r0, r7
 800e39e:	f3af 8000 	nop.w
 800e3a2:	1c42      	adds	r2, r0, #1
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	d1d6      	bne.n	800e356 <_svfiprintf_r+0x176>
 800e3a8:	89ab      	ldrh	r3, [r5, #12]
 800e3aa:	065b      	lsls	r3, r3, #25
 800e3ac:	f53f af2c 	bmi.w	800e208 <_svfiprintf_r+0x28>
 800e3b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3b2:	b01d      	add	sp, #116	; 0x74
 800e3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b8:	ab03      	add	r3, sp, #12
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	462a      	mov	r2, r5
 800e3be:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <_svfiprintf_r+0x1f8>)
 800e3c0:	a904      	add	r1, sp, #16
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	f000 f87a 	bl	800e4bc <_printf_i>
 800e3c8:	e7eb      	b.n	800e3a2 <_svfiprintf_r+0x1c2>
 800e3ca:	bf00      	nop
 800e3cc:	0801239c 	.word	0x0801239c
 800e3d0:	080123a6 	.word	0x080123a6
 800e3d4:	00000000 	.word	0x00000000
 800e3d8:	0800e129 	.word	0x0800e129
 800e3dc:	080123a2 	.word	0x080123a2

0800e3e0 <_printf_common>:
 800e3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e4:	4616      	mov	r6, r2
 800e3e6:	4699      	mov	r9, r3
 800e3e8:	688a      	ldr	r2, [r1, #8]
 800e3ea:	690b      	ldr	r3, [r1, #16]
 800e3ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	bfb8      	it	lt
 800e3f4:	4613      	movlt	r3, r2
 800e3f6:	6033      	str	r3, [r6, #0]
 800e3f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3fc:	4607      	mov	r7, r0
 800e3fe:	460c      	mov	r4, r1
 800e400:	b10a      	cbz	r2, 800e406 <_printf_common+0x26>
 800e402:	3301      	adds	r3, #1
 800e404:	6033      	str	r3, [r6, #0]
 800e406:	6823      	ldr	r3, [r4, #0]
 800e408:	0699      	lsls	r1, r3, #26
 800e40a:	bf42      	ittt	mi
 800e40c:	6833      	ldrmi	r3, [r6, #0]
 800e40e:	3302      	addmi	r3, #2
 800e410:	6033      	strmi	r3, [r6, #0]
 800e412:	6825      	ldr	r5, [r4, #0]
 800e414:	f015 0506 	ands.w	r5, r5, #6
 800e418:	d106      	bne.n	800e428 <_printf_common+0x48>
 800e41a:	f104 0a19 	add.w	sl, r4, #25
 800e41e:	68e3      	ldr	r3, [r4, #12]
 800e420:	6832      	ldr	r2, [r6, #0]
 800e422:	1a9b      	subs	r3, r3, r2
 800e424:	42ab      	cmp	r3, r5
 800e426:	dc26      	bgt.n	800e476 <_printf_common+0x96>
 800e428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e42c:	1e13      	subs	r3, r2, #0
 800e42e:	6822      	ldr	r2, [r4, #0]
 800e430:	bf18      	it	ne
 800e432:	2301      	movne	r3, #1
 800e434:	0692      	lsls	r2, r2, #26
 800e436:	d42b      	bmi.n	800e490 <_printf_common+0xb0>
 800e438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e43c:	4649      	mov	r1, r9
 800e43e:	4638      	mov	r0, r7
 800e440:	47c0      	blx	r8
 800e442:	3001      	adds	r0, #1
 800e444:	d01e      	beq.n	800e484 <_printf_common+0xa4>
 800e446:	6823      	ldr	r3, [r4, #0]
 800e448:	68e5      	ldr	r5, [r4, #12]
 800e44a:	6832      	ldr	r2, [r6, #0]
 800e44c:	f003 0306 	and.w	r3, r3, #6
 800e450:	2b04      	cmp	r3, #4
 800e452:	bf08      	it	eq
 800e454:	1aad      	subeq	r5, r5, r2
 800e456:	68a3      	ldr	r3, [r4, #8]
 800e458:	6922      	ldr	r2, [r4, #16]
 800e45a:	bf0c      	ite	eq
 800e45c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e460:	2500      	movne	r5, #0
 800e462:	4293      	cmp	r3, r2
 800e464:	bfc4      	itt	gt
 800e466:	1a9b      	subgt	r3, r3, r2
 800e468:	18ed      	addgt	r5, r5, r3
 800e46a:	2600      	movs	r6, #0
 800e46c:	341a      	adds	r4, #26
 800e46e:	42b5      	cmp	r5, r6
 800e470:	d11a      	bne.n	800e4a8 <_printf_common+0xc8>
 800e472:	2000      	movs	r0, #0
 800e474:	e008      	b.n	800e488 <_printf_common+0xa8>
 800e476:	2301      	movs	r3, #1
 800e478:	4652      	mov	r2, sl
 800e47a:	4649      	mov	r1, r9
 800e47c:	4638      	mov	r0, r7
 800e47e:	47c0      	blx	r8
 800e480:	3001      	adds	r0, #1
 800e482:	d103      	bne.n	800e48c <_printf_common+0xac>
 800e484:	f04f 30ff 	mov.w	r0, #4294967295
 800e488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e48c:	3501      	adds	r5, #1
 800e48e:	e7c6      	b.n	800e41e <_printf_common+0x3e>
 800e490:	18e1      	adds	r1, r4, r3
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	2030      	movs	r0, #48	; 0x30
 800e496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e49a:	4422      	add	r2, r4
 800e49c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4a4:	3302      	adds	r3, #2
 800e4a6:	e7c7      	b.n	800e438 <_printf_common+0x58>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	4622      	mov	r2, r4
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	47c0      	blx	r8
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	d0e6      	beq.n	800e484 <_printf_common+0xa4>
 800e4b6:	3601      	adds	r6, #1
 800e4b8:	e7d9      	b.n	800e46e <_printf_common+0x8e>
	...

0800e4bc <_printf_i>:
 800e4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c0:	7e0f      	ldrb	r7, [r1, #24]
 800e4c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4c4:	2f78      	cmp	r7, #120	; 0x78
 800e4c6:	4691      	mov	r9, r2
 800e4c8:	4680      	mov	r8, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	469a      	mov	sl, r3
 800e4ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4d2:	d807      	bhi.n	800e4e4 <_printf_i+0x28>
 800e4d4:	2f62      	cmp	r7, #98	; 0x62
 800e4d6:	d80a      	bhi.n	800e4ee <_printf_i+0x32>
 800e4d8:	2f00      	cmp	r7, #0
 800e4da:	f000 80d8 	beq.w	800e68e <_printf_i+0x1d2>
 800e4de:	2f58      	cmp	r7, #88	; 0x58
 800e4e0:	f000 80a3 	beq.w	800e62a <_printf_i+0x16e>
 800e4e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4ec:	e03a      	b.n	800e564 <_printf_i+0xa8>
 800e4ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4f2:	2b15      	cmp	r3, #21
 800e4f4:	d8f6      	bhi.n	800e4e4 <_printf_i+0x28>
 800e4f6:	a101      	add	r1, pc, #4	; (adr r1, 800e4fc <_printf_i+0x40>)
 800e4f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4fc:	0800e555 	.word	0x0800e555
 800e500:	0800e569 	.word	0x0800e569
 800e504:	0800e4e5 	.word	0x0800e4e5
 800e508:	0800e4e5 	.word	0x0800e4e5
 800e50c:	0800e4e5 	.word	0x0800e4e5
 800e510:	0800e4e5 	.word	0x0800e4e5
 800e514:	0800e569 	.word	0x0800e569
 800e518:	0800e4e5 	.word	0x0800e4e5
 800e51c:	0800e4e5 	.word	0x0800e4e5
 800e520:	0800e4e5 	.word	0x0800e4e5
 800e524:	0800e4e5 	.word	0x0800e4e5
 800e528:	0800e675 	.word	0x0800e675
 800e52c:	0800e599 	.word	0x0800e599
 800e530:	0800e657 	.word	0x0800e657
 800e534:	0800e4e5 	.word	0x0800e4e5
 800e538:	0800e4e5 	.word	0x0800e4e5
 800e53c:	0800e697 	.word	0x0800e697
 800e540:	0800e4e5 	.word	0x0800e4e5
 800e544:	0800e599 	.word	0x0800e599
 800e548:	0800e4e5 	.word	0x0800e4e5
 800e54c:	0800e4e5 	.word	0x0800e4e5
 800e550:	0800e65f 	.word	0x0800e65f
 800e554:	682b      	ldr	r3, [r5, #0]
 800e556:	1d1a      	adds	r2, r3, #4
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	602a      	str	r2, [r5, #0]
 800e55c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e564:	2301      	movs	r3, #1
 800e566:	e0a3      	b.n	800e6b0 <_printf_i+0x1f4>
 800e568:	6820      	ldr	r0, [r4, #0]
 800e56a:	6829      	ldr	r1, [r5, #0]
 800e56c:	0606      	lsls	r6, r0, #24
 800e56e:	f101 0304 	add.w	r3, r1, #4
 800e572:	d50a      	bpl.n	800e58a <_printf_i+0xce>
 800e574:	680e      	ldr	r6, [r1, #0]
 800e576:	602b      	str	r3, [r5, #0]
 800e578:	2e00      	cmp	r6, #0
 800e57a:	da03      	bge.n	800e584 <_printf_i+0xc8>
 800e57c:	232d      	movs	r3, #45	; 0x2d
 800e57e:	4276      	negs	r6, r6
 800e580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e584:	485e      	ldr	r0, [pc, #376]	; (800e700 <_printf_i+0x244>)
 800e586:	230a      	movs	r3, #10
 800e588:	e019      	b.n	800e5be <_printf_i+0x102>
 800e58a:	680e      	ldr	r6, [r1, #0]
 800e58c:	602b      	str	r3, [r5, #0]
 800e58e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e592:	bf18      	it	ne
 800e594:	b236      	sxthne	r6, r6
 800e596:	e7ef      	b.n	800e578 <_printf_i+0xbc>
 800e598:	682b      	ldr	r3, [r5, #0]
 800e59a:	6820      	ldr	r0, [r4, #0]
 800e59c:	1d19      	adds	r1, r3, #4
 800e59e:	6029      	str	r1, [r5, #0]
 800e5a0:	0601      	lsls	r1, r0, #24
 800e5a2:	d501      	bpl.n	800e5a8 <_printf_i+0xec>
 800e5a4:	681e      	ldr	r6, [r3, #0]
 800e5a6:	e002      	b.n	800e5ae <_printf_i+0xf2>
 800e5a8:	0646      	lsls	r6, r0, #25
 800e5aa:	d5fb      	bpl.n	800e5a4 <_printf_i+0xe8>
 800e5ac:	881e      	ldrh	r6, [r3, #0]
 800e5ae:	4854      	ldr	r0, [pc, #336]	; (800e700 <_printf_i+0x244>)
 800e5b0:	2f6f      	cmp	r7, #111	; 0x6f
 800e5b2:	bf0c      	ite	eq
 800e5b4:	2308      	moveq	r3, #8
 800e5b6:	230a      	movne	r3, #10
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5be:	6865      	ldr	r5, [r4, #4]
 800e5c0:	60a5      	str	r5, [r4, #8]
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	bfa2      	ittt	ge
 800e5c6:	6821      	ldrge	r1, [r4, #0]
 800e5c8:	f021 0104 	bicge.w	r1, r1, #4
 800e5cc:	6021      	strge	r1, [r4, #0]
 800e5ce:	b90e      	cbnz	r6, 800e5d4 <_printf_i+0x118>
 800e5d0:	2d00      	cmp	r5, #0
 800e5d2:	d04d      	beq.n	800e670 <_printf_i+0x1b4>
 800e5d4:	4615      	mov	r5, r2
 800e5d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5da:	fb03 6711 	mls	r7, r3, r1, r6
 800e5de:	5dc7      	ldrb	r7, [r0, r7]
 800e5e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5e4:	4637      	mov	r7, r6
 800e5e6:	42bb      	cmp	r3, r7
 800e5e8:	460e      	mov	r6, r1
 800e5ea:	d9f4      	bls.n	800e5d6 <_printf_i+0x11a>
 800e5ec:	2b08      	cmp	r3, #8
 800e5ee:	d10b      	bne.n	800e608 <_printf_i+0x14c>
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	07de      	lsls	r6, r3, #31
 800e5f4:	d508      	bpl.n	800e608 <_printf_i+0x14c>
 800e5f6:	6923      	ldr	r3, [r4, #16]
 800e5f8:	6861      	ldr	r1, [r4, #4]
 800e5fa:	4299      	cmp	r1, r3
 800e5fc:	bfde      	ittt	le
 800e5fe:	2330      	movle	r3, #48	; 0x30
 800e600:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e604:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e608:	1b52      	subs	r2, r2, r5
 800e60a:	6122      	str	r2, [r4, #16]
 800e60c:	f8cd a000 	str.w	sl, [sp]
 800e610:	464b      	mov	r3, r9
 800e612:	aa03      	add	r2, sp, #12
 800e614:	4621      	mov	r1, r4
 800e616:	4640      	mov	r0, r8
 800e618:	f7ff fee2 	bl	800e3e0 <_printf_common>
 800e61c:	3001      	adds	r0, #1
 800e61e:	d14c      	bne.n	800e6ba <_printf_i+0x1fe>
 800e620:	f04f 30ff 	mov.w	r0, #4294967295
 800e624:	b004      	add	sp, #16
 800e626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e62a:	4835      	ldr	r0, [pc, #212]	; (800e700 <_printf_i+0x244>)
 800e62c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e630:	6829      	ldr	r1, [r5, #0]
 800e632:	6823      	ldr	r3, [r4, #0]
 800e634:	f851 6b04 	ldr.w	r6, [r1], #4
 800e638:	6029      	str	r1, [r5, #0]
 800e63a:	061d      	lsls	r5, r3, #24
 800e63c:	d514      	bpl.n	800e668 <_printf_i+0x1ac>
 800e63e:	07df      	lsls	r7, r3, #31
 800e640:	bf44      	itt	mi
 800e642:	f043 0320 	orrmi.w	r3, r3, #32
 800e646:	6023      	strmi	r3, [r4, #0]
 800e648:	b91e      	cbnz	r6, 800e652 <_printf_i+0x196>
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	f023 0320 	bic.w	r3, r3, #32
 800e650:	6023      	str	r3, [r4, #0]
 800e652:	2310      	movs	r3, #16
 800e654:	e7b0      	b.n	800e5b8 <_printf_i+0xfc>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	f043 0320 	orr.w	r3, r3, #32
 800e65c:	6023      	str	r3, [r4, #0]
 800e65e:	2378      	movs	r3, #120	; 0x78
 800e660:	4828      	ldr	r0, [pc, #160]	; (800e704 <_printf_i+0x248>)
 800e662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e666:	e7e3      	b.n	800e630 <_printf_i+0x174>
 800e668:	0659      	lsls	r1, r3, #25
 800e66a:	bf48      	it	mi
 800e66c:	b2b6      	uxthmi	r6, r6
 800e66e:	e7e6      	b.n	800e63e <_printf_i+0x182>
 800e670:	4615      	mov	r5, r2
 800e672:	e7bb      	b.n	800e5ec <_printf_i+0x130>
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	6826      	ldr	r6, [r4, #0]
 800e678:	6961      	ldr	r1, [r4, #20]
 800e67a:	1d18      	adds	r0, r3, #4
 800e67c:	6028      	str	r0, [r5, #0]
 800e67e:	0635      	lsls	r5, r6, #24
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	d501      	bpl.n	800e688 <_printf_i+0x1cc>
 800e684:	6019      	str	r1, [r3, #0]
 800e686:	e002      	b.n	800e68e <_printf_i+0x1d2>
 800e688:	0670      	lsls	r0, r6, #25
 800e68a:	d5fb      	bpl.n	800e684 <_printf_i+0x1c8>
 800e68c:	8019      	strh	r1, [r3, #0]
 800e68e:	2300      	movs	r3, #0
 800e690:	6123      	str	r3, [r4, #16]
 800e692:	4615      	mov	r5, r2
 800e694:	e7ba      	b.n	800e60c <_printf_i+0x150>
 800e696:	682b      	ldr	r3, [r5, #0]
 800e698:	1d1a      	adds	r2, r3, #4
 800e69a:	602a      	str	r2, [r5, #0]
 800e69c:	681d      	ldr	r5, [r3, #0]
 800e69e:	6862      	ldr	r2, [r4, #4]
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f7f1 fda4 	bl	80001f0 <memchr>
 800e6a8:	b108      	cbz	r0, 800e6ae <_printf_i+0x1f2>
 800e6aa:	1b40      	subs	r0, r0, r5
 800e6ac:	6060      	str	r0, [r4, #4]
 800e6ae:	6863      	ldr	r3, [r4, #4]
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6b8:	e7a8      	b.n	800e60c <_printf_i+0x150>
 800e6ba:	6923      	ldr	r3, [r4, #16]
 800e6bc:	462a      	mov	r2, r5
 800e6be:	4649      	mov	r1, r9
 800e6c0:	4640      	mov	r0, r8
 800e6c2:	47d0      	blx	sl
 800e6c4:	3001      	adds	r0, #1
 800e6c6:	d0ab      	beq.n	800e620 <_printf_i+0x164>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	079b      	lsls	r3, r3, #30
 800e6cc:	d413      	bmi.n	800e6f6 <_printf_i+0x23a>
 800e6ce:	68e0      	ldr	r0, [r4, #12]
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	4298      	cmp	r0, r3
 800e6d4:	bfb8      	it	lt
 800e6d6:	4618      	movlt	r0, r3
 800e6d8:	e7a4      	b.n	800e624 <_printf_i+0x168>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	4632      	mov	r2, r6
 800e6de:	4649      	mov	r1, r9
 800e6e0:	4640      	mov	r0, r8
 800e6e2:	47d0      	blx	sl
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d09b      	beq.n	800e620 <_printf_i+0x164>
 800e6e8:	3501      	adds	r5, #1
 800e6ea:	68e3      	ldr	r3, [r4, #12]
 800e6ec:	9903      	ldr	r1, [sp, #12]
 800e6ee:	1a5b      	subs	r3, r3, r1
 800e6f0:	42ab      	cmp	r3, r5
 800e6f2:	dcf2      	bgt.n	800e6da <_printf_i+0x21e>
 800e6f4:	e7eb      	b.n	800e6ce <_printf_i+0x212>
 800e6f6:	2500      	movs	r5, #0
 800e6f8:	f104 0619 	add.w	r6, r4, #25
 800e6fc:	e7f5      	b.n	800e6ea <_printf_i+0x22e>
 800e6fe:	bf00      	nop
 800e700:	080123ad 	.word	0x080123ad
 800e704:	080123be 	.word	0x080123be

0800e708 <memmove>:
 800e708:	4288      	cmp	r0, r1
 800e70a:	b510      	push	{r4, lr}
 800e70c:	eb01 0402 	add.w	r4, r1, r2
 800e710:	d902      	bls.n	800e718 <memmove+0x10>
 800e712:	4284      	cmp	r4, r0
 800e714:	4623      	mov	r3, r4
 800e716:	d807      	bhi.n	800e728 <memmove+0x20>
 800e718:	1e43      	subs	r3, r0, #1
 800e71a:	42a1      	cmp	r1, r4
 800e71c:	d008      	beq.n	800e730 <memmove+0x28>
 800e71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e722:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e726:	e7f8      	b.n	800e71a <memmove+0x12>
 800e728:	4402      	add	r2, r0
 800e72a:	4601      	mov	r1, r0
 800e72c:	428a      	cmp	r2, r1
 800e72e:	d100      	bne.n	800e732 <memmove+0x2a>
 800e730:	bd10      	pop	{r4, pc}
 800e732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e73a:	e7f7      	b.n	800e72c <memmove+0x24>

0800e73c <_realloc_r>:
 800e73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e740:	4680      	mov	r8, r0
 800e742:	4614      	mov	r4, r2
 800e744:	460e      	mov	r6, r1
 800e746:	b921      	cbnz	r1, 800e752 <_realloc_r+0x16>
 800e748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	4611      	mov	r1, r2
 800e74e:	f7ff bb85 	b.w	800de5c <_malloc_r>
 800e752:	b92a      	cbnz	r2, 800e760 <_realloc_r+0x24>
 800e754:	f7ff fc9c 	bl	800e090 <_free_r>
 800e758:	4625      	mov	r5, r4
 800e75a:	4628      	mov	r0, r5
 800e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e760:	f000 f81b 	bl	800e79a <_malloc_usable_size_r>
 800e764:	4284      	cmp	r4, r0
 800e766:	4607      	mov	r7, r0
 800e768:	d802      	bhi.n	800e770 <_realloc_r+0x34>
 800e76a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e76e:	d812      	bhi.n	800e796 <_realloc_r+0x5a>
 800e770:	4621      	mov	r1, r4
 800e772:	4640      	mov	r0, r8
 800e774:	f7ff fb72 	bl	800de5c <_malloc_r>
 800e778:	4605      	mov	r5, r0
 800e77a:	2800      	cmp	r0, #0
 800e77c:	d0ed      	beq.n	800e75a <_realloc_r+0x1e>
 800e77e:	42bc      	cmp	r4, r7
 800e780:	4622      	mov	r2, r4
 800e782:	4631      	mov	r1, r6
 800e784:	bf28      	it	cs
 800e786:	463a      	movcs	r2, r7
 800e788:	f7ff fb32 	bl	800ddf0 <memcpy>
 800e78c:	4631      	mov	r1, r6
 800e78e:	4640      	mov	r0, r8
 800e790:	f7ff fc7e 	bl	800e090 <_free_r>
 800e794:	e7e1      	b.n	800e75a <_realloc_r+0x1e>
 800e796:	4635      	mov	r5, r6
 800e798:	e7df      	b.n	800e75a <_realloc_r+0x1e>

0800e79a <_malloc_usable_size_r>:
 800e79a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e79e:	1f18      	subs	r0, r3, #4
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	bfbc      	itt	lt
 800e7a4:	580b      	ldrlt	r3, [r1, r0]
 800e7a6:	18c0      	addlt	r0, r0, r3
 800e7a8:	4770      	bx	lr
	...

0800e7ac <_init>:
 800e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ae:	bf00      	nop
 800e7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7b2:	bc08      	pop	{r3}
 800e7b4:	469e      	mov	lr, r3
 800e7b6:	4770      	bx	lr

0800e7b8 <_fini>:
 800e7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ba:	bf00      	nop
 800e7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7be:	bc08      	pop	{r3}
 800e7c0:	469e      	mov	lr, r3
 800e7c2:	4770      	bx	lr
