
F411_diplay_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e634  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c00  0800e7d4  0800e7d4  0001e7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123d4  080123d4  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  080123d4  080123d4  000223d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123dc  080123dc  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123dc  080123dc  000223dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123e0  080123e0  000223e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  080123e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006940  20000174  08012558  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20006ab4  08012558  00036ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b63  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d0  00000000  00000000  00056d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0005c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  0005e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db14  00000000  00000000  0005fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000252e7  00000000  00000000  0007db04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a956e  00000000  00000000  000a2deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087f0  00000000  00000000  0014c3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      000000df  00000000  00000000  00154b9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e7bc 	.word	0x0800e7bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800e7bc 	.word	0x0800e7bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f002 f934 	bl	8002804 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059c:	f000 f86e 	bl	800067c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	T = HAL_GetTick();
 80005a0:	f002 f966 	bl	8002870 <HAL_GetTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <main+0xa4>)
 80005a8:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 fa85 	bl	8000ab8 <MX_GPIO_Init>
	MX_DMA_Init();
 80005ae:	f000 fa63 	bl	8000a78 <MX_DMA_Init>
	MX_CRC_Init();
 80005b2:	f000 f91d 	bl	80007f0 <MX_CRC_Init>
	MX_SPI1_Init();
 80005b6:	f000 f92f 	bl	8000818 <MX_SPI1_Init>
	MX_TIM2_Init();
 80005ba:	f000 f963 	bl	8000884 <MX_TIM2_Init>
	MX_ADC1_Init();
 80005be:	f000 f8c5 	bl	800074c <MX_ADC1_Init>
	MX_TIM3_Init();
 80005c2:	f000 f9ab 	bl	800091c <MX_TIM3_Init>
	MX_TIM4_Init();
 80005c6:	f000 fa03 	bl	80009d0 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <main+0xa8>)
 80005cc:	f005 fd30 	bl	8006030 <HAL_TIM_Base_Start>
	MX_USB_DEVICE_Init();
 80005d0:	f00c fec4 	bl	800d35c <MX_USB_DEVICE_Init>

	ST7789_Init();
 80005d4:	f000 fd4e 	bl	8001074 <ST7789_Init>
	ST7789_rotation(2);
 80005d8:	2002      	movs	r0, #2
 80005da:	f001 fc19 	bl	8001e10 <ST7789_rotation>
//	c
//	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005de:	f00a f943 	bl	800a868 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of DisplayTask */
	DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL,
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <main+0xac>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0xb0>)
 80005e8:	f00a f988 	bl	800a8fc <osThreadNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <main+0xb4>)
 80005f0:	6013      	str	r3, [r2, #0]
			&DisplayTask_attributes);

	/* creation of MotorTask */
	MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <main+0xb8>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4816      	ldr	r0, [pc, #88]	; (8000650 <main+0xbc>)
 80005f8:	f00a f980 	bl	800a8fc <osThreadNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <main+0xc0>)
 8000600:	6013      	str	r3, [r2, #0]

	/* creation of ADCTask */
	ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <main+0xc4>)
 8000604:	2100      	movs	r1, #0
 8000606:	4815      	ldr	r0, [pc, #84]	; (800065c <main+0xc8>)
 8000608:	f00a f978 	bl	800a8fc <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <main+0xcc>)
 8000610:	6013      	str	r3, [r2, #0]

	/* creation of USBTask */
	USBTaskHandle = osThreadNew(StartUSBTask, NULL, &USBTask_attributes);
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <main+0xd0>)
 8000614:	2100      	movs	r1, #0
 8000616:	4814      	ldr	r0, [pc, #80]	; (8000668 <main+0xd4>)
 8000618:	f00a f970 	bl	800a8fc <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <main+0xd8>)
 8000620:	6013      	str	r3, [r2, #0]

	/* creation of MotorSpeedTask */
	MotorSpeedTaskHandle = osThreadNew(StartMotorSpeedTask, NULL,
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <main+0xdc>)
 8000624:	2100      	movs	r1, #0
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0xe0>)
 8000628:	f00a f968 	bl	800a8fc <osThreadNew>
 800062c:	4603      	mov	r3, r0
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <main+0xe4>)
 8000630:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000632:	f00a f93d 	bl	800a8b0 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000636:	e7fe      	b.n	8000636 <main+0xa2>
 8000638:	20000384 	.word	0x20000384
 800063c:	20000328 	.word	0x20000328
 8000640:	08012248 	.word	0x08012248
 8000644:	08000ca1 	.word	0x08000ca1
 8000648:	20000370 	.word	0x20000370
 800064c:	0801226c 	.word	0x0801226c
 8000650:	08000ea1 	.word	0x08000ea1
 8000654:	20000374 	.word	0x20000374
 8000658:	08012290 	.word	0x08012290
 800065c:	08000f01 	.word	0x08000f01
 8000660:	20000378 	.word	0x20000378
 8000664:	080122b4 	.word	0x080122b4
 8000668:	08000f79 	.word	0x08000f79
 800066c:	2000037c 	.word	0x2000037c
 8000670:	080122d8 	.word	0x080122d8
 8000674:	08000fcd 	.word	0x08000fcd
 8000678:	20000380 	.word	0x20000380

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00d fbc6 	bl	800de1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xc8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a26      	ldr	r2, [pc, #152]	; (8000744 <SystemClock_Config+0xc8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <SystemClock_Config+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <SystemClock_Config+0xcc>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80006ec:	230f      	movs	r3, #15
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80006f0:	2390      	movs	r3, #144	; 0x90
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80006f8:	2305      	movs	r3, #5
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fd31 	bl	8005168 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
		Error_Handler();
 800070c:	f000 fcac 	bl	8001068 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2101      	movs	r1, #1
 800072c:	4618      	mov	r0, r3
 800072e:	f004 ff93 	bl	8005658 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc0>
		Error_Handler();
 8000738:	f000 fc96 	bl	8001068 <Error_Handler>
	}
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	; 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_ADC1_Init+0x98>)
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_ADC1_Init+0xa0>)
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_ADC1_Init+0x98>)
 8000798:	2201      	movs	r2, #1
 800079a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007ac:	f002 f890 	bl	80028d0 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x6e>
		Error_Handler();
 80007b6:	f000 fc57 	bl	8001068 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80007ba:	2306      	movs	r3, #6
 80007bc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_ADC1_Init+0x98>)
 80007cc:	f002 f94e 	bl	8002a6c <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x8e>
		Error_Handler();
 80007d6:	f000 fc47 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000190 	.word	0x20000190
 80007e8:	40012000 	.word	0x40012000
 80007ec:	0f000001 	.word	0x0f000001

080007f0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_CRC_Init+0x20>)
 80007f6:	4a07      	ldr	r2, [pc, #28]	; (8000814 <MX_CRC_Init+0x24>)
 80007f8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_CRC_Init+0x20>)
 80007fc:	f002 fd94 	bl	8003328 <HAL_CRC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_CRC_Init+0x1a>
		Error_Handler();
 8000806:	f000 fc2f 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001d8 	.word	0x200001d8
 8000814:	40023000 	.word	0x40023000

08000818 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI1_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI1_Init+0x64>)
 8000838:	2202      	movs	r2, #2
 800083a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI1_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI1_Init+0x64>)
 800086a:	f005 f8f3 	bl	8005a54 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000874:	f000 fbf8 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001e0 	.word	0x200001e0
 8000880:	40013000 	.word	0x40013000

08000884 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM2_Init+0x94>)
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 44999;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_TIM2_Init+0x94>)
 80008aa:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80008ae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM2_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_TIM2_Init+0x94>)
 80008b8:	220f      	movs	r2, #15
 80008ba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_TIM2_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM2_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <MX_TIM2_Init+0x94>)
 80008ca:	f005 fb61 	bl	8005f90 <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80008d4:	f000 fbc8 	bl	8001068 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_TIM2_Init+0x94>)
 80008e6:	f005 fe79 	bl	80065dc <HAL_TIM_ConfigClockSource>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80008f0:	f000 fbba 	bl	8001068 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_TIM2_Init+0x94>)
 8000902:	f006 fad5 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800090c:	f000 fbac 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000298 	.word	0x20000298

0800091c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <MX_TIM3_Init+0xb0>)
 8000942:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_TIM3_Init+0xac>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1023;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000952:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000956:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM3_Init+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000964:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000966:	f005 fc1f 	bl	80061a8 <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x58>
		Error_Handler();
 8000970:	f000 fb7a 	bl	8001068 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_TIM3_Init+0xac>)
 8000984:	f006 fa94 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800098e:	f000 fb6b 	bl	8001068 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	; 0x60
 8000994:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_TIM3_Init+0xac>)
 80009aa:	f005 fd55 	bl	8006458 <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80009b4:	f000 fb58 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_TIM3_Init+0xac>)
 80009ba:	f001 fdc7 	bl	800254c <HAL_TIM_MspPostInit>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002e0 	.word	0x200002e0
 80009cc:	40000400 	.word	0x40000400

080009d0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_TIM4_Init+0xa0>)
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <MX_TIM4_Init+0xa4>)
 80009f2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_TIM4_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_TIM4_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a06:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000a14:	4816      	ldr	r0, [pc, #88]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a16:	f005 fabb 	bl	8005f90 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM4_Init+0x54>
		Error_Handler();
 8000a20:	f000 fb22 	bl	8001068 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a24:	2307      	movs	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a28:	2350      	movs	r3, #80	; 0x50
 8000a2a:	613b      	str	r3, [r7, #16]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
	sSlaveConfig.TriggerFilter = 15;
 8000a30:	230f      	movs	r3, #15
 8000a32:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK) {
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a3c:	f005 fe95 	bl	800676a <HAL_TIM_SlaveConfigSynchro>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM4_Init+0x7a>
		Error_Handler();
 8000a46:	f000 fb0f 	bl	8001068 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_TIM4_Init+0xa0>)
 8000a58:	f006 fa2a 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000a62:	f000 fb01 	bl	8001068 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000328 	.word	0x20000328
 8000a74:	40000800 	.word	0x40000800

08000a78 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_DMA_Init+0x3c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	203a      	movs	r0, #58	; 0x3a
 8000aa0:	f002 fc18 	bl	80032d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000aa4:	203a      	movs	r0, #58	; 0x3a
 8000aa6:	f002 fc31 	bl	800330c <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_GPIO_Init+0x98>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RST_Pin | DC_Pin | CS_Pin | M_IN1_Pin | M_IN2_Pin,
 8000b22:	2200      	movs	r2, #0
 8000b24:	212f      	movs	r1, #47	; 0x2f
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_GPIO_Init+0x9c>)
 8000b28:	f003 f888 	bl	8003c3c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RST_Pin DC_Pin CS_Pin M_IN1_Pin
	 M_IN2_Pin */
	GPIO_InitStruct.Pin = RST_Pin | DC_Pin | CS_Pin | M_IN1_Pin | M_IN2_Pin;
 8000b2c:	232f      	movs	r3, #47	; 0x2f
 8000b2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_GPIO_Init+0x9c>)
 8000b44:	f002 fef6 	bl	8003934 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <printTime>:

/* USER CODE BEGIN 4 */
void printTime() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af04      	add	r7, sp, #16
	char str_s[10];
	TIME_ON.h = HAL_GetTick() / ONEHOUR;
 8000b5e:	f001 fe87 	bl	8002870 <HAL_GetTick>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <printTime+0x12c>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0d5b      	lsrs	r3, r3, #21
 8000b6c:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <printTime+0x130>)
 8000b6e:	6013      	str	r3, [r2, #0]
	TIME_ON.m = HAL_GetTick() / MINUT;
 8000b70:	f001 fe7e 	bl	8002870 <HAL_GetTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <printTime+0x134>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	0b9b      	lsrs	r3, r3, #14
 8000b7e:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <printTime+0x130>)
 8000b80:	6053      	str	r3, [r2, #4]
	TIME_ON.s = HAL_GetTick() / SEC;
 8000b82:	f001 fe75 	bl	8002870 <HAL_GetTick>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <printTime+0x138>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	099b      	lsrs	r3, r3, #6
 8000b90:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <printTime+0x130>)
 8000b92:	6093      	str	r3, [r2, #8]

	if (TIME_ON.s > 59) {
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <printTime+0x130>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b3b      	cmp	r3, #59	; 0x3b
 8000b9a:	d923      	bls.n	8000be4 <printTime+0x8c>
		if (TIME_ON.h > 0) {
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <printTime+0x130>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00f      	beq.n	8000bc4 <printTime+0x6c>
			TIME_ON.s = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 8000ba4:	f001 fe64 	bl	8002870 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <printTime+0x130>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4939      	ldr	r1, [pc, #228]	; (8000c94 <printTime+0x13c>)
 8000bb0:	fb01 f303 	mul.w	r3, r1, r3
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <printTime+0x138>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	099b      	lsrs	r3, r3, #6
 8000bbe:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <printTime+0x130>)
 8000bc0:	6093      	str	r3, [r2, #8]
 8000bc2:	e00f      	b.n	8000be4 <printTime+0x8c>

		} else {
			TIME_ON.s = (HAL_GetTick() - (MINUT * TIME_ON.m)) / SEC;
 8000bc4:	f001 fe54 	bl	8002870 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <printTime+0x130>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <printTime+0x138>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	099b      	lsrs	r3, r3, #6
 8000be0:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <printTime+0x130>)
 8000be2:	6093      	str	r3, [r2, #8]
		}
	}
	if (TIME_ON.m > 59) {
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <printTime+0x130>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b3b      	cmp	r3, #59	; 0x3b
 8000bea:	d90f      	bls.n	8000c0c <printTime+0xb4>
		TIME_ON.m = (HAL_GetTick() - (MINUT * TIME_ON.h)) / SEC;
 8000bec:	f001 fe40 	bl	8002870 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <printTime+0x130>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000bfa:	fb01 f303 	mul.w	r3, r1, r3
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <printTime+0x138>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	099b      	lsrs	r3, r3, #6
 8000c08:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <printTime+0x130>)
 8000c0a:	6053      	str	r3, [r2, #4]
	}
	if (TIME_ON.h >= HAL_ERROR) {
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <printTime+0x130>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00e      	beq.n	8000c32 <printTime+0xda>
		TIME_ON.h = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 8000c14:	f001 fe2c 	bl	8002870 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <printTime+0x130>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	491d      	ldr	r1, [pc, #116]	; (8000c94 <printTime+0x13c>)
 8000c20:	fb01 f303 	mul.w	r3, r1, r3
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <printTime+0x138>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	099b      	lsrs	r3, r3, #6
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <printTime+0x130>)
 8000c30:	6013      	str	r3, [r2, #0]
	}

	sprintf(str_s, "%li:%li:%li ", TIME_ON.h, TIME_ON.m, TIME_ON.s);
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <printTime+0x130>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <printTime+0x130>)
 8000c38:	6859      	ldr	r1, [r3, #4]
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <printTime+0x130>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	1d38      	adds	r0, r7, #4
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	460b      	mov	r3, r1
 8000c44:	4914      	ldr	r1, [pc, #80]	; (8000c98 <printTime+0x140>)
 8000c46:	f00d f9ff 	bl	800e048 <siprintf>

	ST7789_DrawFillRoundRect(0, 0, 90, 50, 0, ST7789_BLACK);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2332      	movs	r3, #50	; 0x32
 8000c54:	225a      	movs	r2, #90	; 0x5a
 8000c56:	2100      	movs	r1, #0
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f001 f953 	bl	8001f04 <ST7789_DrawFillRoundRect>

	ST7789_print(5, 5, ST7789_GREEN, ST7789_BLACK, 0, &Font_11x18, 1, str_s);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	9303      	str	r3, [sp, #12]
 8000c62:	2301      	movs	r3, #1
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <printTime+0x144>)
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2005      	movs	r0, #5
 8000c78:	f001 f806 	bl	8001c88 <ST7789_print>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	95217cb1 	.word	0x95217cb1
 8000c88:	2000038c 	.word	0x2000038c
 8000c8c:	45e7b273 	.word	0x45e7b273
 8000c90:	10624dd3 	.word	0x10624dd3
 8000c94:	0036ee80 	.word	0x0036ee80
 8000c98:	0800e80c 	.word	0x0800e80c
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <StartDisplayTask>:
 * @brief  Function implementing the DisplayTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af04      	add	r7, sp, #16
 8000ca6:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000ca8:	f00c fb58 	bl	800d35c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	char str[10];
	ST7789_FillScreen(ST7789_BLACK);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 faf3 	bl	8001298 <ST7789_FillScreen>
	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8000cb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cb6:	2250      	movs	r2, #80	; 0x50
 8000cb8:	2178      	movs	r1, #120	; 0x78
 8000cba:	20a0      	movs	r0, #160	; 0xa0
 8000cbc:	f000 fdc2 	bl	8001844 <ST7789_DrawCircleFilled>
	flagt.stratSend = 0;
 8000cc0:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <StartDisplayTask+0x1e4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	705a      	strb	r2, [r3, #1]

	/* Infinite loop */
	for (;;) {
		if (TIME_ON.m <= TIMEFORSENSORS) {
 8000cc6:	4b70      	ldr	r3, [pc, #448]	; (8000e88 <StartDisplayTask+0x1e8>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d850      	bhi.n	8000d70 <StartDisplayTask+0xd0>
			if (ch4.actual != ch4.last) {
 8000cce:	4b6f      	ldr	r3, [pc, #444]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000cd0:	881a      	ldrh	r2, [r3, #0]
 8000cd2:	4b6e      	ldr	r3, [pc, #440]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000cd4:	885b      	ldrh	r3, [r3, #2]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f000 80cc 	beq.w	8000e74 <StartDisplayTask+0x1d4>
				sprintf(str, "%i %%", ch4.actual);
 8000cdc:	4b6b      	ldr	r3, [pc, #428]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	496a      	ldr	r1, [pc, #424]	; (8000e90 <StartDisplayTask+0x1f0>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00d f9ad 	bl	800e048 <siprintf>
				ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8000cee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cf2:	2250      	movs	r2, #80	; 0x50
 8000cf4:	2178      	movs	r1, #120	; 0x78
 8000cf6:	20a0      	movs	r0, #160	; 0xa0
 8000cf8:	f000 fda4 	bl	8001844 <ST7789_DrawCircleFilled>

				ST7789_print(130, 70, ST7789_WHITE, ST7789_BLACK, 0,
 8000cfc:	4b65      	ldr	r3, [pc, #404]	; (8000e94 <StartDisplayTask+0x1f4>)
 8000cfe:	9303      	str	r3, [sp, #12]
 8000d00:	2301      	movs	r3, #1
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <StartDisplayTask+0x1f8>)
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d12:	2146      	movs	r1, #70	; 0x46
 8000d14:	2082      	movs	r0, #130	; 0x82
 8000d16:	f000 ffb7 	bl	8001c88 <ST7789_print>
						&Font_16x26, 1, "Wait");

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	2301      	movs	r3, #1
 8000d22:	9302      	str	r3, [sp, #8]
 8000d24:	4b5c      	ldr	r3, [pc, #368]	; (8000e98 <StartDisplayTask+0x1f8>)
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d32:	216e      	movs	r1, #110	; 0x6e
 8000d34:	2087      	movs	r0, #135	; 0x87
 8000d36:	f000 ffa7 	bl	8001c88 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4957      	ldr	r1, [pc, #348]	; (8000e9c <StartDisplayTask+0x1fc>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00d f981 	bl	800e048 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	9303      	str	r3, [sp, #12]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9302      	str	r3, [sp, #8]
 8000d50:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <StartDisplayTask+0x1f8>)
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2300      	movs	r3, #0
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5e:	2196      	movs	r1, #150	; 0x96
 8000d60:	2087      	movs	r0, #135	; 0x87
 8000d62:	f000 ff91 	bl	8001c88 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 8000d66:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000d68:	881a      	ldrh	r2, [r3, #0]
 8000d6a:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000d6c:	805a      	strh	r2, [r3, #2]
 8000d6e:	e081      	b.n	8000e74 <StartDisplayTask+0x1d4>
			}
		} else {
			if (flagt.Heat == 0) {
 8000d70:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <StartDisplayTask+0x1e4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d13b      	bne.n	8000df0 <StartDisplayTask+0x150>
				sprintf(str, "%i %%", ch4.actual);
 8000d78:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4943      	ldr	r1, [pc, #268]	; (8000e90 <StartDisplayTask+0x1f0>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00d f95f 	bl	800e048 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 8000d8a:	231f      	movs	r3, #31
 8000d8c:	2250      	movs	r2, #80	; 0x50
 8000d8e:	2178      	movs	r1, #120	; 0x78
 8000d90:	20a0      	movs	r0, #160	; 0xa0
 8000d92:	f000 fd57 	bl	8001844 <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	9303      	str	r3, [sp, #12]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	9302      	str	r3, [sp, #8]
 8000da0:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <StartDisplayTask+0x1f8>)
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2300      	movs	r3, #0
 8000daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dae:	216e      	movs	r1, #110	; 0x6e
 8000db0:	2087      	movs	r0, #135	; 0x87
 8000db2:	f000 ff69 	bl	8001c88 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4938      	ldr	r1, [pc, #224]	; (8000e9c <StartDisplayTask+0x1fc>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00d f943 	bl	800e048 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	9303      	str	r3, [sp, #12]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <StartDisplayTask+0x1f8>)
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dda:	2196      	movs	r1, #150	; 0x96
 8000ddc:	2087      	movs	r0, #135	; 0x87
 8000dde:	f000 ff53 	bl	8001c88 <ST7789_print>
						&Font_16x26, 1, str);
				ch4.last = ch4.actual;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000de8:	805a      	strh	r2, [r3, #2]
				flagt.Heat = 1;
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <StartDisplayTask+0x1e4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
			}
			if (ch4.actual != ch4.last) {
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000df6:	885b      	ldrh	r3, [r3, #2]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d038      	beq.n	8000e6e <StartDisplayTask+0x1ce>
				sprintf(str, "%i %%", ch4.actual);
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4922      	ldr	r1, [pc, #136]	; (8000e90 <StartDisplayTask+0x1f0>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00d f91d 	bl	800e048 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 8000e0e:	231f      	movs	r3, #31
 8000e10:	2250      	movs	r2, #80	; 0x50
 8000e12:	2178      	movs	r1, #120	; 0x78
 8000e14:	20a0      	movs	r0, #160	; 0xa0
 8000e16:	f000 fd15 	bl	8001844 <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	9303      	str	r3, [sp, #12]
 8000e20:	2301      	movs	r3, #1
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <StartDisplayTask+0x1f8>)
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e32:	216e      	movs	r1, #110	; 0x6e
 8000e34:	2087      	movs	r0, #135	; 0x87
 8000e36:	f000 ff27 	bl	8001c88 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4917      	ldr	r1, [pc, #92]	; (8000e9c <StartDisplayTask+0x1fc>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00d f901 	bl	800e048 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	9303      	str	r3, [sp, #12]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <StartDisplayTask+0x1f8>)
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2300      	movs	r3, #0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5e:	2196      	movs	r1, #150	; 0x96
 8000e60:	2087      	movs	r0, #135	; 0x87
 8000e62:	f000 ff11 	bl	8001c88 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000e68:	881a      	ldrh	r2, [r3, #0]
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <StartDisplayTask+0x1ec>)
 8000e6c:	805a      	strh	r2, [r3, #2]
			}
			flagt.stratSend = 1;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <StartDisplayTask+0x1e4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	705a      	strb	r2, [r3, #1]
		}

		printTime();
 8000e74:	f7ff fe70 	bl	8000b58 <printTime>
		osDelay(SEC);
 8000e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7c:	f009 fdd0 	bl	800aa20 <osDelay>
		if (TIME_ON.m <= TIMEFORSENSORS) {
 8000e80:	e721      	b.n	8000cc6 <StartDisplayTask+0x26>
 8000e82:	bf00      	nop
 8000e84:	200003a0 	.word	0x200003a0
 8000e88:	2000038c 	.word	0x2000038c
 8000e8c:	20000398 	.word	0x20000398
 8000e90:	0800e81c 	.word	0x0800e81c
 8000e94:	0800e824 	.word	0x0800e824
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	0800e82c 	.word	0x0800e82c

08000ea0 <StartMotorTask>:
 * @brief Function implementing the MotorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	/* Infinite loop */
	for (;;) {
		if (ch4.actual > 20) {
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <StartMotorTask+0x58>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b14      	cmp	r3, #20
 8000eae:	d90f      	bls.n	8000ed0 <StartMotorTask+0x30>
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <StartMotorTask+0x5c>)
 8000eb6:	f002 fec1 	bl	8003c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	480f      	ldr	r0, [pc, #60]	; (8000efc <StartMotorTask+0x5c>)
 8000ec0:	f002 febc 	bl	8003c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <StartMotorTask+0x5c>)
 8000eca:	f002 feb7 	bl	8003c3c <HAL_GPIO_WritePin>
 8000ece:	e00e      	b.n	8000eee <StartMotorTask+0x4e>
		} else {
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <StartMotorTask+0x5c>)
 8000ed6:	f002 feb1 	bl	8003c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2108      	movs	r1, #8
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <StartMotorTask+0x5c>)
 8000ee0:	f002 feac 	bl	8003c3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <StartMotorTask+0x5c>)
 8000eea:	f002 fea7 	bl	8003c3c <HAL_GPIO_WritePin>
		}
		osDelay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f009 fd96 	bl	800aa20 <osDelay>
		if (ch4.actual > 20) {
 8000ef4:	e7d8      	b.n	8000ea8 <StartMotorTask+0x8>
 8000ef6:	bf00      	nop
 8000ef8:	20000398 	.word	0x20000398
 8000efc:	40020400 	.word	0x40020400

08000f00 <StartADCTask>:
 * @brief Function implementing the ADCTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartADCTask */

	/* Infinite loop */
	for (;;) {
		HAL_ADCEx_InjectedStart(&hadc1);
 8000f08:	4817      	ldr	r0, [pc, #92]	; (8000f68 <StartADCTask+0x68>)
 8000f0a:	f001 ffdd 	bl	8002ec8 <HAL_ADCEx_InjectedStart>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000f0e:	2164      	movs	r1, #100	; 0x64
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <StartADCTask+0x68>)
 8000f12:	f001 fd20 	bl	8002956 <HAL_ADC_PollForConversion>

		adcVal = HAL_ADCEx_InjectedGetValue(&hadc1,
 8000f16:	2101      	movs	r1, #1
 8000f18:	4813      	ldr	r0, [pc, #76]	; (8000f68 <StartADCTask+0x68>)
 8000f1a:	f002 f8eb 	bl	80030f4 <HAL_ADCEx_InjectedGetValue>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <StartADCTask+0x6c>)
 8000f24:	801a      	strh	r2, [r3, #0]
		ADC_INJECTED_RANK_1);
		ch4.BIT12 = HAL_ADCEx_InjectedGetValue(&hadc1,
 8000f26:	2101      	movs	r1, #1
 8000f28:	480f      	ldr	r0, [pc, #60]	; (8000f68 <StartADCTask+0x68>)
 8000f2a:	f002 f8e3 	bl	80030f4 <HAL_ADCEx_InjectedGetValue>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <StartADCTask+0x70>)
 8000f34:	809a      	strh	r2, [r3, #4]
		ADC_INJECTED_RANK_1);

		HAL_ADCEx_InjectedStop(&hadc1);
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <StartADCTask+0x68>)
 8000f38:	f002 f890 	bl	800305c <HAL_ADCEx_InjectedStop>

		ch4.actual = (ch4.BIT12 * 100) / SEBSORMAXVAL;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <StartADCTask+0x70>)
 8000f3e:	889b      	ldrh	r3, [r3, #4]
 8000f40:	461a      	mov	r2, r3
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <StartADCTask+0x74>)
 8000f4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4e:	441a      	add	r2, r3
 8000f50:	12d2      	asrs	r2, r2, #11
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <StartADCTask+0x70>)
 8000f5a:	801a      	strh	r2, [r3, #0]
		osDelay(900);
 8000f5c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000f60:	f009 fd5e 	bl	800aa20 <osDelay>
		HAL_ADCEx_InjectedStart(&hadc1);
 8000f64:	e7d0      	b.n	8000f08 <StartADCTask+0x8>
 8000f66:	bf00      	nop
 8000f68:	20000190 	.word	0x20000190
 8000f6c:	20000388 	.word	0x20000388
 8000f70:	20000398 	.word	0x20000398
 8000f74:	a00a00a1 	.word	0xa00a00a1

08000f78 <StartUSBTask>:
 * @brief Function implementing the USBTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUSBTask */
void StartUSBTask(void *argument) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUSBTask */
	/* Infinite loop */
	for (;;) {
		if (flagt.stratSend == 1) {
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <StartUSBTask+0x44>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d115      	bne.n	8000fb4 <StartUSBTask+0x3c>
			if (ch4.actual != ch4.last) {
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <StartUSBTask+0x48>)
 8000f8a:	881a      	ldrh	r2, [r3, #0]
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <StartUSBTask+0x48>)
 8000f8e:	885b      	ldrh	r3, [r3, #2]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d00f      	beq.n	8000fb4 <StartUSBTask+0x3c>
//			sprintf((char*) data, "CH4 val: %i\n", ch4.BIT16);
				sprintf((char*) data, " %i", ch4.BIT12);
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <StartUSBTask+0x48>)
 8000f96:	889b      	ldrh	r3, [r3, #4]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	490a      	ldr	r1, [pc, #40]	; (8000fc4 <StartUSBTask+0x4c>)
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <StartUSBTask+0x50>)
 8000f9e:	f00d f853 	bl	800e048 <siprintf>
				CDC_Transmit_FS(data, strlen((char*) data));
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <StartUSBTask+0x50>)
 8000fa4:	f7ff f91c 	bl	80001e0 <strlen>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <StartUSBTask+0x50>)
 8000fb0:	f00c faa8 	bl	800d504 <CDC_Transmit_FS>
			}
		}
		osDelay(SEC / 5);
 8000fb4:	20c8      	movs	r0, #200	; 0xc8
 8000fb6:	f009 fd33 	bl	800aa20 <osDelay>
		if (flagt.stratSend == 1) {
 8000fba:	e7e1      	b.n	8000f80 <StartUSBTask+0x8>
 8000fbc:	200003a0 	.word	0x200003a0
 8000fc0:	20000398 	.word	0x20000398
 8000fc4:	0800e830 	.word	0x0800e830
 8000fc8:	200003b0 	.word	0x200003b0

08000fcc <StartMotorSpeedTask>:
 * @brief Function implementing the MotorSpeedTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorSpeedTask */
void StartMotorSpeedTask(void *argument) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorSpeedTask */
	motor.TimeForM = T;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <StartMotorSpeedTask+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8000fda:	6053      	str	r3, [r2, #4]
	/* Infinite loop */
	for (;;) {
		motor.TimeForM = HAL_GetTick() - motor.TimeForM;
 8000fdc:	f001 fc48 	bl	8002870 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8000fea:	6053      	str	r3, [r2, #4]
		motor.TimeForM /= MINUT;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <StartMotorSpeedTask+0x70>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0b9b      	lsrs	r3, r3, #14
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8000ffa:	6053      	str	r3, [r2, #4]

		motor.count = __HAL_TIM_GetCounter(&htim4);
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <StartMotorSpeedTask+0x74>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8001006:	801a      	strh	r2, [r3, #0]
		motor.speed = motor.count / motor.TimeForM / 2; // 2 signal per revolution
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <StartMotorSpeedTask+0x6c>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	085b      	lsrs	r3, r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <StartMotorSpeedTask+0x6c>)
 800101c:	811a      	strh	r2, [r3, #8]
		motor.TimeForM = HAL_GetTick();
 800101e:	f001 fc27 	bl	8002870 <HAL_GetTick>
 8001022:	4603      	mov	r3, r0
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <StartMotorSpeedTask+0x6c>)
 8001026:	6053      	str	r3, [r2, #4]
		osDelay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f009 fcf8 	bl	800aa20 <osDelay>
		motor.TimeForM = HAL_GetTick() - motor.TimeForM;
 8001030:	e7d4      	b.n	8000fdc <StartMotorSpeedTask+0x10>
 8001032:	bf00      	nop
 8001034:	20000384 	.word	0x20000384
 8001038:	200003a4 	.word	0x200003a4
 800103c:	45e7b273 	.word	0x45e7b273
 8001040:	20000328 	.word	0x20000328

08001044 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001056:	f001 fbf7 	bl	8002848 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010000 	.word	0x40010000

08001068 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <ST7789_Init>:
	  
	  
//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	
	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);	
 8001078:	20c8      	movs	r0, #200	; 0xc8
 800107a:	f001 fc05 	bl	8002888 <HAL_Delay>

	ST7789_Width = ST7789_WIDTH;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <ST7789_Init+0x30>)
 8001080:	22f0      	movs	r2, #240	; 0xf0
 8001082:	801a      	strh	r2, [r3, #0]
	ST7789_Height = ST7789_HEIGHT;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <ST7789_Init+0x34>)
 8001086:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800108a:	801a      	strh	r2, [r3, #0]


    ST7789_Select();
 800108c:	f000 f810 	bl	80010b0 <ST7789_Select>
	
    ST7789_HardReset(); 
 8001090:	f000 f870 	bl	8001174 <ST7789_HardReset>
    ST7789_ExecuteCommandList(init_cmds);
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <ST7789_Init+0x38>)
 8001096:	f000 f823 	bl	80010e0 <ST7789_ExecuteCommandList>
	
    ST7789_Unselect();
 800109a:	f000 f815 	bl	80010c8 <ST7789_Unselect>

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000434 	.word	0x20000434
 80010a8:	20000436 	.word	0x20000436
 80010ac:	080122fc 	.word	0x080122fc

080010b0 <ST7789_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Select(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2104      	movs	r1, #4
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <ST7789_Select+0x14>)
 80010ba:	f002 fdbf 	bl	8003c3c <HAL_GPIO_WritePin>
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020400 	.word	0x40020400

080010c8 <ST7789_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Unselect(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2104      	movs	r1, #4
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <ST7789_Unselect+0x14>)
 80010d2:	f002 fdb3 	bl	8003c3c <HAL_GPIO_WritePin>
			#endif
			//-----------------------------------------------------
	
	#endif
	
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020400 	.word	0x40020400

080010e0 <ST7789_ExecuteCommandList>:


//==============================================================================
// Процедура отправки данных для инициализации дисплея
//==============================================================================
 void ST7789_ExecuteCommandList(const uint8_t *addr) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80010f2:	e034      	b.n	800115e <ST7789_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	72fb      	strb	r3, [r7, #11]
        ST7789_SendCmd(cmd);
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f84b 	bl	800119c <ST7789_SendCmd>

        numArgs = *addr++;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	b29b      	uxth	r3, r3
 8001114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001118:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800111a:	7abb      	ldrb	r3, [r7, #10]
 800111c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001120:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001122:	7abb      	ldrb	r3, [r7, #10]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d008      	beq.n	800113a <ST7789_ExecuteCommandList+0x5a>
            ST7789_SendDataMASS((uint8_t*)addr, numArgs);
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f875 	bl	800121c <ST7789_SendDataMASS>
            addr += numArgs;
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800113a:	89bb      	ldrh	r3, [r7, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00e      	beq.n	800115e <ST7789_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800114a:	89bb      	ldrh	r3, [r7, #12]
 800114c:	2bff      	cmp	r3, #255	; 0xff
 800114e:	d102      	bne.n	8001156 <ST7789_ExecuteCommandList+0x76>
 8001150:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001154:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001156:	89bb      	ldrh	r3, [r7, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fb95 	bl	8002888 <HAL_Delay>
    while(numCommands--) {
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	73fa      	strb	r2, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1c5      	bne.n	80010f4 <ST7789_ExecuteCommandList+0x14>
        }
    }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <ST7789_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void ST7789_HardReset(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <ST7789_HardReset+0x24>)
 800117e:	f002 fd5d 	bl	8003c3c <HAL_GPIO_WritePin>
	HAL_Delay(20);	
 8001182:	2014      	movs	r0, #20
 8001184:	f001 fb80 	bl	8002888 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2101      	movs	r1, #1
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <ST7789_HardReset+0x24>)
 800118e:	f002 fd55 	bl	8003c3c <HAL_GPIO_WritePin>
	
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020400 	.word	0x40020400

0800119c <ST7789_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline void ST7789_SendCmd(uint8_t Cmd){	
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
		
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7789_SPI_HAL
	
		 // pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2102      	movs	r1, #2
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <ST7789_SendCmd+0x44>)
 80011ac:	f002 fd46 	bl	8003c3c <HAL_GPIO_WritePin>
					 
		 HAL_SPI_Transmit(&ST7789_SPI_HAL, &Cmd, 1, HAL_MAX_DELAY);
 80011b0:	1df9      	adds	r1, r7, #7
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	2201      	movs	r2, #1
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <ST7789_SendCmd+0x48>)
 80011ba:	f004 fcd4 	bl	8005b66 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 80011be:	bf00      	nop
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <ST7789_SendCmd+0x48>)
 80011c2:	f004 fe0c 	bl	8005dde <HAL_SPI_GetState>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d1f9      	bne.n	80011c0 <ST7789_SendCmd+0x24>
				
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2102      	movs	r1, #2
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <ST7789_SendCmd+0x44>)
 80011d2:	f002 fd33 	bl	8003c3c <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
	
	#endif
	//-----------------------------------------------------------------------------------

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020400 	.word	0x40020400
 80011e4:	200001e0 	.word	0x200001e0

080011e8 <ST7789_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline void ST7789_SendData(uint8_t Data ){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
	
		HAL_SPI_Transmit(&ST7789_SPI_HAL, &Data, 1, HAL_MAX_DELAY);
 80011f2:	1df9      	adds	r1, r7, #7
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	2201      	movs	r2, #1
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <ST7789_SendData+0x30>)
 80011fc:	f004 fcb3 	bl	8005b66 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8001200:	bf00      	nop
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <ST7789_SendData+0x30>)
 8001204:	f004 fdeb 	bl	8005dde <HAL_SPI_GetState>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d1f9      	bne.n	8001202 <ST7789_SendData+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200001e0 	.word	0x200001e0

0800121c <ST7789_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
		
		if( buff_size <= 0xFFFF ){
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122c:	d21a      	bcs.n	8001264 <ST7789_SendDataMASS+0x48>
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b29a      	uxth	r2, r3
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4816      	ldr	r0, [pc, #88]	; (8001294 <ST7789_SendDataMASS+0x78>)
 800123a:	f004 fc94 	bl	8005b66 <HAL_SPI_Transmit>
 800123e:	e01d      	b.n	800127c <ST7789_SendDataMASS+0x60>
		}
		else{
			while( buff_size > 0xFFFF ){
				HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, 0xFFFF, HAL_MAX_DELAY);
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4812      	ldr	r0, [pc, #72]	; (8001294 <ST7789_SendDataMASS+0x78>)
 800124c:	f004 fc8b 	bl	8005b66 <HAL_SPI_Transmit>
				buff_size-=0xFFFF;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001256:	3bff      	subs	r3, #255	; 0xff
 8001258:	603b      	str	r3, [r7, #0]
				buff+=0xFFFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001260:	33ff      	adds	r3, #255	; 0xff
 8001262:	607b      	str	r3, [r7, #4]
			while( buff_size > 0xFFFF ){
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126a:	d2e9      	bcs.n	8001240 <ST7789_SendDataMASS+0x24>
			}
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b29a      	uxth	r2, r3
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <ST7789_SendDataMASS+0x78>)
 8001278:	f004 fc75 	bl	8005b66 <HAL_SPI_Transmit>
		}
		
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 800127c:	bf00      	nop
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <ST7789_SendDataMASS+0x78>)
 8001280:	f004 fdad 	bl	8005dde <HAL_SPI_GetState>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d1f9      	bne.n	800127e <ST7789_SendDataMASS+0x62>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001e0 	.word	0x200001e0

08001298 <ST7789_FillScreen>:


//==============================================================================
// Процедура закрашивает экран цветом color
//==============================================================================
void ST7789_FillScreen(uint16_t color){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
	
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <ST7789_FillScreen+0x2c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <ST7789_FillScreen+0x30>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b219      	sxth	r1, r3
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	460b      	mov	r3, r1
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f808 	bl	80012cc <ST7789_FillRect>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000434 	.word	0x20000434
 80012c8:	20000436 	.word	0x20000436

080012cc <ST7789_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]
 80012e6:	4613      	mov	r3, r2
 80012e8:	803b      	strh	r3, [r7, #0]
	
  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 80012ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ee:	4a24      	ldr	r2, [pc, #144]	; (8001380 <ST7789_FillRect+0xb4>)
 80012f0:	8812      	ldrh	r2, [r2, #0]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	da40      	bge.n	8001378 <ST7789_FillRect+0xac>
 80012f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <ST7789_FillRect+0xb8>)
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	4293      	cmp	r3, r2
 8001300:	da3a      	bge.n	8001378 <ST7789_FillRect+0xac>
	  return;
  }
  
  if ((x + w) > ST7789_Width){	  
 8001302:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800130a:	4413      	add	r3, r2
 800130c:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <ST7789_FillRect+0xb4>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	4293      	cmp	r3, r2
 8001312:	dd05      	ble.n	8001320 <ST7789_FillRect+0x54>
	  w = ST7789_Width - x;
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <ST7789_FillRect+0xb4>)
 8001316:	881a      	ldrh	r2, [r3, #0]
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b29b      	uxth	r3, r3
 800131e:	807b      	strh	r3, [r7, #2]
  }
  
  if ((y + h) > ST7789_Height){
 8001320:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001324:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001328:	4413      	add	r3, r2
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <ST7789_FillRect+0xb8>)
 800132c:	8812      	ldrh	r2, [r2, #0]
 800132e:	4293      	cmp	r3, r2
 8001330:	dd05      	ble.n	800133e <ST7789_FillRect+0x72>
	  h = ST7789_Height - y;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <ST7789_FillRect+0xb8>)
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	803b      	strh	r3, [r7, #0]
  }
  
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 800133e:	88f8      	ldrh	r0, [r7, #6]
 8001340:	88b9      	ldrh	r1, [r7, #4]
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	4413      	add	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	3b01      	subs	r3, #1
 800134c:	b29c      	uxth	r4, r3
 800134e:	88ba      	ldrh	r2, [r7, #4]
 8001350:	883b      	ldrh	r3, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	4622      	mov	r2, r4
 800135c:	f000 f814 	bl	8001388 <ST7789_SetWindow>
  
//  for (uint32_t i = 0; i < (h * w); i++){
//	  ST7789_RamWrite(&color, 1);
//  }
		
  ST7789_RamWrite(&color, (h * w)); 
 8001360:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001364:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	4619      	mov	r1, r3
 800136e:	f107 0018 	add.w	r0, r7, #24
 8001372:	f000 f82f 	bl	80013d4 <ST7789_RamWrite>
 8001376:	e000      	b.n	800137a <ST7789_FillRect+0xae>
	  return;
 8001378:	bf00      	nop
}
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	20000434 	.word	0x20000434
 8001384:	20000436 	.word	0x20000436

08001388 <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4604      	mov	r4, r0
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4623      	mov	r3, r4
 8001398:	80fb      	strh	r3, [r7, #6]
 800139a:	4603      	mov	r3, r0
 800139c:	80bb      	strh	r3, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	807b      	strh	r3, [r7, #2]
 80013a2:	4613      	mov	r3, r2
 80013a4:	803b      	strh	r3, [r7, #0]
	
	ST7789_Select();
 80013a6:	f7ff fe83 	bl	80010b0 <ST7789_Select>
	
	ST7789_ColumnSet(x0, x1);
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f833 	bl	800141c <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 80013b6:	883a      	ldrh	r2, [r7, #0]
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f86f 	bl	80014a0 <ST7789_RowSet>
	
	// write to RAM
	ST7789_SendCmd(ST7789_RAMWR);
 80013c2:	202c      	movs	r0, #44	; 0x2c
 80013c4:	f7ff feea 	bl	800119c <ST7789_SendCmd>
	
	ST7789_Unselect();
 80013c8:	f7ff fe7e 	bl	80010c8 <ST7789_Unselect>
	
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}

080013d4 <ST7789_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
void ST7789_RamWrite(uint16_t *pBuff, uint32_t Len){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	
  ST7789_Select();
 80013de:	f7ff fe67 	bl	80010b0 <ST7789_Select>
	
  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	737b      	strb	r3, [r7, #13]
	
  while (Len--){
 80013f6:	e005      	b.n	8001404 <ST7789_RamWrite+0x30>
//    ST7789_SendData( buff[0] );  
//    ST7789_SendData( buff[1] );
	  ST7789_SendDataMASS( buff, 2);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff0c 	bl	800121c <ST7789_SendDataMASS>
  while (Len--){
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	603a      	str	r2, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f4      	bne.n	80013f8 <ST7789_RamWrite+0x24>
  } 
	
  ST7789_Unselect();
 800140e:	f7ff fe5b 	bl	80010c8 <ST7789_Unselect>
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <ST7789_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
 void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	460a      	mov	r2, r1
 8001426:	80fb      	strh	r3, [r7, #6]
 8001428:	4613      	mov	r3, r2
 800142a:	80bb      	strh	r3, [r7, #4]
	
  if (ColumnStart > ColumnEnd){
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d82a      	bhi.n	800148a <ST7789_ColumnSet+0x6e>
    return;
  }
  
  if (ColumnEnd > ST7789_Width){
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <ST7789_ColumnSet+0x7c>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	88ba      	ldrh	r2, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d827      	bhi.n	800148e <ST7789_ColumnSet+0x72>
    return;
  }
  
  ColumnStart += ST7789_X_Start;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <ST7789_ColumnSet+0x80>)
 8001440:	881a      	ldrh	r2, [r3, #0]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4413      	add	r3, r2
 8001446:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += ST7789_X_Start;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <ST7789_ColumnSet+0x80>)
 800144a:	881a      	ldrh	r2, [r3, #0]
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	80bb      	strh	r3, [r7, #4]
  
  ST7789_SendCmd(ST7789_CASET);
 8001452:	202a      	movs	r0, #42	; 0x2a
 8001454:	f7ff fea2 	bl	800119c <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);  
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fec1 	bl	80011e8 <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);  
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff febc 	bl	80011e8 <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);  
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff feb5 	bl	80011e8 <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);  
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff feb0 	bl	80011e8 <ST7789_SendData>
 8001488:	e002      	b.n	8001490 <ST7789_ColumnSet+0x74>
    return;
 800148a:	bf00      	nop
 800148c:	e000      	b.n	8001490 <ST7789_ColumnSet+0x74>
    return;
 800148e:	bf00      	nop
  
}
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000434 	.word	0x20000434
 800149c:	20000430 	.word	0x20000430

080014a0 <ST7789_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
 void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	80fb      	strh	r3, [r7, #6]
 80014ac:	4613      	mov	r3, r2
 80014ae:	80bb      	strh	r3, [r7, #4]
	
  if (RowStart > RowEnd){
 80014b0:	88fa      	ldrh	r2, [r7, #6]
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d82a      	bhi.n	800150e <ST7789_RowSet+0x6e>
    return;
  }
  
  if (RowEnd > ST7789_Height){
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <ST7789_RowSet+0x7c>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	88ba      	ldrh	r2, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d827      	bhi.n	8001512 <ST7789_RowSet+0x72>
    return;
  }
  
  RowStart += ST7789_Y_Start;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <ST7789_RowSet+0x80>)
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4413      	add	r3, r2
 80014ca:	80fb      	strh	r3, [r7, #6]
  RowEnd += ST7789_Y_Start;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <ST7789_RowSet+0x80>)
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	80bb      	strh	r3, [r7, #4]
 
  ST7789_SendCmd(ST7789_RASET);
 80014d6:	202b      	movs	r0, #43	; 0x2b
 80014d8:	f7ff fe60 	bl	800119c <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);  
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe7f 	bl	80011e8 <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);  
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe7a 	bl	80011e8 <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);  
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fe73 	bl	80011e8 <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);  
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe6e 	bl	80011e8 <ST7789_SendData>
 800150c:	e002      	b.n	8001514 <ST7789_RowSet+0x74>
    return;
 800150e:	bf00      	nop
 8001510:	e000      	b.n	8001514 <ST7789_RowSet+0x74>
    return;
 8001512:	bf00      	nop

}
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000436 	.word	0x20000436
 8001520:	20000432 	.word	0x20000432

08001524 <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
 void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	
  int16_t TempValue = *pValue1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f9b3 2000 	ldrsh.w	r2, [r3]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	89fa      	ldrh	r2, [r7, #14]
 8001542:	801a      	strh	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <ST7789_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void ST7789_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af02      	add	r7, sp, #8
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	80fb      	strh	r3, [r7, #6]
 8001562:	4603      	mov	r3, r0
 8001564:	80bb      	strh	r3, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]
 800156a:	4613      	mov	r3, r2
 800156c:	803b      	strh	r3, [r7, #0]
	
  if (x1 > x2){
 800156e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001572:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001576:	429a      	cmp	r2, r3
 8001578:	dd05      	ble.n	8001586 <ST7789_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 800157a:	1cba      	adds	r2, r7, #2
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ffcf 	bl	8001524 <SwapInt16Values>
  }
  
  if (y1 > y2){
 8001586:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800158a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800158e:	429a      	cmp	r2, r3
 8001590:	dd05      	ble.n	800159e <ST7789_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 8001592:	463a      	mov	r2, r7
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffc3 	bl	8001524 <SwapInt16Values>
  }
  
  ST7789_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 800159e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b21c      	sxth	r4, r3
 80015b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	8b3b      	ldrh	r3, [r7, #24]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4613      	mov	r3, r2
 80015d0:	4622      	mov	r2, r4
 80015d2:	f7ff fe7b 	bl	80012cc <ST7789_FillRect>
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}

080015de <ST7789_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
 void ST7789_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b087      	sub	sp, #28
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4604      	mov	r4, r0
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	4623      	mov	r3, r4
 80015ee:	80fb      	strh	r3, [r7, #6]
 80015f0:	4603      	mov	r3, r0
 80015f2:	80bb      	strh	r3, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	803b      	strh	r3, [r7, #0]
	
  const int16_t deltaX = abs(x2 - x1);
 80015fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	bfb8      	it	lt
 800160a:	425b      	neglt	r3, r3
 800160c:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 800160e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001612:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	bfb8      	it	lt
 800161c:	425b      	neglt	r3, r3
 800161e:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 8001620:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001624:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001628:	429a      	cmp	r2, r3
 800162a:	da01      	bge.n	8001630 <ST7789_DrawLine_Slow+0x52>
 800162c:	2301      	movs	r3, #1
 800162e:	e001      	b.n	8001634 <ST7789_DrawLine_Slow+0x56>
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 8001636:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800163a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800163e:	429a      	cmp	r2, r3
 8001640:	da01      	bge.n	8001646 <ST7789_DrawLine_Slow+0x68>
 8001642:	2301      	movs	r3, #1
 8001644:	e001      	b.n	800164a <ST7789_DrawLine_Slow+0x6c>
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 800164c:	8aba      	ldrh	r2, [r7, #20]
 800164e:	8a7b      	ldrh	r3, [r7, #18]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	82fb      	strh	r3, [r7, #22]

  ST7789_DrawPixel(x2, y2, color);
 8001656:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001658:	f9b7 1000 	ldrsh.w	r1, [r7]
 800165c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f8bd 	bl	80017e0 <ST7789_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 8001666:	e02c      	b.n	80016c2 <ST7789_DrawLine_Slow+0xe4>
	  
    ST7789_DrawPixel(x1, y1, color);
 8001668:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800166a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f8b4 	bl	80017e0 <ST7789_DrawPixel>
    const int16_t error2 = error * 2;
 8001678:	8afb      	ldrh	r3, [r7, #22]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	b29b      	uxth	r3, r3
 800167e:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) {
 8001680:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001684:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001688:	425b      	negs	r3, r3
 800168a:	429a      	cmp	r2, r3
 800168c:	dd09      	ble.n	80016a2 <ST7789_DrawLine_Slow+0xc4>
		
      error -= deltaY;
 800168e:	8afa      	ldrh	r2, [r7, #22]
 8001690:	8a7b      	ldrh	r3, [r7, #18]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	b29b      	uxth	r3, r3
 8001696:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	8a3b      	ldrh	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	b29b      	uxth	r3, r3
 80016a0:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 80016a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	da09      	bge.n	80016c2 <ST7789_DrawLine_Slow+0xe4>
		
      error += deltaX;
 80016ae:	8afa      	ldrh	r2, [r7, #22]
 80016b0:	8abb      	ldrh	r3, [r7, #20]
 80016b2:	4413      	add	r3, r2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 80016b8:	88ba      	ldrh	r2, [r7, #4]
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	4413      	add	r3, r2
 80016be:	b29b      	uxth	r3, r3
 80016c0:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 80016c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d1cc      	bne.n	8001668 <ST7789_DrawLine_Slow+0x8a>
 80016ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d1c6      	bne.n	8001668 <ST7789_DrawLine_Slow+0x8a>
    }
  }
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd90      	pop	{r4, r7, pc}

080016e4 <ST7789_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	4604      	mov	r4, r0
 80016ec:	4608      	mov	r0, r1
 80016ee:	4611      	mov	r1, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4623      	mov	r3, r4
 80016f4:	80fb      	strh	r3, [r7, #6]
 80016f6:	4603      	mov	r3, r0
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	807b      	strh	r3, [r7, #2]
 80016fe:	4613      	mov	r3, r2
 8001700:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 8001702:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001706:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800170a:	429a      	cmp	r2, r3
 800170c:	d129      	bne.n	8001762 <ST7789_DrawLine+0x7e>

    if (y1 > y2){
 800170e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001712:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001716:	429a      	cmp	r2, r3
 8001718:	dd11      	ble.n	800173e <ST7789_DrawLine+0x5a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 800171a:	88ba      	ldrh	r2, [r7, #4]
 800171c:	883b      	ldrh	r3, [r7, #0]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	b29b      	uxth	r3, r3
 8001722:	3301      	adds	r3, #1
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	f9b7 1000 	ldrsh.w	r1, [r7]
 800172c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001730:	8b3b      	ldrh	r3, [r7, #24]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4613      	mov	r3, r2
 8001736:	2201      	movs	r2, #1
 8001738:	f7ff fdc8 	bl	80012cc <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}
	
    return;
 800173c:	e04c      	b.n	80017d8 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 800173e:	883a      	ldrh	r2, [r7, #0]
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	b29b      	uxth	r3, r3
 8001746:	3301      	adds	r3, #1
 8001748:	b29b      	uxth	r3, r3
 800174a:	b21a      	sxth	r2, r3
 800174c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001750:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001754:	8b3b      	ldrh	r3, [r7, #24]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	2201      	movs	r2, #1
 800175c:	f7ff fdb6 	bl	80012cc <ST7789_FillRect>
    return;
 8001760:	e03a      	b.n	80017d8 <ST7789_DrawLine+0xf4>
  }
  
  if (y1 == y2){
 8001762:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001766:	f9b7 3000 	ldrsh.w	r3, [r7]
 800176a:	429a      	cmp	r2, r3
 800176c:	d127      	bne.n	80017be <ST7789_DrawLine+0xda>
    
    if (x1 > x2){
 800176e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001776:	429a      	cmp	r2, r3
 8001778:	dd10      	ble.n	800179c <ST7789_DrawLine+0xb8>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	b21a      	sxth	r2, r3
 8001788:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800178c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001790:	8b3b      	ldrh	r3, [r7, #24]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2301      	movs	r3, #1
 8001796:	f7ff fd99 	bl	80012cc <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}
	
    return;
 800179a:	e01d      	b.n	80017d8 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 800179c:	887a      	ldrh	r2, [r7, #2]
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017b2:	8b3b      	ldrh	r3, [r7, #24]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	f7ff fd88 	bl	80012cc <ST7789_FillRect>
    return;
 80017bc:	e00c      	b.n	80017d8 <ST7789_DrawLine+0xf4>
  }
  
  ST7789_DrawLine_Slow(x1, y1, x2, y2, color);
 80017be:	f9b7 4000 	ldrsh.w	r4, [r7]
 80017c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017ca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017ce:	8b3b      	ldrh	r3, [r7, #24]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	4623      	mov	r3, r4
 80017d4:	f7ff ff03 	bl	80015de <ST7789_DrawLine_Slow>
}
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
	...

080017e0 <ST7789_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	460b      	mov	r3, r1
 80017ec:	80bb      	strh	r3, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	807b      	strh	r3, [r7, #2]
	
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db1b      	blt.n	8001832 <ST7789_DrawPixel+0x52>
 80017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <ST7789_DrawPixel+0x5c>)
 8001800:	8812      	ldrh	r2, [r2, #0]
 8001802:	4293      	cmp	r3, r2
 8001804:	da15      	bge.n	8001832 <ST7789_DrawPixel+0x52>
 8001806:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db11      	blt.n	8001832 <ST7789_DrawPixel+0x52>
 800180e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <ST7789_DrawPixel+0x60>)
 8001814:	8812      	ldrh	r2, [r2, #0]
 8001816:	4293      	cmp	r3, r2
 8001818:	da0b      	bge.n	8001832 <ST7789_DrawPixel+0x52>
    return;
  }

  ST7789_SetWindow(x, y, x, y);
 800181a:	88f8      	ldrh	r0, [r7, #6]
 800181c:	88b9      	ldrh	r1, [r7, #4]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	88bb      	ldrh	r3, [r7, #4]
 8001822:	f7ff fdb1 	bl	8001388 <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 8001826:	1cbb      	adds	r3, r7, #2
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fdd2 	bl	80013d4 <ST7789_RamWrite>
 8001830:	e000      	b.n	8001834 <ST7789_DrawPixel+0x54>
    return;
 8001832:	bf00      	nop
}
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000434 	.word	0x20000434
 8001840:	20000436 	.word	0x20000436

08001844 <ST7789_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void ST7789_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af02      	add	r7, sp, #8
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	4603      	mov	r3, r0
 8001858:	80bb      	strh	r3, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  int y = radius;
 8001866:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800186a:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 800186c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	f1c3 0301 	rsb	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
  int error = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 800187c:	e075      	b.n	800196a <ST7789_DrawCircleFilled+0x126>
	  
    ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	b29a      	uxth	r2, r3
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	4413      	add	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	b218      	sxth	r0, r3
 800188a:	88ba      	ldrh	r2, [r7, #4]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	b29b      	uxth	r3, r3
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	b219      	sxth	r1, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	b29a      	uxth	r2, r3
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4413      	add	r3, r2
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21c      	sxth	r4, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	4622      	mov	r2, r4
 80018b6:	f7ff ff15 	bl	80016e4 <ST7789_DrawLine>
    ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 80018ba:	88fa      	ldrh	r2, [r7, #6]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b218      	sxth	r0, r3
 80018c6:	88ba      	ldrh	r2, [r7, #4]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b219      	sxth	r1, r3
 80018d2:	88fa      	ldrh	r2, [r7, #6]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b21c      	sxth	r4, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	88bb      	ldrh	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	883b      	ldrh	r3, [r7, #0]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	4622      	mov	r2, r4
 80018f2:	f7ff fef7 	bl	80016e4 <ST7789_DrawLine>
    error = 2 * (delta + y) - 1;
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	da0c      	bge.n	8001922 <ST7789_DrawCircleFilled+0xde>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	dc09      	bgt.n	8001922 <ST7789_DrawCircleFilled+0xde>
		
      ++x;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	3301      	adds	r3, #1
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
      continue;
 8001920:	e023      	b.n	800196a <ST7789_DrawCircleFilled+0x126>
    }
	
    error = 2 * (delta - x) - 1;
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	dd0d      	ble.n	8001950 <ST7789_DrawCircleFilled+0x10c>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	dd0a      	ble.n	8001950 <ST7789_DrawCircleFilled+0x10c>
		
      --y;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	3b01      	subs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	f1c3 0301 	rsb	r3, r3, #1
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
      continue;
 800194e:	e00c      	b.n	800196a <ST7789_DrawCircleFilled+0x126>
    }
	
    ++x;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    --y;
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	3b01      	subs	r3, #1
 8001968:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da86      	bge.n	800187e <ST7789_DrawCircleFilled+0x3a>
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	371c      	adds	r7, #28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}
	...

0800197c <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4604      	mov	r4, r0
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4623      	mov	r3, r4
 800198c:	80fb      	strh	r3, [r7, #6]
 800198e:	4603      	mov	r3, r0
 8001990:	80bb      	strh	r3, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
 8001996:	4613      	mov	r3, r2
 8001998:	803b      	strh	r3, [r7, #0]
	
	uint32_t i, b, j;
	
	uint32_t X = x, Y = y;
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]
	
	uint8_t xx, yy;
	
	if( multiplier < 1 ){
 80019a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <ST7789_DrawChar+0x34>
		multiplier = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}

	/* Check available space in LCD */
	if (ST7789_Width >= ( x + Font->FontWidth) || ST7789_Height >= ( y + Font->FontHeight)){
 80019b0:	4b90      	ldr	r3, [pc, #576]	; (8001bf4 <ST7789_DrawChar+0x278>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	4299      	cmp	r1, r3
 80019c0:	da09      	bge.n	80019d6 <ST7789_DrawChar+0x5a>
 80019c2:	4b8d      	ldr	r3, [pc, #564]	; (8001bf8 <ST7789_DrawChar+0x27c>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019cc:	7852      	ldrb	r2, [r2, #1]
 80019ce:	4413      	add	r3, r2
 80019d0:	4299      	cmp	r1, r3
 80019d2:	f2c0 8154 	blt.w	8001c7e <ST7789_DrawChar+0x302>

	
			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {		
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e149      	b.n	8001c70 <ST7789_DrawChar+0x2f4>
				
				if( ch < 127 ){			
 80019dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019e0:	2b7e      	cmp	r3, #126	; 0x7e
 80019e2:	d810      	bhi.n	8001a06 <ST7789_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019ec:	3b20      	subs	r3, #32
 80019ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019f0:	7849      	ldrb	r1, [r1, #1]
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	440b      	add	r3, r1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	e0b8      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch > 191 ){
 8001a06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a0a:	2bbf      	cmp	r3, #191	; 0xbf
 8001a0c:	d910      	bls.n	8001a30 <ST7789_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом 
					// только кирилицу то нужно добавлять 95 если шрифт 
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a16:	3b60      	subs	r3, #96	; 0x60
 8001a18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a1a:	7849      	ldrb	r1, [r1, #1]
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	440b      	add	r3, r1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	e0a3      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 8001a30:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a34:	2ba8      	cmp	r3, #168	; 0xa8
 8001a36:	d110      	bne.n	8001a5a <ST7789_DrawChar+0xde>
					// 160 эллемент ( символ Ё ) 
					b = Font->data[( 160 ) * Font->FontHeight + i];
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	785b      	ldrb	r3, [r3, #1]
 8001a40:	4619      	mov	r1, r3
 8001a42:	460b      	mov	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	015b      	lsls	r3, r3, #5
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	440b      	add	r3, r1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	e08e      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8001a5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a5e:	2bb8      	cmp	r3, #184	; 0xb8
 8001a60:	d111      	bne.n	8001a86 <ST7789_DrawChar+0x10a>
					// 161 эллемент  ( символ ё ) 
					b = Font->data[( 161 ) * Font->FontHeight + i];
 8001a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a64:	6859      	ldr	r1, [r3, #4]
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	4413      	add	r3, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	440b      	add	r3, r1
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	e078      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------
				
				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 8001a86:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a8a:	2baa      	cmp	r3, #170	; 0xaa
 8001a8c:	d10f      	bne.n	8001aae <ST7789_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	4619      	mov	r1, r3
 8001a98:	23a2      	movs	r3, #162	; 0xa2
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	e064      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 8001aae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001ab2:	2baf      	cmp	r3, #175	; 0xaf
 8001ab4:	d10f      	bne.n	8001ad6 <ST7789_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 8001ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	23a3      	movs	r3, #163	; 0xa3
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	440b      	add	r3, r1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e050      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 8001ad6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001ada:	2bb2      	cmp	r3, #178	; 0xb2
 8001adc:	d10f      	bne.n	8001afe <ST7789_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 8001ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	23a4      	movs	r3, #164	; 0xa4
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	440b      	add	r3, r1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	e03c      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 8001afe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b02:	2bb3      	cmp	r3, #179	; 0xb3
 8001b04:	d111      	bne.n	8001b2a <ST7789_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 8001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	0159      	lsls	r1, r3, #5
 8001b18:	440b      	add	r3, r1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	440b      	add	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	e026      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 8001b2a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b2e:	2bba      	cmp	r3, #186	; 0xba
 8001b30:	d10f      	bne.n	8001b52 <ST7789_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 8001b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	23a6      	movs	r3, #166	; 0xa6
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	440b      	add	r3, r1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	e012      	b.n	8001b78 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 8001b52:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b56:	2bbf      	cmp	r3, #191	; 0xbf
 8001b58:	d10e      	bne.n	8001b78 <ST7789_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	4619      	mov	r1, r3
 8001b64:	23a7      	movs	r3, #167	; 0xa7
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	440b      	add	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------
			
				for (j = 0; j < Font->FontWidth; j++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e068      	b.n	8001c50 <ST7789_DrawChar+0x2d4>
					
					if ((b << j) & 0x8000) {
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d028      	beq.n	8001be0 <ST7789_DrawChar+0x264>
						
						for (yy = 0; yy < multiplier; yy++){
 8001b8e:	2300      	movs	r3, #0
 8001b90:	72bb      	strb	r3, [r7, #10]
 8001b92:	e01f      	b.n	8001bd4 <ST7789_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 8001b94:	2300      	movs	r3, #0
 8001b96:	72fb      	strb	r3, [r7, #11]
 8001b98:	e014      	b.n	8001bc4 <ST7789_DrawChar+0x248>
									ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 8001b9a:	7afb      	ldrb	r3, [r7, #11]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b218      	sxth	r0, r3
 8001ba8:	7abb      	ldrb	r3, [r7, #10]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7ff fe11 	bl	80017e0 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	72fb      	strb	r3, [r7, #11]
 8001bc4:	7afa      	ldrb	r2, [r7, #11]
 8001bc6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3e5      	bcc.n	8001b9a <ST7789_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 8001bce:	7abb      	ldrb	r3, [r7, #10]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	72bb      	strb	r3, [r7, #10]
 8001bd4:	7aba      	ldrb	r2, [r7, #10]
 8001bd6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3da      	bcc.n	8001b94 <ST7789_DrawChar+0x218>
 8001bde:	e02f      	b.n	8001c40 <ST7789_DrawChar+0x2c4>
							}
						}
						
					} 
					else if( TransparentBg ){
 8001be0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d02b      	beq.n	8001c40 <ST7789_DrawChar+0x2c4>
						
						for (yy = 0; yy < multiplier; yy++){
 8001be8:	2300      	movs	r3, #0
 8001bea:	72bb      	strb	r3, [r7, #10]
 8001bec:	e023      	b.n	8001c36 <ST7789_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	72fb      	strb	r3, [r7, #11]
 8001bf2:	e018      	b.n	8001c26 <ST7789_DrawChar+0x2aa>
 8001bf4:	20000434 	.word	0x20000434
 8001bf8:	20000436 	.word	0x20000436
									ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b218      	sxth	r0, r3
 8001c0a:	7abb      	ldrb	r3, [r7, #10]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	883a      	ldrh	r2, [r7, #0]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7ff fde0 	bl	80017e0 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	3301      	adds	r3, #1
 8001c24:	72fb      	strb	r3, [r7, #11]
 8001c26:	7afa      	ldrb	r2, [r7, #11]
 8001c28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d3e5      	bcc.n	8001bfc <ST7789_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8001c30:	7abb      	ldrb	r3, [r7, #10]
 8001c32:	3301      	adds	r3, #1
 8001c34:	72bb      	strb	r3, [r7, #10]
 8001c36:	7aba      	ldrb	r2, [r7, #10]
 8001c38:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d3d6      	bcc.n	8001bee <ST7789_DrawChar+0x272>
							}
						}
						
					}
					X = X + multiplier;
 8001c40:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d390      	bcc.n	8001b7e <ST7789_DrawChar+0x202>
				}
				X = x;
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8001c60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {		
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	461a      	mov	r2, r3
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f4ff aeaf 	bcc.w	80019dc <ST7789_DrawChar+0x60>
			}
	}
}
 8001c7e:	bf00      	nop
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop

08001c88 <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4604      	mov	r4, r0
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4623      	mov	r3, r4
 8001c98:	80fb      	strh	r3, [r7, #6]
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80bb      	strh	r3, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	807b      	strh	r3, [r7, #2]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	803b      	strh	r3, [r7, #0]
	
	if( multiplier < 1 ){
 8001ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <ST7789_print+0x2c>
		multiplier = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8001cb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cb6:	f7fe fa93 	bl	80001e0 <strlen>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	81bb      	strh	r3, [r7, #12]
	
	while (len--) {
 8001cbe:	e09c      	b.n	8001dfa <ST7789_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2bbf      	cmp	r3, #191	; 0xbf
 8001cc6:	d977      	bls.n	8001db8 <ST7789_print+0x130>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2bd0      	cmp	r3, #208	; 0xd0
 8001cce:	d002      	beq.n	8001cd6 <ST7789_print+0x4e>
 8001cd0:	2bd1      	cmp	r3, #209	; 0xd1
 8001cd2:	d02c      	beq.n	8001d2e <ST7789_print+0xa6>
 8001cd4:	e05b      	b.n	8001d8e <ST7789_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	3301      	adds	r3, #1
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b8f      	cmp	r3, #143	; 0x8f
 8001ce2:	d908      	bls.n	8001cf6 <ST7789_print+0x6e>
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2bbf      	cmp	r3, #191	; 0xbf
 8001cea:	d804      	bhi.n	8001cf6 <ST7789_print+0x6e>
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3330      	adds	r3, #48	; 0x30
 8001cf2:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001cf4:	e048      	b.n	8001d88 <ST7789_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b81      	cmp	r3, #129	; 0x81
 8001cfc:	d102      	bne.n	8001d04 <ST7789_print+0x7c>
 8001cfe:	23a8      	movs	r3, #168	; 0xa8
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e044      	b.n	8001d8e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b84      	cmp	r3, #132	; 0x84
 8001d0a:	d102      	bne.n	8001d12 <ST7789_print+0x8a>
 8001d0c:	23aa      	movs	r3, #170	; 0xaa
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e03d      	b.n	8001d8e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b86      	cmp	r3, #134	; 0x86
 8001d18:	d102      	bne.n	8001d20 <ST7789_print+0x98>
 8001d1a:	23b2      	movs	r3, #178	; 0xb2
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	e036      	b.n	8001d8e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b87      	cmp	r3, #135	; 0x87
 8001d26:	d12f      	bne.n	8001d88 <ST7789_print+0x100>
 8001d28:	23af      	movs	r3, #175	; 0xaf
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	e02f      	b.n	8001d8e <ST7789_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	3301      	adds	r3, #1
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da08      	bge.n	8001d50 <ST7789_print+0xc8>
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b8f      	cmp	r3, #143	; 0x8f
 8001d44:	d804      	bhi.n	8001d50 <ST7789_print+0xc8>
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3370      	adds	r3, #112	; 0x70
 8001d4c:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001d4e:	e01d      	b.n	8001d8c <ST7789_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b91      	cmp	r3, #145	; 0x91
 8001d56:	d102      	bne.n	8001d5e <ST7789_print+0xd6>
 8001d58:	23b8      	movs	r3, #184	; 0xb8
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e017      	b.n	8001d8e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b94      	cmp	r3, #148	; 0x94
 8001d64:	d102      	bne.n	8001d6c <ST7789_print+0xe4>
 8001d66:	23ba      	movs	r3, #186	; 0xba
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e010      	b.n	8001d8e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b96      	cmp	r3, #150	; 0x96
 8001d72:	d102      	bne.n	8001d7a <ST7789_print+0xf2>
 8001d74:	23b3      	movs	r3, #179	; 0xb3
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e009      	b.n	8001d8e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b97      	cmp	r3, #151	; 0x97
 8001d80:	d104      	bne.n	8001d8c <ST7789_print+0x104>
 8001d82:	23bf      	movs	r3, #191	; 0xbf
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e002      	b.n	8001d8e <ST7789_print+0x106>
					break;
 8001d88:	bf00      	nop
 8001d8a:	e000      	b.n	8001d8e <ST7789_print+0x106>
					break;
 8001d8c:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001d8e:	89bb      	ldrh	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	81bb      	strh	r3, [r7, #12]
			
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8001d94:	883c      	ldrh	r4, [r7, #0]
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	88b9      	ldrh	r1, [r7, #4]
 8001d9a:	88f8      	ldrh	r0, [r7, #6]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	9303      	str	r3, [sp, #12]
 8001da0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4623      	mov	r3, r4
 8001db2:	f7ff fde3 	bl	800197c <ST7789_DrawChar>
 8001db6:	e011      	b.n	8001ddc <ST7789_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	883c      	ldrh	r4, [r7, #0]
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	88b9      	ldrh	r1, [r7, #4]
 8001dc2:	88f8      	ldrh	r0, [r7, #6]
 8001dc4:	9303      	str	r3, [sp, #12]
 8001dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	f7ff fdd0 	bl	800197c <ST7789_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	fb12 f303 	smulbb	r3, r2, r3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4413      	add	r3, r2
 8001df2:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	3301      	adds	r3, #1
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (len--) {
 8001dfa:	89bb      	ldrh	r3, [r7, #12]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	81ba      	strh	r2, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f af5d 	bne.w	8001cc0 <ST7789_print+0x38>
	}
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}

08001e10 <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
	
	ST7789_Select();
 8001e1a:	f7ff f949 	bl	80010b0 <ST7789_Select>
	
	ST7789_SendCmd(ST7789_MADCTL);
 8001e1e:	2036      	movs	r0, #54	; 0x36
 8001e20:	f7ff f9bc 	bl	800119c <ST7789_SendCmd>

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d85b      	bhi.n	8001ee4 <ST7789_rotation+0xd4>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <ST7789_rotation+0x24>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e6d 	.word	0x08001e6d
 8001e3c:	08001e95 	.word	0x08001e95
 8001e40:	08001ebd 	.word	0x08001ebd
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_RGB);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff f9cf 	bl	80011e8 <ST7789_SendData>
				ST7789_Width = 240;
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <ST7789_rotation+0xe4>)
 8001e4c:	22f0      	movs	r2, #240	; 0xf0
 8001e4e:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <ST7789_rotation+0xe8>)
 8001e52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e56:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <ST7789_rotation+0xec>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <ST7789_rotation+0xf0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fa17 	bl	8001298 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001e6a:	e03c      	b.n	8001ee6 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001e6c:	2060      	movs	r0, #96	; 0x60
 8001e6e:	f7ff f9bb 	bl	80011e8 <ST7789_SendData>
				ST7789_Width = 320;
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <ST7789_rotation+0xe4>)
 8001e74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e78:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;		
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <ST7789_rotation+0xe8>)
 8001e7c:	22f0      	movs	r2, #240	; 0xf0
 8001e7e:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <ST7789_rotation+0xec>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <ST7789_rotation+0xf0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fa03 	bl	8001298 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001e92:	e028      	b.n	8001ee6 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001e94:	20c0      	movs	r0, #192	; 0xc0
 8001e96:	f7ff f9a7 	bl	80011e8 <ST7789_SendData>
				ST7789_Width = 240;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <ST7789_rotation+0xe4>)
 8001e9c:	22f0      	movs	r2, #240	; 0xf0
 8001e9e:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <ST7789_rotation+0xe8>)
 8001ea2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ea6:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <ST7789_rotation+0xec>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <ST7789_rotation+0xf0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff f9ef 	bl	8001298 <ST7789_FillScreen>
			#endif
			//==========================================================================
			
		 break;
 8001eba:	e014      	b.n	8001ee6 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001ebc:	20a0      	movs	r0, #160	; 0xa0
 8001ebe:	f7ff f993 	bl	80011e8 <ST7789_SendData>
				ST7789_Width = 320;
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <ST7789_rotation+0xe4>)
 8001ec4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec8:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <ST7789_rotation+0xe8>)
 8001ecc:	22f0      	movs	r2, #240	; 0xf0
 8001ece:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <ST7789_rotation+0xec>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <ST7789_rotation+0xf0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff f9db 	bl	8001298 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001ee2:	e000      	b.n	8001ee6 <ST7789_rotation+0xd6>
	   
	   default:
		 break;
 8001ee4:	bf00      	nop
	  }
	  
	  ST7789_Unselect();
 8001ee6:	f7ff f8ef 	bl	80010c8 <ST7789_Unselect>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000434 	.word	0x20000434
 8001ef8:	20000436 	.word	0x20000436
 8001efc:	20000430 	.word	0x20000430
 8001f00:	20000432 	.word	0x20000432

08001f04 <ST7789_DrawFillRoundRect>:


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( заполненый )
//==============================================================================
void ST7789_DrawFillRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint16_t color) {
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4623      	mov	r3, r4
 8001f14:	80fb      	strh	r3, [r7, #6]
 8001f16:	4603      	mov	r3, r0
 8001f18:	80bb      	strh	r3, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	807b      	strh	r3, [r7, #2]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	803b      	strh	r3, [r7, #0]
	
	int16_t max_radius = ((width < height) ? width : height) / 2; // 1/2 minor axis
 8001f22:	883a      	ldrh	r2, [r7, #0]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4293      	cmp	r3, r2
 8001f28:	bf28      	it	cs
 8001f2a:	4613      	movcs	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	0fda      	lsrs	r2, r3, #31
 8001f30:	4413      	add	r3, r2
 8001f32:	105b      	asrs	r3, r3, #1
 8001f34:	81fb      	strh	r3, [r7, #14]
  if (cornerRadius > max_radius){
 8001f36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dd01      	ble.n	8001f46 <ST7789_DrawFillRoundRect+0x42>
    cornerRadius = max_radius;
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	843b      	strh	r3, [r7, #32]
	}
	
  ST7789_DrawRectangleFilled(x + cornerRadius, y, x + cornerRadius + width - 2 * cornerRadius, y + height, color);
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	8c3b      	ldrh	r3, [r7, #32]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b218      	sxth	r0, r3
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	8c3b      	ldrh	r3, [r7, #32]
 8001f54:	4413      	add	r3, r2
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	8c3b      	ldrh	r3, [r7, #32]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b21c      	sxth	r4, r3
 8001f6a:	88ba      	ldrh	r2, [r7, #4]
 8001f6c:	883b      	ldrh	r3, [r7, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	4622      	mov	r2, r4
 8001f80:	f7ff fae6 	bl	8001550 <ST7789_DrawRectangleFilled>
  // draw four corners
  ST7789_DrawFillCircleHelper(x + width - cornerRadius - 1, y + cornerRadius, cornerRadius, 1, height - 2 * cornerRadius - 1, color);
 8001f84:	88fa      	ldrh	r2, [r7, #6]
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	8c3b      	ldrh	r3, [r7, #32]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b218      	sxth	r0, r3
 8001f98:	88ba      	ldrh	r2, [r7, #4]
 8001f9a:	8c3b      	ldrh	r3, [r7, #32]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b219      	sxth	r1, r3
 8001fa2:	8c3b      	ldrh	r3, [r7, #32]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	883a      	ldrh	r2, [r7, #0]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001fb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fba:	9201      	str	r2, [sp, #4]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	f000 f820 	bl	8002006 <ST7789_DrawFillCircleHelper>
  ST7789_DrawFillCircleHelper(x + cornerRadius, y + cornerRadius, cornerRadius, 2, height - 2 * cornerRadius - 1, color);
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	8c3b      	ldrh	r3, [r7, #32]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b218      	sxth	r0, r3
 8001fd0:	88ba      	ldrh	r2, [r7, #4]
 8001fd2:	8c3b      	ldrh	r3, [r7, #32]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b219      	sxth	r1, r3
 8001fda:	8c3b      	ldrh	r3, [r7, #32]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	883a      	ldrh	r2, [r7, #0]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ff2:	9201      	str	r2, [sp, #4]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	4622      	mov	r2, r4
 8001ffa:	f000 f804 	bl	8002006 <ST7789_DrawFillCircleHelper>
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}

08002006 <ST7789_DrawFillCircleHelper>:
//==============================================================================

//==============================================================================
// Процедура рисования половины окружности ( правая или левая ) ( заполненый )
//==============================================================================
void ST7789_DrawFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8002006:	b590      	push	{r4, r7, lr}
 8002008:	b089      	sub	sp, #36	; 0x24
 800200a:	af02      	add	r7, sp, #8
 800200c:	4604      	mov	r4, r0
 800200e:	4608      	mov	r0, r1
 8002010:	4611      	mov	r1, r2
 8002012:	461a      	mov	r2, r3
 8002014:	4623      	mov	r3, r4
 8002016:	80fb      	strh	r3, [r7, #6]
 8002018:	4603      	mov	r3, r0
 800201a:	80bb      	strh	r3, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	f1c3 0301 	rsb	r3, r3, #1
 800202a:	b29b      	uxth	r3, r3
 800202c:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	461a      	mov	r2, r3
 8002036:	03d2      	lsls	r2, r2, #15
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	b29b      	uxth	r3, r3
 800203e:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8002048:	8a3b      	ldrh	r3, [r7, #16]
 800204a:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8002050:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002054:	b29b      	uxth	r3, r3
 8002056:	3301      	adds	r3, #1
 8002058:	b29b      	uxth	r3, r3
 800205a:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 800205c:	e0d5      	b.n	800220a <ST7789_DrawFillCircleHelper+0x204>
    if (f >= 0) {
 800205e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0e      	blt.n	8002084 <ST7789_DrawFillCircleHelper+0x7e>
      y--;
 8002066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29b      	uxth	r3, r3
 8002070:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8002072:	8a7b      	ldrh	r3, [r7, #18]
 8002074:	3302      	adds	r3, #2
 8002076:	b29b      	uxth	r3, r3
 8002078:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 800207a:	8afa      	ldrh	r2, [r7, #22]
 800207c:	8a7b      	ldrh	r3, [r7, #18]
 800207e:	4413      	add	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8002084:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002088:	b29b      	uxth	r3, r3
 800208a:	3301      	adds	r3, #1
 800208c:	b29b      	uxth	r3, r3
 800208e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8002090:	8abb      	ldrh	r3, [r7, #20]
 8002092:	3302      	adds	r3, #2
 8002094:	b29b      	uxth	r3, r3
 8002096:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8002098:	8afa      	ldrh	r2, [r7, #22]
 800209a:	8abb      	ldrh	r3, [r7, #20]
 800209c:	4413      	add	r3, r2
 800209e:	b29b      	uxth	r3, r3
 80020a0:	82fb      	strh	r3, [r7, #22]

    if (x < (y + 1)) {
 80020a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	db51      	blt.n	8002152 <ST7789_DrawFillCircleHelper+0x14c>
      if (corners & 1){
 80020ae:	787b      	ldrb	r3, [r7, #1]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <ST7789_DrawFillCircleHelper+0xfa>
        ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 - y - 1 + 2 * y + delta, color);
 80020b8:	88fa      	ldrh	r2, [r7, #6]
 80020ba:	8a3b      	ldrh	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b218      	sxth	r0, r3
 80020c2:	88ba      	ldrh	r2, [r7, #4]
 80020c4:	89fb      	ldrh	r3, [r7, #14]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	b219      	sxth	r1, r3
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	8a3b      	ldrh	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b21c      	sxth	r4, r3
 80020d6:	88ba      	ldrh	r2, [r7, #4]
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b29a      	uxth	r2, r3
 80020de:	89fb      	ldrh	r3, [r7, #14]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020ea:	4413      	add	r3, r2
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	4622      	mov	r2, r4
 80020fc:	f7ff faf2 	bl	80016e4 <ST7789_DrawLine>
			}
      if (corners & 2){
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d023      	beq.n	8002152 <ST7789_DrawFillCircleHelper+0x14c>
        ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 - y - 1 + 2 * y + delta, color);
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	8a3b      	ldrh	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	b29b      	uxth	r3, r3
 8002112:	b218      	sxth	r0, r3
 8002114:	88ba      	ldrh	r2, [r7, #4]
 8002116:	89fb      	ldrh	r3, [r7, #14]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	b29b      	uxth	r3, r3
 800211c:	b219      	sxth	r1, r3
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	8a3b      	ldrh	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	b29b      	uxth	r3, r3
 8002126:	b21c      	sxth	r4, r3
 8002128:	88ba      	ldrh	r2, [r7, #4]
 800212a:	89fb      	ldrh	r3, [r7, #14]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	b29a      	uxth	r2, r3
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	b29b      	uxth	r3, r3
 8002136:	4413      	add	r3, r2
 8002138:	b29a      	uxth	r2, r3
 800213a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800213c:	4413      	add	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29b      	uxth	r3, r3
 8002144:	b21a      	sxth	r2, r3
 8002146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	4622      	mov	r2, r4
 800214e:	f7ff fac9 	bl	80016e4 <ST7789_DrawLine>
			}
    }
    if (y != py) {
 8002152:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002156:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800215a:	429a      	cmp	r2, r3
 800215c:	d053      	beq.n	8002206 <ST7789_DrawFillCircleHelper+0x200>
      if (corners & 1){
 800215e:	787b      	ldrb	r3, [r7, #1]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <ST7789_DrawFillCircleHelper+0x1aa>
        ST7789_DrawLine(x0 + py, y0 - px, x0 + py, y0 - px - 1 + 2 * px + delta, color);
 8002168:	88fa      	ldrh	r2, [r7, #6]
 800216a:	897b      	ldrh	r3, [r7, #10]
 800216c:	4413      	add	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	b218      	sxth	r0, r3
 8002172:	88ba      	ldrh	r2, [r7, #4]
 8002174:	89bb      	ldrh	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	b219      	sxth	r1, r3
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	897b      	ldrh	r3, [r7, #10]
 8002180:	4413      	add	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	b21c      	sxth	r4, r3
 8002186:	88ba      	ldrh	r2, [r7, #4]
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	b29a      	uxth	r2, r3
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	b29b      	uxth	r3, r3
 8002194:	4413      	add	r3, r2
 8002196:	b29a      	uxth	r2, r3
 8002198:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800219a:	4413      	add	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	4622      	mov	r2, r4
 80021ac:	f7ff fa9a 	bl	80016e4 <ST7789_DrawLine>
			}
      if (corners & 2){
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d023      	beq.n	8002202 <ST7789_DrawFillCircleHelper+0x1fc>
        ST7789_DrawLine(x0 - py, y0 - px, x0 - py, y0 - px - 1 + 2 * px + delta, color);
 80021ba:	88fa      	ldrh	r2, [r7, #6]
 80021bc:	897b      	ldrh	r3, [r7, #10]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b218      	sxth	r0, r3
 80021c4:	88ba      	ldrh	r2, [r7, #4]
 80021c6:	89bb      	ldrh	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b219      	sxth	r1, r3
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	897b      	ldrh	r3, [r7, #10]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b21c      	sxth	r4, r3
 80021d8:	88ba      	ldrh	r2, [r7, #4]
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	89bb      	ldrh	r3, [r7, #12]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021ec:	4413      	add	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	4622      	mov	r2, r4
 80021fe:	f7ff fa71 	bl	80016e4 <ST7789_DrawLine>
			}
			py = y;
 8002202:	89fb      	ldrh	r3, [r7, #14]
 8002204:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 8002206:	8a3b      	ldrh	r3, [r7, #16]
 8002208:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 800220a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800220e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002212:	429a      	cmp	r2, r3
 8002214:	f6ff af23 	blt.w	800205e <ST7789_DrawFillCircleHelper+0x58>
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
	...

08002224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_MspInit+0x54>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_MspInit+0x54>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_MspInit+0x54>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_MspInit+0x54>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_MspInit+0x54>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_MspInit+0x54>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	210f      	movs	r1, #15
 8002266:	f06f 0001 	mvn.w	r0, #1
 800226a:	f001 f833 	bl	80032d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_ADC_MspInit+0x7c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d127      	bne.n	80022ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_ADC_MspInit+0x80>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_ADC_MspInit+0x80>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_ADC_MspInit+0x80>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_ADC_MspInit+0x80>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_ADC_MspInit+0x80>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_ADC_MspInit+0x80>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Thermistor_Pin|CH4_Pin;
 80022d6:	2342      	movs	r3, #66	; 0x42
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022da:	2303      	movs	r3, #3
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_ADC_MspInit+0x84>)
 80022ea:	f001 fb23 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40012000 	.word	0x40012000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HAL_CRC_MspInit+0x3c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10d      	bne.n	8002332 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_CRC_MspInit+0x40>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_CRC_MspInit+0x40>)
 8002320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_CRC_MspInit+0x40>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023000 	.word	0x40023000
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a31      	ldr	r2, [pc, #196]	; (800242c <HAL_SPI_MspInit+0xe4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d15c      	bne.n	8002424 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_SPI_MspInit+0xe8>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a2f      	ldr	r2, [pc, #188]	; (8002430 <HAL_SPI_MspInit+0xe8>)
 8002374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <HAL_SPI_MspInit+0xe8>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_SPI_MspInit+0xe8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a28      	ldr	r2, [pc, #160]	; (8002430 <HAL_SPI_MspInit+0xe8>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_SPI_MspInit+0xe8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023a2:	23a0      	movs	r3, #160	; 0xa0
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023b2:	2305      	movs	r3, #5
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	481d      	ldr	r0, [pc, #116]	; (8002434 <HAL_SPI_MspInit+0xec>)
 80023be:	f001 fab9 	bl	8003934 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023c4:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_SPI_MspInit+0xf4>)
 80023c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002408:	480b      	ldr	r0, [pc, #44]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 800240a:	f000 ffa9 	bl	8003360 <HAL_DMA_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002414:	f7fe fe28 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 800241c:	649a      	str	r2, [r3, #72]	; 0x48
 800241e:	4a06      	ldr	r2, [pc, #24]	; (8002438 <HAL_SPI_MspInit+0xf0>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40013000 	.word	0x40013000
 8002430:	40023800 	.word	0x40023800
 8002434:	40020000 	.word	0x40020000
 8002438:	20000238 	.word	0x20000238
 800243c:	40026440 	.word	0x40026440

08002440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d116      	bne.n	8002490 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a24      	ldr	r2, [pc, #144]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2105      	movs	r1, #5
 8002482:	201c      	movs	r0, #28
 8002484:	f000 ff26 	bl	80032d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002488:	201c      	movs	r0, #28
 800248a:	f000 ff3f 	bl	800330c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800248e:	e030      	b.n	80024f2 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM4)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <HAL_TIM_Base_MspInit+0xc0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d12b      	bne.n	80024f2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_TIM_Base_MspInit+0xbc>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_Spedd_Pin;
 80024d2:	2340      	movs	r3, #64	; 0x40
 80024d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024e2:	2302      	movs	r3, #2
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M_Spedd_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <HAL_TIM_Base_MspInit+0xc4>)
 80024ee:	f001 fa21 	bl	8003934 <HAL_GPIO_Init>
}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40000800 	.word	0x40000800
 8002504:	40020400 	.word	0x40020400

08002508 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_TIM_PWM_MspInit+0x3c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10d      	bne.n	8002536 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_TIM_PWM_MspInit+0x40>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_TIM_PWM_MspInit+0x40>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_TIM_PWM_MspInit+0x40>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40000400 	.word	0x40000400
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 030c 	add.w	r3, r7, #12
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_TIM_MspPostInit+0x68>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11d      	bne.n	80025aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_TIM_MspPostInit+0x6c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_TIM_MspPostInit+0x6c>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_TIM_MspPostInit+0x6c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = M_EN_Pin;
 800258a:	2310      	movs	r3, #16
 800258c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002596:	2302      	movs	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259a:	2302      	movs	r3, #2
 800259c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M_EN_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_TIM_MspPostInit+0x70>)
 80025a6:	f001 f9c5 	bl	8003934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020400 	.word	0x40020400

080025c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <HAL_InitTick+0xd0>)
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_InitTick+0xd0>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6453      	str	r3, [r2, #68]	; 0x44
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_InitTick+0xd0>)
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ec:	f107 020c 	add.w	r2, r7, #12
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 f9fa 	bl	80059f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025fc:	f003 f9e4 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8002600:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	4a23      	ldr	r2, [pc, #140]	; (8002694 <HAL_InitTick+0xd4>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0c9b      	lsrs	r3, r3, #18
 800260c:	3b01      	subs	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_InitTick+0xd8>)
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_InitTick+0xdc>)
 8002614:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_InitTick+0xd8>)
 8002618:	f240 32e7 	movw	r2, #999	; 0x3e7
 800261c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_InitTick+0xd8>)
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_InitTick+0xd8>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_InitTick+0xd8>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_InitTick+0xd8>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002636:	4818      	ldr	r0, [pc, #96]	; (8002698 <HAL_InitTick+0xd8>)
 8002638:	f003 fcaa 	bl	8005f90 <HAL_TIM_Base_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11b      	bne.n	8002682 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800264a:	4813      	ldr	r0, [pc, #76]	; (8002698 <HAL_InitTick+0xd8>)
 800264c:	f003 fd4a 	bl	80060e4 <HAL_TIM_Base_Start_IT>
 8002650:	4603      	mov	r3, r0
 8002652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800265a:	2b00      	cmp	r3, #0
 800265c:	d111      	bne.n	8002682 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800265e:	2019      	movs	r0, #25
 8002660:	f000 fe54 	bl	800330c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b0f      	cmp	r3, #15
 8002668:	d808      	bhi.n	800267c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800266a:	2200      	movs	r2, #0
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	2019      	movs	r0, #25
 8002670:	f000 fe30 	bl	80032d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_InitTick+0xe0>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e002      	b.n	8002682 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002686:	4618      	mov	r0, r3
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	431bde83 	.word	0x431bde83
 8002698:	20000438 	.word	0x20000438
 800269c:	40010000 	.word	0x40010000
 80026a0:	20000014 	.word	0x20000014

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <NMI_Handler+0x4>

080026aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <HardFault_Handler+0x4>

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <MemManage_Handler+0x4>

080026b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ba:	e7fe      	b.n	80026ba <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026d6:	f003 fdb6 	bl	8006246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000438 	.word	0x20000438

080026e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <TIM2_IRQHandler+0x10>)
 80026ea:	f003 fdac 	bl	8006246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000298 	.word	0x20000298

080026f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <DMA2_Stream2_IRQHandler+0x10>)
 80026fe:	f000 fedd 	bl	80034bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000238 	.word	0x20000238

0800270c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <OTG_FS_IRQHandler+0x10>)
 8002712:	f001 fbfc 	bl	8003f0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20006378 	.word	0x20006378

08002720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <_sbrk+0x5c>)
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <_sbrk+0x60>)
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <_sbrk+0x64>)
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <_sbrk+0x68>)
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d207      	bcs.n	8002760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002750:	f00b fb2a 	bl	800dda8 <__errno>
 8002754:	4603      	mov	r3, r0
 8002756:	220c      	movs	r2, #12
 8002758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	e009      	b.n	8002774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <_sbrk+0x64>)
 8002770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20020000 	.word	0x20020000
 8002780:	00000800 	.word	0x00000800
 8002784:	20000480 	.word	0x20000480
 8002788:	20006ab8 	.word	0x20006ab8

0800278c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <SystemInit+0x20>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <SystemInit+0x20>)
 8002798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800279c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b4:	480d      	ldr	r0, [pc, #52]	; (80027ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027b6:	490e      	ldr	r1, [pc, #56]	; (80027f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027cc:	4c0b      	ldr	r4, [pc, #44]	; (80027fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027da:	f7ff ffd7 	bl	800278c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027de:	f00b fae9 	bl	800ddb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7fd fed7 	bl	8000594 <main>
  bx  lr    
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80027f4:	080123e4 	.word	0x080123e4
  ldr r2, =_sbss
 80027f8:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80027fc:	20006ab4 	.word	0x20006ab4

08002800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC_IRQHandler>
	...

08002804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_Init+0x40>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <HAL_Init+0x40>)
 800280e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <HAL_Init+0x40>)
 800281a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_Init+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_Init+0x40>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282c:	2003      	movs	r0, #3
 800282e:	f000 fd46 	bl	80032be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002832:	200f      	movs	r0, #15
 8002834:	f7ff fec4 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002838:	f7ff fcf4 	bl	8002224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_IncTick+0x20>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x24>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_IncTick+0x24>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000018 	.word	0x20000018
 800286c:	20000484 	.word	0x20000484

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000484 	.word	0x20000484

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff ffee 	bl	8002870 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffde 	bl	8002870 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000018 	.word	0x20000018

080028d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e033      	b.n	800294e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fcc4 	bl	800227c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002916:	f023 0302 	bic.w	r3, r3, #2
 800291a:	f043 0202 	orr.w	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9d4 	bl	8002cd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
 800293e:	e001      	b.n	8002944 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002972:	d113      	bne.n	800299c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800297e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002982:	d10b      	bne.n	800299c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e063      	b.n	8002a64 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800299c:	f7ff ff68 	bl	8002870 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029a2:	e021      	b.n	80029e8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d01d      	beq.n	80029e8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_ADC_PollForConversion+0x6c>
 80029b2:	f7ff ff5d 	bl	8002870 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d212      	bcs.n	80029e8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d00b      	beq.n	80029e8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f043 0204 	orr.w	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e03d      	b.n	8002a64 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d1d6      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f06f 0212 	mvn.w	r2, #18
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d123      	bne.n	8002a62 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11f      	bne.n	8002a62 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d111      	bne.n	8002a62 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1c>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e113      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x244>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	d925      	bls.n	8002ae4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b1e      	subs	r3, #30
 8002aae:	2207      	movs	r2, #7
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	400a      	ands	r2, r1
 8002abc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68d9      	ldr	r1, [r3, #12]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4403      	add	r3, r0
 8002ad6:	3b1e      	subs	r3, #30
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	e022      	b.n	8002b2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6919      	ldr	r1, [r3, #16]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	2207      	movs	r2, #7
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	400a      	ands	r2, r1
 8002b06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6919      	ldr	r1, [r3, #16]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4403      	add	r3, r0
 8002b20:	409a      	lsls	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d824      	bhi.n	8002b7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b05      	subs	r3, #5
 8002b44:	221f      	movs	r2, #31
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	400a      	ands	r2, r1
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4618      	mov	r0, r3
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b05      	subs	r3, #5
 8002b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
 8002b7a:	e04c      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b0c      	cmp	r3, #12
 8002b82:	d824      	bhi.n	8002bce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	3b23      	subs	r3, #35	; 0x23
 8002b96:	221f      	movs	r2, #31
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	400a      	ands	r2, r1
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b23      	subs	r3, #35	; 0x23
 8002bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
 8002bcc:	e023      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	3b41      	subs	r3, #65	; 0x41
 8002be0:	221f      	movs	r2, #31
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	400a      	ands	r2, r1
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	3b41      	subs	r3, #65	; 0x41
 8002c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c16:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <HAL_ADC_ConfigChannel+0x250>)
 8002c18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a28      	ldr	r2, [pc, #160]	; (8002cc0 <HAL_ADC_ConfigChannel+0x254>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d10f      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1d8>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b12      	cmp	r3, #18
 8002c2a:	d10b      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_ADC_ConfigChannel+0x254>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d12b      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x23a>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_ADC_ConfigChannel+0x258>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x1f4>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b11      	cmp	r3, #17
 8002c5e:	d122      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_ADC_ConfigChannel+0x258>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d111      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_ADC_ConfigChannel+0x25c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <HAL_ADC_ConfigChannel+0x260>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0c9a      	lsrs	r2, r3, #18
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40012300 	.word	0x40012300
 8002cc0:	40012000 	.word	0x40012000
 8002cc4:	10000012 	.word	0x10000012
 8002cc8:	20000010 	.word	0x20000010
 8002ccc:	431bde83 	.word	0x431bde83

08002cd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd8:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <ADC_Init+0x1f0>)
 8002cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	021a      	lsls	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <ADC_Init+0x1f4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	e00f      	b.n	8002dce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0202 	bic.w	r2, r2, #2
 8002ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7e1b      	ldrb	r3, [r3, #24]
 8002de8:	005a      	lsls	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	3b01      	subs	r3, #1
 8002e28:	035a      	lsls	r2, r3, #13
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	e007      	b.n	8002e44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	051a      	lsls	r2, r3, #20
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e86:	025a      	lsls	r2, r3, #9
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6899      	ldr	r1, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	029a      	lsls	r2, r3, #10
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40012300 	.word	0x40012300
 8002ec4:	0f000001 	.word	0x0f000001

08002ec8 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_ADCEx_InjectedStart+0x22>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e0aa      	b.n	8003040 <HAL_ADCEx_InjectedStart+0x178>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d018      	beq.n	8002f32 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f10:	4b4e      	ldr	r3, [pc, #312]	; (800304c <HAL_ADCEx_InjectedStart+0x184>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a4e      	ldr	r2, [pc, #312]	; (8003050 <HAL_ADCEx_InjectedStart+0x188>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0c9a      	lsrs	r2, r3, #18
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f24:	e002      	b.n	8002f2c <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f9      	bne.n	8002f26 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d172      	bne.n	8003026 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0204 	mvn.w	r2, #4
 8002f76:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f78:	4b36      	ldr	r3, [pc, #216]	; (8003054 <HAL_ADCEx_InjectedStart+0x18c>)
 8002f7a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d124      	bne.n	8002fd2 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf0c      	ite	eq
 8002f96:	2301      	moveq	r3, #1
 8002f98:	2300      	movne	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d041      	beq.n	800303e <HAL_ADCEx_InjectedStart+0x176>
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d03e      	beq.n	800303e <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	e035      	b.n	800303e <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <HAL_ADCEx_InjectedStart+0x190>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d11a      	bne.n	800303e <HAL_ADCEx_InjectedStart+0x176>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d017      	beq.n	800303e <HAL_ADCEx_InjectedStart+0x176>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d014      	beq.n	800303e <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e00b      	b.n	800303e <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	20000010 	.word	0x20000010
 8003050:	431bde83 	.word	0x431bde83
 8003054:	40012300 	.word	0x40012300
 8003058:	40012000 	.word	0x40012000

0800305c <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_ADCEx_InjectedStop+0x1a>
 8003072:	2302      	movs	r3, #2
 8003074:	e037      	b.n	80030e6 <HAL_ADCEx_InjectedStop+0x8a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d120      	bne.n	80030cc <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003094:	2b00      	cmp	r3, #0
 8003096:	d119      	bne.n	80030cc <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d112      	bne.n	80030dc <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ca:	e007      	b.n	80030dc <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0204 	mvn.w	r2, #4
 800310a:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	3b01      	subs	r3, #1
 8003110:	2b03      	cmp	r3, #3
 8003112:	d81f      	bhi.n	8003154 <HAL_ADCEx_InjectedGetValue+0x60>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <HAL_ADCEx_InjectedGetValue+0x28>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800314b 	.word	0x0800314b
 8003120:	08003141 	.word	0x08003141
 8003124:	08003137 	.word	0x08003137
 8003128:	0800312d 	.word	0x0800312d
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003132:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8003134:	e00f      	b.n	8003156 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800313e:	e00a      	b.n	8003156 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003148:	e005      	b.n	8003156 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	60fb      	str	r3, [r7, #12]
    }
    break;
 8003152:	e000      	b.n	8003156 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8003154:	bf00      	nop
  }
  return tmp;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ff4c 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e6:	f7ff ff61 	bl	80031ac <__NVIC_GetPriorityGrouping>
 80032ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	6978      	ldr	r0, [r7, #20]
 80032f2:	f7ff ffb1 	bl	8003258 <NVIC_EncodePriority>
 80032f6:	4602      	mov	r2, r0
 80032f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff80 	bl	8003204 <__NVIC_SetPriority>
}
 8003304:	bf00      	nop
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff54 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e00e      	b.n	8003358 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	795b      	ldrb	r3, [r3, #5]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe ffda 	bl	8002304 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7ff fa80 	bl	8002870 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e099      	b.n	80034b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339c:	e00f      	b.n	80033be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800339e:	f7ff fa67 	bl	8002870 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d908      	bls.n	80033be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2203      	movs	r2, #3
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e078      	b.n	80034b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e8      	bne.n	800339e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_DMA_Init+0x158>)
 80033d8:	4013      	ands	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b04      	cmp	r3, #4
 8003416:	d107      	bne.n	8003428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	4313      	orrs	r3, r2
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b04      	cmp	r3, #4
 8003450:	d117      	bne.n	8003482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f9e9 	bl	800383c <DMA_CheckFifoParam>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800347e:	2301      	movs	r3, #1
 8003480:	e016      	b.n	80034b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9a0 	bl	80037d0 <DMA_CalcBaseAndBitshift>
 8003490:	4603      	mov	r3, r0
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	f010803f 	.word	0xf010803f

080034bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c8:	4b8e      	ldr	r3, [pc, #568]	; (8003704 <HAL_DMA_IRQHandler+0x248>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a8e      	ldr	r2, [pc, #568]	; (8003708 <HAL_DMA_IRQHandler+0x24c>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	2208      	movs	r2, #8
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0204 	bic.w	r2, r2, #4
 800350e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2208      	movs	r2, #8
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2201      	movs	r2, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f043 0202 	orr.w	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2204      	movs	r2, #4
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d012      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2204      	movs	r2, #4
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f043 0204 	orr.w	r2, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	2210      	movs	r2, #16
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d043      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d03c      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2210      	movs	r2, #16
 80035b8:	409a      	lsls	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d024      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
 80035ea:	e01f      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e016      	b.n	800362c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0208 	bic.w	r2, r2, #8
 800361a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2220      	movs	r2, #32
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 808f 	beq.w	800375c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8087 	beq.w	800375c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2220      	movs	r2, #32
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b05      	cmp	r3, #5
 8003664:	d136      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0216 	bic.w	r2, r2, #22
 8003674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_DMA_IRQHandler+0x1da>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0208 	bic.w	r2, r2, #8
 80036a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	223f      	movs	r2, #63	; 0x3f
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d07e      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
        }
        return;
 80036d2:	e079      	b.n	80037c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01d      	beq.n	800371e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d031      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e02c      	b.n	800375c <HAL_DMA_IRQHandler+0x2a0>
 8003702:	bf00      	nop
 8003704:	20000010 	.word	0x20000010
 8003708:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e01e      	b.n	800375c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10f      	bne.n	800374c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0210 	bic.w	r2, r2, #16
 800373a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	2b00      	cmp	r3, #0
 8003762:	d032      	beq.n	80037ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2205      	movs	r2, #5
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3301      	adds	r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	d307      	bcc.n	80037a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f2      	bne.n	8003788 <HAL_DMA_IRQHandler+0x2cc>
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
 80037c6:	e000      	b.n	80037ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80037c8:	bf00      	nop
    }
  }
}
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	3b10      	subs	r3, #16
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <DMA_CalcBaseAndBitshift+0x64>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <DMA_CalcBaseAndBitshift+0x68>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d909      	bls.n	8003812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
 8003810:	e007      	b.n	8003822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	aaaaaaab 	.word	0xaaaaaaab
 8003838:	08012338 	.word	0x08012338

0800383c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11f      	bne.n	8003896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d856      	bhi.n	800390a <DMA_CheckFifoParam+0xce>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <DMA_CheckFifoParam+0x28>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003875 	.word	0x08003875
 8003868:	08003887 	.word	0x08003887
 800386c:	08003875 	.word	0x08003875
 8003870:	0800390b 	.word	0x0800390b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d046      	beq.n	800390e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003884:	e043      	b.n	800390e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800388e:	d140      	bne.n	8003912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003894:	e03d      	b.n	8003912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389e:	d121      	bne.n	80038e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d837      	bhi.n	8003916 <DMA_CheckFifoParam+0xda>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <DMA_CheckFifoParam+0x70>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038c3 	.word	0x080038c3
 80038b4:	080038bd 	.word	0x080038bd
 80038b8:	080038d5 	.word	0x080038d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e030      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d025      	beq.n	800391a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d2:	e022      	b.n	800391a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038dc:	d11f      	bne.n	800391e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038e2:	e01c      	b.n	800391e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d903      	bls.n	80038f2 <DMA_CheckFifoParam+0xb6>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d003      	beq.n	80038f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038f0:	e018      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      break;
 80038f6:	e015      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e00b      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;
 800390a:	bf00      	nop
 800390c:	e00a      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 800390e:	bf00      	nop
 8003910:	e008      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 8003912:	bf00      	nop
 8003914:	e006      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;   
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
    }
  } 
  
  return status; 
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop

08003934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e159      	b.n	8003c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	f040 8148 	bne.w	8003bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d005      	beq.n	8003986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003982:	2b02      	cmp	r3, #2
 8003984:	d130      	bne.n	80039e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039bc:	2201      	movs	r2, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 0201 	and.w	r2, r3, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d017      	beq.n	8003a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d123      	bne.n	8003a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	08da      	lsrs	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3208      	adds	r2, #8
 8003a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	220f      	movs	r2, #15
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	08da      	lsrs	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3208      	adds	r2, #8
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80a2 	beq.w	8003bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <HAL_GPIO_Init+0x2e8>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a56      	ldr	r2, [pc, #344]	; (8003c1c <HAL_GPIO_Init+0x2e8>)
 8003ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b54      	ldr	r3, [pc, #336]	; (8003c1c <HAL_GPIO_Init+0x2e8>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ad6:	4a52      	ldr	r2, [pc, #328]	; (8003c20 <HAL_GPIO_Init+0x2ec>)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a49      	ldr	r2, [pc, #292]	; (8003c24 <HAL_GPIO_Init+0x2f0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d019      	beq.n	8003b36 <HAL_GPIO_Init+0x202>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a48      	ldr	r2, [pc, #288]	; (8003c28 <HAL_GPIO_Init+0x2f4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_Init+0x1fe>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a47      	ldr	r2, [pc, #284]	; (8003c2c <HAL_GPIO_Init+0x2f8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00d      	beq.n	8003b2e <HAL_GPIO_Init+0x1fa>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a46      	ldr	r2, [pc, #280]	; (8003c30 <HAL_GPIO_Init+0x2fc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <HAL_GPIO_Init+0x1f6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a45      	ldr	r2, [pc, #276]	; (8003c34 <HAL_GPIO_Init+0x300>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_GPIO_Init+0x1f2>
 8003b22:	2304      	movs	r3, #4
 8003b24:	e008      	b.n	8003b38 <HAL_GPIO_Init+0x204>
 8003b26:	2307      	movs	r3, #7
 8003b28:	e006      	b.n	8003b38 <HAL_GPIO_Init+0x204>
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e004      	b.n	8003b38 <HAL_GPIO_Init+0x204>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_Init+0x204>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_GPIO_Init+0x204>
 8003b36:	2300      	movs	r3, #0
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f002 0203 	and.w	r2, r2, #3
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	4093      	lsls	r3, r2
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b48:	4935      	ldr	r1, [pc, #212]	; (8003c20 <HAL_GPIO_Init+0x2ec>)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	3302      	adds	r3, #2
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b56:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7a:	4a2f      	ldr	r2, [pc, #188]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba4:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <HAL_GPIO_Init+0x304>)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3301      	adds	r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b0f      	cmp	r3, #15
 8003c08:	f67f aea2 	bls.w	8003950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40013800 	.word	0x40013800
 8003c24:	40020000 	.word	0x40020000
 8003c28:	40020400 	.word	0x40020400
 8003c2c:	40020800 	.word	0x40020800
 8003c30:	40020c00 	.word	0x40020c00
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40013c00 	.word	0x40013c00

08003c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c4c:	787b      	ldrb	r3, [r7, #1]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c58:	e003      	b.n	8003c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c5a:	887b      	ldrh	r3, [r7, #2]
 8003c5c:	041a      	lsls	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c70:	b08f      	sub	sp, #60	; 0x3c
 8003c72:	af0a      	add	r7, sp, #40	; 0x28
 8003c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e10f      	b.n	8003ea0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f009 fd7a 	bl	800d794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fa8d 	bl	80071de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	687e      	ldr	r6, [r7, #4]
 8003ccc:	466d      	mov	r5, sp
 8003cce:	f106 0410 	add.w	r4, r6, #16
 8003cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce2:	1d33      	adds	r3, r6, #4
 8003ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f003 f964 	bl	8006fb4 <USB_CoreInit>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0d0      	b.n	8003ea0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f003 fa7b 	bl	8007200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
 8003d0e:	e04a      	b.n	8003da6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	333d      	adds	r3, #61	; 0x3d
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d24:	7bfa      	ldrb	r2, [r7, #15]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	333c      	adds	r3, #60	; 0x3c
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	b298      	uxth	r0, r3
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3344      	adds	r3, #68	; 0x44
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3340      	adds	r3, #64	; 0x40
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3348      	adds	r3, #72	; 0x48
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	334c      	adds	r3, #76	; 0x4c
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3354      	adds	r3, #84	; 0x54
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	3301      	adds	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d3af      	bcc.n	8003d10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	e044      	b.n	8003e40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003dde:	7bfa      	ldrb	r2, [r7, #15]
 8003de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d3b5      	bcc.n	8003db6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	687e      	ldr	r6, [r7, #4]
 8003e52:	466d      	mov	r5, sp
 8003e54:	f106 0410 	add.w	r4, r6, #16
 8003e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e64:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e68:	1d33      	adds	r3, r6, #4
 8003e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6c:	6838      	ldr	r0, [r7, #0]
 8003e6e:	f003 fa13 	bl	8007298 <USB_DevInit>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e00d      	b.n	8003ea0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f004 fb62 	bl	8008562 <USB_DevDisconnect>

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ea8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_PCD_Start+0x1c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e020      	b.n	8003f06 <HAL_PCD_Start+0x5e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d109      	bne.n	8003ee8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d005      	beq.n	8003ee8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 f965 	bl	80071bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 fb12 	bl	8008520 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f0e:	b590      	push	{r4, r7, lr}
 8003f10:	b08d      	sub	sp, #52	; 0x34
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 fbd0 	bl	80086ca <USB_GetMode>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 848a 	bne.w	8004846 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f004 fb34 	bl	80085a4 <USB_ReadInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8480 	beq.w	8004844 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f004 fb21 	bl	80085a4 <USB_ReadInterrupts>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d107      	bne.n	8003f7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f002 0202 	and.w	r2, r2, #2
 8003f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fb0f 	bl	80085a4 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d161      	bne.n	8004054 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0210 	bic.w	r2, r2, #16
 8003f9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	4413      	add	r3, r2
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	0c5b      	lsrs	r3, r3, #17
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d124      	bne.n	8004016 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d035      	beq.n	8004044 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6a38      	ldr	r0, [r7, #32]
 8003fec:	f004 f946 	bl	800827c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ffc:	441a      	add	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400e:	441a      	add	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
 8004014:	e016      	b.n	8004044 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	0c5b      	lsrs	r3, r3, #17
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	2b06      	cmp	r3, #6
 8004020:	d110      	bne.n	8004044 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004028:	2208      	movs	r2, #8
 800402a:	4619      	mov	r1, r3
 800402c:	6a38      	ldr	r0, [r7, #32]
 800402e:	f004 f925 	bl	800827c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800403e:	441a      	add	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0210 	orr.w	r2, r2, #16
 8004052:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f004 faa3 	bl	80085a4 <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004068:	f040 80a7 	bne.w	80041ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f004 faa8 	bl	80085ca <USB_ReadDevAllOutEpInterrupt>
 800407a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800407c:	e099      	b.n	80041b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 808e 	beq.w	80041a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f004 facc 	bl	8008632 <USB_ReadDevOutEPInterrupt>
 800409a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	2301      	movs	r3, #1
 80040b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fec2 	bl	8004e44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	461a      	mov	r2, r3
 80040d8:	2308      	movs	r3, #8
 80040da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 ff98 	bl	8005014 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	2310      	movs	r3, #16
 80040fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d030      	beq.n	800416c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d109      	bne.n	800412a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004128:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	78db      	ldrb	r3, [r3, #3]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d108      	bne.n	800415a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f009 fc19 	bl	800d98c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2302      	movs	r3, #2
 800416a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	461a      	mov	r2, r3
 8004184:	2320      	movs	r3, #32
 8004186:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419e:	461a      	mov	r2, r3
 80041a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	3301      	adds	r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f af62 	bne.w	800407e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 f9f0 	bl	80085a4 <USB_ReadInterrupts>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ce:	f040 80db 	bne.w	8004388 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f004 fa11 	bl	80085fe <USB_ReadDevAllInEpInterrupt>
 80041dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041e2:	e0cd      	b.n	8004380 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80c2 	beq.w	8004374 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f004 fa37 	bl	800866e <USB_ReadDevInEPInterrupt>
 8004200:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d057      	beq.n	80042bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	2201      	movs	r2, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43db      	mvns	r3, r3
 8004226:	69f9      	ldr	r1, [r7, #28]
 8004228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800422c:	4013      	ands	r3, r2
 800422e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	2301      	movs	r3, #1
 8004240:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d132      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	334c      	adds	r3, #76	; 0x4c
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4403      	add	r3, r0
 800426a:	3348      	adds	r3, #72	; 0x48
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4419      	add	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4403      	add	r3, r0
 800427e:	334c      	adds	r3, #76	; 0x4c
 8004280:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x3a2>
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3354      	adds	r3, #84	; 0x54
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042a8:	461a      	mov	r2, r3
 80042aa:	2101      	movs	r1, #1
 80042ac:	f004 fa3e 	bl	800872c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f009 faed 	bl	800d896 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	461a      	mov	r2, r3
 80042d4:	2308      	movs	r3, #8
 80042d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	461a      	mov	r2, r3
 80042f0:	2310      	movs	r3, #16
 80042f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	461a      	mov	r2, r3
 800430c:	2340      	movs	r3, #64	; 0x40
 800430e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d023      	beq.n	8004362 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800431a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800431c:	6a38      	ldr	r0, [r7, #32]
 800431e:	f003 f91f 	bl	8007560 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3338      	adds	r3, #56	; 0x38
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	78db      	ldrb	r3, [r3, #3]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d108      	bne.n	8004350 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f009 fb30 	bl	800d9b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	461a      	mov	r2, r3
 800435e:	2302      	movs	r3, #2
 8004360:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800436c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fcdb 	bl	8004d2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	3301      	adds	r3, #1
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	f47f af2e 	bne.w	80041e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f004 f909 	bl	80085a4 <USB_ReadInterrupts>
 8004392:	4603      	mov	r3, r0
 8004394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800439c:	d122      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d108      	bne.n	80043ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043c4:	2100      	movs	r1, #0
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fec2 	bl	8005150 <HAL_PCDEx_LPM_Callback>
 80043cc:	e002      	b.n	80043d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f009 face 	bl	800d970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 f8db 	bl	80085a4 <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f8:	d112      	bne.n	8004420 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f009 fa8a 	bl	800d924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800441e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f004 f8bd 	bl	80085a4 <USB_ReadInterrupts>
 800442a:	4603      	mov	r3, r0
 800442c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004434:	f040 80b7 	bne.w	80045a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2110      	movs	r1, #16
 8004452:	4618      	mov	r0, r3
 8004454:	f003 f884 	bl	8007560 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004458:	2300      	movs	r3, #0
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445c:	e046      	b.n	80044ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446a:	461a      	mov	r2, r3
 800446c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004470:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004490:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449e:	461a      	mov	r2, r3
 80044a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	3301      	adds	r3, #1
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d3b3      	bcc.n	800445e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004504:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004508:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004522:	f043 030b 	orr.w	r3, r3, #11
 8004526:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004538:	f043 030b 	orr.w	r3, r3, #11
 800453c:	6453      	str	r3, [r2, #68]	; 0x44
 800453e:	e015      	b.n	800456c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004552:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004556:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004566:	f043 030b 	orr.w	r3, r3, #11
 800456a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800457a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800457e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004590:	461a      	mov	r2, r3
 8004592:	f004 f8cb 	bl	800872c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f003 fffa 	bl	80085a4 <USB_ReadInterrupts>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ba:	d124      	bne.n	8004606 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f004 f890 	bl	80086e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f003 f845 	bl	800765a <USB_GetDevSpeed>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681c      	ldr	r4, [r3, #0]
 80045dc:	f001 f9e8 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 80045e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	4620      	mov	r0, r4
 80045ec:	f002 fd44 	bl	8007078 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f009 f978 	bl	800d8e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004604:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f003 ffca 	bl	80085a4 <USB_ReadInterrupts>
 8004610:	4603      	mov	r3, r0
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b08      	cmp	r3, #8
 8004618:	d10a      	bne.n	8004630 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f009 f955 	bl	800d8ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f002 0208 	and.w	r2, r2, #8
 800462e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f003 ffb5 	bl	80085a4 <USB_ReadInterrupts>
 800463a:	4603      	mov	r3, r0
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d122      	bne.n	800468a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004650:	2301      	movs	r3, #1
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
 8004654:	e014      	b.n	8004680 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fb27 	bl	8004cc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	3301      	adds	r3, #1
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004686:	429a      	cmp	r2, r3
 8004688:	d3e5      	bcc.n	8004656 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f003 ff88 	bl	80085a4 <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469e:	d13b      	bne.n	8004718 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046a0:	2301      	movs	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
 80046a4:	e02b      	b.n	80046fe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3340      	adds	r3, #64	; 0x40
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d115      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80046cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da12      	bge.n	80046f8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	333f      	adds	r3, #63	; 0x3f
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fae8 	bl	8004cc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	3301      	adds	r3, #1
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	429a      	cmp	r2, r3
 8004706:	d3ce      	bcc.n	80046a6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f003 ff41 	bl	80085a4 <USB_ReadInterrupts>
 8004722:	4603      	mov	r3, r0
 8004724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800472c:	d155      	bne.n	80047da <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800472e:	2301      	movs	r3, #1
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e045      	b.n	80047c0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d12e      	bne.n	80047ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800475c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800475e:	2b00      	cmp	r3, #0
 8004760:	da2b      	bge.n	80047ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800476e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004772:	429a      	cmp	r2, r3
 8004774:	d121      	bne.n	80047ba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047b6:	6053      	str	r3, [r2, #4]
            break;
 80047b8:	e007      	b.n	80047ca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	3301      	adds	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d3b4      	bcc.n	8004734 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f003 fee0 	bl	80085a4 <USB_ReadInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d10a      	bne.n	8004806 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f009 f8ef 	bl	800d9d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f003 feca 	bl	80085a4 <USB_ReadInterrupts>
 8004810:	4603      	mov	r3, r0
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d115      	bne.n	8004846 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f009 f8df 	bl	800d9f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	e000      	b.n	8004846 <HAL_PCD_IRQHandler+0x938>
      return;
 8004844:	bf00      	nop
    }
  }
}
 8004846:	3734      	adds	r7, #52	; 0x34
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}

0800484c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_PCD_SetAddress+0x1a>
 8004862:	2302      	movs	r3, #2
 8004864:	e013      	b.n	800488e <HAL_PCD_SetAddress+0x42>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f003 fe28 	bl	80084d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	4608      	mov	r0, r1
 80048a0:	4611      	mov	r1, r2
 80048a2:	461a      	mov	r2, r3
 80048a4:	4603      	mov	r3, r0
 80048a6:	70fb      	strb	r3, [r7, #3]
 80048a8:	460b      	mov	r3, r1
 80048aa:	803b      	strh	r3, [r7, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da0f      	bge.n	80048dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	3338      	adds	r3, #56	; 0x38
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	4413      	add	r3, r2
 80048d0:	3304      	adds	r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	705a      	strb	r2, [r3, #1]
 80048da:	e00f      	b.n	80048fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 020f 	and.w	r2, r3, #15
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	3304      	adds	r3, #4
 80048f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	b2da      	uxtb	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004908:	883a      	ldrh	r2, [r7, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	78ba      	ldrb	r2, [r7, #2]
 8004912:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d004      	beq.n	8004926 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004926:	78bb      	ldrb	r3, [r7, #2]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d102      	bne.n	8004932 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_PCD_EP_Open+0xaa>
 800493c:	2302      	movs	r3, #2
 800493e:	e00e      	b.n	800495e <HAL_PCD_EP_Open+0xc8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	4618      	mov	r0, r3
 8004950:	f002 fea8 	bl	80076a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800495c:	7afb      	ldrb	r3, [r7, #11]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004976:	2b00      	cmp	r3, #0
 8004978:	da0f      	bge.n	800499a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	4613      	mov	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	3338      	adds	r3, #56	; 0x38
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	3304      	adds	r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	705a      	strb	r2, [r3, #1]
 8004998:	e00f      	b.n	80049ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_PCD_EP_Close+0x6e>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e00e      	b.n	80049f2 <HAL_PCD_EP_Close+0x8c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68f9      	ldr	r1, [r7, #12]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f002 fee6 	bl	80077b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	460b      	mov	r3, r1
 8004a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a0a:	7afb      	ldrb	r3, [r7, #11]
 8004a0c:	f003 020f 	and.w	r2, r3, #15
 8004a10:	4613      	mov	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	3304      	adds	r3, #4
 8004a22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2200      	movs	r2, #0
 8004a34:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d102      	bne.n	8004a56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6979      	ldr	r1, [r7, #20]
 8004a6e:	f003 f9c5 	bl	8007dfc <USB_EP0StartXfer>
 8004a72:	e008      	b.n	8004a86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	f002 ff73 	bl	800796c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 020f 	and.w	r2, r3, #15
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	460b      	mov	r3, r1
 8004ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad0:	7afb      	ldrb	r3, [r7, #11]
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	3338      	adds	r3, #56	; 0x38
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2200      	movs	r2, #0
 8004af8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2201      	movs	r2, #1
 8004afe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b00:	7afb      	ldrb	r3, [r7, #11]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d102      	bne.n	8004b1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6979      	ldr	r1, [r7, #20]
 8004b32:	f003 f963 	bl	8007dfc <USB_EP0StartXfer>
 8004b36:	e008      	b.n	8004b4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	6979      	ldr	r1, [r7, #20]
 8004b46:	f002 ff11 	bl	800796c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	f003 020f 	and.w	r2, r3, #15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d901      	bls.n	8004b72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e050      	b.n	8004c14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da0f      	bge.n	8004b9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	f003 020f 	and.w	r2, r3, #15
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	3338      	adds	r3, #56	; 0x38
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3304      	adds	r3, #4
 8004b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	705a      	strb	r2, [r3, #1]
 8004b98:	e00d      	b.n	8004bb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4413      	add	r3, r2
 8004bac:	3304      	adds	r3, #4
 8004bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_PCD_EP_SetStall+0x82>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e01e      	b.n	8004c14 <HAL_PCD_EP_SetStall+0xc0>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 fba1 	bl	800832c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	b2d9      	uxtb	r1, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c04:	461a      	mov	r2, r3
 8004c06:	f003 fd91 	bl	800872c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	f003 020f 	and.w	r2, r3, #15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d901      	bls.n	8004c3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e042      	b.n	8004cc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0f      	bge.n	8004c62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 020f 	and.w	r2, r3, #15
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3338      	adds	r3, #56	; 0x38
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	3304      	adds	r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	705a      	strb	r2, [r3, #1]
 8004c60:	e00f      	b.n	8004c82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 020f 	and.w	r2, r3, #15
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_PCD_EP_ClrStall+0x86>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e00e      	b.n	8004cc0 <HAL_PCD_EP_ClrStall+0xa4>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f003 fba9 	bl	8008408 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da0c      	bge.n	8004cf6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 020f 	and.w	r2, r3, #15
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	3338      	adds	r3, #56	; 0x38
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4413      	add	r3, r2
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e00c      	b.n	8004d10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	f003 020f 	and.w	r2, r3, #15
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f003 f9c8 	bl	80080ac <USB_EPStopXfer>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d20:	7afb      	ldrb	r3, [r7, #11]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b08a      	sub	sp, #40	; 0x28
 8004d2e:	af02      	add	r7, sp, #8
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	3338      	adds	r3, #56	; 0x38
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3304      	adds	r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d901      	bls.n	8004d62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e06c      	b.n	8004e3c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d902      	bls.n	8004d7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3303      	adds	r3, #3
 8004d82:	089b      	lsrs	r3, r3, #2
 8004d84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d86:	e02b      	b.n	8004de0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d902      	bls.n	8004da4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	3303      	adds	r3, #3
 8004da8:	089b      	lsrs	r3, r3, #2
 8004daa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6919      	ldr	r1, [r3, #16]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	6978      	ldr	r0, [r7, #20]
 8004dc4:	f003 fa1c 	bl	8008200 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	441a      	add	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1a      	ldr	r2, [r3, #32]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d809      	bhi.n	8004e0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d203      	bcs.n	8004e0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1be      	bne.n	8004d88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d811      	bhi.n	8004e3a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	6939      	ldr	r1, [r7, #16]
 8004e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e36:	4013      	ands	r3, r2
 8004e38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	333c      	adds	r3, #60	; 0x3c
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d17b      	bne.n	8004f72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4a61      	ldr	r2, [pc, #388]	; (800500c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	f240 80b9 	bls.w	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80b3 	beq.w	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eac:	6093      	str	r3, [r2, #8]
 8004eae:	e0a7      	b.n	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2320      	movs	r3, #32
 8004eca:	6093      	str	r3, [r2, #8]
 8004ecc:	e098      	b.n	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8093 	bne.w	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	; (800500c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d90f      	bls.n	8004f02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	6093      	str	r3, [r2, #8]
 8004f00:	e07e      	b.n	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4413      	add	r3, r2
 8004f14:	3304      	adds	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	0159      	lsls	r1, r3, #5
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	440b      	add	r3, r1
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2e:	1ad2      	subs	r2, r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d114      	bne.n	8004f64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2101      	movs	r1, #1
 8004f50:	f003 fbec 	bl	800872c <USB_EP0_OutStart>
 8004f54:	e006      	b.n	8004f64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	441a      	add	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f008 fc78 	bl	800d860 <HAL_PCD_DataOutStageCallback>
 8004f70:	e046      	b.n	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d124      	bne.n	8004fc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	461a      	mov	r2, r3
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	6093      	str	r3, [r2, #8]
 8004f98:	e032      	b.n	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2320      	movs	r3, #32
 8004fb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f008 fc4f 	bl	800d860 <HAL_PCD_DataOutStageCallback>
 8004fc2:	e01d      	b.n	8005000 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d114      	bne.n	8004ff4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d108      	bne.n	8004ff4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fec:	461a      	mov	r2, r3
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f003 fb9c 	bl	800872c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f008 fc30 	bl	800d860 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	4f54300a 	.word	0x4f54300a
 8005010:	4f54310a 	.word	0x4f54310a

08005014 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	333c      	adds	r3, #60	; 0x3c
 800502c:	3304      	adds	r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a15      	ldr	r2, [pc, #84]	; (800509c <PCD_EP_OutSetupPacket_int+0x88>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d90e      	bls.n	8005068 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005066:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f008 fbe7 	bl	800d83c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <PCD_EP_OutSetupPacket_int+0x88>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d90c      	bls.n	8005090 <PCD_EP_OutSetupPacket_int+0x7c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d108      	bne.n	8005090 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005088:	461a      	mov	r2, r3
 800508a:	2101      	movs	r1, #1
 800508c:	f003 fb4e 	bl	800872c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	4f54300a 	.word	0x4f54300a

080050a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
 80050ac:	4613      	mov	r3, r2
 80050ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d107      	bne.n	80050ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050be:	883b      	ldrh	r3, [r7, #0]
 80050c0:	0419      	lsls	r1, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
 80050cc:	e028      	b.n	8005120 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	4413      	add	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	e00d      	b.n	80050fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	3340      	adds	r3, #64	; 0x40
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4413      	add	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	3301      	adds	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	3b01      	subs	r3, #1
 8005104:	429a      	cmp	r2, r3
 8005106:	d3ec      	bcc.n	80050e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005108:	883b      	ldrh	r3, [r7, #0]
 800510a:	0418      	lsls	r0, r3, #16
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6819      	ldr	r1, [r3, #0]
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	3b01      	subs	r3, #1
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	4302      	orrs	r2, r0
 8005118:	3340      	adds	r3, #64	; 0x40
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e267      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d075      	beq.n	8005272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005186:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	2b04      	cmp	r3, #4
 8005190:	d00c      	beq.n	80051ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005192:	4b85      	ldr	r3, [pc, #532]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800519a:	2b08      	cmp	r3, #8
 800519c:	d112      	bne.n	80051c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800519e:	4b82      	ldr	r3, [pc, #520]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051aa:	d10b      	bne.n	80051c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ac:	4b7e      	ldr	r3, [pc, #504]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d05b      	beq.n	8005270 <HAL_RCC_OscConfig+0x108>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d157      	bne.n	8005270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e242      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d106      	bne.n	80051dc <HAL_RCC_OscConfig+0x74>
 80051ce:	4b76      	ldr	r3, [pc, #472]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a75      	ldr	r2, [pc, #468]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e01d      	b.n	8005218 <HAL_RCC_OscConfig+0xb0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051e4:	d10c      	bne.n	8005200 <HAL_RCC_OscConfig+0x98>
 80051e6:	4b70      	ldr	r3, [pc, #448]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6f      	ldr	r2, [pc, #444]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	4b6d      	ldr	r3, [pc, #436]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a6c      	ldr	r2, [pc, #432]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80051f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e00b      	b.n	8005218 <HAL_RCC_OscConfig+0xb0>
 8005200:	4b69      	ldr	r3, [pc, #420]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a68      	ldr	r2, [pc, #416]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	4b66      	ldr	r3, [pc, #408]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a65      	ldr	r2, [pc, #404]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d013      	beq.n	8005248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fd fb26 	bl	8002870 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005228:	f7fd fb22 	bl	8002870 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	; 0x64
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e207      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523a:	4b5b      	ldr	r3, [pc, #364]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCC_OscConfig+0xc0>
 8005246:	e014      	b.n	8005272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd fb12 	bl	8002870 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005250:	f7fd fb0e 	bl	8002870 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e1f3      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005262:	4b51      	ldr	r3, [pc, #324]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0xe8>
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d063      	beq.n	8005346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800527e:	4b4a      	ldr	r3, [pc, #296]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800528a:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005292:	2b08      	cmp	r3, #8
 8005294:	d11c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005296:	4b44      	ldr	r3, [pc, #272]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d116      	bne.n	80052d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052a2:	4b41      	ldr	r3, [pc, #260]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_RCC_OscConfig+0x152>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d001      	beq.n	80052ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e1c7      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ba:	4b3b      	ldr	r3, [pc, #236]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4937      	ldr	r1, [pc, #220]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ce:	e03a      	b.n	8005346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052d8:	4b34      	ldr	r3, [pc, #208]	; (80053ac <HAL_RCC_OscConfig+0x244>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052de:	f7fd fac7 	bl	8002870 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052e6:	f7fd fac3 	bl	8002870 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e1a8      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005304:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4925      	ldr	r1, [pc, #148]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]
 8005318:	e015      	b.n	8005346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800531a:	4b24      	ldr	r3, [pc, #144]	; (80053ac <HAL_RCC_OscConfig+0x244>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fd faa6 	bl	8002870 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005328:	f7fd faa2 	bl	8002870 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e187      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533a:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d036      	beq.n	80053c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d016      	beq.n	8005388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <HAL_RCC_OscConfig+0x248>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005360:	f7fd fa86 	bl	8002870 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005368:	f7fd fa82 	bl	8002870 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e167      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_RCC_OscConfig+0x240>)
 800537c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x200>
 8005386:	e01b      	b.n	80053c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <HAL_RCC_OscConfig+0x248>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538e:	f7fd fa6f 	bl	8002870 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005394:	e00e      	b.n	80053b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005396:	f7fd fa6b 	bl	8002870 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d907      	bls.n	80053b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e150      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
 80053a8:	40023800 	.word	0x40023800
 80053ac:	42470000 	.word	0x42470000
 80053b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b4:	4b88      	ldr	r3, [pc, #544]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80053b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ea      	bne.n	8005396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8097 	beq.w	80054fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d2:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10f      	bne.n	80053fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	4b7d      	ldr	r3, [pc, #500]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	4a7c      	ldr	r2, [pc, #496]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80053e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6413      	str	r3, [r2, #64]	; 0x40
 80053ee:	4b7a      	ldr	r3, [pc, #488]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f6:	60bb      	str	r3, [r7, #8]
 80053f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fe:	4b77      	ldr	r3, [pc, #476]	; (80055dc <HAL_RCC_OscConfig+0x474>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d118      	bne.n	800543c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800540a:	4b74      	ldr	r3, [pc, #464]	; (80055dc <HAL_RCC_OscConfig+0x474>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a73      	ldr	r2, [pc, #460]	; (80055dc <HAL_RCC_OscConfig+0x474>)
 8005410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005416:	f7fd fa2b 	bl	8002870 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541e:	f7fd fa27 	bl	8002870 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e10c      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005430:	4b6a      	ldr	r3, [pc, #424]	; (80055dc <HAL_RCC_OscConfig+0x474>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d106      	bne.n	8005452 <HAL_RCC_OscConfig+0x2ea>
 8005444:	4b64      	ldr	r3, [pc, #400]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	4a63      	ldr	r2, [pc, #396]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6713      	str	r3, [r2, #112]	; 0x70
 8005450:	e01c      	b.n	800548c <HAL_RCC_OscConfig+0x324>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b05      	cmp	r3, #5
 8005458:	d10c      	bne.n	8005474 <HAL_RCC_OscConfig+0x30c>
 800545a:	4b5f      	ldr	r3, [pc, #380]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	4a5e      	ldr	r2, [pc, #376]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005460:	f043 0304 	orr.w	r3, r3, #4
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
 8005466:	4b5c      	ldr	r3, [pc, #368]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	4a5b      	ldr	r2, [pc, #364]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	6713      	str	r3, [r2, #112]	; 0x70
 8005472:	e00b      	b.n	800548c <HAL_RCC_OscConfig+0x324>
 8005474:	4b58      	ldr	r3, [pc, #352]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	4a57      	ldr	r2, [pc, #348]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	6713      	str	r3, [r2, #112]	; 0x70
 8005480:	4b55      	ldr	r3, [pc, #340]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	4a54      	ldr	r2, [pc, #336]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005486:	f023 0304 	bic.w	r3, r3, #4
 800548a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005494:	f7fd f9ec 	bl	8002870 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549a:	e00a      	b.n	80054b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800549c:	f7fd f9e8 	bl	8002870 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e0cb      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b2:	4b49      	ldr	r3, [pc, #292]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0ee      	beq.n	800549c <HAL_RCC_OscConfig+0x334>
 80054be:	e014      	b.n	80054ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c0:	f7fd f9d6 	bl	8002870 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c6:	e00a      	b.n	80054de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c8:	f7fd f9d2 	bl	8002870 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e0b5      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054de:	4b3e      	ldr	r3, [pc, #248]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1ee      	bne.n	80054c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d105      	bne.n	80054fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f0:	4b39      	ldr	r3, [pc, #228]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	4a38      	ldr	r2, [pc, #224]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80054f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80a1 	beq.w	8005648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005506:	4b34      	ldr	r3, [pc, #208]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b08      	cmp	r3, #8
 8005510:	d05c      	beq.n	80055cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d141      	bne.n	800559e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <HAL_RCC_OscConfig+0x478>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fd f9a6 	bl	8002870 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005528:	f7fd f9a2 	bl	8002870 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e087      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553a:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	019b      	lsls	r3, r3, #6
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	3b01      	subs	r3, #1
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	491b      	ldr	r1, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 800556c:	4313      	orrs	r3, r2
 800556e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005570:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <HAL_RCC_OscConfig+0x478>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005576:	f7fd f97b 	bl	8002870 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557e:	f7fd f977 	bl	8002870 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e05c      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x416>
 800559c:	e054      	b.n	8005648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <HAL_RCC_OscConfig+0x478>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fd f964 	bl	8002870 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fd f960 	bl	8002870 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e045      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCC_OscConfig+0x470>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x444>
 80055ca:	e03d      	b.n	8005648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e038      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40007000 	.word	0x40007000
 80055e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <HAL_RCC_OscConfig+0x4ec>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d028      	beq.n	8005644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d121      	bne.n	8005644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d11a      	bne.n	8005644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005614:	4013      	ands	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800561a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800561c:	4293      	cmp	r3, r2
 800561e:	d111      	bne.n	8005644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	3b01      	subs	r3, #1
 800562e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d107      	bne.n	8005644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800

08005658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0cc      	b.n	8005806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800566c:	4b68      	ldr	r3, [pc, #416]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d90c      	bls.n	8005694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b65      	ldr	r3, [pc, #404]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b63      	ldr	r3, [pc, #396]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0b8      	b.n	8005806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ac:	4b59      	ldr	r3, [pc, #356]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4a58      	ldr	r2, [pc, #352]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056c4:	4b53      	ldr	r3, [pc, #332]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a52      	ldr	r2, [pc, #328]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d0:	4b50      	ldr	r3, [pc, #320]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	494d      	ldr	r1, [pc, #308]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d044      	beq.n	8005778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d119      	bne.n	8005736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e07f      	b.n	8005806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d003      	beq.n	8005716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005712:	2b03      	cmp	r3, #3
 8005714:	d107      	bne.n	8005726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005716:	4b3f      	ldr	r3, [pc, #252]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e06f      	b.n	8005806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005726:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e067      	b.n	8005806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005736:	4b37      	ldr	r3, [pc, #220]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f023 0203 	bic.w	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	4934      	ldr	r1, [pc, #208]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	4313      	orrs	r3, r2
 8005746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005748:	f7fd f892 	bl	8002870 <HAL_GetTick>
 800574c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574e:	e00a      	b.n	8005766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005750:	f7fd f88e 	bl	8002870 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	; 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e04f      	b.n	8005806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 020c 	and.w	r2, r3, #12
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	429a      	cmp	r2, r3
 8005776:	d1eb      	bne.n	8005750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005778:	4b25      	ldr	r3, [pc, #148]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d20c      	bcs.n	80057a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005786:	4b22      	ldr	r3, [pc, #136]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b20      	ldr	r3, [pc, #128]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e032      	b.n	8005806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4916      	ldr	r1, [pc, #88]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	490e      	ldr	r1, [pc, #56]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057de:	f000 f821 	bl	8005824 <HAL_RCC_GetSysClockFreq>
 80057e2:	4602      	mov	r2, r0
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	490a      	ldr	r1, [pc, #40]	; (8005818 <HAL_RCC_ClockConfig+0x1c0>)
 80057f0:	5ccb      	ldrb	r3, [r1, r3]
 80057f2:	fa22 f303 	lsr.w	r3, r2, r3
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <HAL_RCC_ClockConfig+0x1c8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fc fede 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40023c00 	.word	0x40023c00
 8005814:	40023800 	.word	0x40023800
 8005818:	08012320 	.word	0x08012320
 800581c:	20000010 	.word	0x20000010
 8005820:	20000014 	.word	0x20000014

08005824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005828:	b090      	sub	sp, #64	; 0x40
 800582a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
 8005830:	2300      	movs	r3, #0
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005834:	2300      	movs	r3, #0
 8005836:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800583c:	4b59      	ldr	r3, [pc, #356]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b08      	cmp	r3, #8
 8005846:	d00d      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x40>
 8005848:	2b08      	cmp	r3, #8
 800584a:	f200 80a1 	bhi.w	8005990 <HAL_RCC_GetSysClockFreq+0x16c>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x34>
 8005852:	2b04      	cmp	r3, #4
 8005854:	d003      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0x3a>
 8005856:	e09b      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005858:	4b53      	ldr	r3, [pc, #332]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800585c:	e09b      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800585e:	4b53      	ldr	r3, [pc, #332]	; (80059ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005862:	e098      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005864:	4b4f      	ldr	r3, [pc, #316]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800586e:	4b4d      	ldr	r3, [pc, #308]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d028      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800587a:	4b4a      	ldr	r3, [pc, #296]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	2200      	movs	r2, #0
 8005882:	623b      	str	r3, [r7, #32]
 8005884:	627a      	str	r2, [r7, #36]	; 0x24
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800588c:	2100      	movs	r1, #0
 800588e:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005890:	fb03 f201 	mul.w	r2, r3, r1
 8005894:	2300      	movs	r3, #0
 8005896:	fb00 f303 	mul.w	r3, r0, r3
 800589a:	4413      	add	r3, r2
 800589c:	4a43      	ldr	r2, [pc, #268]	; (80059ac <HAL_RCC_GetSysClockFreq+0x188>)
 800589e:	fba0 1202 	umull	r1, r2, r0, r2
 80058a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a4:	460a      	mov	r2, r1
 80058a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80058a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058aa:	4413      	add	r3, r2
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	2200      	movs	r2, #0
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	61fa      	str	r2, [r7, #28]
 80058b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058be:	f7fa fce7 	bl	8000290 <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4613      	mov	r3, r2
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ca:	e053      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058cc:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	2200      	movs	r2, #0
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	617a      	str	r2, [r7, #20]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80058de:	f04f 0b00 	mov.w	fp, #0
 80058e2:	4652      	mov	r2, sl
 80058e4:	465b      	mov	r3, fp
 80058e6:	f04f 0000 	mov.w	r0, #0
 80058ea:	f04f 0100 	mov.w	r1, #0
 80058ee:	0159      	lsls	r1, r3, #5
 80058f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058f4:	0150      	lsls	r0, r2, #5
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	ebb2 080a 	subs.w	r8, r2, sl
 80058fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800590e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005912:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005916:	ebb2 0408 	subs.w	r4, r2, r8
 800591a:	eb63 0509 	sbc.w	r5, r3, r9
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	00eb      	lsls	r3, r5, #3
 8005928:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800592c:	00e2      	lsls	r2, r4, #3
 800592e:	4614      	mov	r4, r2
 8005930:	461d      	mov	r5, r3
 8005932:	eb14 030a 	adds.w	r3, r4, sl
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	eb45 030b 	adc.w	r3, r5, fp
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800594a:	4629      	mov	r1, r5
 800594c:	028b      	lsls	r3, r1, #10
 800594e:	4621      	mov	r1, r4
 8005950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005954:	4621      	mov	r1, r4
 8005956:	028a      	lsls	r2, r1, #10
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	2200      	movs	r2, #0
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	60fa      	str	r2, [r7, #12]
 8005964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005968:	f7fa fc92 	bl	8000290 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4613      	mov	r3, r2
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	3301      	adds	r3, #1
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800598e:	e002      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005998:	4618      	mov	r0, r3
 800599a:	3740      	adds	r7, #64	; 0x40
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059a2:	bf00      	nop
 80059a4:	40023800 	.word	0x40023800
 80059a8:	00f42400 	.word	0x00f42400
 80059ac:	017d7840 	.word	0x017d7840

080059b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b4:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000010 	.word	0x20000010

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059cc:	f7ff fff0 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	0b5b      	lsrs	r3, r3, #13
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	; (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40023800 	.word	0x40023800
 80059ec:	08012330 	.word	0x08012330

080059f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	220f      	movs	r2, #15
 80059fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a00:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0203 	and.w	r2, r3, #3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a24:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_RCC_GetClockConfig+0x5c>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a32:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <HAL_RCC_GetClockConfig+0x60>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0207 	and.w	r2, r3, #7
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40023c00 	.word	0x40023c00

08005a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e07b      	b.n	8005b5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d108      	bne.n	8005a80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a76:	d009      	beq.n	8005a8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	61da      	str	r2, [r3, #28]
 8005a7e:	e005      	b.n	8005a8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fc fc4e 	bl	8002348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	ea42 0103 	orr.w	r1, r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	f003 0104 	and.w	r1, r3, #4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	f003 0210 	and.w	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b088      	sub	sp, #32
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_SPI_Transmit+0x22>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e126      	b.n	8005dd6 <HAL_SPI_Transmit+0x270>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b90:	f7fc fe6e 	bl	8002870 <HAL_GetTick>
 8005b94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d002      	beq.n	8005bac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005baa:	e10b      	b.n	8005dc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_SPI_Transmit+0x52>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bbc:	e102      	b.n	8005dc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	88fa      	ldrh	r2, [r7, #6]
 8005bd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c04:	d10f      	bne.n	8005c26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d007      	beq.n	8005c44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4c:	d14b      	bne.n	8005ce6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <HAL_SPI_Transmit+0xf6>
 8005c56:	8afb      	ldrh	r3, [r7, #22]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d13e      	bne.n	8005cda <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	881a      	ldrh	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	1c9a      	adds	r2, r3, #2
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c80:	e02b      	b.n	8005cda <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d112      	bne.n	8005cb6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	881a      	ldrh	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	1c9a      	adds	r2, r3, #2
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cb4:	e011      	b.n	8005cda <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb6:	f7fc fddb 	bl	8002870 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d803      	bhi.n	8005cce <HAL_SPI_Transmit+0x168>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d102      	bne.n	8005cd4 <HAL_SPI_Transmit+0x16e>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cd8:	e074      	b.n	8005dc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1ce      	bne.n	8005c82 <HAL_SPI_Transmit+0x11c>
 8005ce4:	e04c      	b.n	8005d80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <HAL_SPI_Transmit+0x18e>
 8005cee:	8afb      	ldrh	r3, [r7, #22]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d140      	bne.n	8005d76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	7812      	ldrb	r2, [r2, #0]
 8005d00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d1a:	e02c      	b.n	8005d76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d113      	bne.n	8005d52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d50:	e011      	b.n	8005d76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d52:	f7fc fd8d 	bl	8002870 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d803      	bhi.n	8005d6a <HAL_SPI_Transmit+0x204>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d102      	bne.n	8005d70 <HAL_SPI_Transmit+0x20a>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d74:	e026      	b.n	8005dc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1cd      	bne.n	8005d1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f8c1 	bl	8005f0c <SPI_EndRxTxTransaction>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e000      	b.n	8005dc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dec:	b2db      	uxtb	r3, r3
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e0c:	f7fc fd30 	bl	8002870 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4413      	add	r3, r2
 8005e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e1c:	f7fc fd28 	bl	8002870 <HAL_GetTick>
 8005e20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e22:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	015b      	lsls	r3, r3, #5
 8005e28:	0d1b      	lsrs	r3, r3, #20
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	fb02 f303 	mul.w	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e32:	e054      	b.n	8005ede <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d050      	beq.n	8005ede <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e3c:	f7fc fd18 	bl	8002870 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d902      	bls.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d13d      	bne.n	8005ece <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e6a:	d111      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e74:	d004      	beq.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7e:	d107      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e98:	d10f      	bne.n	8005eba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e017      	b.n	8005efe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d19b      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000010 	.word	0x20000010

08005f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f18:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <SPI_EndRxTxTransaction+0x7c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <SPI_EndRxTxTransaction+0x80>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	0d5b      	lsrs	r3, r3, #21
 8005f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f28:	fb02 f303 	mul.w	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f36:	d112      	bne.n	8005f5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff ff5a 	bl	8005dfc <SPI_WaitFlagStateUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e00f      	b.n	8005f7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f74:	2b80      	cmp	r3, #128	; 0x80
 8005f76:	d0f2      	beq.n	8005f5e <SPI_EndRxTxTransaction+0x52>
 8005f78:	e000      	b.n	8005f7c <SPI_EndRxTxTransaction+0x70>
        break;
 8005f7a:	bf00      	nop
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000010 	.word	0x20000010
 8005f8c:	165e9f81 	.word	0x165e9f81

08005f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e041      	b.n	8006026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc fa42 	bl	8002440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f000 fc36 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d001      	beq.n	8006048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e03c      	b.n	80060c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <HAL_TIM_Base_Start+0xa0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006062:	d013      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <HAL_TIM_Base_Start+0xa4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a19      	ldr	r2, [pc, #100]	; (80060d8 <HAL_TIM_Base_Start+0xa8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <HAL_TIM_Base_Start+0xac>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_Base_Start+0x5c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a16      	ldr	r2, [pc, #88]	; (80060e0 <HAL_TIM_Base_Start+0xb0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d111      	bne.n	80060b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d010      	beq.n	80060c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0201 	orr.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	e007      	b.n	80060c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40014000 	.word	0x40014000

080060e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d001      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e044      	b.n	8006186 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <HAL_TIM_Base_Start_IT+0xb0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d018      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x6c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006126:	d013      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x6c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_TIM_Base_Start_IT+0xb4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00e      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x6c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a19      	ldr	r2, [pc, #100]	; (800619c <HAL_TIM_Base_Start_IT+0xb8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d009      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x6c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x6c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a16      	ldr	r2, [pc, #88]	; (80061a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d111      	bne.n	8006174 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b06      	cmp	r3, #6
 8006160:	d010      	beq.n	8006184 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0201 	orr.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006172:	e007      	b.n	8006184 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000

080061a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e041      	b.n	800623e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fc f99a 	bl	8002508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f000 fb2a 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d122      	bne.n	80062a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d11b      	bne.n	80062a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f06f 0202 	mvn.w	r2, #2
 8006272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 faba 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 800628e:	e005      	b.n	800629c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 faac 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fabd 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d122      	bne.n	80062f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d11b      	bne.n	80062f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f06f 0204 	mvn.w	r2, #4
 80062c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa90 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 80062e2:	e005      	b.n	80062f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fa82 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa93 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d122      	bne.n	800634a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b08      	cmp	r3, #8
 8006310:	d11b      	bne.n	800634a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f06f 0208 	mvn.w	r2, #8
 800631a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2204      	movs	r2, #4
 8006320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa66 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 8006336:	e005      	b.n	8006344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fa58 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa69 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b10      	cmp	r3, #16
 8006356:	d122      	bne.n	800639e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d11b      	bne.n	800639e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f06f 0210 	mvn.w	r2, #16
 800636e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2208      	movs	r2, #8
 8006374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa3c 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 800638a:	e005      	b.n	8006398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fa2e 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa3f 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10e      	bne.n	80063ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f06f 0201 	mvn.w	r2, #1
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7fa fe3d 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d10e      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d107      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fdd5 	bl	8006fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d10e      	bne.n	8006422 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d107      	bne.n	8006422 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800641a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fa04 	bl	800682a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b20      	cmp	r3, #32
 800642e:	d10e      	bne.n	800644e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d107      	bne.n	800644e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f06f 0220 	mvn.w	r2, #32
 8006446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fd9f 	bl	8006f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006472:	2302      	movs	r3, #2
 8006474:	e0ae      	b.n	80065d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	f200 809f 	bhi.w	80065c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080065c5 	.word	0x080065c5
 8006494:	080065c5 	.word	0x080065c5
 8006498:	080065c5 	.word	0x080065c5
 800649c:	08006501 	.word	0x08006501
 80064a0:	080065c5 	.word	0x080065c5
 80064a4:	080065c5 	.word	0x080065c5
 80064a8:	080065c5 	.word	0x080065c5
 80064ac:	08006543 	.word	0x08006543
 80064b0:	080065c5 	.word	0x080065c5
 80064b4:	080065c5 	.word	0x080065c5
 80064b8:	080065c5 	.word	0x080065c5
 80064bc:	08006583 	.word	0x08006583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fa3a 	bl	8006940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	619a      	str	r2, [r3, #24]
      break;
 80064fe:	e064      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fa80 	bl	8006a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6999      	ldr	r1, [r3, #24]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	619a      	str	r2, [r3, #24]
      break;
 8006540:	e043      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 facb 	bl	8006ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0208 	orr.w	r2, r2, #8
 800655c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0204 	bic.w	r2, r2, #4
 800656c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69d9      	ldr	r1, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	61da      	str	r2, [r3, #28]
      break;
 8006580:	e023      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fb15 	bl	8006bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800659c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69d9      	ldr	r1, [r3, #28]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	021a      	lsls	r2, r3, #8
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	61da      	str	r2, [r3, #28]
      break;
 80065c2:	e002      	b.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_ConfigClockSource+0x1c>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0b4      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x186>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x172>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b70      	cmp	r3, #112	; 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xa6>
 800664c:	2b70      	cmp	r3, #112	; 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b60      	cmp	r3, #96	; 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006654:	2b60      	cmp	r3, #96	; 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b50      	cmp	r3, #80	; 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfa>
 800665c:	2b50      	cmp	r3, #80	; 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13a>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b30      	cmp	r3, #48	; 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f000 fbec 	bl	8006e6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f000 fbd5 	bl	8006e6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fb49 	bl	8006d7a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	; 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fba2 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fb68 	bl	8006dd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	; 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fb92 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fb29 	bl	8006d7a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	; 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fb82 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 fb79 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_TIM_SlaveConfigSynchro+0x18>
 800677e:	2302      	movs	r3, #2
 8006780:	e031      	b.n	80067e6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa5f 	bl	8006c58 <TIM_SlaveTimer_SetConfig>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e018      	b.n	80067e6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067d2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a34      	ldr	r2, [pc, #208]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d00b      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a31      	ldr	r2, [pc, #196]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a30      	ldr	r2, [pc, #192]	; (800692c <TIM_Base_SetConfig+0xec>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a2f      	ldr	r2, [pc, #188]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d108      	bne.n	800688a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a25      	ldr	r2, [pc, #148]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01b      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006898:	d017      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a22      	ldr	r2, [pc, #136]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a21      	ldr	r2, [pc, #132]	; (800692c <TIM_Base_SetConfig+0xec>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a20      	ldr	r2, [pc, #128]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <TIM_Base_SetConfig+0xf4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <TIM_Base_SetConfig+0xf8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <TIM_Base_SetConfig+0xfc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d103      	bne.n	8006910 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	615a      	str	r2, [r3, #20]
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 0302 	bic.w	r3, r3, #2
 8006988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <TIM_OC1_SetConfig+0xc8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d10c      	bne.n	80069b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0308 	bic.w	r3, r3, #8
 80069a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 0304 	bic.w	r3, r3, #4
 80069b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <TIM_OC1_SetConfig+0xc8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d111      	bne.n	80069e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	621a      	str	r2, [r3, #32]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40010000 	.word	0x40010000

08006a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0210 	bic.w	r2, r3, #16
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0320 	bic.w	r3, r3, #32
 8006a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1e      	ldr	r2, [pc, #120]	; (8006ae0 <TIM_OC2_SetConfig+0xd4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d10d      	bne.n	8006a88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <TIM_OC2_SetConfig+0xd4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d113      	bne.n	8006ab8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000

08006ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <TIM_OC3_SetConfig+0xd0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d10d      	bne.n	8006b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_OC3_SetConfig+0xd0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d113      	bne.n	8006b8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40010000 	.word	0x40010000

08006bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a10      	ldr	r2, [pc, #64]	; (8006c54 <TIM_OC4_SetConfig+0x9c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d109      	bne.n	8006c2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	019b      	lsls	r3, r3, #6
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000

08006c58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f023 0307 	bic.w	r3, r3, #7
 8006c86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2b70      	cmp	r3, #112	; 0x70
 8006ca0:	d01a      	beq.n	8006cd8 <TIM_SlaveTimer_SetConfig+0x80>
 8006ca2:	2b70      	cmp	r3, #112	; 0x70
 8006ca4:	d860      	bhi.n	8006d68 <TIM_SlaveTimer_SetConfig+0x110>
 8006ca6:	2b60      	cmp	r3, #96	; 0x60
 8006ca8:	d054      	beq.n	8006d54 <TIM_SlaveTimer_SetConfig+0xfc>
 8006caa:	2b60      	cmp	r3, #96	; 0x60
 8006cac:	d85c      	bhi.n	8006d68 <TIM_SlaveTimer_SetConfig+0x110>
 8006cae:	2b50      	cmp	r3, #80	; 0x50
 8006cb0:	d046      	beq.n	8006d40 <TIM_SlaveTimer_SetConfig+0xe8>
 8006cb2:	2b50      	cmp	r3, #80	; 0x50
 8006cb4:	d858      	bhi.n	8006d68 <TIM_SlaveTimer_SetConfig+0x110>
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d019      	beq.n	8006cee <TIM_SlaveTimer_SetConfig+0x96>
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d854      	bhi.n	8006d68 <TIM_SlaveTimer_SetConfig+0x110>
 8006cbe:	2b30      	cmp	r3, #48	; 0x30
 8006cc0:	d055      	beq.n	8006d6e <TIM_SlaveTimer_SetConfig+0x116>
 8006cc2:	2b30      	cmp	r3, #48	; 0x30
 8006cc4:	d850      	bhi.n	8006d68 <TIM_SlaveTimer_SetConfig+0x110>
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d051      	beq.n	8006d6e <TIM_SlaveTimer_SetConfig+0x116>
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d84c      	bhi.n	8006d68 <TIM_SlaveTimer_SetConfig+0x110>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04d      	beq.n	8006d6e <TIM_SlaveTimer_SetConfig+0x116>
 8006cd2:	2b10      	cmp	r3, #16
 8006cd4:	d04b      	beq.n	8006d6e <TIM_SlaveTimer_SetConfig+0x116>
 8006cd6:	e047      	b.n	8006d68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68d9      	ldr	r1, [r3, #12]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f000 f8c1 	bl	8006e6e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006cec:	e040      	b.n	8006d70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d101      	bne.n	8006cfa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e03b      	b.n	8006d72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6a1a      	ldr	r2, [r3, #32]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
      break;
 8006d3e:	e017      	b.n	8006d70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f000 f814 	bl	8006d7a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d52:	e00d      	b.n	8006d70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6899      	ldr	r1, [r3, #8]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	461a      	mov	r2, r3
 8006d62:	f000 f839 	bl	8006dd8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d66:	e003      	b.n	8006d70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d6c:	e000      	b.n	8006d70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006d6e:	bf00      	nop
  }

  return status;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b087      	sub	sp, #28
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f023 0201 	bic.w	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 030a 	bic.w	r3, r3, #10
 8006db6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	621a      	str	r2, [r3, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	f023 0210 	bic.w	r2, r3, #16
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	031b      	lsls	r3, r3, #12
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	621a      	str	r2, [r3, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f043 0307 	orr.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	609a      	str	r2, [r3, #8]
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b087      	sub	sp, #28
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
 8006e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	021a      	lsls	r2, r3, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	609a      	str	r2, [r3, #8]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
	...

08006eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e050      	b.n	8006f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1c      	ldr	r2, [pc, #112]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d018      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f14:	d013      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00e      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a16      	ldr	r2, [pc, #88]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d009      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a15      	ldr	r2, [pc, #84]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a13      	ldr	r2, [pc, #76]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d10c      	bne.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40014000 	.word	0x40014000

08006f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	f107 001c 	add.w	r0, r7, #28
 8006fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d122      	bne.n	8007012 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d105      	bne.n	8007006 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fbee 	bl	80087e8 <USB_CoreReset>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
 8007010:	e01a      	b.n	8007048 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fbe2 	bl	80087e8 <USB_CoreReset>
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	639a      	str	r2, [r3, #56]	; 0x38
 800703a:	e005      	b.n	8007048 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	2b01      	cmp	r3, #1
 800704c:	d10b      	bne.n	8007066 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f043 0206 	orr.w	r2, r3, #6
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f043 0220 	orr.w	r2, r3, #32
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007072:	b004      	add	sp, #16
 8007074:	4770      	bx	lr
	...

08007078 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d165      	bne.n	8007158 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4a41      	ldr	r2, [pc, #260]	; (8007194 <USB_SetTurnaroundTime+0x11c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d906      	bls.n	80070a2 <USB_SetTurnaroundTime+0x2a>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4a40      	ldr	r2, [pc, #256]	; (8007198 <USB_SetTurnaroundTime+0x120>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d202      	bcs.n	80070a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800709c:	230f      	movs	r3, #15
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	e062      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4a3c      	ldr	r2, [pc, #240]	; (8007198 <USB_SetTurnaroundTime+0x120>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d306      	bcc.n	80070b8 <USB_SetTurnaroundTime+0x40>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4a3b      	ldr	r2, [pc, #236]	; (800719c <USB_SetTurnaroundTime+0x124>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d202      	bcs.n	80070b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070b2:	230e      	movs	r3, #14
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e057      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4a38      	ldr	r2, [pc, #224]	; (800719c <USB_SetTurnaroundTime+0x124>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d306      	bcc.n	80070ce <USB_SetTurnaroundTime+0x56>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4a37      	ldr	r2, [pc, #220]	; (80071a0 <USB_SetTurnaroundTime+0x128>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d202      	bcs.n	80070ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070c8:	230d      	movs	r3, #13
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e04c      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4a33      	ldr	r2, [pc, #204]	; (80071a0 <USB_SetTurnaroundTime+0x128>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d306      	bcc.n	80070e4 <USB_SetTurnaroundTime+0x6c>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	4a32      	ldr	r2, [pc, #200]	; (80071a4 <USB_SetTurnaroundTime+0x12c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d802      	bhi.n	80070e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070de:	230c      	movs	r3, #12
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	e041      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4a2f      	ldr	r2, [pc, #188]	; (80071a4 <USB_SetTurnaroundTime+0x12c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d906      	bls.n	80070fa <USB_SetTurnaroundTime+0x82>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4a2e      	ldr	r2, [pc, #184]	; (80071a8 <USB_SetTurnaroundTime+0x130>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d802      	bhi.n	80070fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80070f4:	230b      	movs	r3, #11
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	e036      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4a2a      	ldr	r2, [pc, #168]	; (80071a8 <USB_SetTurnaroundTime+0x130>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d906      	bls.n	8007110 <USB_SetTurnaroundTime+0x98>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4a29      	ldr	r2, [pc, #164]	; (80071ac <USB_SetTurnaroundTime+0x134>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d802      	bhi.n	8007110 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800710a:	230a      	movs	r3, #10
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e02b      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4a26      	ldr	r2, [pc, #152]	; (80071ac <USB_SetTurnaroundTime+0x134>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d906      	bls.n	8007126 <USB_SetTurnaroundTime+0xae>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <USB_SetTurnaroundTime+0x138>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d202      	bcs.n	8007126 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007120:	2309      	movs	r3, #9
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e020      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <USB_SetTurnaroundTime+0x138>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d306      	bcc.n	800713c <USB_SetTurnaroundTime+0xc4>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4a20      	ldr	r2, [pc, #128]	; (80071b4 <USB_SetTurnaroundTime+0x13c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d802      	bhi.n	800713c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007136:	2308      	movs	r3, #8
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	e015      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <USB_SetTurnaroundTime+0x13c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d906      	bls.n	8007152 <USB_SetTurnaroundTime+0xda>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <USB_SetTurnaroundTime+0x140>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d202      	bcs.n	8007152 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800714c:	2307      	movs	r3, #7
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e00a      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007152:	2306      	movs	r3, #6
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	e007      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800715e:	2309      	movs	r3, #9
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e001      	b.n	8007168 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007164:	2309      	movs	r3, #9
 8007166:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007180:	431a      	orrs	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	00d8acbf 	.word	0x00d8acbf
 8007198:	00e4e1c0 	.word	0x00e4e1c0
 800719c:	00f42400 	.word	0x00f42400
 80071a0:	01067380 	.word	0x01067380
 80071a4:	011a499f 	.word	0x011a499f
 80071a8:	01312cff 	.word	0x01312cff
 80071ac:	014ca43f 	.word	0x014ca43f
 80071b0:	016e3600 	.word	0x016e3600
 80071b4:	01a6ab1f 	.word	0x01a6ab1f
 80071b8:	01e84800 	.word	0x01e84800

080071bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f043 0201 	orr.w	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d115      	bne.n	800724e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800722e:	2001      	movs	r0, #1
 8007230:	f7fb fb2a 	bl	8002888 <HAL_Delay>
      ms++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fa45 	bl	80086ca <USB_GetMode>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d01e      	beq.n	8007284 <USB_SetCurrentMode+0x84>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b31      	cmp	r3, #49	; 0x31
 800724a:	d9f0      	bls.n	800722e <USB_SetCurrentMode+0x2e>
 800724c:	e01a      	b.n	8007284 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d115      	bne.n	8007280 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007260:	2001      	movs	r0, #1
 8007262:	f7fb fb11 	bl	8002888 <HAL_Delay>
      ms++;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 fa2c 	bl	80086ca <USB_GetMode>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <USB_SetCurrentMode+0x84>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b31      	cmp	r3, #49	; 0x31
 800727c:	d9f0      	bls.n	8007260 <USB_SetCurrentMode+0x60>
 800727e:	e001      	b.n	8007284 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e005      	b.n	8007290 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b32      	cmp	r3, #50	; 0x32
 8007288:	d101      	bne.n	800728e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007298:	b084      	sub	sp, #16
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	e009      	b.n	80072cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3340      	adds	r3, #64	; 0x40
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3301      	adds	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b0e      	cmp	r3, #14
 80072d0:	d9f2      	bls.n	80072b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11c      	bne.n	8007312 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e6:	f043 0302 	orr.w	r3, r3, #2
 80072ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
 8007310:	e00b      	b.n	800732a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733c:	4619      	mov	r1, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007344:	461a      	mov	r2, r3
 8007346:	680b      	ldr	r3, [r1, #0]
 8007348:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2b01      	cmp	r3, #1
 800734e:	d10c      	bne.n	800736a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007356:	2100      	movs	r1, #0
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f965 	bl	8007628 <USB_SetDevSpeed>
 800735e:	e008      	b.n	8007372 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007360:	2101      	movs	r1, #1
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f960 	bl	8007628 <USB_SetDevSpeed>
 8007368:	e003      	b.n	8007372 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800736a:	2103      	movs	r1, #3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f95b 	bl	8007628 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007372:	2110      	movs	r1, #16
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8f3 	bl	8007560 <USB_FlushTxFifo>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f91f 	bl	80075c8 <USB_FlushRxFifo>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	461a      	mov	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	461a      	mov	r2, r3
 80073b4:	2300      	movs	r3, #0
 80073b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	e043      	b.n	8007446 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d4:	d118      	bne.n	8007408 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e8:	461a      	mov	r2, r3
 80073ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e013      	b.n	800741a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fe:	461a      	mov	r2, r3
 8007400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	e008      	b.n	800741a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007414:	461a      	mov	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007426:	461a      	mov	r2, r3
 8007428:	2300      	movs	r3, #0
 800742a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	461a      	mov	r2, r3
 800743a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800743e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	3301      	adds	r3, #1
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	429a      	cmp	r2, r3
 800744c:	d3b7      	bcc.n	80073be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	e043      	b.n	80074dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800746a:	d118      	bne.n	800749e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747e:	461a      	mov	r2, r3
 8007480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	e013      	b.n	80074b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007494:	461a      	mov	r2, r3
 8007496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	e008      	b.n	80074b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	461a      	mov	r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	461a      	mov	r2, r3
 80074d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	3301      	adds	r3, #1
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d3b7      	bcc.n	8007454 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007504:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f043 0210 	orr.w	r2, r3, #16
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <USB_DevInit+0x2c4>)
 800751e:	4313      	orrs	r3, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	f043 0208 	orr.w	r2, r3, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d107      	bne.n	800754c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007544:	f043 0304 	orr.w	r3, r3, #4
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007558:	b004      	add	sp, #16
 800755a:	4770      	bx	lr
 800755c:	803c3800 	.word	0x803c3800

08007560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a13      	ldr	r2, [pc, #76]	; (80075c4 <USB_FlushTxFifo+0x64>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d901      	bls.n	8007580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e01b      	b.n	80075b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	daf2      	bge.n	800756e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	019b      	lsls	r3, r3, #6
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <USB_FlushTxFifo+0x64>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d901      	bls.n	80075aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e006      	b.n	80075b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d0f0      	beq.n	8007598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	00030d40 	.word	0x00030d40

080075c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a11      	ldr	r2, [pc, #68]	; (8007624 <USB_FlushRxFifo+0x5c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e018      	b.n	8007618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	daf2      	bge.n	80075d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2210      	movs	r2, #16
 80075f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4a08      	ldr	r2, [pc, #32]	; (8007624 <USB_FlushRxFifo+0x5c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e006      	b.n	8007618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b10      	cmp	r3, #16
 8007614:	d0f0      	beq.n	80075f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	00030d40 	.word	0x00030d40

08007628 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007648:	4313      	orrs	r3, r2
 800764a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800765a:	b480      	push	{r7}
 800765c:	b087      	sub	sp, #28
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0306 	and.w	r3, r3, #6
 8007672:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d102      	bne.n	8007680 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800767a:	2300      	movs	r3, #0
 800767c:	75fb      	strb	r3, [r7, #23]
 800767e:	e00a      	b.n	8007696 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d002      	beq.n	800768c <USB_GetDevSpeed+0x32>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b06      	cmp	r3, #6
 800768a:	d102      	bne.n	8007692 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800768c:	2302      	movs	r3, #2
 800768e:	75fb      	strb	r3, [r7, #23]
 8007690:	e001      	b.n	8007696 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007692:	230f      	movs	r3, #15
 8007694:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d13a      	bne.n	8007736 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	2101      	movs	r1, #1
 80076d2:	fa01 f303 	lsl.w	r3, r1, r3
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	68f9      	ldr	r1, [r7, #12]
 80076da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076de:	4313      	orrs	r3, r2
 80076e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d155      	bne.n	80077a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007714:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	059b      	lsls	r3, r3, #22
 800771a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800771c:	4313      	orrs	r3, r2
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	440a      	add	r2, r1
 8007726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	e036      	b.n	80077a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773c:	69da      	ldr	r2, [r3, #28]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	2101      	movs	r1, #1
 8007748:	fa01 f303 	lsl.w	r3, r1, r3
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007754:	4313      	orrs	r3, r2
 8007756:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d11a      	bne.n	80077a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	791b      	ldrb	r3, [r3, #4]
 8007788:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800778a:	430b      	orrs	r3, r1
 800778c:	4313      	orrs	r3, r2
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	440a      	add	r2, r1
 8007796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800779e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d161      	bne.n	8007894 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e6:	d11f      	bne.n	8007828 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007802:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007806:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007826:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	2101      	movs	r1, #1
 800783a:	fa01 f303 	lsl.w	r3, r1, r3
 800783e:	b29b      	uxth	r3, r3
 8007840:	43db      	mvns	r3, r3
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007848:	4013      	ands	r3, r2
 800784a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	2101      	movs	r1, #1
 800785e:	fa01 f303 	lsl.w	r3, r1, r3
 8007862:	b29b      	uxth	r3, r3
 8007864:	43db      	mvns	r3, r3
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800786c:	4013      	ands	r3, r2
 800786e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	0159      	lsls	r1, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	440b      	add	r3, r1
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	4619      	mov	r1, r3
 800788c:	4b35      	ldr	r3, [pc, #212]	; (8007964 <USB_DeactivateEndpoint+0x1b0>)
 800788e:	4013      	ands	r3, r2
 8007890:	600b      	str	r3, [r1, #0]
 8007892:	e060      	b.n	8007956 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078aa:	d11f      	bne.n	80078ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f003 030f 	and.w	r3, r3, #15
 80078fc:	2101      	movs	r1, #1
 80078fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	43db      	mvns	r3, r3
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800790c:	4013      	ands	r3, r2
 800790e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007916:	69da      	ldr	r2, [r3, #28]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	2101      	movs	r1, #1
 8007922:	fa01 f303 	lsl.w	r3, r1, r3
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	43db      	mvns	r3, r3
 800792a:	68f9      	ldr	r1, [r7, #12]
 800792c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007930:	4013      	ands	r3, r2
 8007932:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	0159      	lsls	r1, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	440b      	add	r3, r1
 800794a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794e:	4619      	mov	r1, r3
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <USB_DeactivateEndpoint+0x1b4>)
 8007952:	4013      	ands	r3, r2
 8007954:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	ec337800 	.word	0xec337800
 8007968:	eff37800 	.word	0xeff37800

0800796c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	; 0x28
 8007970:	af02      	add	r7, sp, #8
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b01      	cmp	r3, #1
 800798a:	f040 815c 	bne.w	8007c46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d132      	bne.n	80079fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f4:	0cdb      	lsrs	r3, r3, #19
 80079f6:	04db      	lsls	r3, r3, #19
 80079f8:	6113      	str	r3, [r2, #16]
 80079fa:	e074      	b.n	8007ae6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a16:	0cdb      	lsrs	r3, r3, #19
 8007a18:	04db      	lsls	r3, r3, #19
 8007a1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6999      	ldr	r1, [r3, #24]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	440b      	add	r3, r1
 8007a58:	1e59      	subs	r1, r3, #1
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a64:	4b9d      	ldr	r3, [pc, #628]	; (8007cdc <USB_EPStartXfer+0x370>)
 8007a66:	400b      	ands	r3, r1
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	0148      	lsls	r0, r1, #5
 8007a6c:	69f9      	ldr	r1, [r7, #28]
 8007a6e:	4401      	add	r1, r0
 8007a70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a74:	4313      	orrs	r3, r2
 8007a76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a8e:	69b9      	ldr	r1, [r7, #24]
 8007a90:	0148      	lsls	r0, r1, #5
 8007a92:	69f9      	ldr	r1, [r7, #28]
 8007a94:	4401      	add	r1, r0
 8007a96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	791b      	ldrb	r3, [r3, #4]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d11f      	bne.n	8007ae6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ac4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d14b      	bne.n	8007b84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	461a      	mov	r2, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	791b      	ldrb	r3, [r3, #4]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d128      	bne.n	8007b62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d110      	bne.n	8007b42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	e00f      	b.n	8007b62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	e133      	b.n	8007dec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ba2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d015      	beq.n	8007bd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 811b 	beq.w	8007dec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bcc:	69f9      	ldr	r1, [r7, #28]
 8007bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	634b      	str	r3, [r1, #52]	; 0x34
 8007bd6:	e109      	b.n	8007dec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d110      	bne.n	8007c0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e00f      	b.n	8007c2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	0151      	lsls	r1, r2, #5
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	440a      	add	r2, r1
 8007c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6919      	ldr	r1, [r3, #16]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	b298      	uxth	r0, r3
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fade 	bl	8008200 <USB_WritePacket>
 8007c44:	e0d2      	b.n	8007dec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c60:	0cdb      	lsrs	r3, r3, #19
 8007c62:	04db      	lsls	r3, r3, #19
 8007c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d126      	bne.n	8007ce0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ca8:	69b9      	ldr	r1, [r7, #24]
 8007caa:	0148      	lsls	r0, r1, #5
 8007cac:	69f9      	ldr	r1, [r7, #28]
 8007cae:	4401      	add	r1, r0
 8007cb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cd6:	6113      	str	r3, [r2, #16]
 8007cd8:	e03a      	b.n	8007d50 <USB_EPStartXfer+0x3e4>
 8007cda:	bf00      	nop
 8007cdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	699a      	ldr	r2, [r3, #24]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	4413      	add	r3, r2
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	8afa      	ldrh	r2, [r7, #22]
 8007cfc:	fb03 f202 	mul.w	r2, r3, r2
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	8afb      	ldrh	r3, [r7, #22]
 8007d14:	04d9      	lsls	r1, r3, #19
 8007d16:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <USB_EPStartXfer+0x48c>)
 8007d18:	400b      	ands	r3, r1
 8007d1a:	69b9      	ldr	r1, [r7, #24]
 8007d1c:	0148      	lsls	r0, r1, #5
 8007d1e:	69f9      	ldr	r1, [r7, #28]
 8007d20:	4401      	add	r1, r0
 8007d22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d26:	4313      	orrs	r3, r2
 8007d28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d40:	69b9      	ldr	r1, [r7, #24]
 8007d42:	0148      	lsls	r0, r1, #5
 8007d44:	69f9      	ldr	r1, [r7, #28]
 8007d46:	4401      	add	r1, r0
 8007d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10d      	bne.n	8007d72 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d009      	beq.n	8007d72 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6919      	ldr	r1, [r3, #16]
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6e:	460a      	mov	r2, r1
 8007d70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	791b      	ldrb	r3, [r3, #4]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d128      	bne.n	8007dcc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d110      	bne.n	8007dac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	e00f      	b.n	8007dcc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	1ff80000 	.word	0x1ff80000

08007dfc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	f040 80ce 	bne.w	8007fba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d132      	bne.n	8007e8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	0151      	lsls	r1, r2, #5
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	440a      	add	r2, r1
 8007e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e84:	0cdb      	lsrs	r3, r3, #19
 8007e86:	04db      	lsls	r3, r3, #19
 8007e88:	6113      	str	r3, [r2, #16]
 8007e8a:	e04e      	b.n	8007f2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea6:	0cdb      	lsrs	r3, r3, #19
 8007ea8:	04db      	lsls	r3, r3, #19
 8007eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ece:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d903      	bls.n	8007ee4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f1a:	6939      	ldr	r1, [r7, #16]
 8007f1c:	0148      	lsls	r0, r1, #5
 8007f1e:	6979      	ldr	r1, [r7, #20]
 8007f20:	4401      	add	r1, r0
 8007f22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f26:	4313      	orrs	r3, r2
 8007f28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d11e      	bne.n	8007f6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d009      	beq.n	8007f4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f44:	461a      	mov	r2, r3
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e097      	b.n	800809e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8083 	beq.w	800809e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	6979      	ldr	r1, [r7, #20]
 8007fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	634b      	str	r3, [r1, #52]	; 0x34
 8007fb8:	e071      	b.n	800809e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd4:	0cdb      	lsrs	r3, r3, #19
 8007fd6:	04db      	lsls	r3, r3, #19
 8007fd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	0151      	lsls	r1, r2, #5
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	440a      	add	r2, r1
 8007ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ffc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008034:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800804c:	6939      	ldr	r1, [r7, #16]
 800804e:	0148      	lsls	r0, r1, #5
 8008050:	6979      	ldr	r1, [r7, #20]
 8008052:	4401      	add	r1, r0
 8008054:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008058:	4313      	orrs	r3, r2
 800805a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d10d      	bne.n	800807e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d009      	beq.n	800807e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6919      	ldr	r1, [r3, #16]
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	460a      	mov	r2, r1
 800807c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008098:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800809c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d14a      	bne.n	8008160 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e2:	f040 8086 	bne.w	80081f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008104:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008108:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	7812      	ldrb	r2, [r2, #0]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	440a      	add	r2, r1
 8008124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800812c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f242 7210 	movw	r2, #10000	; 0x2710
 800813a:	4293      	cmp	r3, r2
 800813c:	d902      	bls.n	8008144 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
          break;
 8008142:	e056      	b.n	80081f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800815c:	d0e7      	beq.n	800812e <USB_EPStopXfer+0x82>
 800815e:	e048      	b.n	80081f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008178:	d13b      	bne.n	80081f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	7812      	ldrb	r2, [r2, #0]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008198:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800819c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	0151      	lsls	r1, r2, #5
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	440a      	add	r2, r1
 80081b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d902      	bls.n	80081d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	75fb      	strb	r3, [r7, #23]
          break;
 80081d6:	e00c      	b.n	80081f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f0:	d0e7      	beq.n	80081c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	371c      	adds	r7, #28
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008200:	b480      	push	{r7}
 8008202:	b089      	sub	sp, #36	; 0x24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	460b      	mov	r3, r1
 8008210:	71fb      	strb	r3, [r7, #7]
 8008212:	4613      	mov	r3, r2
 8008214:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800821e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d123      	bne.n	800826e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008226:	88bb      	ldrh	r3, [r7, #4]
 8008228:	3303      	adds	r3, #3
 800822a:	089b      	lsrs	r3, r3, #2
 800822c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	e018      	b.n	8008266 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	031a      	lsls	r2, r3, #12
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4413      	add	r3, r2
 800823c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008240:	461a      	mov	r2, r3
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	3301      	adds	r3, #1
 800824c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	3301      	adds	r3, #1
 8008252:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	3301      	adds	r3, #1
 8008258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	3301      	adds	r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	3301      	adds	r3, #1
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	429a      	cmp	r2, r3
 800826c:	d3e2      	bcc.n	8008234 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3724      	adds	r7, #36	; 0x24
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800827c:	b480      	push	{r7}
 800827e:	b08b      	sub	sp, #44	; 0x2c
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4613      	mov	r3, r2
 8008288:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	b29b      	uxth	r3, r3
 8008298:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082a2:	2300      	movs	r3, #0
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	e014      	b.n	80082d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	3301      	adds	r3, #1
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	3301      	adds	r3, #1
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	3301      	adds	r3, #1
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	3301      	adds	r3, #1
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	3301      	adds	r3, #1
 80082d0:	623b      	str	r3, [r7, #32]
 80082d2:	6a3a      	ldr	r2, [r7, #32]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d3e6      	bcc.n	80082a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082da:	8bfb      	ldrh	r3, [r7, #30]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01e      	beq.n	800831e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ea:	461a      	mov	r2, r3
 80082ec:	f107 0310 	add.w	r3, r7, #16
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008300:	b2da      	uxtb	r2, r3
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	701a      	strb	r2, [r3, #0]
      i++;
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	3301      	adds	r3, #1
 800830a:	623b      	str	r3, [r7, #32]
      pDest++;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	3301      	adds	r3, #1
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008312:	8bfb      	ldrh	r3, [r7, #30]
 8008314:	3b01      	subs	r3, #1
 8008316:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008318:	8bfb      	ldrh	r3, [r7, #30]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1ea      	bne.n	80082f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008320:	4618      	mov	r0, r3
 8008322:	372c      	adds	r7, #44	; 0x2c
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d12c      	bne.n	80083a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	db12      	blt.n	8008380 <USB_EPSetStall+0x54>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00f      	beq.n	8008380 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800837e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	440a      	add	r2, r1
 8008396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800839a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	e02b      	b.n	80083fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	db12      	blt.n	80083da <USB_EPSetStall+0xae>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00f      	beq.n	80083da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d128      	bne.n	8008476 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800843e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008442:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	791b      	ldrb	r3, [r3, #4]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d003      	beq.n	8008454 <USB_EPClearStall+0x4c>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	791b      	ldrb	r3, [r3, #4]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d138      	bne.n	80084c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	440a      	add	r2, r1
 800846a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	e027      	b.n	80084c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	440a      	add	r2, r1
 800848c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008490:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008494:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	791b      	ldrb	r3, [r3, #4]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d003      	beq.n	80084a6 <USB_EPClearStall+0x9e>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d10f      	bne.n	80084c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008508:	68f9      	ldr	r1, [r7, #12]
 800850a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800850e:	4313      	orrs	r3, r2
 8008510:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800854e:	f023 0302 	bic.w	r3, r3, #2
 8008552:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800857c:	f023 0303 	bic.w	r3, r3, #3
 8008580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008590:	f043 0302 	orr.w	r3, r3, #2
 8008594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4013      	ands	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085bc:	68fb      	ldr	r3, [r7, #12]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b085      	sub	sp, #20
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	4013      	ands	r3, r2
 80085ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	0c1b      	lsrs	r3, r3, #16
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	4013      	ands	r3, r2
 8008620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	b29b      	uxth	r3, r3
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	4013      	ands	r3, r2
 800865e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008660:	68bb      	ldr	r3, [r7, #8]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800866e:	b480      	push	{r7}
 8008670:	b087      	sub	sp, #28
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	4013      	ands	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086bc:	68bb      	ldr	r3, [r7, #8]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0301 	and.w	r3, r3, #1
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008700:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008704:	f023 0307 	bic.w	r3, r3, #7
 8008708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800871c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	460b      	mov	r3, r1
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	333c      	adds	r3, #60	; 0x3c
 8008742:	3304      	adds	r3, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4a26      	ldr	r2, [pc, #152]	; (80087e4 <USB_EP0_OutStart+0xb8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d90a      	bls.n	8008766 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800875c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008760:	d101      	bne.n	8008766 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	e037      	b.n	80087d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	461a      	mov	r2, r3
 800876e:	2300      	movs	r3, #0
 8008770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008794:	f043 0318 	orr.w	r3, r3, #24
 8008798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d10f      	bne.n	80087d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ba:	461a      	mov	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80087d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	4f54300a 	.word	0x4f54300a

080087e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3301      	adds	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4a13      	ldr	r2, [pc, #76]	; (800884c <USB_CoreReset+0x64>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d901      	bls.n	8008806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e01b      	b.n	800883e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	daf2      	bge.n	80087f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f043 0201 	orr.w	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4a09      	ldr	r2, [pc, #36]	; (800884c <USB_CoreReset+0x64>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d901      	bls.n	8008830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e006      	b.n	800883e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b01      	cmp	r3, #1
 800883a:	d0f0      	beq.n	800881e <USB_CoreReset+0x36>

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	00030d40 	.word	0x00030d40

08008850 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800885c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008860:	f005 fa5e 	bl	800dd20 <USBD_static_malloc>
 8008864:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d109      	bne.n	8008880 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	32b0      	adds	r2, #176	; 0xb0
 8008876:	2100      	movs	r1, #0
 8008878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800887c:	2302      	movs	r3, #2
 800887e:	e0d4      	b.n	8008a2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008880:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008884:	2100      	movs	r1, #0
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f005 fac8 	bl	800de1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	32b0      	adds	r2, #176	; 0xb0
 8008896:	68f9      	ldr	r1, [r7, #12]
 8008898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	32b0      	adds	r2, #176	; 0xb0
 80088a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7c1b      	ldrb	r3, [r3, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d138      	bne.n	800892a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088b8:	4b5e      	ldr	r3, [pc, #376]	; (8008a34 <USBD_CDC_Init+0x1e4>)
 80088ba:	7819      	ldrb	r1, [r3, #0]
 80088bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c0:	2202      	movs	r2, #2
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f005 f909 	bl	800dada <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088c8:	4b5a      	ldr	r3, [pc, #360]	; (8008a34 <USBD_CDC_Init+0x1e4>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 020f 	and.w	r2, r3, #15
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	440b      	add	r3, r1
 80088dc:	3324      	adds	r3, #36	; 0x24
 80088de:	2201      	movs	r2, #1
 80088e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088e2:	4b55      	ldr	r3, [pc, #340]	; (8008a38 <USBD_CDC_Init+0x1e8>)
 80088e4:	7819      	ldrb	r1, [r3, #0]
 80088e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ea:	2202      	movs	r2, #2
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f005 f8f4 	bl	800dada <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088f2:	4b51      	ldr	r3, [pc, #324]	; (8008a38 <USBD_CDC_Init+0x1e8>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	f003 020f 	and.w	r2, r3, #15
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800890a:	2201      	movs	r2, #1
 800890c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800890e:	4b4b      	ldr	r3, [pc, #300]	; (8008a3c <USBD_CDC_Init+0x1ec>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	f003 020f 	and.w	r2, r3, #15
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	3326      	adds	r3, #38	; 0x26
 8008924:	2210      	movs	r2, #16
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	e035      	b.n	8008996 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800892a:	4b42      	ldr	r3, [pc, #264]	; (8008a34 <USBD_CDC_Init+0x1e4>)
 800892c:	7819      	ldrb	r1, [r3, #0]
 800892e:	2340      	movs	r3, #64	; 0x40
 8008930:	2202      	movs	r2, #2
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f005 f8d1 	bl	800dada <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008938:	4b3e      	ldr	r3, [pc, #248]	; (8008a34 <USBD_CDC_Init+0x1e4>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 020f 	and.w	r2, r3, #15
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2201      	movs	r2, #1
 8008950:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008952:	4b39      	ldr	r3, [pc, #228]	; (8008a38 <USBD_CDC_Init+0x1e8>)
 8008954:	7819      	ldrb	r1, [r3, #0]
 8008956:	2340      	movs	r3, #64	; 0x40
 8008958:	2202      	movs	r2, #2
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f005 f8bd 	bl	800dada <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008960:	4b35      	ldr	r3, [pc, #212]	; (8008a38 <USBD_CDC_Init+0x1e8>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 020f 	and.w	r2, r3, #15
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008978:	2201      	movs	r2, #1
 800897a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800897c:	4b2f      	ldr	r3, [pc, #188]	; (8008a3c <USBD_CDC_Init+0x1ec>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	f003 020f 	and.w	r2, r3, #15
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	3326      	adds	r3, #38	; 0x26
 8008992:	2210      	movs	r2, #16
 8008994:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008996:	4b29      	ldr	r3, [pc, #164]	; (8008a3c <USBD_CDC_Init+0x1ec>)
 8008998:	7819      	ldrb	r1, [r3, #0]
 800899a:	2308      	movs	r3, #8
 800899c:	2203      	movs	r2, #3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f005 f89b 	bl	800dada <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089a4:	4b25      	ldr	r3, [pc, #148]	; (8008a3c <USBD_CDC_Init+0x1ec>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 020f 	and.w	r2, r3, #15
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	3324      	adds	r3, #36	; 0x24
 80089ba:	2201      	movs	r2, #1
 80089bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	33b0      	adds	r3, #176	; 0xb0
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089f4:	2302      	movs	r3, #2
 80089f6:	e018      	b.n	8008a2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7c1b      	ldrb	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a00:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <USBD_CDC_Init+0x1e8>)
 8008a02:	7819      	ldrb	r1, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f005 f952 	bl	800dcb8 <USBD_LL_PrepareReceive>
 8008a14:	e008      	b.n	8008a28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a16:	4b08      	ldr	r3, [pc, #32]	; (8008a38 <USBD_CDC_Init+0x1e8>)
 8008a18:	7819      	ldrb	r1, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a20:	2340      	movs	r3, #64	; 0x40
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f005 f948 	bl	800dcb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200000a3 	.word	0x200000a3
 8008a38:	200000a4 	.word	0x200000a4
 8008a3c:	200000a5 	.word	0x200000a5

08008a40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a4c:	4b3a      	ldr	r3, [pc, #232]	; (8008b38 <USBD_CDC_DeInit+0xf8>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f005 f867 	bl	800db26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a58:	4b37      	ldr	r3, [pc, #220]	; (8008b38 <USBD_CDC_DeInit+0xf8>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	f003 020f 	and.w	r2, r3, #15
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	3324      	adds	r3, #36	; 0x24
 8008a6e:	2200      	movs	r2, #0
 8008a70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a72:	4b32      	ldr	r3, [pc, #200]	; (8008b3c <USBD_CDC_DeInit+0xfc>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f005 f854 	bl	800db26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a7e:	4b2f      	ldr	r3, [pc, #188]	; (8008b3c <USBD_CDC_DeInit+0xfc>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f003 020f 	and.w	r2, r3, #15
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a96:	2200      	movs	r2, #0
 8008a98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a9a:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <USBD_CDC_DeInit+0x100>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f005 f840 	bl	800db26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008aa6:	4b26      	ldr	r3, [pc, #152]	; (8008b40 <USBD_CDC_DeInit+0x100>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	f003 020f 	and.w	r2, r3, #15
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	3324      	adds	r3, #36	; 0x24
 8008abc:	2200      	movs	r2, #0
 8008abe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008ac0:	4b1f      	ldr	r3, [pc, #124]	; (8008b40 <USBD_CDC_DeInit+0x100>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	f003 020f 	and.w	r2, r3, #15
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	4613      	mov	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	3326      	adds	r3, #38	; 0x26
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	32b0      	adds	r2, #176	; 0xb0
 8008ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01f      	beq.n	8008b2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	33b0      	adds	r3, #176	; 0xb0
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32b0      	adds	r2, #176	; 0xb0
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f005 f914 	bl	800dd3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	32b0      	adds	r2, #176	; 0xb0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	200000a3 	.word	0x200000a3
 8008b3c:	200000a4 	.word	0x200000a4
 8008b40:	200000a5 	.word	0x200000a5

08008b44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	32b0      	adds	r2, #176	; 0xb0
 8008b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e0bf      	b.n	8008cf4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d050      	beq.n	8008c22 <USBD_CDC_Setup+0xde>
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	f040 80af 	bne.w	8008ce4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	88db      	ldrh	r3, [r3, #6]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d03a      	beq.n	8008c04 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b25b      	sxtb	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	da1b      	bge.n	8008bd0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	33b0      	adds	r3, #176	; 0xb0
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008bae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	88d2      	ldrh	r2, [r2, #6]
 8008bb4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	88db      	ldrh	r3, [r3, #6]
 8008bba:	2b07      	cmp	r3, #7
 8008bbc:	bf28      	it	cs
 8008bbe:	2307      	movcs	r3, #7
 8008bc0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	89fa      	ldrh	r2, [r7, #14]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 fd89 	bl	800a6e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bce:	e090      	b.n	8008cf2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	785a      	ldrb	r2, [r3, #1]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	88db      	ldrh	r3, [r3, #6]
 8008bde:	2b3f      	cmp	r3, #63	; 0x3f
 8008be0:	d803      	bhi.n	8008bea <USBD_CDC_Setup+0xa6>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	88db      	ldrh	r3, [r3, #6]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	e000      	b.n	8008bec <USBD_CDC_Setup+0xa8>
 8008bea:	2240      	movs	r2, #64	; 0x40
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008bf2:	6939      	ldr	r1, [r7, #16]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 fd9b 	bl	800a738 <USBD_CtlPrepareRx>
      break;
 8008c02:	e076      	b.n	8008cf2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	33b0      	adds	r3, #176	; 0xb0
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	7850      	ldrb	r0, [r2, #1]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	4798      	blx	r3
      break;
 8008c20:	e067      	b.n	8008cf2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	2b0b      	cmp	r3, #11
 8008c28:	d851      	bhi.n	8008cce <USBD_CDC_Setup+0x18a>
 8008c2a:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <USBD_CDC_Setup+0xec>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c61 	.word	0x08008c61
 8008c34:	08008cdd 	.word	0x08008cdd
 8008c38:	08008ccf 	.word	0x08008ccf
 8008c3c:	08008ccf 	.word	0x08008ccf
 8008c40:	08008ccf 	.word	0x08008ccf
 8008c44:	08008ccf 	.word	0x08008ccf
 8008c48:	08008ccf 	.word	0x08008ccf
 8008c4c:	08008ccf 	.word	0x08008ccf
 8008c50:	08008ccf 	.word	0x08008ccf
 8008c54:	08008ccf 	.word	0x08008ccf
 8008c58:	08008c8b 	.word	0x08008c8b
 8008c5c:	08008cb5 	.word	0x08008cb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d107      	bne.n	8008c7c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c6c:	f107 030a 	add.w	r3, r7, #10
 8008c70:	2202      	movs	r2, #2
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 fd33 	bl	800a6e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c7a:	e032      	b.n	8008ce2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fcbd 	bl	800a5fe <USBD_CtlError>
            ret = USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	75fb      	strb	r3, [r7, #23]
          break;
 8008c88:	e02b      	b.n	8008ce2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d107      	bne.n	8008ca6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c96:	f107 030d 	add.w	r3, r7, #13
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 fd1e 	bl	800a6e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ca4:	e01d      	b.n	8008ce2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 fca8 	bl	800a5fe <USBD_CtlError>
            ret = USBD_FAIL;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cb2:	e016      	b.n	8008ce2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d00f      	beq.n	8008ce0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fc9b 	bl	800a5fe <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ccc:	e008      	b.n	8008ce0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 fc94 	bl	800a5fe <USBD_CtlError>
          ret = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cda:	e002      	b.n	8008ce2 <USBD_CDC_Setup+0x19e>
          break;
 8008cdc:	bf00      	nop
 8008cde:	e008      	b.n	8008cf2 <USBD_CDC_Setup+0x1ae>
          break;
 8008ce0:	bf00      	nop
      }
      break;
 8008ce2:	e006      	b.n	8008cf2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fc89 	bl	800a5fe <USBD_CtlError>
      ret = USBD_FAIL;
 8008cec:	2303      	movs	r3, #3
 8008cee:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	32b0      	adds	r2, #176	; 0xb0
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e065      	b.n	8008df2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	32b0      	adds	r2, #176	; 0xb0
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	3318      	adds	r3, #24
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d02f      	beq.n	8008db0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	f003 020f 	and.w	r2, r3, #15
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	440b      	add	r3, r1
 8008d62:	3318      	adds	r3, #24
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	f003 010f 	and.w	r1, r3, #15
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	440b      	add	r3, r1
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4403      	add	r3, r0
 8008d78:	3348      	adds	r3, #72	; 0x48
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d112      	bne.n	8008db0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	f003 020f 	and.w	r2, r3, #15
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	440b      	add	r3, r1
 8008d9c:	3318      	adds	r3, #24
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008da2:	78f9      	ldrb	r1, [r7, #3]
 8008da4:	2300      	movs	r3, #0
 8008da6:	2200      	movs	r2, #0
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f004 ff64 	bl	800dc76 <USBD_LL_Transmit>
 8008dae:	e01f      	b.n	8008df0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	33b0      	adds	r3, #176	; 0xb0
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d010      	beq.n	8008df0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	33b0      	adds	r3, #176	; 0xb0
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	32b0      	adds	r2, #176	; 0xb0
 8008e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	32b0      	adds	r2, #176	; 0xb0
 8008e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e01a      	b.n	8008e62 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f004 ff62 	bl	800dcfa <USBD_LL_GetRxDataSize>
 8008e36:	4602      	mov	r2, r0
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	33b0      	adds	r3, #176	; 0xb0
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	32b0      	adds	r2, #176	; 0xb0
 8008e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e025      	b.n	8008ed8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	33b0      	adds	r3, #176	; 0xb0
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01a      	beq.n	8008ed6 <USBD_CDC_EP0_RxReady+0x6c>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ea6:	2bff      	cmp	r3, #255	; 0xff
 8008ea8:	d015      	beq.n	8008ed6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	33b0      	adds	r3, #176	; 0xb0
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008ec2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eca:	b292      	uxth	r2, r2
 8008ecc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	22ff      	movs	r2, #255	; 0xff
 8008ed2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ee8:	2182      	movs	r1, #130	; 0x82
 8008eea:	4818      	ldr	r0, [pc, #96]	; (8008f4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008eec:	f000 fd4f 	bl	800998e <USBD_GetEpDesc>
 8008ef0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	4815      	ldr	r0, [pc, #84]	; (8008f4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ef6:	f000 fd4a 	bl	800998e <USBD_GetEpDesc>
 8008efa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008efc:	2181      	movs	r1, #129	; 0x81
 8008efe:	4813      	ldr	r0, [pc, #76]	; (8008f4c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f00:	f000 fd45 	bl	800998e <USBD_GetEpDesc>
 8008f04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2210      	movs	r2, #16
 8008f10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d006      	beq.n	8008f26 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f20:	711a      	strb	r2, [r3, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d006      	beq.n	8008f3a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f34:	711a      	strb	r2, [r3, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2243      	movs	r2, #67	; 0x43
 8008f3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f40:	4b02      	ldr	r3, [pc, #8]	; (8008f4c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000060 	.word	0x20000060

08008f50 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f58:	2182      	movs	r1, #130	; 0x82
 8008f5a:	4818      	ldr	r0, [pc, #96]	; (8008fbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f5c:	f000 fd17 	bl	800998e <USBD_GetEpDesc>
 8008f60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f62:	2101      	movs	r1, #1
 8008f64:	4815      	ldr	r0, [pc, #84]	; (8008fbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f66:	f000 fd12 	bl	800998e <USBD_GetEpDesc>
 8008f6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f6c:	2181      	movs	r1, #129	; 0x81
 8008f6e:	4813      	ldr	r0, [pc, #76]	; (8008fbc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f70:	f000 fd0d 	bl	800998e <USBD_GetEpDesc>
 8008f74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2210      	movs	r2, #16
 8008f80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	711a      	strb	r2, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f042 0202 	orr.w	r2, r2, #2
 8008f94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d006      	beq.n	8008faa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	711a      	strb	r2, [r3, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f042 0202 	orr.w	r2, r2, #2
 8008fa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2243      	movs	r2, #67	; 0x43
 8008fae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000060 	.word	0x20000060

08008fc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fc8:	2182      	movs	r1, #130	; 0x82
 8008fca:	4818      	ldr	r0, [pc, #96]	; (800902c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fcc:	f000 fcdf 	bl	800998e <USBD_GetEpDesc>
 8008fd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4815      	ldr	r0, [pc, #84]	; (800902c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fd6:	f000 fcda 	bl	800998e <USBD_GetEpDesc>
 8008fda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fdc:	2181      	movs	r1, #129	; 0x81
 8008fde:	4813      	ldr	r0, [pc, #76]	; (800902c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fe0:	f000 fcd5 	bl	800998e <USBD_GetEpDesc>
 8008fe4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2210      	movs	r2, #16
 8008ff0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009000:	711a      	strb	r2, [r3, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d006      	beq.n	800901a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009014:	711a      	strb	r2, [r3, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2243      	movs	r2, #67	; 0x43
 800901e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000060 	.word	0x20000060

08009030 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	220a      	movs	r2, #10
 800903c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800903e:	4b03      	ldr	r3, [pc, #12]	; (800904c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	2000001c 	.word	0x2000001c

08009050 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	e009      	b.n	8009078 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	33b0      	adds	r3, #176	; 0xb0
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	32b0      	adds	r2, #176	; 0xb0
 800909a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e008      	b.n	80090bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	32b0      	adds	r2, #176	; 0xb0
 80090dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e004      	b.n	80090f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
	...

08009104 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	32b0      	adds	r2, #176	; 0xb0
 8009116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	32b0      	adds	r2, #176	; 0xb0
 800912a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	e025      	b.n	8009182 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800913c:	2b00      	cmp	r3, #0
 800913e:	d11f      	bne.n	8009180 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2201      	movs	r2, #1
 8009144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009148:	4b10      	ldr	r3, [pc, #64]	; (800918c <USBD_CDC_TransmitPacket+0x88>)
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	f003 020f 	and.w	r2, r3, #15
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4403      	add	r3, r0
 8009162:	3318      	adds	r3, #24
 8009164:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009166:	4b09      	ldr	r3, [pc, #36]	; (800918c <USBD_CDC_TransmitPacket+0x88>)
 8009168:	7819      	ldrb	r1, [r3, #0]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f004 fd7d 	bl	800dc76 <USBD_LL_Transmit>

    ret = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	200000a3 	.word	0x200000a3

08009190 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	32b0      	adds	r2, #176	; 0xb0
 80091a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	32b0      	adds	r2, #176	; 0xb0
 80091b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e018      	b.n	80091f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7c1b      	ldrb	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <USBD_CDC_ReceivePacket+0x68>)
 80091c8:	7819      	ldrb	r1, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f004 fd6f 	bl	800dcb8 <USBD_LL_PrepareReceive>
 80091da:	e008      	b.n	80091ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <USBD_CDC_ReceivePacket+0x68>)
 80091de:	7819      	ldrb	r1, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f004 fd65 	bl	800dcb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	200000a4 	.word	0x200000a4

080091fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009210:	2303      	movs	r3, #3
 8009212:	e01f      	b.n	8009254 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	79fa      	ldrb	r2, [r7, #7]
 8009246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f004 fbdf 	bl	800da0c <USBD_LL_Init>
 800924e:	4603      	mov	r3, r0
 8009250:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009252:	7dfb      	ldrb	r3, [r7, #23]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e025      	b.n	80092c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	32ae      	adds	r2, #174	; 0xae
 8009286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00f      	beq.n	80092b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32ae      	adds	r2, #174	; 0xae
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	f107 020e 	add.w	r2, r7, #14
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	4602      	mov	r2, r0
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f004 fbe7 	bl	800daa4 <USBD_LL_Start>
 80092d6:	4603      	mov	r3, r0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800930c:	2b00      	cmp	r3, #0
 800930e:	d009      	beq.n	8009324 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	4611      	mov	r1, r2
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	4798      	blx	r3
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	460b      	mov	r3, r1
 8009338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	78fa      	ldrb	r2, [r7, #3]
 8009348:	4611      	mov	r1, r2
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009358:	7bfb      	ldrb	r3, [r7, #15]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f001 f908 	bl	800a58a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009388:	461a      	mov	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009396:	f003 031f 	and.w	r3, r3, #31
 800939a:	2b02      	cmp	r3, #2
 800939c:	d01a      	beq.n	80093d4 <USBD_LL_SetupStage+0x72>
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d822      	bhi.n	80093e8 <USBD_LL_SetupStage+0x86>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <USBD_LL_SetupStage+0x4a>
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d00a      	beq.n	80093c0 <USBD_LL_SetupStage+0x5e>
 80093aa:	e01d      	b.n	80093e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb5f 	bl	8009a78 <USBD_StdDevReq>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
      break;
 80093be:	e020      	b.n	8009402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fbc7 	bl	8009b5c <USBD_StdItfReq>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
      break;
 80093d2:	e016      	b.n	8009402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fc29 	bl	8009c34 <USBD_StdEPReq>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]
      break;
 80093e6:	e00c      	b.n	8009402 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f004 fbb4 	bl	800db64 <USBD_LL_StallEP>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009400:	bf00      	nop
  }

  return ret;
 8009402:	7bfb      	ldrb	r3, [r7, #15]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	460b      	mov	r3, r1
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d16e      	bne.n	8009502 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800942a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009432:	2b03      	cmp	r3, #3
 8009434:	f040 8098 	bne.w	8009568 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	429a      	cmp	r2, r3
 8009442:	d913      	bls.n	800946c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	1ad2      	subs	r2, r2, r3
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	4293      	cmp	r3, r2
 800945c:	bf28      	it	cs
 800945e:	4613      	movcs	r3, r2
 8009460:	461a      	mov	r2, r3
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f001 f984 	bl	800a772 <USBD_CtlContinueRx>
 800946a:	e07d      	b.n	8009568 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009472:	f003 031f 	and.w	r3, r3, #31
 8009476:	2b02      	cmp	r3, #2
 8009478:	d014      	beq.n	80094a4 <USBD_LL_DataOutStage+0x98>
 800947a:	2b02      	cmp	r3, #2
 800947c:	d81d      	bhi.n	80094ba <USBD_LL_DataOutStage+0xae>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <USBD_LL_DataOutStage+0x7c>
 8009482:	2b01      	cmp	r3, #1
 8009484:	d003      	beq.n	800948e <USBD_LL_DataOutStage+0x82>
 8009486:	e018      	b.n	80094ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	75bb      	strb	r3, [r7, #22]
            break;
 800948c:	e018      	b.n	80094c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009494:	b2db      	uxtb	r3, r3
 8009496:	4619      	mov	r1, r3
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fa5e 	bl	800995a <USBD_CoreFindIF>
 800949e:	4603      	mov	r3, r0
 80094a0:	75bb      	strb	r3, [r7, #22]
            break;
 80094a2:	e00d      	b.n	80094c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	4619      	mov	r1, r3
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fa60 	bl	8009974 <USBD_CoreFindEP>
 80094b4:	4603      	mov	r3, r0
 80094b6:	75bb      	strb	r3, [r7, #22]
            break;
 80094b8:	e002      	b.n	80094c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75bb      	strb	r3, [r7, #22]
            break;
 80094be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80094c0:	7dbb      	ldrb	r3, [r7, #22]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d119      	bne.n	80094fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d113      	bne.n	80094fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80094d2:	7dba      	ldrb	r2, [r7, #22]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	32ae      	adds	r2, #174	; 0xae
 80094d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00b      	beq.n	80094fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80094e2:	7dba      	ldrb	r2, [r7, #22]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094ea:	7dba      	ldrb	r2, [r7, #22]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	32ae      	adds	r2, #174	; 0xae
 80094f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f001 f94a 	bl	800a794 <USBD_CtlSendStatus>
 8009500:	e032      	b.n	8009568 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009508:	b2db      	uxtb	r3, r3
 800950a:	4619      	mov	r1, r3
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 fa31 	bl	8009974 <USBD_CoreFindEP>
 8009512:	4603      	mov	r3, r0
 8009514:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009516:	7dbb      	ldrb	r3, [r7, #22]
 8009518:	2bff      	cmp	r3, #255	; 0xff
 800951a:	d025      	beq.n	8009568 <USBD_LL_DataOutStage+0x15c>
 800951c:	7dbb      	ldrb	r3, [r7, #22]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d122      	bne.n	8009568 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d117      	bne.n	800955e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800952e:	7dba      	ldrb	r2, [r7, #22]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	32ae      	adds	r2, #174	; 0xae
 8009534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00f      	beq.n	800955e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800953e:	7dba      	ldrb	r2, [r7, #22]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009546:	7dba      	ldrb	r2, [r7, #22]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	32ae      	adds	r2, #174	; 0xae
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	7afa      	ldrb	r2, [r7, #11]
 8009554:	4611      	mov	r1, r2
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	4798      	blx	r3
 800955a:	4603      	mov	r3, r0
 800955c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	e000      	b.n	800956a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	460b      	mov	r3, r1
 800957c:	607a      	str	r2, [r7, #4]
 800957e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d16f      	bne.n	8009666 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3314      	adds	r3, #20
 800958a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009592:	2b02      	cmp	r3, #2
 8009594:	d15a      	bne.n	800964c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d914      	bls.n	80095cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	1ad2      	subs	r2, r2, r3
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f001 f8ac 	bl	800a716 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095be:	2300      	movs	r3, #0
 80095c0:	2200      	movs	r2, #0
 80095c2:	2100      	movs	r1, #0
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f004 fb77 	bl	800dcb8 <USBD_LL_PrepareReceive>
 80095ca:	e03f      	b.n	800964c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d11c      	bne.n	8009612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d316      	bcc.n	8009612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d20f      	bcs.n	8009612 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f001 f88d 	bl	800a716 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	2100      	movs	r1, #0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f004 fb54 	bl	800dcb8 <USBD_LL_PrepareReceive>
 8009610:	e01c      	b.n	800964c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b03      	cmp	r3, #3
 800961c:	d10f      	bne.n	800963e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800963e:	2180      	movs	r1, #128	; 0x80
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f004 fa8f 	bl	800db64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f001 f8b7 	bl	800a7ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d03a      	beq.n	80096cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7ff fe42 	bl	80092e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009664:	e032      	b.n	80096cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009666:	7afb      	ldrb	r3, [r7, #11]
 8009668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800966c:	b2db      	uxtb	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 f97f 	bl	8009974 <USBD_CoreFindEP>
 8009676:	4603      	mov	r3, r0
 8009678:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	2bff      	cmp	r3, #255	; 0xff
 800967e:	d025      	beq.n	80096cc <USBD_LL_DataInStage+0x15a>
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d122      	bne.n	80096cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b03      	cmp	r3, #3
 8009690:	d11c      	bne.n	80096cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009692:	7dfa      	ldrb	r2, [r7, #23]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	32ae      	adds	r2, #174	; 0xae
 8009698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d014      	beq.n	80096cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096a2:	7dfa      	ldrb	r2, [r7, #23]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096aa:	7dfa      	ldrb	r2, [r7, #23]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	32ae      	adds	r2, #174	; 0xae
 80096b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	7afa      	ldrb	r2, [r7, #11]
 80096b8:	4611      	mov	r1, r2
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	4798      	blx	r3
 80096be:	4603      	mov	r3, r0
 80096c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80096c2:	7dbb      	ldrb	r3, [r7, #22]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80096c8:	7dbb      	ldrb	r3, [r7, #22]
 80096ca:	e000      	b.n	80096ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970e:	2b00      	cmp	r3, #0
 8009710:	d014      	beq.n	800973c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00e      	beq.n	800973c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	6852      	ldr	r2, [r2, #4]
 800972a:	b2d2      	uxtb	r2, r2
 800972c:	4611      	mov	r1, r2
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009738:	2303      	movs	r3, #3
 800973a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	2200      	movs	r2, #0
 8009740:	2100      	movs	r1, #0
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f004 f9c9 	bl	800dada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2240      	movs	r2, #64	; 0x40
 8009754:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009758:	2340      	movs	r3, #64	; 0x40
 800975a:	2200      	movs	r2, #0
 800975c:	2180      	movs	r1, #128	; 0x80
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f004 f9bb 	bl	800dada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2240      	movs	r2, #64	; 0x40
 800976e:	621a      	str	r2, [r3, #32]

  return ret;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	460b      	mov	r3, r1
 8009784:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2204      	movs	r2, #4
 80097b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d106      	bne.n	80097e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b03      	cmp	r3, #3
 8009808:	d110      	bne.n	800982c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	32ae      	adds	r2, #174	; 0xae
 800984c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009854:	2303      	movs	r3, #3
 8009856:	e01c      	b.n	8009892 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b03      	cmp	r3, #3
 8009862:	d115      	bne.n	8009890 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	32ae      	adds	r2, #174	; 0xae
 800986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00b      	beq.n	8009890 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	32ae      	adds	r2, #174	; 0xae
 8009882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	78fa      	ldrb	r2, [r7, #3]
 800988a:	4611      	mov	r1, r2
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	32ae      	adds	r2, #174	; 0xae
 80098b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e01c      	b.n	80098f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d115      	bne.n	80098f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	32ae      	adds	r2, #174	; 0xae
 80098d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	32ae      	adds	r2, #174	; 0xae
 80098e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	78fa      	ldrb	r2, [r7, #3]
 80098ee:	4611      	mov	r1, r2
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00e      	beq.n	8009950 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	6852      	ldr	r2, [r2, #4]
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	4611      	mov	r1, r2
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800994c:	2303      	movs	r3, #3
 800994e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009966:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009980:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b086      	sub	sp, #24
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	885b      	ldrh	r3, [r3, #2]
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d920      	bls.n	80099f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099be:	e013      	b.n	80099e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099c0:	f107 030a 	add.w	r3, r7, #10
 80099c4:	4619      	mov	r1, r3
 80099c6:	6978      	ldr	r0, [r7, #20]
 80099c8:	f000 f81b 	bl	8009a02 <USBD_GetNextDesc>
 80099cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	d108      	bne.n	80099e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	789b      	ldrb	r3, [r3, #2]
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d008      	beq.n	80099f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80099e4:	2300      	movs	r3, #0
 80099e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	885b      	ldrh	r3, [r3, #2]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	897b      	ldrh	r3, [r7, #10]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d8e5      	bhi.n	80099c0 <USBD_GetEpDesc+0x32>
 80099f4:	e000      	b.n	80099f8 <USBD_GetEpDesc+0x6a>
          break;
 80099f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099f8:	693b      	ldr	r3, [r7, #16]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	881a      	ldrh	r2, [r3, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	3301      	adds	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a5a:	8a3b      	ldrh	r3, [r7, #16]
 8009a5c:	021b      	lsls	r3, r3, #8
 8009a5e:	b21a      	sxth	r2, r3
 8009a60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	b21b      	sxth	r3, r3
 8009a68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a6a:	89fb      	ldrh	r3, [r7, #14]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d005      	beq.n	8009a9e <USBD_StdDevReq+0x26>
 8009a92:	2b40      	cmp	r3, #64	; 0x40
 8009a94:	d857      	bhi.n	8009b46 <USBD_StdDevReq+0xce>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00f      	beq.n	8009aba <USBD_StdDevReq+0x42>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d153      	bne.n	8009b46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	32ae      	adds	r2, #174	; 0xae
 8009aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	4798      	blx	r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab8:	e04a      	b.n	8009b50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	2b09      	cmp	r3, #9
 8009ac0:	d83b      	bhi.n	8009b3a <USBD_StdDevReq+0xc2>
 8009ac2:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <USBD_StdDevReq+0x50>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009b31 	.word	0x08009b31
 8009ad0:	08009b3b 	.word	0x08009b3b
 8009ad4:	08009b27 	.word	0x08009b27
 8009ad8:	08009b3b 	.word	0x08009b3b
 8009adc:	08009afb 	.word	0x08009afb
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009b3b 	.word	0x08009b3b
 8009ae8:	08009b13 	.word	0x08009b13
 8009aec:	08009b05 	.word	0x08009b05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa3c 	bl	8009f70 <USBD_GetDescriptor>
          break;
 8009af8:	e024      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fba1 	bl	800a244 <USBD_SetAddress>
          break;
 8009b02:	e01f      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fbe0 	bl	800a2cc <USBD_SetConfig>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8009b10:	e018      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fc83 	bl	800a420 <USBD_GetConfig>
          break;
 8009b1a:	e013      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fcb4 	bl	800a48c <USBD_GetStatus>
          break;
 8009b24:	e00e      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fce3 	bl	800a4f4 <USBD_SetFeature>
          break;
 8009b2e:	e009      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fd07 	bl	800a546 <USBD_ClrFeature>
          break;
 8009b38:	e004      	b.n	8009b44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fd5e 	bl	800a5fe <USBD_CtlError>
          break;
 8009b42:	bf00      	nop
      }
      break;
 8009b44:	e004      	b.n	8009b50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fd58 	bl	800a5fe <USBD_CtlError>
      break;
 8009b4e:	bf00      	nop
  }

  return ret;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop

08009b5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b72:	2b40      	cmp	r3, #64	; 0x40
 8009b74:	d005      	beq.n	8009b82 <USBD_StdItfReq+0x26>
 8009b76:	2b40      	cmp	r3, #64	; 0x40
 8009b78:	d852      	bhi.n	8009c20 <USBD_StdItfReq+0xc4>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <USBD_StdItfReq+0x26>
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d14e      	bne.n	8009c20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d840      	bhi.n	8009c12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	889b      	ldrh	r3, [r3, #4]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d836      	bhi.n	8009c08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	889b      	ldrh	r3, [r3, #4]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff fed9 	bl	800995a <USBD_CoreFindIF>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2bff      	cmp	r3, #255	; 0xff
 8009bb0:	d01d      	beq.n	8009bee <USBD_StdItfReq+0x92>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d11a      	bne.n	8009bee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009bb8:	7bba      	ldrb	r2, [r7, #14]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32ae      	adds	r2, #174	; 0xae
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00f      	beq.n	8009be8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009bc8:	7bba      	ldrb	r2, [r7, #14]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bd0:	7bba      	ldrb	r2, [r7, #14]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32ae      	adds	r2, #174	; 0xae
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009be6:	e004      	b.n	8009bf2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009be8:	2303      	movs	r3, #3
 8009bea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bec:	e001      	b.n	8009bf2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	88db      	ldrh	r3, [r3, #6]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d110      	bne.n	8009c1c <USBD_StdItfReq+0xc0>
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10d      	bne.n	8009c1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fdc7 	bl	800a794 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c06:	e009      	b.n	8009c1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fcf7 	bl	800a5fe <USBD_CtlError>
          break;
 8009c10:	e004      	b.n	8009c1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fcf2 	bl	800a5fe <USBD_CtlError>
          break;
 8009c1a:	e000      	b.n	8009c1e <USBD_StdItfReq+0xc2>
          break;
 8009c1c:	bf00      	nop
      }
      break;
 8009c1e:	e004      	b.n	8009c2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fceb 	bl	800a5fe <USBD_CtlError>
      break;
 8009c28:	bf00      	nop
  }

  return ret;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	889b      	ldrh	r3, [r3, #4]
 8009c46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c50:	2b40      	cmp	r3, #64	; 0x40
 8009c52:	d007      	beq.n	8009c64 <USBD_StdEPReq+0x30>
 8009c54:	2b40      	cmp	r3, #64	; 0x40
 8009c56:	f200 817f 	bhi.w	8009f58 <USBD_StdEPReq+0x324>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d02a      	beq.n	8009cb4 <USBD_StdEPReq+0x80>
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	f040 817a 	bne.w	8009f58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff fe83 	bl	8009974 <USBD_CoreFindEP>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c72:	7b7b      	ldrb	r3, [r7, #13]
 8009c74:	2bff      	cmp	r3, #255	; 0xff
 8009c76:	f000 8174 	beq.w	8009f62 <USBD_StdEPReq+0x32e>
 8009c7a:	7b7b      	ldrb	r3, [r7, #13]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 8170 	bne.w	8009f62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c82:	7b7a      	ldrb	r2, [r7, #13]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c8a:	7b7a      	ldrb	r2, [r7, #13]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	32ae      	adds	r2, #174	; 0xae
 8009c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 8163 	beq.w	8009f62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c9c:	7b7a      	ldrb	r2, [r7, #13]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	32ae      	adds	r2, #174	; 0xae
 8009ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cb2:	e156      	b.n	8009f62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	785b      	ldrb	r3, [r3, #1]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d008      	beq.n	8009cce <USBD_StdEPReq+0x9a>
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	f300 8145 	bgt.w	8009f4c <USBD_StdEPReq+0x318>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 809b 	beq.w	8009dfe <USBD_StdEPReq+0x1ca>
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d03c      	beq.n	8009d46 <USBD_StdEPReq+0x112>
 8009ccc:	e13e      	b.n	8009f4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d002      	beq.n	8009ce0 <USBD_StdEPReq+0xac>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d016      	beq.n	8009d0c <USBD_StdEPReq+0xd8>
 8009cde:	e02c      	b.n	8009d3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00d      	beq.n	8009d02 <USBD_StdEPReq+0xce>
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b80      	cmp	r3, #128	; 0x80
 8009cea:	d00a      	beq.n	8009d02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f003 ff37 	bl	800db64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cf6:	2180      	movs	r1, #128	; 0x80
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f003 ff33 	bl	800db64 <USBD_LL_StallEP>
 8009cfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d00:	e020      	b.n	8009d44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fc7a 	bl	800a5fe <USBD_CtlError>
              break;
 8009d0a:	e01b      	b.n	8009d44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	885b      	ldrh	r3, [r3, #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10e      	bne.n	8009d32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <USBD_StdEPReq+0xfe>
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	2b80      	cmp	r3, #128	; 0x80
 8009d1e:	d008      	beq.n	8009d32 <USBD_StdEPReq+0xfe>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	88db      	ldrh	r3, [r3, #6]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f003 ff19 	bl	800db64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fd2e 	bl	800a794 <USBD_CtlSendStatus>

              break;
 8009d38:	e004      	b.n	8009d44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fc5e 	bl	800a5fe <USBD_CtlError>
              break;
 8009d42:	bf00      	nop
          }
          break;
 8009d44:	e107      	b.n	8009f56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d002      	beq.n	8009d58 <USBD_StdEPReq+0x124>
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d016      	beq.n	8009d84 <USBD_StdEPReq+0x150>
 8009d56:	e04b      	b.n	8009df0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00d      	beq.n	8009d7a <USBD_StdEPReq+0x146>
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b80      	cmp	r3, #128	; 0x80
 8009d62:	d00a      	beq.n	8009d7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f003 fefb 	bl	800db64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d6e:	2180      	movs	r1, #128	; 0x80
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f003 fef7 	bl	800db64 <USBD_LL_StallEP>
 8009d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d78:	e040      	b.n	8009dfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fc3e 	bl	800a5fe <USBD_CtlError>
              break;
 8009d82:	e03b      	b.n	8009dfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	885b      	ldrh	r3, [r3, #2]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d136      	bne.n	8009dfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f003 ff01 	bl	800dba2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fcf7 	bl	800a794 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fde2 	bl	8009974 <USBD_CoreFindEP>
 8009db0:	4603      	mov	r3, r0
 8009db2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009db4:	7b7b      	ldrb	r3, [r7, #13]
 8009db6:	2bff      	cmp	r3, #255	; 0xff
 8009db8:	d01f      	beq.n	8009dfa <USBD_StdEPReq+0x1c6>
 8009dba:	7b7b      	ldrb	r3, [r7, #13]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d11c      	bne.n	8009dfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009dc0:	7b7a      	ldrb	r2, [r7, #13]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009dc8:	7b7a      	ldrb	r2, [r7, #13]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	32ae      	adds	r2, #174	; 0xae
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d010      	beq.n	8009dfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009dd8:	7b7a      	ldrb	r2, [r7, #13]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32ae      	adds	r2, #174	; 0xae
 8009dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	4798      	blx	r3
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009dee:	e004      	b.n	8009dfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fc03 	bl	800a5fe <USBD_CtlError>
              break;
 8009df8:	e000      	b.n	8009dfc <USBD_StdEPReq+0x1c8>
              break;
 8009dfa:	bf00      	nop
          }
          break;
 8009dfc:	e0ab      	b.n	8009f56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d002      	beq.n	8009e10 <USBD_StdEPReq+0x1dc>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d032      	beq.n	8009e74 <USBD_StdEPReq+0x240>
 8009e0e:	e097      	b.n	8009f40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <USBD_StdEPReq+0x1f2>
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b80      	cmp	r3, #128	; 0x80
 8009e1a:	d004      	beq.n	8009e26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fbed 	bl	800a5fe <USBD_CtlError>
                break;
 8009e24:	e091      	b.n	8009f4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da0b      	bge.n	8009e46 <USBD_StdEPReq+0x212>
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	3310      	adds	r3, #16
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	4413      	add	r3, r2
 8009e42:	3304      	adds	r3, #4
 8009e44:	e00b      	b.n	8009e5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fc37 	bl	800a6e0 <USBD_CtlSendData>
              break;
 8009e72:	e06a      	b.n	8009f4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	da11      	bge.n	8009ea0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	f003 020f 	and.w	r2, r3, #15
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3324      	adds	r3, #36	; 0x24
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d117      	bne.n	8009ec6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fbb0 	bl	800a5fe <USBD_CtlError>
                  break;
 8009e9e:	e054      	b.n	8009f4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	f003 020f 	and.w	r2, r3, #15
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fb9d 	bl	800a5fe <USBD_CtlError>
                  break;
 8009ec4:	e041      	b.n	8009f4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	da0b      	bge.n	8009ee6 <USBD_StdEPReq+0x2b2>
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	3310      	adds	r3, #16
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	e00b      	b.n	8009efe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eec:	4613      	mov	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	4413      	add	r3, r2
 8009efc:	3304      	adds	r3, #4
 8009efe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <USBD_StdEPReq+0x2d8>
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b80      	cmp	r3, #128	; 0x80
 8009f0a:	d103      	bne.n	8009f14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	e00e      	b.n	8009f32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f003 fe61 	bl	800dbe0 <USBD_LL_IsStallEP>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2201      	movs	r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e002      	b.n	8009f32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2202      	movs	r2, #2
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fbd1 	bl	800a6e0 <USBD_CtlSendData>
              break;
 8009f3e:	e004      	b.n	8009f4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb5b 	bl	800a5fe <USBD_CtlError>
              break;
 8009f48:	bf00      	nop
          }
          break;
 8009f4a:	e004      	b.n	8009f56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fb55 	bl	800a5fe <USBD_CtlError>
          break;
 8009f54:	bf00      	nop
      }
      break;
 8009f56:	e005      	b.n	8009f64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb4f 	bl	800a5fe <USBD_CtlError>
      break;
 8009f60:	e000      	b.n	8009f64 <USBD_StdEPReq+0x330>
      break;
 8009f62:	bf00      	nop
  }

  return ret;
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	885b      	ldrh	r3, [r3, #2]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b06      	cmp	r3, #6
 8009f92:	f200 8128 	bhi.w	800a1e6 <USBD_GetDescriptor+0x276>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <USBD_GetDescriptor+0x2c>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fb9 	.word	0x08009fb9
 8009fa0:	08009fd1 	.word	0x08009fd1
 8009fa4:	0800a011 	.word	0x0800a011
 8009fa8:	0800a1e7 	.word	0x0800a1e7
 8009fac:	0800a1e7 	.word	0x0800a1e7
 8009fb0:	0800a187 	.word	0x0800a187
 8009fb4:	0800a1b3 	.word	0x0800a1b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	7c12      	ldrb	r2, [r2, #16]
 8009fc4:	f107 0108 	add.w	r1, r7, #8
 8009fc8:	4610      	mov	r0, r2
 8009fca:	4798      	blx	r3
 8009fcc:	60f8      	str	r0, [r7, #12]
      break;
 8009fce:	e112      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7c1b      	ldrb	r3, [r3, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10d      	bne.n	8009ff4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe0:	f107 0208 	add.w	r2, r7, #8
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4798      	blx	r3
 8009fe8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	2202      	movs	r2, #2
 8009ff0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ff2:	e100      	b.n	800a1f6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffc:	f107 0208 	add.w	r2, r7, #8
 800a000:	4610      	mov	r0, r2
 800a002:	4798      	blx	r3
 800a004:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3301      	adds	r3, #1
 800a00a:	2202      	movs	r2, #2
 800a00c:	701a      	strb	r2, [r3, #0]
      break;
 800a00e:	e0f2      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	885b      	ldrh	r3, [r3, #2]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b05      	cmp	r3, #5
 800a018:	f200 80ac 	bhi.w	800a174 <USBD_GetDescriptor+0x204>
 800a01c:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <USBD_GetDescriptor+0xb4>)
 800a01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a022:	bf00      	nop
 800a024:	0800a03d 	.word	0x0800a03d
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a0a5 	.word	0x0800a0a5
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a10d 	.word	0x0800a10d
 800a038:	0800a141 	.word	0x0800a141
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00b      	beq.n	800a060 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	7c12      	ldrb	r2, [r2, #16]
 800a054:	f107 0108 	add.w	r1, r7, #8
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a05e:	e091      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 facb 	bl	800a5fe <USBD_CtlError>
            err++;
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	3301      	adds	r3, #1
 800a06c:	72fb      	strb	r3, [r7, #11]
          break;
 800a06e:	e089      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	7c12      	ldrb	r2, [r2, #16]
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
 800a090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a092:	e077      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fab1 	bl	800a5fe <USBD_CtlError>
            err++;
 800a09c:	7afb      	ldrb	r3, [r7, #11]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0a2:	e06f      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	7c12      	ldrb	r2, [r2, #16]
 800a0bc:	f107 0108 	add.w	r1, r7, #8
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0c6:	e05d      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa97 	bl	800a5fe <USBD_CtlError>
            err++;
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0d6:	e055      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00b      	beq.n	800a0fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	7c12      	ldrb	r2, [r2, #16]
 800a0f0:	f107 0108 	add.w	r1, r7, #8
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	4798      	blx	r3
 800a0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0fa:	e043      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa7d 	bl	800a5fe <USBD_CtlError>
            err++;
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	3301      	adds	r3, #1
 800a108:	72fb      	strb	r3, [r7, #11]
          break;
 800a10a:	e03b      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	7c12      	ldrb	r2, [r2, #16]
 800a124:	f107 0108 	add.w	r1, r7, #8
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a12e:	e029      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa63 	bl	800a5fe <USBD_CtlError>
            err++;
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	3301      	adds	r3, #1
 800a13c:	72fb      	strb	r3, [r7, #11]
          break;
 800a13e:	e021      	b.n	800a184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	7c12      	ldrb	r2, [r2, #16]
 800a158:	f107 0108 	add.w	r1, r7, #8
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
 800a160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a162:	e00f      	b.n	800a184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa49 	bl	800a5fe <USBD_CtlError>
            err++;
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	3301      	adds	r3, #1
 800a170:	72fb      	strb	r3, [r7, #11]
          break;
 800a172:	e007      	b.n	800a184 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa41 	bl	800a5fe <USBD_CtlError>
          err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a182:	bf00      	nop
      }
      break;
 800a184:	e037      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	7c1b      	ldrb	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d109      	bne.n	800a1a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a196:	f107 0208 	add.w	r2, r7, #8
 800a19a:	4610      	mov	r0, r2
 800a19c:	4798      	blx	r3
 800a19e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1a0:	e029      	b.n	800a1f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fa2a 	bl	800a5fe <USBD_CtlError>
        err++;
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a1b0:	e021      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	7c1b      	ldrb	r3, [r3, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10d      	bne.n	800a1d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c2:	f107 0208 	add.w	r2, r7, #8
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4798      	blx	r3
 800a1ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	2207      	movs	r2, #7
 800a1d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1d4:	e00f      	b.n	800a1f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fa10 	bl	800a5fe <USBD_CtlError>
        err++;
 800a1de:	7afb      	ldrb	r3, [r7, #11]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e4:	e007      	b.n	800a1f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa08 	bl	800a5fe <USBD_CtlError>
      err++;
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f4:	bf00      	nop
  }

  if (err != 0U)
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d11e      	bne.n	800a23a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	88db      	ldrh	r3, [r3, #6]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d016      	beq.n	800a232 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a204:	893b      	ldrh	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00e      	beq.n	800a228 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	88da      	ldrh	r2, [r3, #6]
 800a20e:	893b      	ldrh	r3, [r7, #8]
 800a210:	4293      	cmp	r3, r2
 800a212:	bf28      	it	cs
 800a214:	4613      	movcs	r3, r2
 800a216:	b29b      	uxth	r3, r3
 800a218:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a21a:	893b      	ldrh	r3, [r7, #8]
 800a21c:	461a      	mov	r2, r3
 800a21e:	68f9      	ldr	r1, [r7, #12]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fa5d 	bl	800a6e0 <USBD_CtlSendData>
 800a226:	e009      	b.n	800a23c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f9e7 	bl	800a5fe <USBD_CtlError>
 800a230:	e004      	b.n	800a23c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 faae 	bl	800a794 <USBD_CtlSendStatus>
 800a238:	e000      	b.n	800a23c <USBD_GetDescriptor+0x2cc>
    return;
 800a23a:	bf00      	nop
  }
}
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop

0800a244 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	889b      	ldrh	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d131      	bne.n	800a2ba <USBD_SetAddress+0x76>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	88db      	ldrh	r3, [r3, #6]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d12d      	bne.n	800a2ba <USBD_SetAddress+0x76>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	885b      	ldrh	r3, [r3, #2]
 800a262:	2b7f      	cmp	r3, #127	; 0x7f
 800a264:	d829      	bhi.n	800a2ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	885b      	ldrh	r3, [r3, #2]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a270:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d104      	bne.n	800a288 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f9bc 	bl	800a5fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a286:	e01d      	b.n	800a2c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	7bfa      	ldrb	r2, [r7, #15]
 800a28c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f003 fccf 	bl	800dc38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa7a 	bl	800a794 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d004      	beq.n	800a2b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ae:	e009      	b.n	800a2c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b8:	e004      	b.n	800a2c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f99e 	bl	800a5fe <USBD_CtlError>
  }
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	4b4e      	ldr	r3, [pc, #312]	; (800a41c <USBD_SetConfig+0x150>)
 800a2e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2e4:	4b4d      	ldr	r3, [pc, #308]	; (800a41c <USBD_SetConfig+0x150>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d905      	bls.n	800a2f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f985 	bl	800a5fe <USBD_CtlError>
    return USBD_FAIL;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e08c      	b.n	800a412 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d002      	beq.n	800a30a <USBD_SetConfig+0x3e>
 800a304:	2b03      	cmp	r3, #3
 800a306:	d029      	beq.n	800a35c <USBD_SetConfig+0x90>
 800a308:	e075      	b.n	800a3f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a30a:	4b44      	ldr	r3, [pc, #272]	; (800a41c <USBD_SetConfig+0x150>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d020      	beq.n	800a354 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a312:	4b42      	ldr	r3, [pc, #264]	; (800a41c <USBD_SetConfig+0x150>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a31c:	4b3f      	ldr	r3, [pc, #252]	; (800a41c <USBD_SetConfig+0x150>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fe ffe7 	bl	80092f6 <USBD_SetClassConfig>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d008      	beq.n	800a344 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f962 	bl	800a5fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2202      	movs	r2, #2
 800a33e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a342:	e065      	b.n	800a410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fa25 	bl	800a794 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2203      	movs	r2, #3
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a352:	e05d      	b.n	800a410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fa1d 	bl	800a794 <USBD_CtlSendStatus>
      break;
 800a35a:	e059      	b.n	800a410 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a35c:	4b2f      	ldr	r3, [pc, #188]	; (800a41c <USBD_SetConfig+0x150>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d112      	bne.n	800a38a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2202      	movs	r2, #2
 800a368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a36c:	4b2b      	ldr	r3, [pc, #172]	; (800a41c <USBD_SetConfig+0x150>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a376:	4b29      	ldr	r3, [pc, #164]	; (800a41c <USBD_SetConfig+0x150>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7fe ffd6 	bl	800932e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa06 	bl	800a794 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a388:	e042      	b.n	800a410 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a38a:	4b24      	ldr	r3, [pc, #144]	; (800a41c <USBD_SetConfig+0x150>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	429a      	cmp	r2, r3
 800a396:	d02a      	beq.n	800a3ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7fe ffc4 	bl	800932e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3a6:	4b1d      	ldr	r3, [pc, #116]	; (800a41c <USBD_SetConfig+0x150>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3b0:	4b1a      	ldr	r3, [pc, #104]	; (800a41c <USBD_SetConfig+0x150>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7fe ff9d 	bl	80092f6 <USBD_SetClassConfig>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00f      	beq.n	800a3e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f918 	bl	800a5fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7fe ffa9 	bl	800932e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3e4:	e014      	b.n	800a410 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f9d4 	bl	800a794 <USBD_CtlSendStatus>
      break;
 800a3ec:	e010      	b.n	800a410 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f9d0 	bl	800a794 <USBD_CtlSendStatus>
      break;
 800a3f4:	e00c      	b.n	800a410 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f900 	bl	800a5fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3fe:	4b07      	ldr	r3, [pc, #28]	; (800a41c <USBD_SetConfig+0x150>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7fe ff92 	bl	800932e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a40a:	2303      	movs	r3, #3
 800a40c:	73fb      	strb	r3, [r7, #15]
      break;
 800a40e:	bf00      	nop
  }

  return ret;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20000488 	.word	0x20000488

0800a420 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	88db      	ldrh	r3, [r3, #6]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d004      	beq.n	800a43c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8e2 	bl	800a5fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a43a:	e023      	b.n	800a484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	dc02      	bgt.n	800a44e <USBD_GetConfig+0x2e>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	dc03      	bgt.n	800a454 <USBD_GetConfig+0x34>
 800a44c:	e015      	b.n	800a47a <USBD_GetConfig+0x5a>
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d00b      	beq.n	800a46a <USBD_GetConfig+0x4a>
 800a452:	e012      	b.n	800a47a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	3308      	adds	r3, #8
 800a45e:	2201      	movs	r2, #1
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f93c 	bl	800a6e0 <USBD_CtlSendData>
        break;
 800a468:	e00c      	b.n	800a484 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3304      	adds	r3, #4
 800a46e:	2201      	movs	r2, #1
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f934 	bl	800a6e0 <USBD_CtlSendData>
        break;
 800a478:	e004      	b.n	800a484 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a47a:	6839      	ldr	r1, [r7, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f8be 	bl	800a5fe <USBD_CtlError>
        break;
 800a482:	bf00      	nop
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d81e      	bhi.n	800a4e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	88db      	ldrh	r3, [r3, #6]
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d004      	beq.n	800a4b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f8a5 	bl	800a5fe <USBD_CtlError>
        break;
 800a4b4:	e01a      	b.n	800a4ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d005      	beq.n	800a4d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f043 0202 	orr.w	r2, r3, #2
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	330c      	adds	r3, #12
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f900 	bl	800a6e0 <USBD_CtlSendData>
      break;
 800a4e0:	e004      	b.n	800a4ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f88a 	bl	800a5fe <USBD_CtlError>
      break;
 800a4ea:	bf00      	nop
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	885b      	ldrh	r3, [r3, #2]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d107      	bne.n	800a516 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f940 	bl	800a794 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a514:	e013      	b.n	800a53e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d10b      	bne.n	800a536 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	889b      	ldrh	r3, [r3, #4]
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	b29b      	uxth	r3, r3
 800a526:	b2da      	uxtb	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f930 	bl	800a794 <USBD_CtlSendStatus>
}
 800a534:	e003      	b.n	800a53e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f860 	bl	800a5fe <USBD_CtlError>
}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a556:	b2db      	uxtb	r3, r3
 800a558:	3b01      	subs	r3, #1
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d80b      	bhi.n	800a576 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	885b      	ldrh	r3, [r3, #2]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d10c      	bne.n	800a580 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f910 	bl	800a794 <USBD_CtlSendStatus>
      }
      break;
 800a574:	e004      	b.n	800a580 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f840 	bl	800a5fe <USBD_CtlError>
      break;
 800a57e:	e000      	b.n	800a582 <USBD_ClrFeature+0x3c>
      break;
 800a580:	bf00      	nop
  }
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	781a      	ldrb	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff fa41 	bl	8009a3c <SWAPBYTE>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	461a      	mov	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fa34 	bl	8009a3c <SWAPBYTE>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7ff fa27 	bl	8009a3c <SWAPBYTE>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	80da      	strh	r2, [r3, #6]
}
 800a5f6:	bf00      	nop
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a608:	2180      	movs	r1, #128	; 0x80
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f003 faaa 	bl	800db64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a610:	2100      	movs	r1, #0
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f003 faa6 	bl	800db64 <USBD_LL_StallEP>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d036      	beq.n	800a6a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a63a:	6938      	ldr	r0, [r7, #16]
 800a63c:	f000 f836 	bl	800a6ac <USBD_GetLen>
 800a640:	4603      	mov	r3, r0
 800a642:	3301      	adds	r3, #1
 800a644:	b29b      	uxth	r3, r3
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	4413      	add	r3, r2
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7812      	ldrb	r2, [r2, #0]
 800a658:	701a      	strb	r2, [r3, #0]
  idx++;
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	3301      	adds	r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	4413      	add	r3, r2
 800a666:	2203      	movs	r2, #3
 800a668:	701a      	strb	r2, [r3, #0]
  idx++;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	3301      	adds	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a670:	e013      	b.n	800a69a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4413      	add	r3, r2
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	7812      	ldrb	r2, [r2, #0]
 800a67c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	3301      	adds	r3, #1
 800a682:	613b      	str	r3, [r7, #16]
    idx++;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	3301      	adds	r3, #1
 800a688:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	4413      	add	r3, r2
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
    idx++;
 800a694:	7dfb      	ldrb	r3, [r7, #23]
 800a696:	3301      	adds	r3, #1
 800a698:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e7      	bne.n	800a672 <USBD_GetString+0x52>
 800a6a2:	e000      	b.n	800a6a6 <USBD_GetString+0x86>
    return;
 800a6a4:	bf00      	nop
  }
}
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6bc:	e005      	b.n	800a6ca <USBD_GetLen+0x1e>
  {
    len++;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1f5      	bne.n	800a6be <USBD_GetLen+0x12>
  }

  return len;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	2100      	movs	r1, #0
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f003 fab5 	bl	800dc76 <USBD_LL_Transmit>

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	2100      	movs	r1, #0
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f003 faa4 	bl	800dc76 <USBD_LL_Transmit>

  return USBD_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2203      	movs	r2, #3
 800a748:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	2100      	movs	r1, #0
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f003 faa8 	bl	800dcb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	2100      	movs	r1, #0
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f003 fa97 	bl	800dcb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f003 fa63 	bl	800dc76 <USBD_LL_Transmit>

  return USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b082      	sub	sp, #8
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2205      	movs	r2, #5
 800a7c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f003 fa71 	bl	800dcb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <__NVIC_SetPriority>:
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	6039      	str	r1, [r7, #0]
 800a7ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	db0a      	blt.n	800a80a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	490c      	ldr	r1, [pc, #48]	; (800a82c <__NVIC_SetPriority+0x4c>)
 800a7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7fe:	0112      	lsls	r2, r2, #4
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	440b      	add	r3, r1
 800a804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a808:	e00a      	b.n	800a820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	4908      	ldr	r1, [pc, #32]	; (800a830 <__NVIC_SetPriority+0x50>)
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	f003 030f 	and.w	r3, r3, #15
 800a816:	3b04      	subs	r3, #4
 800a818:	0112      	lsls	r2, r2, #4
 800a81a:	b2d2      	uxtb	r2, r2
 800a81c:	440b      	add	r3, r1
 800a81e:	761a      	strb	r2, [r3, #24]
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	e000e100 	.word	0xe000e100
 800a830:	e000ed00 	.word	0xe000ed00

0800a834 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a834:	b580      	push	{r7, lr}
 800a836:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <SysTick_Handler+0x1c>)
 800a83a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a83c:	f001 fd28 	bl	800c290 <xTaskGetSchedulerState>
 800a840:	4603      	mov	r3, r0
 800a842:	2b01      	cmp	r3, #1
 800a844:	d001      	beq.n	800a84a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a846:	f002 fb0f 	bl	800ce68 <xPortSysTickHandler>
  }
}
 800a84a:	bf00      	nop
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	e000e010 	.word	0xe000e010

0800a854 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a858:	2100      	movs	r1, #0
 800a85a:	f06f 0004 	mvn.w	r0, #4
 800a85e:	f7ff ffbf 	bl	800a7e0 <__NVIC_SetPriority>
#endif
}
 800a862:	bf00      	nop
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a86e:	f3ef 8305 	mrs	r3, IPSR
 800a872:	603b      	str	r3, [r7, #0]
  return(result);
 800a874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a87a:	f06f 0305 	mvn.w	r3, #5
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	e00c      	b.n	800a89c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a882:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <osKernelInitialize+0x44>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d105      	bne.n	800a896 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a88a:	4b08      	ldr	r3, [pc, #32]	; (800a8ac <osKernelInitialize+0x44>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a890:	2300      	movs	r3, #0
 800a892:	607b      	str	r3, [r7, #4]
 800a894:	e002      	b.n	800a89c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a896:	f04f 33ff 	mov.w	r3, #4294967295
 800a89a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a89c:	687b      	ldr	r3, [r7, #4]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	2000048c 	.word	0x2000048c

0800a8b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8b6:	f3ef 8305 	mrs	r3, IPSR
 800a8ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a8bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800a8c2:	f06f 0305 	mvn.w	r3, #5
 800a8c6:	607b      	str	r3, [r7, #4]
 800a8c8:	e010      	b.n	800a8ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a8ca:	4b0b      	ldr	r3, [pc, #44]	; (800a8f8 <osKernelStart+0x48>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d109      	bne.n	800a8e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a8d2:	f7ff ffbf 	bl	800a854 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8d6:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <osKernelStart+0x48>)
 800a8d8:	2202      	movs	r2, #2
 800a8da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a8dc:	f001 f87c 	bl	800b9d8 <vTaskStartScheduler>
      stat = osOK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	607b      	str	r3, [r7, #4]
 800a8e4:	e002      	b.n	800a8ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8ec:	687b      	ldr	r3, [r7, #4]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	2000048c 	.word	0x2000048c

0800a8fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08e      	sub	sp, #56	; 0x38
 800a900:	af04      	add	r7, sp, #16
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a908:	2300      	movs	r3, #0
 800a90a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a90c:	f3ef 8305 	mrs	r3, IPSR
 800a910:	617b      	str	r3, [r7, #20]
  return(result);
 800a912:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a914:	2b00      	cmp	r3, #0
 800a916:	d17e      	bne.n	800aa16 <osThreadNew+0x11a>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d07b      	beq.n	800aa16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a91e:	2380      	movs	r3, #128	; 0x80
 800a920:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a922:	2318      	movs	r3, #24
 800a924:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a92a:	f04f 33ff 	mov.w	r3, #4294967295
 800a92e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d045      	beq.n	800a9c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <osThreadNew+0x48>
        name = attr->name;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d008      	beq.n	800a96a <osThreadNew+0x6e>
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b38      	cmp	r3, #56	; 0x38
 800a95c:	d805      	bhi.n	800a96a <osThreadNew+0x6e>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <osThreadNew+0x72>
        return (NULL);
 800a96a:	2300      	movs	r3, #0
 800a96c:	e054      	b.n	800aa18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	089b      	lsrs	r3, r3, #2
 800a97c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00e      	beq.n	800a9a4 <osThreadNew+0xa8>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2bbb      	cmp	r3, #187	; 0xbb
 800a98c:	d90a      	bls.n	800a9a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a992:	2b00      	cmp	r3, #0
 800a994:	d006      	beq.n	800a9a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <osThreadNew+0xa8>
        mem = 1;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	61bb      	str	r3, [r7, #24]
 800a9a2:	e010      	b.n	800a9c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10c      	bne.n	800a9c6 <osThreadNew+0xca>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d108      	bne.n	800a9c6 <osThreadNew+0xca>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d104      	bne.n	800a9c6 <osThreadNew+0xca>
          mem = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	61bb      	str	r3, [r7, #24]
 800a9c0:	e001      	b.n	800a9c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d110      	bne.n	800a9ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9d4:	9202      	str	r2, [sp, #8]
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	6a3a      	ldr	r2, [r7, #32]
 800a9e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 fe0c 	bl	800b600 <xTaskCreateStatic>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	613b      	str	r3, [r7, #16]
 800a9ec:	e013      	b.n	800aa16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d110      	bne.n	800aa16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	f107 0310 	add.w	r3, r7, #16
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f000 fe57 	bl	800b6ba <xTaskCreate>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d001      	beq.n	800aa16 <osThreadNew+0x11a>
            hTask = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa16:	693b      	ldr	r3, [r7, #16]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3728      	adds	r7, #40	; 0x28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa28:	f3ef 8305 	mrs	r3, IPSR
 800aa2c:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <osDelay+0x1c>
    stat = osErrorISR;
 800aa34:	f06f 0305 	mvn.w	r3, #5
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e007      	b.n	800aa4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <osDelay+0x2c>
      vTaskDelay(ticks);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 ff92 	bl	800b970 <vTaskDelay>
    }
  }

  return (stat);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
	...

0800aa58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4a07      	ldr	r2, [pc, #28]	; (800aa84 <vApplicationGetIdleTaskMemory+0x2c>)
 800aa68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	4a06      	ldr	r2, [pc, #24]	; (800aa88 <vApplicationGetIdleTaskMemory+0x30>)
 800aa6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2280      	movs	r2, #128	; 0x80
 800aa74:	601a      	str	r2, [r3, #0]
}
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20000490 	.word	0x20000490
 800aa88:	2000054c 	.word	0x2000054c

0800aa8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4a07      	ldr	r2, [pc, #28]	; (800aab8 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	4a06      	ldr	r2, [pc, #24]	; (800aabc <vApplicationGetTimerTaskMemory+0x30>)
 800aaa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aaaa:	601a      	str	r2, [r3, #0]
}
 800aaac:	bf00      	nop
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	2000074c 	.word	0x2000074c
 800aabc:	20000808 	.word	0x20000808

0800aac0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f103 0208 	add.w	r2, r3, #8
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f04f 32ff 	mov.w	r2, #4294967295
 800aad8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f103 0208 	add.w	r2, r3, #8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f103 0208 	add.w	r2, r3, #8
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab0e:	bf00      	nop
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b085      	sub	sp, #20
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	601a      	str	r2, [r3, #0]
}
 800ab56:	bf00      	nop
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab62:	b480      	push	{r7}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab78:	d103      	bne.n	800ab82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e00c      	b.n	800ab9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	3308      	adds	r3, #8
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	e002      	b.n	800ab90 <vListInsert+0x2e>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d2f6      	bcs.n	800ab8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	601a      	str	r2, [r3, #0]
}
 800abc8:	bf00      	nop
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	6892      	ldr	r2, [r2, #8]
 800abea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6852      	ldr	r2, [r2, #4]
 800abf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d103      	bne.n	800ac08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	1e5a      	subs	r2, r3, #1
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac52:	f002 f877 	bl	800cd44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac62:	fb01 f303 	mul.w	r3, r1, r3
 800ac66:	441a      	add	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac82:	3b01      	subs	r3, #1
 800ac84:	68f9      	ldr	r1, [r7, #12]
 800ac86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac88:	fb01 f303 	mul.w	r3, r1, r3
 800ac8c:	441a      	add	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	22ff      	movs	r2, #255	; 0xff
 800ac96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	22ff      	movs	r2, #255	; 0xff
 800ac9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d114      	bne.n	800acd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01a      	beq.n	800ace6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3310      	adds	r3, #16
 800acb4:	4618      	mov	r0, r3
 800acb6:	f001 f929 	bl	800bf0c <xTaskRemoveFromEventList>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d012      	beq.n	800ace6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acc0:	4b0c      	ldr	r3, [pc, #48]	; (800acf4 <xQueueGenericReset+0xcc>)
 800acc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	e009      	b.n	800ace6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3310      	adds	r3, #16
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff fef2 	bl	800aac0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3324      	adds	r3, #36	; 0x24
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff feed 	bl	800aac0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ace6:	f002 f85d 	bl	800cda4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acea:	2301      	movs	r3, #1
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	e000ed04 	.word	0xe000ed04

0800acf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08e      	sub	sp, #56	; 0x38
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <xQueueGenericCreateStatic+0x52>
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <xQueueGenericCreateStatic+0x56>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <xQueueGenericCreateStatic+0x58>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	623b      	str	r3, [r7, #32]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <xQueueGenericCreateStatic+0x7e>
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <xQueueGenericCreateStatic+0x82>
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <xQueueGenericCreateStatic+0x84>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	61fb      	str	r3, [r7, #28]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad96:	2350      	movs	r3, #80	; 0x50
 800ad98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2b50      	cmp	r3, #80	; 0x50
 800ad9e:	d00a      	beq.n	800adb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	61bb      	str	r3, [r7, #24]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800adb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00d      	beq.n	800adde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	2201      	movs	r2, #1
 800adc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800adce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	4613      	mov	r3, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f805 	bl	800ade8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3730      	adds	r7, #48	; 0x30
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d103      	bne.n	800ae04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	601a      	str	r2, [r3, #0]
 800ae02:	e002      	b.n	800ae0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae16:	2101      	movs	r1, #1
 800ae18:	69b8      	ldr	r0, [r7, #24]
 800ae1a:	f7ff ff05 	bl	800ac28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	78fa      	ldrb	r2, [r7, #3]
 800ae22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae26:	bf00      	nop
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08e      	sub	sp, #56	; 0x38
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10a      	bne.n	800ae62 <xQueueGenericSend+0x32>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <xQueueGenericSend+0x40>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <xQueueGenericSend+0x44>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e000      	b.n	800ae76 <xQueueGenericSend+0x46>
 800ae74:	2300      	movs	r3, #0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <xQueueGenericSend+0x60>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d103      	bne.n	800ae9e <xQueueGenericSend+0x6e>
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d101      	bne.n	800aea2 <xQueueGenericSend+0x72>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <xQueueGenericSend+0x74>
 800aea2:	2300      	movs	r3, #0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10a      	bne.n	800aebe <xQueueGenericSend+0x8e>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	623b      	str	r3, [r7, #32]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aebe:	f001 f9e7 	bl	800c290 <xTaskGetSchedulerState>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <xQueueGenericSend+0x9e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <xQueueGenericSend+0xa2>
 800aece:	2301      	movs	r3, #1
 800aed0:	e000      	b.n	800aed4 <xQueueGenericSend+0xa4>
 800aed2:	2300      	movs	r3, #0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <xQueueGenericSend+0xbe>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	61fb      	str	r3, [r7, #28]
}
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aeee:	f001 ff29 	bl	800cd44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d302      	bcc.n	800af04 <xQueueGenericSend+0xd4>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d129      	bne.n	800af58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0a:	f000 fa0b 	bl	800b324 <prvCopyDataToQueue>
 800af0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	d010      	beq.n	800af3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	3324      	adds	r3, #36	; 0x24
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 fff5 	bl	800bf0c <xTaskRemoveFromEventList>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d013      	beq.n	800af50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af28:	4b3f      	ldr	r3, [pc, #252]	; (800b028 <xQueueGenericSend+0x1f8>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	e00a      	b.n	800af50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af40:	4b39      	ldr	r3, [pc, #228]	; (800b028 <xQueueGenericSend+0x1f8>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af50:	f001 ff28 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800af54:	2301      	movs	r3, #1
 800af56:	e063      	b.n	800b020 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d103      	bne.n	800af66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af5e:	f001 ff21 	bl	800cda4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af62:	2300      	movs	r3, #0
 800af64:	e05c      	b.n	800b020 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af6c:	f107 0314 	add.w	r3, r7, #20
 800af70:	4618      	mov	r0, r3
 800af72:	f001 f82f 	bl	800bfd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af76:	2301      	movs	r3, #1
 800af78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af7a:	f001 ff13 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af7e:	f000 fd9b 	bl	800bab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af82:	f001 fedf 	bl	800cd44 <vPortEnterCritical>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af8c:	b25b      	sxtb	r3, r3
 800af8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af92:	d103      	bne.n	800af9c <xQueueGenericSend+0x16c>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d103      	bne.n	800afb2 <xQueueGenericSend+0x182>
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afb2:	f001 fef7 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afb6:	1d3a      	adds	r2, r7, #4
 800afb8:	f107 0314 	add.w	r3, r7, #20
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f001 f81e 	bl	800c000 <xTaskCheckForTimeOut>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d124      	bne.n	800b014 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afcc:	f000 faa2 	bl	800b514 <prvIsQueueFull>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d018      	beq.n	800b008 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	3310      	adds	r3, #16
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	4611      	mov	r1, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 ff44 	bl	800be6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe6:	f000 fa2d 	bl	800b444 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afea:	f000 fd73 	bl	800bad4 <xTaskResumeAll>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f47f af7c 	bne.w	800aeee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aff6:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <xQueueGenericSend+0x1f8>)
 800aff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	e772      	b.n	800aeee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00a:	f000 fa1b 	bl	800b444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b00e:	f000 fd61 	bl	800bad4 <xTaskResumeAll>
 800b012:	e76c      	b.n	800aeee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b016:	f000 fa15 	bl	800b444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b01a:	f000 fd5b 	bl	800bad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b01e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b020:	4618      	mov	r0, r3
 800b022:	3738      	adds	r7, #56	; 0x38
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	e000ed04 	.word	0xe000ed04

0800b02c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b090      	sub	sp, #64	; 0x40
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d103      	bne.n	800b068 <xQueueGenericSendFromISR+0x3c>
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <xQueueGenericSendFromISR+0x40>
 800b068:	2301      	movs	r3, #1
 800b06a:	e000      	b.n	800b06e <xQueueGenericSendFromISR+0x42>
 800b06c:	2300      	movs	r3, #0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d103      	bne.n	800b096 <xQueueGenericSendFromISR+0x6a>
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b092:	2b01      	cmp	r3, #1
 800b094:	d101      	bne.n	800b09a <xQueueGenericSendFromISR+0x6e>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <xQueueGenericSendFromISR+0x70>
 800b09a:	2300      	movs	r3, #0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10a      	bne.n	800b0b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	623b      	str	r3, [r7, #32]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0b6:	f001 ff27 	bl	800cf08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	61fa      	str	r2, [r7, #28]
 800b0d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d302      	bcc.n	800b0e8 <xQueueGenericSendFromISR+0xbc>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d12f      	bne.n	800b148 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0fe:	f000 f911 	bl	800b324 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b102:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10a:	d112      	bne.n	800b132 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	d016      	beq.n	800b142 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	3324      	adds	r3, #36	; 0x24
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fef7 	bl	800bf0c <xTaskRemoveFromEventList>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00e      	beq.n	800b142 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00b      	beq.n	800b142 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	e007      	b.n	800b142 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b132:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b136:	3301      	adds	r3, #1
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	b25a      	sxtb	r2, r3
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b142:	2301      	movs	r3, #1
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b146:	e001      	b.n	800b14c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b156:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3740      	adds	r7, #64	; 0x40
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08c      	sub	sp, #48	; 0x30
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <xQueueReceive+0x30>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	623b      	str	r3, [r7, #32]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d103      	bne.n	800b1a2 <xQueueReceive+0x3e>
 800b19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <xQueueReceive+0x42>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e000      	b.n	800b1a8 <xQueueReceive+0x44>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xQueueReceive+0x5e>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	61fb      	str	r3, [r7, #28]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1c2:	f001 f865 	bl	800c290 <xTaskGetSchedulerState>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <xQueueReceive+0x6e>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <xQueueReceive+0x72>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <xQueueReceive+0x74>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <xQueueReceive+0x8e>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	61bb      	str	r3, [r7, #24]
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1f2:	f001 fda7 	bl	800cd44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d01f      	beq.n	800b242 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b206:	f000 f8f7 	bl	800b3f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	1e5a      	subs	r2, r3, #1
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00f      	beq.n	800b23a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	3310      	adds	r3, #16
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fe74 	bl	800bf0c <xTaskRemoveFromEventList>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d007      	beq.n	800b23a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b22a:	4b3d      	ldr	r3, [pc, #244]	; (800b320 <xQueueReceive+0x1bc>)
 800b22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b23a:	f001 fdb3 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800b23e:	2301      	movs	r3, #1
 800b240:	e069      	b.n	800b316 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d103      	bne.n	800b250 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b248:	f001 fdac 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e062      	b.n	800b316 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	2b00      	cmp	r3, #0
 800b254:	d106      	bne.n	800b264 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b256:	f107 0310 	add.w	r3, r7, #16
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 feba 	bl	800bfd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b260:	2301      	movs	r3, #1
 800b262:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b264:	f001 fd9e 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b268:	f000 fc26 	bl	800bab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b26c:	f001 fd6a 	bl	800cd44 <vPortEnterCritical>
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b276:	b25b      	sxtb	r3, r3
 800b278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27c:	d103      	bne.n	800b286 <xQueueReceive+0x122>
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28c:	b25b      	sxtb	r3, r3
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b292:	d103      	bne.n	800b29c <xQueueReceive+0x138>
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b29c:	f001 fd82 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2a0:	1d3a      	adds	r2, r7, #4
 800b2a2:	f107 0310 	add.w	r3, r7, #16
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 fea9 	bl	800c000 <xTaskCheckForTimeOut>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d123      	bne.n	800b2fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b6:	f000 f917 	bl	800b4e8 <prvIsQueueEmpty>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d017      	beq.n	800b2f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c2:	3324      	adds	r3, #36	; 0x24
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 fdcf 	bl	800be6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d0:	f000 f8b8 	bl	800b444 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2d4:	f000 fbfe 	bl	800bad4 <xTaskResumeAll>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d189      	bne.n	800b1f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b2de:	4b10      	ldr	r3, [pc, #64]	; (800b320 <xQueueReceive+0x1bc>)
 800b2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	e780      	b.n	800b1f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f2:	f000 f8a7 	bl	800b444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2f6:	f000 fbed 	bl	800bad4 <xTaskResumeAll>
 800b2fa:	e77a      	b.n	800b1f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2fe:	f000 f8a1 	bl	800b444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b302:	f000 fbe7 	bl	800bad4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b308:	f000 f8ee 	bl	800b4e8 <prvIsQueueEmpty>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f43f af6f 	beq.w	800b1f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b314:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b316:	4618      	mov	r0, r3
 800b318:	3730      	adds	r7, #48	; 0x30
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	e000ed04 	.word	0xe000ed04

0800b324 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b338:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10d      	bne.n	800b35e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d14d      	bne.n	800b3e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 ffbc 	bl	800c2cc <xTaskPriorityDisinherit>
 800b354:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	609a      	str	r2, [r3, #8]
 800b35c:	e043      	b.n	800b3e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d119      	bne.n	800b398 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6858      	ldr	r0, [r3, #4]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36c:	461a      	mov	r2, r3
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	f002 fd46 	bl	800de00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	441a      	add	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d32b      	bcc.n	800b3e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	605a      	str	r2, [r3, #4]
 800b396:	e026      	b.n	800b3e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68d8      	ldr	r0, [r3, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	68b9      	ldr	r1, [r7, #8]
 800b3a4:	f002 fd2c 	bl	800de00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b0:	425b      	negs	r3, r3
 800b3b2:	441a      	add	r2, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d207      	bcs.n	800b3d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	689a      	ldr	r2, [r3, #8]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3cc:	425b      	negs	r3, r3
 800b3ce:	441a      	add	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d105      	bne.n	800b3e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3ee:	697b      	ldr	r3, [r7, #20]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b406:	2b00      	cmp	r3, #0
 800b408:	d018      	beq.n	800b43c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b412:	441a      	add	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	429a      	cmp	r2, r3
 800b422:	d303      	bcc.n	800b42c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68d9      	ldr	r1, [r3, #12]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b434:	461a      	mov	r2, r3
 800b436:	6838      	ldr	r0, [r7, #0]
 800b438:	f002 fce2 	bl	800de00 <memcpy>
	}
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b44c:	f001 fc7a 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b456:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b458:	e011      	b.n	800b47e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d012      	beq.n	800b488 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3324      	adds	r3, #36	; 0x24
 800b466:	4618      	mov	r0, r3
 800b468:	f000 fd50 	bl	800bf0c <xTaskRemoveFromEventList>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b472:	f000 fe27 	bl	800c0c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	3b01      	subs	r3, #1
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b482:	2b00      	cmp	r3, #0
 800b484:	dce9      	bgt.n	800b45a <prvUnlockQueue+0x16>
 800b486:	e000      	b.n	800b48a <prvUnlockQueue+0x46>
					break;
 800b488:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	22ff      	movs	r2, #255	; 0xff
 800b48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b492:	f001 fc87 	bl	800cda4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b496:	f001 fc55 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4a2:	e011      	b.n	800b4c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d012      	beq.n	800b4d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3310      	adds	r3, #16
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fd2b 	bl	800bf0c <xTaskRemoveFromEventList>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4bc:	f000 fe02 	bl	800c0c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	dce9      	bgt.n	800b4a4 <prvUnlockQueue+0x60>
 800b4d0:	e000      	b.n	800b4d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	22ff      	movs	r2, #255	; 0xff
 800b4d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4dc:	f001 fc62 	bl	800cda4 <vPortExitCritical>
}
 800b4e0:	bf00      	nop
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4f0:	f001 fc28 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	e001      	b.n	800b506 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b506:	f001 fc4d 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b50a:	68fb      	ldr	r3, [r7, #12]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b51c:	f001 fc12 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b528:	429a      	cmp	r2, r3
 800b52a:	d102      	bne.n	800b532 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b52c:	2301      	movs	r3, #1
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	e001      	b.n	800b536 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b536:	f001 fc35 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b53a:	68fb      	ldr	r3, [r7, #12]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	e014      	b.n	800b57e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b554:	4a0f      	ldr	r2, [pc, #60]	; (800b594 <vQueueAddToRegistry+0x50>)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10b      	bne.n	800b578 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b560:	490c      	ldr	r1, [pc, #48]	; (800b594 <vQueueAddToRegistry+0x50>)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b56a:	4a0a      	ldr	r2, [pc, #40]	; (800b594 <vQueueAddToRegistry+0x50>)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	4413      	add	r3, r2
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b576:	e006      	b.n	800b586 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3301      	adds	r3, #1
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b07      	cmp	r3, #7
 800b582:	d9e7      	bls.n	800b554 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b584:	bf00      	nop
 800b586:	bf00      	nop
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	20000c08 	.word	0x20000c08

0800b598 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b5a8:	f001 fbcc 	bl	800cd44 <vPortEnterCritical>
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5b2:	b25b      	sxtb	r3, r3
 800b5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b8:	d103      	bne.n	800b5c2 <vQueueWaitForMessageRestricted+0x2a>
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5c8:	b25b      	sxtb	r3, r3
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ce:	d103      	bne.n	800b5d8 <vQueueWaitForMessageRestricted+0x40>
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5d8:	f001 fbe4 	bl	800cda4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	3324      	adds	r3, #36	; 0x24
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	68b9      	ldr	r1, [r7, #8]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fc61 	bl	800beb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5f2:	6978      	ldr	r0, [r7, #20]
 800b5f4:	f7ff ff26 	bl	800b444 <prvUnlockQueue>
	}
 800b5f8:	bf00      	nop
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08e      	sub	sp, #56	; 0x38
 800b604:	af04      	add	r7, sp, #16
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10a      	bne.n	800b62a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	623b      	str	r3, [r7, #32]
}
 800b626:	bf00      	nop
 800b628:	e7fe      	b.n	800b628 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10a      	bne.n	800b646 <xTaskCreateStatic+0x46>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	61fb      	str	r3, [r7, #28]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b646:	23bc      	movs	r3, #188	; 0xbc
 800b648:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2bbc      	cmp	r3, #188	; 0xbc
 800b64e:	d00a      	beq.n	800b666 <xTaskCreateStatic+0x66>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	61bb      	str	r3, [r7, #24]
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b666:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d01e      	beq.n	800b6ac <xTaskCreateStatic+0xac>
 800b66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b670:	2b00      	cmp	r3, #0
 800b672:	d01b      	beq.n	800b6ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b67c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	2202      	movs	r2, #2
 800b682:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b686:	2300      	movs	r3, #0
 800b688:	9303      	str	r3, [sp, #12]
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	9302      	str	r3, [sp, #8]
 800b68e:	f107 0314 	add.w	r3, r7, #20
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	68b9      	ldr	r1, [r7, #8]
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f000 f850 	bl	800b744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6a6:	f000 f8f3 	bl	800b890 <prvAddNewTaskToReadyList>
 800b6aa:	e001      	b.n	800b6b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6b0:	697b      	ldr	r3, [r7, #20]
	}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3728      	adds	r7, #40	; 0x28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b08c      	sub	sp, #48	; 0x30
 800b6be:	af04      	add	r7, sp, #16
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	603b      	str	r3, [r7, #0]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6ca:	88fb      	ldrh	r3, [r7, #6]
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f001 fc5a 	bl	800cf88 <pvPortMalloc>
 800b6d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00e      	beq.n	800b6fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6dc:	20bc      	movs	r0, #188	; 0xbc
 800b6de:	f001 fc53 	bl	800cf88 <pvPortMalloc>
 800b6e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	631a      	str	r2, [r3, #48]	; 0x30
 800b6f0:	e005      	b.n	800b6fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6f2:	6978      	ldr	r0, [r7, #20]
 800b6f4:	f001 fd14 	bl	800d120 <vPortFree>
 800b6f8:	e001      	b.n	800b6fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d017      	beq.n	800b734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	2200      	movs	r2, #0
 800b708:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b70c:	88fa      	ldrh	r2, [r7, #6]
 800b70e:	2300      	movs	r3, #0
 800b710:	9303      	str	r3, [sp, #12]
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	68b9      	ldr	r1, [r7, #8]
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f000 f80e 	bl	800b744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b728:	69f8      	ldr	r0, [r7, #28]
 800b72a:	f000 f8b1 	bl	800b890 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b72e:	2301      	movs	r3, #1
 800b730:	61bb      	str	r3, [r7, #24]
 800b732:	e002      	b.n	800b73a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b734:	f04f 33ff 	mov.w	r3, #4294967295
 800b738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b73a:	69bb      	ldr	r3, [r7, #24]
	}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3720      	adds	r7, #32
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	461a      	mov	r2, r3
 800b75c:	21a5      	movs	r1, #165	; 0xa5
 800b75e:	f002 fb5d 	bl	800de1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b76c:	3b01      	subs	r3, #1
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	f023 0307 	bic.w	r3, r3, #7
 800b77a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	f003 0307 	and.w	r3, r3, #7
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	617b      	str	r3, [r7, #20]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d01f      	beq.n	800b7e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	e012      	b.n	800b7ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	7819      	ldrb	r1, [r3, #0]
 800b7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3334      	adds	r3, #52	; 0x34
 800b7b8:	460a      	mov	r2, r1
 800b7ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	61fb      	str	r3, [r7, #28]
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	2b0f      	cmp	r3, #15
 800b7d2:	d9e9      	bls.n	800b7a8 <prvInitialiseNewTask+0x64>
 800b7d4:	e000      	b.n	800b7d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b7d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7e0:	e003      	b.n	800b7ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	2b37      	cmp	r3, #55	; 0x37
 800b7ee:	d901      	bls.n	800b7f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7f0:	2337      	movs	r3, #55	; 0x37
 800b7f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	2200      	movs	r2, #0
 800b804:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	3304      	adds	r3, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff f978 	bl	800ab00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	3318      	adds	r3, #24
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff f973 	bl	800ab00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b81e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b82e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	2200      	movs	r2, #0
 800b834:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	3354      	adds	r3, #84	; 0x54
 800b844:	2260      	movs	r2, #96	; 0x60
 800b846:	2100      	movs	r1, #0
 800b848:	4618      	mov	r0, r3
 800b84a:	f002 fae7 	bl	800de1c <memset>
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	4a0c      	ldr	r2, [pc, #48]	; (800b884 <prvInitialiseNewTask+0x140>)
 800b852:	659a      	str	r2, [r3, #88]	; 0x58
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	4a0c      	ldr	r2, [pc, #48]	; (800b888 <prvInitialiseNewTask+0x144>)
 800b858:	65da      	str	r2, [r3, #92]	; 0x5c
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	4a0b      	ldr	r2, [pc, #44]	; (800b88c <prvInitialiseNewTask+0x148>)
 800b85e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	68f9      	ldr	r1, [r7, #12]
 800b864:	69b8      	ldr	r0, [r7, #24]
 800b866:	f001 f941 	bl	800caec <pxPortInitialiseStack>
 800b86a:	4602      	mov	r2, r0
 800b86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b87a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b87c:	bf00      	nop
 800b87e:	3720      	adds	r7, #32
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	08012360 	.word	0x08012360
 800b888:	08012380 	.word	0x08012380
 800b88c:	08012340 	.word	0x08012340

0800b890 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b898:	f001 fa54 	bl	800cd44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b89c:	4b2d      	ldr	r3, [pc, #180]	; (800b954 <prvAddNewTaskToReadyList+0xc4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	4a2c      	ldr	r2, [pc, #176]	; (800b954 <prvAddNewTaskToReadyList+0xc4>)
 800b8a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b8a6:	4b2c      	ldr	r3, [pc, #176]	; (800b958 <prvAddNewTaskToReadyList+0xc8>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d109      	bne.n	800b8c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b8ae:	4a2a      	ldr	r2, [pc, #168]	; (800b958 <prvAddNewTaskToReadyList+0xc8>)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b8b4:	4b27      	ldr	r3, [pc, #156]	; (800b954 <prvAddNewTaskToReadyList+0xc4>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d110      	bne.n	800b8de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8bc:	f000 fc26 	bl	800c10c <prvInitialiseTaskLists>
 800b8c0:	e00d      	b.n	800b8de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b8c2:	4b26      	ldr	r3, [pc, #152]	; (800b95c <prvAddNewTaskToReadyList+0xcc>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8ca:	4b23      	ldr	r3, [pc, #140]	; (800b958 <prvAddNewTaskToReadyList+0xc8>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d802      	bhi.n	800b8de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8d8:	4a1f      	ldr	r2, [pc, #124]	; (800b958 <prvAddNewTaskToReadyList+0xc8>)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8de:	4b20      	ldr	r3, [pc, #128]	; (800b960 <prvAddNewTaskToReadyList+0xd0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	4a1e      	ldr	r2, [pc, #120]	; (800b960 <prvAddNewTaskToReadyList+0xd0>)
 800b8e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b8e8:	4b1d      	ldr	r3, [pc, #116]	; (800b960 <prvAddNewTaskToReadyList+0xd0>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f4:	4b1b      	ldr	r3, [pc, #108]	; (800b964 <prvAddNewTaskToReadyList+0xd4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d903      	bls.n	800b904 <prvAddNewTaskToReadyList+0x74>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b900:	4a18      	ldr	r2, [pc, #96]	; (800b964 <prvAddNewTaskToReadyList+0xd4>)
 800b902:	6013      	str	r3, [r2, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b908:	4613      	mov	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4a15      	ldr	r2, [pc, #84]	; (800b968 <prvAddNewTaskToReadyList+0xd8>)
 800b912:	441a      	add	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3304      	adds	r3, #4
 800b918:	4619      	mov	r1, r3
 800b91a:	4610      	mov	r0, r2
 800b91c:	f7ff f8fd 	bl	800ab1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b920:	f001 fa40 	bl	800cda4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b924:	4b0d      	ldr	r3, [pc, #52]	; (800b95c <prvAddNewTaskToReadyList+0xcc>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00e      	beq.n	800b94a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b92c:	4b0a      	ldr	r3, [pc, #40]	; (800b958 <prvAddNewTaskToReadyList+0xc8>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b936:	429a      	cmp	r2, r3
 800b938:	d207      	bcs.n	800b94a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b93a:	4b0c      	ldr	r3, [pc, #48]	; (800b96c <prvAddNewTaskToReadyList+0xdc>)
 800b93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	2000111c 	.word	0x2000111c
 800b958:	20000c48 	.word	0x20000c48
 800b95c:	20001128 	.word	0x20001128
 800b960:	20001138 	.word	0x20001138
 800b964:	20001124 	.word	0x20001124
 800b968:	20000c4c 	.word	0x20000c4c
 800b96c:	e000ed04 	.word	0xe000ed04

0800b970 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b978:	2300      	movs	r3, #0
 800b97a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d017      	beq.n	800b9b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b982:	4b13      	ldr	r3, [pc, #76]	; (800b9d0 <vTaskDelay+0x60>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <vTaskDelay+0x30>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	60bb      	str	r3, [r7, #8]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b9a0:	f000 f88a 	bl	800bab8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fcfe 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b9ac:	f000 f892 	bl	800bad4 <xTaskResumeAll>
 800b9b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d107      	bne.n	800b9c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b9b8:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <vTaskDelay+0x64>)
 800b9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9c8:	bf00      	nop
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20001144 	.word	0x20001144
 800b9d4:	e000ed04 	.word	0xe000ed04

0800b9d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	; 0x28
 800b9dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9e6:	463a      	mov	r2, r7
 800b9e8:	1d39      	adds	r1, r7, #4
 800b9ea:	f107 0308 	add.w	r3, r7, #8
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff f832 	bl	800aa58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	9202      	str	r2, [sp, #8]
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	460a      	mov	r2, r1
 800ba06:	4924      	ldr	r1, [pc, #144]	; (800ba98 <vTaskStartScheduler+0xc0>)
 800ba08:	4824      	ldr	r0, [pc, #144]	; (800ba9c <vTaskStartScheduler+0xc4>)
 800ba0a:	f7ff fdf9 	bl	800b600 <xTaskCreateStatic>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	4a23      	ldr	r2, [pc, #140]	; (800baa0 <vTaskStartScheduler+0xc8>)
 800ba12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba14:	4b22      	ldr	r3, [pc, #136]	; (800baa0 <vTaskStartScheduler+0xc8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	617b      	str	r3, [r7, #20]
 800ba20:	e001      	b.n	800ba26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d102      	bne.n	800ba32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba2c:	f000 fd10 	bl	800c450 <xTimerCreateTimerTask>
 800ba30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d11b      	bne.n	800ba70 <vTaskStartScheduler+0x98>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	613b      	str	r3, [r7, #16]
}
 800ba4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba4c:	4b15      	ldr	r3, [pc, #84]	; (800baa4 <vTaskStartScheduler+0xcc>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3354      	adds	r3, #84	; 0x54
 800ba52:	4a15      	ldr	r2, [pc, #84]	; (800baa8 <vTaskStartScheduler+0xd0>)
 800ba54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba56:	4b15      	ldr	r3, [pc, #84]	; (800baac <vTaskStartScheduler+0xd4>)
 800ba58:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba5e:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <vTaskStartScheduler+0xd8>)
 800ba60:	2201      	movs	r2, #1
 800ba62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba64:	4b13      	ldr	r3, [pc, #76]	; (800bab4 <vTaskStartScheduler+0xdc>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba6a:	f001 f8c9 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba6e:	e00e      	b.n	800ba8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba76:	d10a      	bne.n	800ba8e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	60fb      	str	r3, [r7, #12]
}
 800ba8a:	bf00      	nop
 800ba8c:	e7fe      	b.n	800ba8c <vTaskStartScheduler+0xb4>
}
 800ba8e:	bf00      	nop
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	0800e834 	.word	0x0800e834
 800ba9c:	0800c0dd 	.word	0x0800c0dd
 800baa0:	20001140 	.word	0x20001140
 800baa4:	20000c48 	.word	0x20000c48
 800baa8:	20000110 	.word	0x20000110
 800baac:	2000113c 	.word	0x2000113c
 800bab0:	20001128 	.word	0x20001128
 800bab4:	20001120 	.word	0x20001120

0800bab8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800babc:	4b04      	ldr	r3, [pc, #16]	; (800bad0 <vTaskSuspendAll+0x18>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3301      	adds	r3, #1
 800bac2:	4a03      	ldr	r2, [pc, #12]	; (800bad0 <vTaskSuspendAll+0x18>)
 800bac4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bac6:	bf00      	nop
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	20001144 	.word	0x20001144

0800bad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bade:	2300      	movs	r3, #0
 800bae0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bae2:	4b42      	ldr	r3, [pc, #264]	; (800bbec <xTaskResumeAll+0x118>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <xTaskResumeAll+0x2c>
	__asm volatile
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	603b      	str	r3, [r7, #0]
}
 800bafc:	bf00      	nop
 800bafe:	e7fe      	b.n	800bafe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb00:	f001 f920 	bl	800cd44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb04:	4b39      	ldr	r3, [pc, #228]	; (800bbec <xTaskResumeAll+0x118>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	4a38      	ldr	r2, [pc, #224]	; (800bbec <xTaskResumeAll+0x118>)
 800bb0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0e:	4b37      	ldr	r3, [pc, #220]	; (800bbec <xTaskResumeAll+0x118>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d162      	bne.n	800bbdc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb16:	4b36      	ldr	r3, [pc, #216]	; (800bbf0 <xTaskResumeAll+0x11c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d05e      	beq.n	800bbdc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb1e:	e02f      	b.n	800bb80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb20:	4b34      	ldr	r3, [pc, #208]	; (800bbf4 <xTaskResumeAll+0x120>)
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	3318      	adds	r3, #24
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff f851 	bl	800abd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3304      	adds	r3, #4
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7ff f84c 	bl	800abd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb40:	4b2d      	ldr	r3, [pc, #180]	; (800bbf8 <xTaskResumeAll+0x124>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d903      	bls.n	800bb50 <xTaskResumeAll+0x7c>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	4a2a      	ldr	r2, [pc, #168]	; (800bbf8 <xTaskResumeAll+0x124>)
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4a27      	ldr	r2, [pc, #156]	; (800bbfc <xTaskResumeAll+0x128>)
 800bb5e:	441a      	add	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3304      	adds	r3, #4
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f7fe ffd7 	bl	800ab1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb70:	4b23      	ldr	r3, [pc, #140]	; (800bc00 <xTaskResumeAll+0x12c>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d302      	bcc.n	800bb80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bb7a:	4b22      	ldr	r3, [pc, #136]	; (800bc04 <xTaskResumeAll+0x130>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb80:	4b1c      	ldr	r3, [pc, #112]	; (800bbf4 <xTaskResumeAll+0x120>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1cb      	bne.n	800bb20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb8e:	f000 fb5f 	bl	800c250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb92:	4b1d      	ldr	r3, [pc, #116]	; (800bc08 <xTaskResumeAll+0x134>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d010      	beq.n	800bbc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb9e:	f000 f847 	bl	800bc30 <xTaskIncrementTick>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bba8:	4b16      	ldr	r3, [pc, #88]	; (800bc04 <xTaskResumeAll+0x130>)
 800bbaa:	2201      	movs	r2, #1
 800bbac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1f1      	bne.n	800bb9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bbba:	4b13      	ldr	r3, [pc, #76]	; (800bc08 <xTaskResumeAll+0x134>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbc0:	4b10      	ldr	r3, [pc, #64]	; (800bc04 <xTaskResumeAll+0x130>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d009      	beq.n	800bbdc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bbcc:	4b0f      	ldr	r3, [pc, #60]	; (800bc0c <xTaskResumeAll+0x138>)
 800bbce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbdc:	f001 f8e2 	bl	800cda4 <vPortExitCritical>

	return xAlreadyYielded;
 800bbe0:	68bb      	ldr	r3, [r7, #8]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20001144 	.word	0x20001144
 800bbf0:	2000111c 	.word	0x2000111c
 800bbf4:	200010dc 	.word	0x200010dc
 800bbf8:	20001124 	.word	0x20001124
 800bbfc:	20000c4c 	.word	0x20000c4c
 800bc00:	20000c48 	.word	0x20000c48
 800bc04:	20001130 	.word	0x20001130
 800bc08:	2000112c 	.word	0x2000112c
 800bc0c:	e000ed04 	.word	0xe000ed04

0800bc10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc16:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <xTaskGetTickCount+0x1c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc1c:	687b      	ldr	r3, [r7, #4]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	370c      	adds	r7, #12
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	20001120 	.word	0x20001120

0800bc30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc36:	2300      	movs	r3, #0
 800bc38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc3a:	4b4f      	ldr	r3, [pc, #316]	; (800bd78 <xTaskIncrementTick+0x148>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f040 808f 	bne.w	800bd62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc44:	4b4d      	ldr	r3, [pc, #308]	; (800bd7c <xTaskIncrementTick+0x14c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc4c:	4a4b      	ldr	r2, [pc, #300]	; (800bd7c <xTaskIncrementTick+0x14c>)
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d120      	bne.n	800bc9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc58:	4b49      	ldr	r3, [pc, #292]	; (800bd80 <xTaskIncrementTick+0x150>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00a      	beq.n	800bc78 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	603b      	str	r3, [r7, #0]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xTaskIncrementTick+0x46>
 800bc78:	4b41      	ldr	r3, [pc, #260]	; (800bd80 <xTaskIncrementTick+0x150>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	4b41      	ldr	r3, [pc, #260]	; (800bd84 <xTaskIncrementTick+0x154>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a3f      	ldr	r2, [pc, #252]	; (800bd80 <xTaskIncrementTick+0x150>)
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	4a3f      	ldr	r2, [pc, #252]	; (800bd84 <xTaskIncrementTick+0x154>)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	4b3e      	ldr	r3, [pc, #248]	; (800bd88 <xTaskIncrementTick+0x158>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3301      	adds	r3, #1
 800bc92:	4a3d      	ldr	r2, [pc, #244]	; (800bd88 <xTaskIncrementTick+0x158>)
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	f000 fadb 	bl	800c250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc9a:	4b3c      	ldr	r3, [pc, #240]	; (800bd8c <xTaskIncrementTick+0x15c>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d349      	bcc.n	800bd38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bca4:	4b36      	ldr	r3, [pc, #216]	; (800bd80 <xTaskIncrementTick+0x150>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d104      	bne.n	800bcb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcae:	4b37      	ldr	r3, [pc, #220]	; (800bd8c <xTaskIncrementTick+0x15c>)
 800bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb4:	601a      	str	r2, [r3, #0]
					break;
 800bcb6:	e03f      	b.n	800bd38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcb8:	4b31      	ldr	r3, [pc, #196]	; (800bd80 <xTaskIncrementTick+0x150>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d203      	bcs.n	800bcd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcd0:	4a2e      	ldr	r2, [pc, #184]	; (800bd8c <xTaskIncrementTick+0x15c>)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bcd6:	e02f      	b.n	800bd38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe ff79 	bl	800abd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d004      	beq.n	800bcf4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	3318      	adds	r3, #24
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fe ff70 	bl	800abd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf8:	4b25      	ldr	r3, [pc, #148]	; (800bd90 <xTaskIncrementTick+0x160>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d903      	bls.n	800bd08 <xTaskIncrementTick+0xd8>
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	4a22      	ldr	r2, [pc, #136]	; (800bd90 <xTaskIncrementTick+0x160>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4a1f      	ldr	r2, [pc, #124]	; (800bd94 <xTaskIncrementTick+0x164>)
 800bd16:	441a      	add	r2, r3
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f7fe fefb 	bl	800ab1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd28:	4b1b      	ldr	r3, [pc, #108]	; (800bd98 <xTaskIncrementTick+0x168>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d3b8      	bcc.n	800bca4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd32:	2301      	movs	r3, #1
 800bd34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd36:	e7b5      	b.n	800bca4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd38:	4b17      	ldr	r3, [pc, #92]	; (800bd98 <xTaskIncrementTick+0x168>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3e:	4915      	ldr	r1, [pc, #84]	; (800bd94 <xTaskIncrementTick+0x164>)
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	440b      	add	r3, r1
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d901      	bls.n	800bd54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bd50:	2301      	movs	r3, #1
 800bd52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd54:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <xTaskIncrementTick+0x16c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d007      	beq.n	800bd6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e004      	b.n	800bd6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd62:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <xTaskIncrementTick+0x170>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	3301      	adds	r3, #1
 800bd68:	4a0d      	ldr	r2, [pc, #52]	; (800bda0 <xTaskIncrementTick+0x170>)
 800bd6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd6c:	697b      	ldr	r3, [r7, #20]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20001144 	.word	0x20001144
 800bd7c:	20001120 	.word	0x20001120
 800bd80:	200010d4 	.word	0x200010d4
 800bd84:	200010d8 	.word	0x200010d8
 800bd88:	20001134 	.word	0x20001134
 800bd8c:	2000113c 	.word	0x2000113c
 800bd90:	20001124 	.word	0x20001124
 800bd94:	20000c4c 	.word	0x20000c4c
 800bd98:	20000c48 	.word	0x20000c48
 800bd9c:	20001130 	.word	0x20001130
 800bda0:	2000112c 	.word	0x2000112c

0800bda4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdaa:	4b2a      	ldr	r3, [pc, #168]	; (800be54 <vTaskSwitchContext+0xb0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdb2:	4b29      	ldr	r3, [pc, #164]	; (800be58 <vTaskSwitchContext+0xb4>)
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bdb8:	e046      	b.n	800be48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bdba:	4b27      	ldr	r3, [pc, #156]	; (800be58 <vTaskSwitchContext+0xb4>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc0:	4b26      	ldr	r3, [pc, #152]	; (800be5c <vTaskSwitchContext+0xb8>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	e010      	b.n	800bdea <vTaskSwitchContext+0x46>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10a      	bne.n	800bde4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	607b      	str	r3, [r7, #4]
}
 800bde0:	bf00      	nop
 800bde2:	e7fe      	b.n	800bde2 <vTaskSwitchContext+0x3e>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	491d      	ldr	r1, [pc, #116]	; (800be60 <vTaskSwitchContext+0xbc>)
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	440b      	add	r3, r1
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0e4      	beq.n	800bdc8 <vTaskSwitchContext+0x24>
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	4613      	mov	r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	4413      	add	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4a15      	ldr	r2, [pc, #84]	; (800be60 <vTaskSwitchContext+0xbc>)
 800be0a:	4413      	add	r3, r2
 800be0c:	60bb      	str	r3, [r7, #8]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	605a      	str	r2, [r3, #4]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	3308      	adds	r3, #8
 800be20:	429a      	cmp	r2, r3
 800be22:	d104      	bne.n	800be2e <vTaskSwitchContext+0x8a>
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	605a      	str	r2, [r3, #4]
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	4a0b      	ldr	r2, [pc, #44]	; (800be64 <vTaskSwitchContext+0xc0>)
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	4a08      	ldr	r2, [pc, #32]	; (800be5c <vTaskSwitchContext+0xb8>)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be3e:	4b09      	ldr	r3, [pc, #36]	; (800be64 <vTaskSwitchContext+0xc0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3354      	adds	r3, #84	; 0x54
 800be44:	4a08      	ldr	r2, [pc, #32]	; (800be68 <vTaskSwitchContext+0xc4>)
 800be46:	6013      	str	r3, [r2, #0]
}
 800be48:	bf00      	nop
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	20001144 	.word	0x20001144
 800be58:	20001130 	.word	0x20001130
 800be5c:	20001124 	.word	0x20001124
 800be60:	20000c4c 	.word	0x20000c4c
 800be64:	20000c48 	.word	0x20000c48
 800be68:	20000110 	.word	0x20000110

0800be6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	60fb      	str	r3, [r7, #12]
}
 800be8e:	bf00      	nop
 800be90:	e7fe      	b.n	800be90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be92:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <vTaskPlaceOnEventList+0x44>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3318      	adds	r3, #24
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7fe fe61 	bl	800ab62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bea0:	2101      	movs	r1, #1
 800bea2:	6838      	ldr	r0, [r7, #0]
 800bea4:	f000 fa80 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
}
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20000c48 	.word	0x20000c48

0800beb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10a      	bne.n	800bedc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	617b      	str	r3, [r7, #20]
}
 800bed8:	bf00      	nop
 800beda:	e7fe      	b.n	800beda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <vTaskPlaceOnEventListRestricted+0x54>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3318      	adds	r3, #24
 800bee2:	4619      	mov	r1, r3
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f7fe fe18 	bl	800ab1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bef0:	f04f 33ff 	mov.w	r3, #4294967295
 800bef4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bef6:	6879      	ldr	r1, [r7, #4]
 800bef8:	68b8      	ldr	r0, [r7, #8]
 800befa:	f000 fa55 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
	}
 800befe:	bf00      	nop
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	20000c48 	.word	0x20000c48

0800bf0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10a      	bne.n	800bf38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	60fb      	str	r3, [r7, #12]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	3318      	adds	r3, #24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fe fe49 	bl	800abd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf42:	4b1e      	ldr	r3, [pc, #120]	; (800bfbc <xTaskRemoveFromEventList+0xb0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d11d      	bne.n	800bf86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fe40 	bl	800abd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf58:	4b19      	ldr	r3, [pc, #100]	; (800bfc0 <xTaskRemoveFromEventList+0xb4>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d903      	bls.n	800bf68 <xTaskRemoveFromEventList+0x5c>
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf64:	4a16      	ldr	r2, [pc, #88]	; (800bfc0 <xTaskRemoveFromEventList+0xb4>)
 800bf66:	6013      	str	r3, [r2, #0]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4a13      	ldr	r2, [pc, #76]	; (800bfc4 <xTaskRemoveFromEventList+0xb8>)
 800bf76:	441a      	add	r2, r3
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f7fe fdcb 	bl	800ab1a <vListInsertEnd>
 800bf84:	e005      	b.n	800bf92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	3318      	adds	r3, #24
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	480e      	ldr	r0, [pc, #56]	; (800bfc8 <xTaskRemoveFromEventList+0xbc>)
 800bf8e:	f7fe fdc4 	bl	800ab1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf96:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <xTaskRemoveFromEventList+0xc0>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d905      	bls.n	800bfac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <xTaskRemoveFromEventList+0xc4>)
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	e001      	b.n	800bfb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bfb0:	697b      	ldr	r3, [r7, #20]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20001144 	.word	0x20001144
 800bfc0:	20001124 	.word	0x20001124
 800bfc4:	20000c4c 	.word	0x20000c4c
 800bfc8:	200010dc 	.word	0x200010dc
 800bfcc:	20000c48 	.word	0x20000c48
 800bfd0:	20001130 	.word	0x20001130

0800bfd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfdc:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <vTaskInternalSetTimeOutState+0x24>)
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <vTaskInternalSetTimeOutState+0x28>)
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	605a      	str	r2, [r3, #4]
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	20001134 	.word	0x20001134
 800bffc:	20001120 	.word	0x20001120

0800c000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b088      	sub	sp, #32
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	613b      	str	r3, [r7, #16]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	60fb      	str	r3, [r7, #12]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c042:	f000 fe7f 	bl	800cd44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c046:	4b1d      	ldr	r3, [pc, #116]	; (800c0bc <xTaskCheckForTimeOut+0xbc>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	69ba      	ldr	r2, [r7, #24]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05e:	d102      	bne.n	800c066 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c060:	2300      	movs	r3, #0
 800c062:	61fb      	str	r3, [r7, #28]
 800c064:	e023      	b.n	800c0ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <xTaskCheckForTimeOut+0xc0>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d007      	beq.n	800c082 <xTaskCheckForTimeOut+0x82>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	69ba      	ldr	r2, [r7, #24]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d302      	bcc.n	800c082 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c07c:	2301      	movs	r3, #1
 800c07e:	61fb      	str	r3, [r7, #28]
 800c080:	e015      	b.n	800c0ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d20b      	bcs.n	800c0a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	1ad2      	subs	r2, r2, r3
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff ff9b 	bl	800bfd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	61fb      	str	r3, [r7, #28]
 800c0a2:	e004      	b.n	800c0ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0ae:	f000 fe79 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3720      	adds	r7, #32
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	20001120 	.word	0x20001120
 800c0c0:	20001134 	.word	0x20001134

0800c0c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0c8:	4b03      	ldr	r3, [pc, #12]	; (800c0d8 <vTaskMissedYield+0x14>)
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	601a      	str	r2, [r3, #0]
}
 800c0ce:	bf00      	nop
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	20001130 	.word	0x20001130

0800c0dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0e4:	f000 f852 	bl	800c18c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0e8:	4b06      	ldr	r3, [pc, #24]	; (800c104 <prvIdleTask+0x28>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d9f9      	bls.n	800c0e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0f0:	4b05      	ldr	r3, [pc, #20]	; (800c108 <prvIdleTask+0x2c>)
 800c0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0f6:	601a      	str	r2, [r3, #0]
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c100:	e7f0      	b.n	800c0e4 <prvIdleTask+0x8>
 800c102:	bf00      	nop
 800c104:	20000c4c 	.word	0x20000c4c
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c112:	2300      	movs	r3, #0
 800c114:	607b      	str	r3, [r7, #4]
 800c116:	e00c      	b.n	800c132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4a12      	ldr	r2, [pc, #72]	; (800c16c <prvInitialiseTaskLists+0x60>)
 800c124:	4413      	add	r3, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe fcca 	bl	800aac0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3301      	adds	r3, #1
 800c130:	607b      	str	r3, [r7, #4]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b37      	cmp	r3, #55	; 0x37
 800c136:	d9ef      	bls.n	800c118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c138:	480d      	ldr	r0, [pc, #52]	; (800c170 <prvInitialiseTaskLists+0x64>)
 800c13a:	f7fe fcc1 	bl	800aac0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c13e:	480d      	ldr	r0, [pc, #52]	; (800c174 <prvInitialiseTaskLists+0x68>)
 800c140:	f7fe fcbe 	bl	800aac0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c144:	480c      	ldr	r0, [pc, #48]	; (800c178 <prvInitialiseTaskLists+0x6c>)
 800c146:	f7fe fcbb 	bl	800aac0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c14a:	480c      	ldr	r0, [pc, #48]	; (800c17c <prvInitialiseTaskLists+0x70>)
 800c14c:	f7fe fcb8 	bl	800aac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c150:	480b      	ldr	r0, [pc, #44]	; (800c180 <prvInitialiseTaskLists+0x74>)
 800c152:	f7fe fcb5 	bl	800aac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <prvInitialiseTaskLists+0x78>)
 800c158:	4a05      	ldr	r2, [pc, #20]	; (800c170 <prvInitialiseTaskLists+0x64>)
 800c15a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c15c:	4b0a      	ldr	r3, [pc, #40]	; (800c188 <prvInitialiseTaskLists+0x7c>)
 800c15e:	4a05      	ldr	r2, [pc, #20]	; (800c174 <prvInitialiseTaskLists+0x68>)
 800c160:	601a      	str	r2, [r3, #0]
}
 800c162:	bf00      	nop
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20000c4c 	.word	0x20000c4c
 800c170:	200010ac 	.word	0x200010ac
 800c174:	200010c0 	.word	0x200010c0
 800c178:	200010dc 	.word	0x200010dc
 800c17c:	200010f0 	.word	0x200010f0
 800c180:	20001108 	.word	0x20001108
 800c184:	200010d4 	.word	0x200010d4
 800c188:	200010d8 	.word	0x200010d8

0800c18c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c192:	e019      	b.n	800c1c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c194:	f000 fdd6 	bl	800cd44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c198:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <prvCheckTasksWaitingTermination+0x50>)
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fe fd15 	bl	800abd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1aa:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <prvCheckTasksWaitingTermination+0x54>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	4a0b      	ldr	r2, [pc, #44]	; (800c1e0 <prvCheckTasksWaitingTermination+0x54>)
 800c1b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1b4:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <prvCheckTasksWaitingTermination+0x58>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	4a0a      	ldr	r2, [pc, #40]	; (800c1e4 <prvCheckTasksWaitingTermination+0x58>)
 800c1bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1be:	f000 fdf1 	bl	800cda4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f810 	bl	800c1e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1c8:	4b06      	ldr	r3, [pc, #24]	; (800c1e4 <prvCheckTasksWaitingTermination+0x58>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1e1      	bne.n	800c194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	200010f0 	.word	0x200010f0
 800c1e0:	2000111c 	.word	0x2000111c
 800c1e4:	20001104 	.word	0x20001104

0800c1e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3354      	adds	r3, #84	; 0x54
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 febb 	bl	800df70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c200:	2b00      	cmp	r3, #0
 800c202:	d108      	bne.n	800c216 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 ff89 	bl	800d120 <vPortFree>
				vPortFree( pxTCB );
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 ff86 	bl	800d120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c214:	e018      	b.n	800c248 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d103      	bne.n	800c228 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 ff7d 	bl	800d120 <vPortFree>
	}
 800c226:	e00f      	b.n	800c248 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d00a      	beq.n	800c248 <prvDeleteTCB+0x60>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	60fb      	str	r3, [r7, #12]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <prvDeleteTCB+0x5e>
	}
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <prvResetNextTaskUnblockTime+0x38>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c260:	4b0a      	ldr	r3, [pc, #40]	; (800c28c <prvResetNextTaskUnblockTime+0x3c>)
 800c262:	f04f 32ff 	mov.w	r2, #4294967295
 800c266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c268:	e008      	b.n	800c27c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <prvResetNextTaskUnblockTime+0x38>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	4a04      	ldr	r2, [pc, #16]	; (800c28c <prvResetNextTaskUnblockTime+0x3c>)
 800c27a:	6013      	str	r3, [r2, #0]
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	200010d4 	.word	0x200010d4
 800c28c:	2000113c 	.word	0x2000113c

0800c290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c296:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <xTaskGetSchedulerState+0x34>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d102      	bne.n	800c2a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	e008      	b.n	800c2b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2a4:	4b08      	ldr	r3, [pc, #32]	; (800c2c8 <xTaskGetSchedulerState+0x38>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d102      	bne.n	800c2b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	607b      	str	r3, [r7, #4]
 800c2b0:	e001      	b.n	800c2b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2b6:	687b      	ldr	r3, [r7, #4]
	}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	20001128 	.word	0x20001128
 800c2c8:	20001144 	.word	0x20001144

0800c2cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d056      	beq.n	800c390 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2e2:	4b2e      	ldr	r3, [pc, #184]	; (800c39c <xTaskPriorityDisinherit+0xd0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d00a      	beq.n	800c302 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	60fb      	str	r3, [r7, #12]
}
 800c2fe:	bf00      	nop
 800c300:	e7fe      	b.n	800c300 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	60bb      	str	r3, [r7, #8]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c324:	1e5a      	subs	r2, r3, #1
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c332:	429a      	cmp	r2, r3
 800c334:	d02c      	beq.n	800c390 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d128      	bne.n	800c390 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	3304      	adds	r3, #4
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe fc46 	bl	800abd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c360:	4b0f      	ldr	r3, [pc, #60]	; (800c3a0 <xTaskPriorityDisinherit+0xd4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d903      	bls.n	800c370 <xTaskPriorityDisinherit+0xa4>
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36c:	4a0c      	ldr	r2, [pc, #48]	; (800c3a0 <xTaskPriorityDisinherit+0xd4>)
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4a09      	ldr	r2, [pc, #36]	; (800c3a4 <xTaskPriorityDisinherit+0xd8>)
 800c37e:	441a      	add	r2, r3
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	3304      	adds	r3, #4
 800c384:	4619      	mov	r1, r3
 800c386:	4610      	mov	r0, r2
 800c388:	f7fe fbc7 	bl	800ab1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c38c:	2301      	movs	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c390:	697b      	ldr	r3, [r7, #20]
	}
 800c392:	4618      	mov	r0, r3
 800c394:	3718      	adds	r7, #24
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20000c48 	.word	0x20000c48
 800c3a0:	20001124 	.word	0x20001124
 800c3a4:	20000c4c 	.word	0x20000c4c

0800c3a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3b2:	4b21      	ldr	r3, [pc, #132]	; (800c438 <prvAddCurrentTaskToDelayedList+0x90>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b8:	4b20      	ldr	r3, [pc, #128]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3304      	adds	r3, #4
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fc08 	bl	800abd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d10a      	bne.n	800c3e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d007      	beq.n	800c3e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d2:	4b1a      	ldr	r3, [pc, #104]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4819      	ldr	r0, [pc, #100]	; (800c440 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3dc:	f7fe fb9d 	bl	800ab1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3e0:	e026      	b.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3ea:	4b14      	ldr	r3, [pc, #80]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d209      	bcs.n	800c40e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3fa:	4b12      	ldr	r3, [pc, #72]	; (800c444 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3304      	adds	r3, #4
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f7fe fbab 	bl	800ab62 <vListInsert>
}
 800c40c:	e010      	b.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c40e:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvAddCurrentTaskToDelayedList+0x94>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3304      	adds	r3, #4
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7fe fba1 	bl	800ab62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	429a      	cmp	r2, r3
 800c428:	d202      	bcs.n	800c430 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c42a:	4a08      	ldr	r2, [pc, #32]	; (800c44c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	6013      	str	r3, [r2, #0]
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20001120 	.word	0x20001120
 800c43c:	20000c48 	.word	0x20000c48
 800c440:	20001108 	.word	0x20001108
 800c444:	200010d8 	.word	0x200010d8
 800c448:	200010d4 	.word	0x200010d4
 800c44c:	2000113c 	.word	0x2000113c

0800c450 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c45a:	f000 fb07 	bl	800ca6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c45e:	4b1c      	ldr	r3, [pc, #112]	; (800c4d0 <xTimerCreateTimerTask+0x80>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d021      	beq.n	800c4aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c46e:	1d3a      	adds	r2, r7, #4
 800c470:	f107 0108 	add.w	r1, r7, #8
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe fb07 	bl	800aa8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	9202      	str	r2, [sp, #8]
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	2302      	movs	r3, #2
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	2300      	movs	r3, #0
 800c48e:	460a      	mov	r2, r1
 800c490:	4910      	ldr	r1, [pc, #64]	; (800c4d4 <xTimerCreateTimerTask+0x84>)
 800c492:	4811      	ldr	r0, [pc, #68]	; (800c4d8 <xTimerCreateTimerTask+0x88>)
 800c494:	f7ff f8b4 	bl	800b600 <xTaskCreateStatic>
 800c498:	4603      	mov	r3, r0
 800c49a:	4a10      	ldr	r2, [pc, #64]	; (800c4dc <xTimerCreateTimerTask+0x8c>)
 800c49c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <xTimerCreateTimerTask+0x8c>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	613b      	str	r3, [r7, #16]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4c6:	697b      	ldr	r3, [r7, #20]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20001178 	.word	0x20001178
 800c4d4:	0800e83c 	.word	0x0800e83c
 800c4d8:	0800c615 	.word	0x0800c615
 800c4dc:	2000117c 	.word	0x2000117c

0800c4e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08a      	sub	sp, #40	; 0x28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	623b      	str	r3, [r7, #32]
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c50e:	4b1a      	ldr	r3, [pc, #104]	; (800c578 <xTimerGenericCommand+0x98>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d02a      	beq.n	800c56c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	2b05      	cmp	r3, #5
 800c526:	dc18      	bgt.n	800c55a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c528:	f7ff feb2 	bl	800c290 <xTaskGetSchedulerState>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d109      	bne.n	800c546 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <xTimerGenericCommand+0x98>)
 800c534:	6818      	ldr	r0, [r3, #0]
 800c536:	f107 0110 	add.w	r1, r7, #16
 800c53a:	2300      	movs	r3, #0
 800c53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c53e:	f7fe fc77 	bl	800ae30 <xQueueGenericSend>
 800c542:	6278      	str	r0, [r7, #36]	; 0x24
 800c544:	e012      	b.n	800c56c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c546:	4b0c      	ldr	r3, [pc, #48]	; (800c578 <xTimerGenericCommand+0x98>)
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f107 0110 	add.w	r1, r7, #16
 800c54e:	2300      	movs	r3, #0
 800c550:	2200      	movs	r2, #0
 800c552:	f7fe fc6d 	bl	800ae30 <xQueueGenericSend>
 800c556:	6278      	str	r0, [r7, #36]	; 0x24
 800c558:	e008      	b.n	800c56c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c55a:	4b07      	ldr	r3, [pc, #28]	; (800c578 <xTimerGenericCommand+0x98>)
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	f107 0110 	add.w	r1, r7, #16
 800c562:	2300      	movs	r3, #0
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	f7fe fd61 	bl	800b02c <xQueueGenericSendFromISR>
 800c56a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3728      	adds	r7, #40	; 0x28
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20001178 	.word	0x20001178

0800c57c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af02      	add	r7, sp, #8
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c586:	4b22      	ldr	r3, [pc, #136]	; (800c610 <prvProcessExpiredTimer+0x94>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	3304      	adds	r3, #4
 800c594:	4618      	mov	r0, r3
 800c596:	f7fe fb1d 	bl	800abd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d022      	beq.n	800c5ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	699a      	ldr	r2, [r3, #24]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	18d1      	adds	r1, r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	6978      	ldr	r0, [r7, #20]
 800c5b6:	f000 f8d1 	bl	800c75c <prvInsertTimerInActiveList>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01f      	beq.n	800c600 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6978      	ldr	r0, [r7, #20]
 800c5cc:	f7ff ff88 	bl	800c4e0 <xTimerGenericCommand>
 800c5d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d113      	bne.n	800c600 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	60fb      	str	r3, [r7, #12]
}
 800c5ea:	bf00      	nop
 800c5ec:	e7fe      	b.n	800c5ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f4:	f023 0301 	bic.w	r3, r3, #1
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	6978      	ldr	r0, [r7, #20]
 800c606:	4798      	blx	r3
}
 800c608:	bf00      	nop
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20001170 	.word	0x20001170

0800c614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c61c:	f107 0308 	add.w	r3, r7, #8
 800c620:	4618      	mov	r0, r3
 800c622:	f000 f857 	bl	800c6d4 <prvGetNextExpireTime>
 800c626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f803 	bl	800c638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c632:	f000 f8d5 	bl	800c7e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c636:	e7f1      	b.n	800c61c <prvTimerTask+0x8>

0800c638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c642:	f7ff fa39 	bl	800bab8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 f866 	bl	800c71c <prvSampleTimeNow>
 800c650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d130      	bne.n	800c6ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <prvProcessTimerOrBlockTask+0x3c>
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	429a      	cmp	r2, r3
 800c664:	d806      	bhi.n	800c674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c666:	f7ff fa35 	bl	800bad4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c66a:	68f9      	ldr	r1, [r7, #12]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7ff ff85 	bl	800c57c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c672:	e024      	b.n	800c6be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d008      	beq.n	800c68c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c67a:	4b13      	ldr	r3, [pc, #76]	; (800c6c8 <prvProcessTimerOrBlockTask+0x90>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <prvProcessTimerOrBlockTask+0x50>
 800c684:	2301      	movs	r3, #1
 800c686:	e000      	b.n	800c68a <prvProcessTimerOrBlockTask+0x52>
 800c688:	2300      	movs	r3, #0
 800c68a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c68c:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <prvProcessTimerOrBlockTask+0x94>)
 800c68e:	6818      	ldr	r0, [r3, #0]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	f7fe ff7d 	bl	800b598 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c69e:	f7ff fa19 	bl	800bad4 <xTaskResumeAll>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6a8:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <prvProcessTimerOrBlockTask+0x98>)
 800c6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	f3bf 8f6f 	isb	sy
}
 800c6b8:	e001      	b.n	800c6be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6ba:	f7ff fa0b 	bl	800bad4 <xTaskResumeAll>
}
 800c6be:	bf00      	nop
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20001174 	.word	0x20001174
 800c6cc:	20001178 	.word	0x20001178
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6dc:	4b0e      	ldr	r3, [pc, #56]	; (800c718 <prvGetNextExpireTime+0x44>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <prvGetNextExpireTime+0x16>
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	e000      	b.n	800c6ec <prvGetNextExpireTime+0x18>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d105      	bne.n	800c704 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6f8:	4b07      	ldr	r3, [pc, #28]	; (800c718 <prvGetNextExpireTime+0x44>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	e001      	b.n	800c708 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c704:	2300      	movs	r3, #0
 800c706:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c708:	68fb      	ldr	r3, [r7, #12]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20001170 	.word	0x20001170

0800c71c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c724:	f7ff fa74 	bl	800bc10 <xTaskGetTickCount>
 800c728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c72a:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <prvSampleTimeNow+0x3c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	429a      	cmp	r2, r3
 800c732:	d205      	bcs.n	800c740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c734:	f000 f936 	bl	800c9a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e002      	b.n	800c746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c746:	4a04      	ldr	r2, [pc, #16]	; (800c758 <prvSampleTimeNow+0x3c>)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	20001180 	.word	0x20001180

0800c75c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c76a:	2300      	movs	r3, #0
 800c76c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d812      	bhi.n	800c7a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	1ad2      	subs	r2, r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d302      	bcc.n	800c796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c790:	2301      	movs	r3, #1
 800c792:	617b      	str	r3, [r7, #20]
 800c794:	e01b      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c796:	4b10      	ldr	r3, [pc, #64]	; (800c7d8 <prvInsertTimerInActiveList+0x7c>)
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3304      	adds	r3, #4
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fe f9de 	bl	800ab62 <vListInsert>
 800c7a6:	e012      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d206      	bcs.n	800c7be <prvInsertTimerInActiveList+0x62>
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d302      	bcc.n	800c7be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	e007      	b.n	800c7ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <prvInsertTimerInActiveList+0x80>)
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	f7fe f9ca 	bl	800ab62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7ce:	697b      	ldr	r3, [r7, #20]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20001174 	.word	0x20001174
 800c7dc:	20001170 	.word	0x20001170

0800c7e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08e      	sub	sp, #56	; 0x38
 800c7e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7e6:	e0ca      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da18      	bge.n	800c820 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7ee:	1d3b      	adds	r3, r7, #4
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	61fb      	str	r3, [r7, #28]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c816:	6850      	ldr	r0, [r2, #4]
 800c818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c81a:	6892      	ldr	r2, [r2, #8]
 800c81c:	4611      	mov	r1, r2
 800c81e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f2c0 80aa 	blt.w	800c97c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d004      	beq.n	800c83e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	3304      	adds	r3, #4
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fe f9cb 	bl	800abd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c83e:	463b      	mov	r3, r7
 800c840:	4618      	mov	r0, r3
 800c842:	f7ff ff6b 	bl	800c71c <prvSampleTimeNow>
 800c846:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b09      	cmp	r3, #9
 800c84c:	f200 8097 	bhi.w	800c97e <prvProcessReceivedCommands+0x19e>
 800c850:	a201      	add	r2, pc, #4	; (adr r2, 800c858 <prvProcessReceivedCommands+0x78>)
 800c852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c856:	bf00      	nop
 800c858:	0800c881 	.word	0x0800c881
 800c85c:	0800c881 	.word	0x0800c881
 800c860:	0800c881 	.word	0x0800c881
 800c864:	0800c8f5 	.word	0x0800c8f5
 800c868:	0800c909 	.word	0x0800c909
 800c86c:	0800c953 	.word	0x0800c953
 800c870:	0800c881 	.word	0x0800c881
 800c874:	0800c881 	.word	0x0800c881
 800c878:	0800c8f5 	.word	0x0800c8f5
 800c87c:	0800c909 	.word	0x0800c909
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c886:	f043 0301 	orr.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	18d1      	adds	r1, r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a0:	f7ff ff5c 	bl	800c75c <prvInsertTimerInActiveList>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d069      	beq.n	800c97e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d05e      	beq.n	800c97e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	441a      	add	r2, r3
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d2:	f7ff fe05 	bl	800c4e0 <xTimerGenericCommand>
 800c8d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d14f      	bne.n	800c97e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	61bb      	str	r3, [r7, #24]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8fa:	f023 0301 	bic.w	r3, r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c906:	e03a      	b.n	800c97e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10a      	bne.n	800c93e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	617b      	str	r3, [r7, #20]
}
 800c93a:	bf00      	nop
 800c93c:	e7fe      	b.n	800c93c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	699a      	ldr	r2, [r3, #24]
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	18d1      	adds	r1, r2, r3
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c94c:	f7ff ff06 	bl	800c75c <prvInsertTimerInActiveList>
					break;
 800c950:	e015      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c958:	f003 0302 	and.w	r3, r3, #2
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c962:	f000 fbdd 	bl	800d120 <vPortFree>
 800c966:	e00a      	b.n	800c97e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96e:	f023 0301 	bic.w	r3, r3, #1
 800c972:	b2da      	uxtb	r2, r3
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c97a:	e000      	b.n	800c97e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c97c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c97e:	4b08      	ldr	r3, [pc, #32]	; (800c9a0 <prvProcessReceivedCommands+0x1c0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	1d39      	adds	r1, r7, #4
 800c984:	2200      	movs	r2, #0
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe fbec 	bl	800b164 <xQueueReceive>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f47f af2a 	bne.w	800c7e8 <prvProcessReceivedCommands+0x8>
	}
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop
 800c998:	3730      	adds	r7, #48	; 0x30
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20001178 	.word	0x20001178

0800c9a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9aa:	e048      	b.n	800ca3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b6:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fe f905 	bl	800abd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d02e      	beq.n	800ca3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d90e      	bls.n	800ca10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3304      	adds	r3, #4
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7fe f8aa 	bl	800ab62 <vListInsert>
 800ca0e:	e016      	b.n	800ca3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca10:	2300      	movs	r3, #0
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	2300      	movs	r3, #0
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	2100      	movs	r1, #0
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fd60 	bl	800c4e0 <xTimerGenericCommand>
 800ca20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	603b      	str	r3, [r7, #0]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1b1      	bne.n	800c9ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca48:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca4e:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <prvSwitchTimerLists+0xc4>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a04      	ldr	r2, [pc, #16]	; (800ca64 <prvSwitchTimerLists+0xc0>)
 800ca54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca56:	4a04      	ldr	r2, [pc, #16]	; (800ca68 <prvSwitchTimerLists+0xc4>)
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	6013      	str	r3, [r2, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	3718      	adds	r7, #24
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20001170 	.word	0x20001170
 800ca68:	20001174 	.word	0x20001174

0800ca6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca72:	f000 f967 	bl	800cd44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d120      	bne.n	800cac0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca7e:	4814      	ldr	r0, [pc, #80]	; (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca80:	f7fe f81e 	bl	800aac0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca84:	4813      	ldr	r0, [pc, #76]	; (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca86:	f7fe f81b 	bl	800aac0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca8a:	4b13      	ldr	r3, [pc, #76]	; (800cad8 <prvCheckForValidListAndQueue+0x6c>)
 800ca8c:	4a10      	ldr	r2, [pc, #64]	; (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca90:	4b12      	ldr	r3, [pc, #72]	; (800cadc <prvCheckForValidListAndQueue+0x70>)
 800ca92:	4a10      	ldr	r2, [pc, #64]	; (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca96:	2300      	movs	r3, #0
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <prvCheckForValidListAndQueue+0x74>)
 800ca9c:	4a11      	ldr	r2, [pc, #68]	; (800cae4 <prvCheckForValidListAndQueue+0x78>)
 800ca9e:	2110      	movs	r1, #16
 800caa0:	200a      	movs	r0, #10
 800caa2:	f7fe f929 	bl	800acf8 <xQueueGenericCreateStatic>
 800caa6:	4603      	mov	r3, r0
 800caa8:	4a08      	ldr	r2, [pc, #32]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caac:	4b07      	ldr	r3, [pc, #28]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cab4:	4b05      	ldr	r3, [pc, #20]	; (800cacc <prvCheckForValidListAndQueue+0x60>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	490b      	ldr	r1, [pc, #44]	; (800cae8 <prvCheckForValidListAndQueue+0x7c>)
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fd42 	bl	800b544 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cac0:	f000 f970 	bl	800cda4 <vPortExitCritical>
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20001178 	.word	0x20001178
 800cad0:	20001148 	.word	0x20001148
 800cad4:	2000115c 	.word	0x2000115c
 800cad8:	20001170 	.word	0x20001170
 800cadc:	20001174 	.word	0x20001174
 800cae0:	20001224 	.word	0x20001224
 800cae4:	20001184 	.word	0x20001184
 800cae8:	0800e844 	.word	0x0800e844

0800caec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3b04      	subs	r3, #4
 800cafc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f023 0201 	bic.w	r2, r3, #1
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3b04      	subs	r3, #4
 800cb1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb1c:	4a0c      	ldr	r2, [pc, #48]	; (800cb50 <pxPortInitialiseStack+0x64>)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3b14      	subs	r3, #20
 800cb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3b04      	subs	r3, #4
 800cb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f06f 0202 	mvn.w	r2, #2
 800cb3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3b20      	subs	r3, #32
 800cb40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb42:	68fb      	ldr	r3, [r7, #12]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	0800cb55 	.word	0x0800cb55

0800cb54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb5e:	4b12      	ldr	r3, [pc, #72]	; (800cba8 <prvTaskExitError+0x54>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb66:	d00a      	beq.n	800cb7e <prvTaskExitError+0x2a>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	e7fe      	b.n	800cb7c <prvTaskExitError+0x28>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	60bb      	str	r3, [r7, #8]
}
 800cb90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb92:	bf00      	nop
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0fc      	beq.n	800cb94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb9a:	bf00      	nop
 800cb9c:	bf00      	nop
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	200000a8 	.word	0x200000a8
 800cbac:	00000000 	.word	0x00000000

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	20000c48 	.word	0x20000c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	; (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b46      	ldr	r3, [pc, #280]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a46      	ldr	r2, [pc, #280]	; (800cd24 <xPortStartScheduler+0x124>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d10a      	bne.n	800cc26 <xPortStartScheduler+0x26>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc26:	4b3e      	ldr	r3, [pc, #248]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a3f      	ldr	r2, [pc, #252]	; (800cd28 <xPortStartScheduler+0x128>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10a      	bne.n	800cc46 <xPortStartScheduler+0x46>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	60fb      	str	r3, [r7, #12]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc46:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <xPortStartScheduler+0x130>)
 800cc6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc6e:	4b31      	ldr	r3, [pc, #196]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc70:	2207      	movs	r2, #7
 800cc72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc74:	e009      	b.n	800cc8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc76:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4a2d      	ldr	r2, [pc, #180]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc92:	2b80      	cmp	r3, #128	; 0x80
 800cc94:	d0ef      	beq.n	800cc76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc96:	4b27      	ldr	r3, [pc, #156]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f1c3 0307 	rsb	r3, r3, #7
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d00a      	beq.n	800ccb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60bb      	str	r3, [r7, #8]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccca:	4a1a      	ldr	r2, [pc, #104]	; (800cd34 <xPortStartScheduler+0x134>)
 800cccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccd6:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a17      	ldr	r2, [pc, #92]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a14      	ldr	r2, [pc, #80]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccee:	f000 f8dd 	bl	800ceac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccf2:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <xPortStartScheduler+0x13c>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccf8:	f000 f8fc 	bl	800cef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccfc:	4b10      	ldr	r3, [pc, #64]	; (800cd40 <xPortStartScheduler+0x140>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a0f      	ldr	r2, [pc, #60]	; (800cd40 <xPortStartScheduler+0x140>)
 800cd02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd08:	f7ff ff66 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd0c:	f7ff f84a 	bl	800bda4 <vTaskSwitchContext>
	prvTaskExitError();
 800cd10:	f7ff ff20 	bl	800cb54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	e000ed00 	.word	0xe000ed00
 800cd24:	410fc271 	.word	0x410fc271
 800cd28:	410fc270 	.word	0x410fc270
 800cd2c:	e000e400 	.word	0xe000e400
 800cd30:	20001274 	.word	0x20001274
 800cd34:	20001278 	.word	0x20001278
 800cd38:	e000ed20 	.word	0xe000ed20
 800cd3c:	200000a8 	.word	0x200000a8
 800cd40:	e000ef34 	.word	0xe000ef34

0800cd44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	607b      	str	r3, [r7, #4]
}
 800cd5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	4a0d      	ldr	r2, [pc, #52]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d10f      	bne.n	800cd90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd70:	4b0b      	ldr	r3, [pc, #44]	; (800cda0 <vPortEnterCritical+0x5c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	603b      	str	r3, [r7, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <vPortEnterCritical+0x4a>
	}
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	200000a8 	.word	0x200000a8
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <vPortExitCritical+0x24>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	607b      	str	r3, [r7, #4]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	4a09      	ldr	r2, [pc, #36]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d105      	bne.n	800cde6 <vPortExitCritical+0x42>
 800cdda:	2300      	movs	r3, #0
 800cddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	f383 8811 	msr	BASEPRI, r3
}
 800cde4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	200000a8 	.word	0x200000a8
	...

0800ce00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce00:	f3ef 8009 	mrs	r0, PSP
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <pxCurrentTCBConst>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	f01e 0f10 	tst.w	lr, #16
 800ce10:	bf08      	it	eq
 800ce12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	6010      	str	r0, [r2, #0]
 800ce1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce24:	f380 8811 	msr	BASEPRI, r0
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f7fe ffb8 	bl	800bda4 <vTaskSwitchContext>
 800ce34:	f04f 0000 	mov.w	r0, #0
 800ce38:	f380 8811 	msr	BASEPRI, r0
 800ce3c:	bc09      	pop	{r0, r3}
 800ce3e:	6819      	ldr	r1, [r3, #0]
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce46:	f01e 0f10 	tst.w	lr, #16
 800ce4a:	bf08      	it	eq
 800ce4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce50:	f380 8809 	msr	PSP, r0
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w

0800ce60 <pxCurrentTCBConst>:
 800ce60:	20000c48 	.word	0x20000c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop

0800ce68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f7fe fed5 	bl	800bc30 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <xPortSysTickHandler+0x40>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	2300      	movs	r3, #0
 800ce96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f383 8811 	msr	BASEPRI, r3
}
 800ce9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ceb0:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <vPortSetupTimerInterrupt+0x38>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <vPortSetupTimerInterrupt+0x3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <vPortSetupTimerInterrupt+0x40>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	099b      	lsrs	r3, r3, #6
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <vPortSetupTimerInterrupt+0x44>)
 800ceca:	3b01      	subs	r3, #1
 800cecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cece:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ced0:	2207      	movs	r2, #7
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	e000e010 	.word	0xe000e010
 800cee4:	e000e018 	.word	0xe000e018
 800cee8:	20000010 	.word	0x20000010
 800ceec:	10624dd3 	.word	0x10624dd3
 800cef0:	e000e014 	.word	0xe000e014

0800cef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf04 <vPortEnableVFP+0x10>
 800cef8:	6801      	ldr	r1, [r0, #0]
 800cefa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cefe:	6001      	str	r1, [r0, #0]
 800cf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf02:	bf00      	nop
 800cf04:	e000ed88 	.word	0xe000ed88

0800cf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf0e:	f3ef 8305 	mrs	r3, IPSR
 800cf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d914      	bls.n	800cf44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf1a:	4a17      	ldr	r2, [pc, #92]	; (800cf78 <vPortValidateInterruptPriority+0x70>)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf24:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <vPortValidateInterruptPriority+0x74>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	7afa      	ldrb	r2, [r7, #11]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d20a      	bcs.n	800cf44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <vPortValidateInterruptPriority+0x78>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <vPortValidateInterruptPriority+0x7c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d90a      	bls.n	800cf6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	603b      	str	r3, [r7, #0]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <vPortValidateInterruptPriority+0x60>
	}
 800cf6a:	bf00      	nop
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	e000e3f0 	.word	0xe000e3f0
 800cf7c:	20001274 	.word	0x20001274
 800cf80:	e000ed0c 	.word	0xe000ed0c
 800cf84:	20001278 	.word	0x20001278

0800cf88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf94:	f7fe fd90 	bl	800bab8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf98:	4b5b      	ldr	r3, [pc, #364]	; (800d108 <pvPortMalloc+0x180>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfa0:	f000 f920 	bl	800d1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfa4:	4b59      	ldr	r3, [pc, #356]	; (800d10c <pvPortMalloc+0x184>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8093 	bne.w	800d0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01d      	beq.n	800cff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfb8:	2208      	movs	r2, #8
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d014      	beq.n	800cff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	617b      	str	r3, [r7, #20]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d06e      	beq.n	800d0d8 <pvPortMalloc+0x150>
 800cffa:	4b45      	ldr	r3, [pc, #276]	; (800d110 <pvPortMalloc+0x188>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d869      	bhi.n	800d0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d004:	4b43      	ldr	r3, [pc, #268]	; (800d114 <pvPortMalloc+0x18c>)
 800d006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d008:	4b42      	ldr	r3, [pc, #264]	; (800d114 <pvPortMalloc+0x18c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00e:	e004      	b.n	800d01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d903      	bls.n	800d02c <pvPortMalloc+0xa4>
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f1      	bne.n	800d010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d02c:	4b36      	ldr	r3, [pc, #216]	; (800d108 <pvPortMalloc+0x180>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d032:	429a      	cmp	r2, r3
 800d034:	d050      	beq.n	800d0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2208      	movs	r2, #8
 800d03c:	4413      	add	r3, r2
 800d03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2308      	movs	r3, #8
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	429a      	cmp	r2, r3
 800d056:	d91f      	bls.n	800d098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <pvPortMalloc+0xf8>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	613b      	str	r3, [r7, #16]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d092:	69b8      	ldr	r0, [r7, #24]
 800d094:	f000 f908 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <pvPortMalloc+0x188>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	4a1b      	ldr	r2, [pc, #108]	; (800d110 <pvPortMalloc+0x188>)
 800d0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0a6:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <pvPortMalloc+0x188>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b1b      	ldr	r3, [pc, #108]	; (800d118 <pvPortMalloc+0x190>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d203      	bcs.n	800d0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0b2:	4b17      	ldr	r3, [pc, #92]	; (800d110 <pvPortMalloc+0x188>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a18      	ldr	r2, [pc, #96]	; (800d118 <pvPortMalloc+0x190>)
 800d0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <pvPortMalloc+0x184>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <pvPortMalloc+0x194>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	4a11      	ldr	r2, [pc, #68]	; (800d11c <pvPortMalloc+0x194>)
 800d0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0d8:	f7fe fcfc 	bl	800bad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <pvPortMalloc+0x174>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	60fb      	str	r3, [r7, #12]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <pvPortMalloc+0x172>
	return pvReturn;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3728      	adds	r7, #40	; 0x28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20004e84 	.word	0x20004e84
 800d10c:	20004e98 	.word	0x20004e98
 800d110:	20004e88 	.word	0x20004e88
 800d114:	20004e7c 	.word	0x20004e7c
 800d118:	20004e8c 	.word	0x20004e8c
 800d11c:	20004e90 	.word	0x20004e90

0800d120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d04d      	beq.n	800d1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d132:	2308      	movs	r3, #8
 800d134:	425b      	negs	r3, r3
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	4413      	add	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <vPortFree+0xb8>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4013      	ands	r3, r2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <vPortFree+0x44>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60fb      	str	r3, [r7, #12]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <vPortFree+0x62>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60bb      	str	r3, [r7, #8]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <vPortFree+0xb8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4013      	ands	r3, r2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01e      	beq.n	800d1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d11a      	bne.n	800d1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b0e      	ldr	r3, [pc, #56]	; (800d1d8 <vPortFree+0xb8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	43db      	mvns	r3, r3
 800d1a2:	401a      	ands	r2, r3
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1a8:	f7fe fc86 	bl	800bab8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <vPortFree+0xbc>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <vPortFree+0xbc>)
 800d1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ba:	6938      	ldr	r0, [r7, #16]
 800d1bc:	f000 f874 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <vPortFree+0xc0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	4a06      	ldr	r2, [pc, #24]	; (800d1e0 <vPortFree+0xc0>)
 800d1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1ca:	f7fe fc83 	bl	800bad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ce:	bf00      	nop
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	20004e98 	.word	0x20004e98
 800d1dc:	20004e88 	.word	0x20004e88
 800d1e0:	20004e94 	.word	0x20004e94

0800d1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <prvHeapInit+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00c      	beq.n	800d218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3307      	adds	r3, #7
 800d202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0307 	bic.w	r3, r3, #7
 800d20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <prvHeapInit+0xac>)
 800d214:	4413      	add	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d21c:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <prvHeapInit+0xb0>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <prvHeapInit+0xb0>)
 800d224:	2200      	movs	r2, #0
 800d226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	4413      	add	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d230:	2208      	movs	r2, #8
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4a15      	ldr	r2, [pc, #84]	; (800d298 <prvHeapInit+0xb4>)
 800d244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <prvHeapInit+0xb4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <prvHeapInit+0xb4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	1ad2      	subs	r2, r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvHeapInit+0xb4>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <prvHeapInit+0xb8>)
 800d272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <prvHeapInit+0xbc>)
 800d27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <prvHeapInit+0xc0>)
 800d27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	2000127c 	.word	0x2000127c
 800d294:	20004e7c 	.word	0x20004e7c
 800d298:	20004e84 	.word	0x20004e84
 800d29c:	20004e8c 	.word	0x20004e8c
 800d2a0:	20004e88 	.word	0x20004e88
 800d2a4:	20004e98 	.word	0x20004e98

0800d2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <prvInsertBlockIntoFreeList+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e002      	b.n	800d2bc <prvInsertBlockIntoFreeList+0x14>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d8f7      	bhi.n	800d2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d118      	bne.n	800d330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d00d      	beq.n	800d326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e008      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	e003      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d002      	beq.n	800d346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	20004e7c 	.word	0x20004e7c
 800d358:	20004e84 	.word	0x20004e84

0800d35c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d360:	2200      	movs	r2, #0
 800d362:	4912      	ldr	r1, [pc, #72]	; (800d3ac <MX_USB_DEVICE_Init+0x50>)
 800d364:	4812      	ldr	r0, [pc, #72]	; (800d3b0 <MX_USB_DEVICE_Init+0x54>)
 800d366:	f7fb ff49 	bl	80091fc <USBD_Init>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d370:	f7f3 fe7a 	bl	8001068 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d374:	490f      	ldr	r1, [pc, #60]	; (800d3b4 <MX_USB_DEVICE_Init+0x58>)
 800d376:	480e      	ldr	r0, [pc, #56]	; (800d3b0 <MX_USB_DEVICE_Init+0x54>)
 800d378:	f7fb ff70 	bl	800925c <USBD_RegisterClass>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d382:	f7f3 fe71 	bl	8001068 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d386:	490c      	ldr	r1, [pc, #48]	; (800d3b8 <MX_USB_DEVICE_Init+0x5c>)
 800d388:	4809      	ldr	r0, [pc, #36]	; (800d3b0 <MX_USB_DEVICE_Init+0x54>)
 800d38a:	f7fb fe61 	bl	8009050 <USBD_CDC_RegisterInterface>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d394:	f7f3 fe68 	bl	8001068 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d398:	4805      	ldr	r0, [pc, #20]	; (800d3b0 <MX_USB_DEVICE_Init+0x54>)
 800d39a:	f7fb ff95 	bl	80092c8 <USBD_Start>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d3a4:	f7f3 fe60 	bl	8001068 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d3a8:	bf00      	nop
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	200000c0 	.word	0x200000c0
 800d3b0:	20004e9c 	.word	0x20004e9c
 800d3b4:	20000028 	.word	0x20000028
 800d3b8:	200000ac 	.word	0x200000ac

0800d3bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	4905      	ldr	r1, [pc, #20]	; (800d3d8 <CDC_Init_FS+0x1c>)
 800d3c4:	4805      	ldr	r0, [pc, #20]	; (800d3dc <CDC_Init_FS+0x20>)
 800d3c6:	f7fb fe5d 	bl	8009084 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d3ca:	4905      	ldr	r1, [pc, #20]	; (800d3e0 <CDC_Init_FS+0x24>)
 800d3cc:	4803      	ldr	r0, [pc, #12]	; (800d3dc <CDC_Init_FS+0x20>)
 800d3ce:	f7fb fe7b 	bl	80090c8 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800d3d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	20005978 	.word	0x20005978
 800d3dc:	20004e9c 	.word	0x20004e9c
 800d3e0:	20005178 	.word	0x20005178

0800d3e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800d3e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	6039      	str	r1, [r7, #0]
 800d3fe:	71fb      	strb	r3, [r7, #7]
 800d400:	4613      	mov	r3, r2
 800d402:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800d404:	79fb      	ldrb	r3, [r7, #7]
 800d406:	2b23      	cmp	r3, #35	; 0x23
 800d408:	d84a      	bhi.n	800d4a0 <CDC_Control_FS+0xac>
 800d40a:	a201      	add	r2, pc, #4	; (adr r2, 800d410 <CDC_Control_FS+0x1c>)
 800d40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d410:	0800d4a1 	.word	0x0800d4a1
 800d414:	0800d4a1 	.word	0x0800d4a1
 800d418:	0800d4a1 	.word	0x0800d4a1
 800d41c:	0800d4a1 	.word	0x0800d4a1
 800d420:	0800d4a1 	.word	0x0800d4a1
 800d424:	0800d4a1 	.word	0x0800d4a1
 800d428:	0800d4a1 	.word	0x0800d4a1
 800d42c:	0800d4a1 	.word	0x0800d4a1
 800d430:	0800d4a1 	.word	0x0800d4a1
 800d434:	0800d4a1 	.word	0x0800d4a1
 800d438:	0800d4a1 	.word	0x0800d4a1
 800d43c:	0800d4a1 	.word	0x0800d4a1
 800d440:	0800d4a1 	.word	0x0800d4a1
 800d444:	0800d4a1 	.word	0x0800d4a1
 800d448:	0800d4a1 	.word	0x0800d4a1
 800d44c:	0800d4a1 	.word	0x0800d4a1
 800d450:	0800d4a1 	.word	0x0800d4a1
 800d454:	0800d4a1 	.word	0x0800d4a1
 800d458:	0800d4a1 	.word	0x0800d4a1
 800d45c:	0800d4a1 	.word	0x0800d4a1
 800d460:	0800d4a1 	.word	0x0800d4a1
 800d464:	0800d4a1 	.word	0x0800d4a1
 800d468:	0800d4a1 	.word	0x0800d4a1
 800d46c:	0800d4a1 	.word	0x0800d4a1
 800d470:	0800d4a1 	.word	0x0800d4a1
 800d474:	0800d4a1 	.word	0x0800d4a1
 800d478:	0800d4a1 	.word	0x0800d4a1
 800d47c:	0800d4a1 	.word	0x0800d4a1
 800d480:	0800d4a1 	.word	0x0800d4a1
 800d484:	0800d4a1 	.word	0x0800d4a1
 800d488:	0800d4a1 	.word	0x0800d4a1
 800d48c:	0800d4a1 	.word	0x0800d4a1
 800d490:	0800d4a1 	.word	0x0800d4a1
 800d494:	0800d4a1 	.word	0x0800d4a1
 800d498:	0800d4a1 	.word	0x0800d4a1
 800d49c:	0800d4a1 	.word	0x0800d4a1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800d4a0:	bf00      	nop
	}

	return (USBD_OK);
 800d4a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d4ba:	6879      	ldr	r1, [r7, #4]
 800d4bc:	480f      	ldr	r0, [pc, #60]	; (800d4fc <CDC_Receive_FS+0x4c>)
 800d4be:	f7fb fe03 	bl	80090c8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d4c2:	480e      	ldr	r0, [pc, #56]	; (800d4fc <CDC_Receive_FS+0x4c>)
 800d4c4:	f7fb fe64 	bl	8009190 <USBD_CDC_ReceivePacket>

	memset(USB_Buff, '\0', 64);  // clear the buffer
 800d4c8:	2240      	movs	r2, #64	; 0x40
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	480c      	ldr	r0, [pc, #48]	; (800d500 <CDC_Receive_FS+0x50>)
 800d4ce:	f000 fca5 	bl	800de1c <memset>
	uint8_t len = (uint8_t) *Len;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	73fb      	strb	r3, [r7, #15]
	memcpy(USB_Buff, Buf, len);  // copy the data to the buffer
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	6879      	ldr	r1, [r7, #4]
 800d4de:	4808      	ldr	r0, [pc, #32]	; (800d500 <CDC_Receive_FS+0x50>)
 800d4e0:	f000 fc8e 	bl	800de00 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 fc96 	bl	800de1c <memset>

	return (USBD_OK);
 800d4f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20004e9c 	.word	0x20004e9c
 800d500:	200003f0 	.word	0x200003f0

0800d504 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 800d514:	4b0d      	ldr	r3, [pc, #52]	; (800d54c <CDC_Transmit_FS+0x48>)
 800d516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d51a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800d526:	2301      	movs	r3, #1
 800d528:	e00b      	b.n	800d542 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d52a:	887b      	ldrh	r3, [r7, #2]
 800d52c:	461a      	mov	r2, r3
 800d52e:	6879      	ldr	r1, [r7, #4]
 800d530:	4806      	ldr	r0, [pc, #24]	; (800d54c <CDC_Transmit_FS+0x48>)
 800d532:	f7fb fda7 	bl	8009084 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d536:	4805      	ldr	r0, [pc, #20]	; (800d54c <CDC_Transmit_FS+0x48>)
 800d538:	f7fb fde4 	bl	8009104 <USBD_CDC_TransmitPacket>
 800d53c:	4603      	mov	r3, r0
 800d53e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d540:	7bfb      	ldrb	r3, [r7, #15]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	20004e9c 	.word	0x20004e9c

0800d550 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	4613      	mov	r3, r2
 800d55c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d566:	4618      	mov	r0, r3
 800d568:	371c      	adds	r7, #28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
	...

0800d574 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	4603      	mov	r3, r0
 800d57c:	6039      	str	r1, [r7, #0]
 800d57e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	2212      	movs	r2, #18
 800d584:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d586:	4b03      	ldr	r3, [pc, #12]	; (800d594 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d588:	4618      	mov	r0, r3
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr
 800d594:	200000dc 	.word	0x200000dc

0800d598 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	4603      	mov	r3, r0
 800d5a0:	6039      	str	r1, [r7, #0]
 800d5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2204      	movs	r2, #4
 800d5a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5aa:	4b03      	ldr	r3, [pc, #12]	; (800d5b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr
 800d5b8:	200000f0 	.word	0x200000f0

0800d5bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	6039      	str	r1, [r7, #0]
 800d5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5c8:	79fb      	ldrb	r3, [r7, #7]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d105      	bne.n	800d5da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	4907      	ldr	r1, [pc, #28]	; (800d5f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5d2:	4808      	ldr	r0, [pc, #32]	; (800d5f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5d4:	f7fd f824 	bl	800a620 <USBD_GetString>
 800d5d8:	e004      	b.n	800d5e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	4904      	ldr	r1, [pc, #16]	; (800d5f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5de:	4805      	ldr	r0, [pc, #20]	; (800d5f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5e0:	f7fd f81e 	bl	800a620 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5e4:	4b02      	ldr	r3, [pc, #8]	; (800d5f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20006178 	.word	0x20006178
 800d5f4:	0800e84c 	.word	0x0800e84c

0800d5f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	4904      	ldr	r1, [pc, #16]	; (800d618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d608:	4804      	ldr	r0, [pc, #16]	; (800d61c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d60a:	f7fd f809 	bl	800a620 <USBD_GetString>
  return USBD_StrDesc;
 800d60e:	4b02      	ldr	r3, [pc, #8]	; (800d618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	20006178 	.word	0x20006178
 800d61c:	0800e858 	.word	0x0800e858

0800d620 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	4603      	mov	r3, r0
 800d628:	6039      	str	r1, [r7, #0]
 800d62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	221a      	movs	r2, #26
 800d630:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d632:	f000 f843 	bl	800d6bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d636:	4b02      	ldr	r3, [pc, #8]	; (800d640 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	200000f4 	.word	0x200000f4

0800d644 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	6039      	str	r1, [r7, #0]
 800d64e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d650:	79fb      	ldrb	r3, [r7, #7]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d105      	bne.n	800d662 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	4907      	ldr	r1, [pc, #28]	; (800d678 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d65a:	4808      	ldr	r0, [pc, #32]	; (800d67c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d65c:	f7fc ffe0 	bl	800a620 <USBD_GetString>
 800d660:	e004      	b.n	800d66c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	4904      	ldr	r1, [pc, #16]	; (800d678 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d666:	4805      	ldr	r0, [pc, #20]	; (800d67c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d668:	f7fc ffda 	bl	800a620 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d66c:	4b02      	ldr	r3, [pc, #8]	; (800d678 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20006178 	.word	0x20006178
 800d67c:	0800e86c 	.word	0x0800e86c

0800d680 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	6039      	str	r1, [r7, #0]
 800d68a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d68c:	79fb      	ldrb	r3, [r7, #7]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d105      	bne.n	800d69e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	4907      	ldr	r1, [pc, #28]	; (800d6b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d696:	4808      	ldr	r0, [pc, #32]	; (800d6b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d698:	f7fc ffc2 	bl	800a620 <USBD_GetString>
 800d69c:	e004      	b.n	800d6a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	4904      	ldr	r1, [pc, #16]	; (800d6b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6a2:	4805      	ldr	r0, [pc, #20]	; (800d6b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6a4:	f7fc ffbc 	bl	800a620 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6a8:	4b02      	ldr	r3, [pc, #8]	; (800d6b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20006178 	.word	0x20006178
 800d6b8:	0800e878 	.word	0x0800e878

0800d6bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d6c2:	4b0f      	ldr	r3, [pc, #60]	; (800d700 <Get_SerialNum+0x44>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	; (800d704 <Get_SerialNum+0x48>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d6ce:	4b0e      	ldr	r3, [pc, #56]	; (800d708 <Get_SerialNum+0x4c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4413      	add	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d009      	beq.n	800d6f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d6e2:	2208      	movs	r2, #8
 800d6e4:	4909      	ldr	r1, [pc, #36]	; (800d70c <Get_SerialNum+0x50>)
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f000 f814 	bl	800d714 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	4908      	ldr	r1, [pc, #32]	; (800d710 <Get_SerialNum+0x54>)
 800d6f0:	68b8      	ldr	r0, [r7, #8]
 800d6f2:	f000 f80f 	bl	800d714 <IntToUnicode>
  }
}
 800d6f6:	bf00      	nop
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	1fff7a10 	.word	0x1fff7a10
 800d704:	1fff7a14 	.word	0x1fff7a14
 800d708:	1fff7a18 	.word	0x1fff7a18
 800d70c:	200000f6 	.word	0x200000f6
 800d710:	20000106 	.word	0x20000106

0800d714 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	4613      	mov	r3, r2
 800d720:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d726:	2300      	movs	r3, #0
 800d728:	75fb      	strb	r3, [r7, #23]
 800d72a:	e027      	b.n	800d77c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	0f1b      	lsrs	r3, r3, #28
 800d730:	2b09      	cmp	r3, #9
 800d732:	d80b      	bhi.n	800d74c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	0f1b      	lsrs	r3, r3, #28
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	4619      	mov	r1, r3
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	440b      	add	r3, r1
 800d744:	3230      	adds	r2, #48	; 0x30
 800d746:	b2d2      	uxtb	r2, r2
 800d748:	701a      	strb	r2, [r3, #0]
 800d74a:	e00a      	b.n	800d762 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	0f1b      	lsrs	r3, r3, #28
 800d750:	b2da      	uxtb	r2, r3
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	4619      	mov	r1, r3
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	440b      	add	r3, r1
 800d75c:	3237      	adds	r2, #55	; 0x37
 800d75e:	b2d2      	uxtb	r2, r2
 800d760:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	011b      	lsls	r3, r3, #4
 800d766:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d768:	7dfb      	ldrb	r3, [r7, #23]
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	3301      	adds	r3, #1
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	4413      	add	r3, r2
 800d772:	2200      	movs	r2, #0
 800d774:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	3301      	adds	r3, #1
 800d77a:	75fb      	strb	r3, [r7, #23]
 800d77c:	7dfa      	ldrb	r2, [r7, #23]
 800d77e:	79fb      	ldrb	r3, [r7, #7]
 800d780:	429a      	cmp	r2, r3
 800d782:	d3d3      	bcc.n	800d72c <IntToUnicode+0x18>
  }
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop
 800d788:	371c      	adds	r7, #28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
	...

0800d794 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08a      	sub	sp, #40	; 0x28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d79c:	f107 0314 	add.w	r3, r7, #20
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	601a      	str	r2, [r3, #0]
 800d7a4:	605a      	str	r2, [r3, #4]
 800d7a6:	609a      	str	r2, [r3, #8]
 800d7a8:	60da      	str	r2, [r3, #12]
 800d7aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7b4:	d13a      	bne.n	800d82c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	613b      	str	r3, [r7, #16]
 800d7ba:	4b1e      	ldr	r3, [pc, #120]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7be:	4a1d      	ldr	r2, [pc, #116]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d7c0:	f043 0301 	orr.w	r3, r3, #1
 800d7c4:	6313      	str	r3, [r2, #48]	; 0x30
 800d7c6:	4b1b      	ldr	r3, [pc, #108]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	613b      	str	r3, [r7, #16]
 800d7d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d7d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d7d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7d8:	2302      	movs	r3, #2
 800d7da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d7e4:	230a      	movs	r3, #10
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7e8:	f107 0314 	add.w	r3, r7, #20
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	4812      	ldr	r0, [pc, #72]	; (800d838 <HAL_PCD_MspInit+0xa4>)
 800d7f0:	f7f6 f8a0 	bl	8003934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7f4:	4b0f      	ldr	r3, [pc, #60]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f8:	4a0e      	ldr	r2, [pc, #56]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7fe:	6353      	str	r3, [r2, #52]	; 0x34
 800d800:	2300      	movs	r3, #0
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	4b0b      	ldr	r3, [pc, #44]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d808:	4a0a      	ldr	r2, [pc, #40]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d80a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d80e:	6453      	str	r3, [r2, #68]	; 0x44
 800d810:	4b08      	ldr	r3, [pc, #32]	; (800d834 <HAL_PCD_MspInit+0xa0>)
 800d812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d818:	60fb      	str	r3, [r7, #12]
 800d81a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d81c:	2200      	movs	r2, #0
 800d81e:	2105      	movs	r1, #5
 800d820:	2043      	movs	r0, #67	; 0x43
 800d822:	f7f5 fd57 	bl	80032d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d826:	2043      	movs	r0, #67	; 0x43
 800d828:	f7f5 fd70 	bl	800330c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d82c:	bf00      	nop
 800d82e:	3728      	adds	r7, #40	; 0x28
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	40023800 	.word	0x40023800
 800d838:	40020000 	.word	0x40020000

0800d83c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d850:	4619      	mov	r1, r3
 800d852:	4610      	mov	r0, r2
 800d854:	f7fb fd85 	bl	8009362 <USBD_LL_SetupStage>
}
 800d858:	bf00      	nop
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d872:	78fa      	ldrb	r2, [r7, #3]
 800d874:	6879      	ldr	r1, [r7, #4]
 800d876:	4613      	mov	r3, r2
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	4413      	add	r3, r2
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	440b      	add	r3, r1
 800d880:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	78fb      	ldrb	r3, [r7, #3]
 800d888:	4619      	mov	r1, r3
 800d88a:	f7fb fdbf 	bl	800940c <USBD_LL_DataOutStage>
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b082      	sub	sp, #8
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	460b      	mov	r3, r1
 800d8a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d8a8:	78fa      	ldrb	r2, [r7, #3]
 800d8aa:	6879      	ldr	r1, [r7, #4]
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	4413      	add	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	440b      	add	r3, r1
 800d8b6:	334c      	adds	r3, #76	; 0x4c
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	78fb      	ldrb	r3, [r7, #3]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	f7fb fe58 	bl	8009572 <USBD_LL_DataInStage>
}
 800d8c2:	bf00      	nop
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fb ff8c 	bl	80097f6 <USBD_LL_SOF>
}
 800d8de:	bf00      	nop
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b084      	sub	sp, #16
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	d001      	beq.n	800d8fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d8fa:	f7f3 fbb5 	bl	8001068 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d904:	7bfa      	ldrb	r2, [r7, #15]
 800d906:	4611      	mov	r1, r2
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fb ff36 	bl	800977a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d914:	4618      	mov	r0, r3
 800d916:	f7fb fede 	bl	80096d6 <USBD_LL_Reset>
}
 800d91a:	bf00      	nop
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
	...

0800d924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d932:	4618      	mov	r0, r3
 800d934:	f7fb ff31 	bl	800979a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	6812      	ldr	r2, [r2, #0]
 800d946:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d94a:	f043 0301 	orr.w	r3, r3, #1
 800d94e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a1b      	ldr	r3, [r3, #32]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d958:	4b04      	ldr	r3, [pc, #16]	; (800d96c <HAL_PCD_SuspendCallback+0x48>)
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	4a03      	ldr	r2, [pc, #12]	; (800d96c <HAL_PCD_SuspendCallback+0x48>)
 800d95e:	f043 0306 	orr.w	r3, r3, #6
 800d962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	e000ed00 	.word	0xe000ed00

0800d970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fb ff21 	bl	80097c6 <USBD_LL_Resume>
}
 800d984:	bf00      	nop
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d99e:	78fa      	ldrb	r2, [r7, #3]
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fb ff79 	bl	800989a <USBD_LL_IsoOUTIncomplete>
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9c2:	78fa      	ldrb	r2, [r7, #3]
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fb ff35 	bl	8009836 <USBD_LL_IsoINIncomplete>
}
 800d9cc:	bf00      	nop
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fb ff8b 	bl	80098fe <USBD_LL_DevConnected>
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fb ff88 	bl	8009914 <USBD_LL_DevDisconnected>
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d13c      	bne.n	800da96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800da1c:	4a20      	ldr	r2, [pc, #128]	; (800daa0 <USBD_LL_Init+0x94>)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a1e      	ldr	r2, [pc, #120]	; (800daa0 <USBD_LL_Init+0x94>)
 800da28:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da2c:	4b1c      	ldr	r3, [pc, #112]	; (800daa0 <USBD_LL_Init+0x94>)
 800da2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800da32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800da34:	4b1a      	ldr	r3, [pc, #104]	; (800daa0 <USBD_LL_Init+0x94>)
 800da36:	2204      	movs	r2, #4
 800da38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800da3a:	4b19      	ldr	r3, [pc, #100]	; (800daa0 <USBD_LL_Init+0x94>)
 800da3c:	2202      	movs	r2, #2
 800da3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da40:	4b17      	ldr	r3, [pc, #92]	; (800daa0 <USBD_LL_Init+0x94>)
 800da42:	2200      	movs	r2, #0
 800da44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da46:	4b16      	ldr	r3, [pc, #88]	; (800daa0 <USBD_LL_Init+0x94>)
 800da48:	2202      	movs	r2, #2
 800da4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da4c:	4b14      	ldr	r3, [pc, #80]	; (800daa0 <USBD_LL_Init+0x94>)
 800da4e:	2200      	movs	r2, #0
 800da50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da52:	4b13      	ldr	r3, [pc, #76]	; (800daa0 <USBD_LL_Init+0x94>)
 800da54:	2200      	movs	r2, #0
 800da56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da58:	4b11      	ldr	r3, [pc, #68]	; (800daa0 <USBD_LL_Init+0x94>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da5e:	4b10      	ldr	r3, [pc, #64]	; (800daa0 <USBD_LL_Init+0x94>)
 800da60:	2200      	movs	r2, #0
 800da62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da64:	4b0e      	ldr	r3, [pc, #56]	; (800daa0 <USBD_LL_Init+0x94>)
 800da66:	2200      	movs	r2, #0
 800da68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da6a:	480d      	ldr	r0, [pc, #52]	; (800daa0 <USBD_LL_Init+0x94>)
 800da6c:	f7f6 f8ff 	bl	8003c6e <HAL_PCD_Init>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da76:	f7f3 faf7 	bl	8001068 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da7a:	2180      	movs	r1, #128	; 0x80
 800da7c:	4808      	ldr	r0, [pc, #32]	; (800daa0 <USBD_LL_Init+0x94>)
 800da7e:	f7f7 fb56 	bl	800512e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da82:	2240      	movs	r2, #64	; 0x40
 800da84:	2100      	movs	r1, #0
 800da86:	4806      	ldr	r0, [pc, #24]	; (800daa0 <USBD_LL_Init+0x94>)
 800da88:	f7f7 fb0a 	bl	80050a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da8c:	2280      	movs	r2, #128	; 0x80
 800da8e:	2101      	movs	r1, #1
 800da90:	4803      	ldr	r0, [pc, #12]	; (800daa0 <USBD_LL_Init+0x94>)
 800da92:	f7f7 fb05 	bl	80050a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20006378 	.word	0x20006378

0800daa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800daba:	4618      	mov	r0, r3
 800dabc:	f7f6 f9f4 	bl	8003ea8 <HAL_PCD_Start>
 800dac0:	4603      	mov	r3, r0
 800dac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 f942 	bl	800dd50 <USBD_Get_USB_Status>
 800dacc:	4603      	mov	r3, r0
 800dace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	4608      	mov	r0, r1
 800dae4:	4611      	mov	r1, r2
 800dae6:	461a      	mov	r2, r3
 800dae8:	4603      	mov	r3, r0
 800daea:	70fb      	strb	r3, [r7, #3]
 800daec:	460b      	mov	r3, r1
 800daee:	70bb      	strb	r3, [r7, #2]
 800daf0:	4613      	mov	r3, r2
 800daf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db02:	78bb      	ldrb	r3, [r7, #2]
 800db04:	883a      	ldrh	r2, [r7, #0]
 800db06:	78f9      	ldrb	r1, [r7, #3]
 800db08:	f7f6 fec5 	bl	8004896 <HAL_PCD_EP_Open>
 800db0c:	4603      	mov	r3, r0
 800db0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db10:	7bfb      	ldrb	r3, [r7, #15]
 800db12:	4618      	mov	r0, r3
 800db14:	f000 f91c 	bl	800dd50 <USBD_Get_USB_Status>
 800db18:	4603      	mov	r3, r0
 800db1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b084      	sub	sp, #16
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	460b      	mov	r3, r1
 800db30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db32:	2300      	movs	r3, #0
 800db34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db40:	78fa      	ldrb	r2, [r7, #3]
 800db42:	4611      	mov	r1, r2
 800db44:	4618      	mov	r0, r3
 800db46:	f7f6 ff0e 	bl	8004966 <HAL_PCD_EP_Close>
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
 800db50:	4618      	mov	r0, r3
 800db52:	f000 f8fd 	bl	800dd50 <USBD_Get_USB_Status>
 800db56:	4603      	mov	r3, r0
 800db58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	460b      	mov	r3, r1
 800db6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db7e:	78fa      	ldrb	r2, [r7, #3]
 800db80:	4611      	mov	r1, r2
 800db82:	4618      	mov	r0, r3
 800db84:	f7f6 ffe6 	bl	8004b54 <HAL_PCD_EP_SetStall>
 800db88:	4603      	mov	r3, r0
 800db8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 f8de 	bl	800dd50 <USBD_Get_USB_Status>
 800db94:	4603      	mov	r3, r0
 800db96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db98:	7bbb      	ldrb	r3, [r7, #14]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b084      	sub	sp, #16
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbbc:	78fa      	ldrb	r2, [r7, #3]
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7f7 f82b 	bl	8004c1c <HAL_PCD_EP_ClrStall>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 f8bf 	bl	800dd50 <USBD_Get_USB_Status>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	460b      	mov	r3, r1
 800dbea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	da0b      	bge.n	800dc14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbfc:	78fb      	ldrb	r3, [r7, #3]
 800dbfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc02:	68f9      	ldr	r1, [r7, #12]
 800dc04:	4613      	mov	r3, r2
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	4413      	add	r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	440b      	add	r3, r1
 800dc0e:	333e      	adds	r3, #62	; 0x3e
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	e00b      	b.n	800dc2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc1a:	68f9      	ldr	r1, [r7, #12]
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	00db      	lsls	r3, r3, #3
 800dc20:	4413      	add	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	440b      	add	r3, r1
 800dc26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dc2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc52:	78fa      	ldrb	r2, [r7, #3]
 800dc54:	4611      	mov	r1, r2
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7f6 fdf8 	bl	800484c <HAL_PCD_SetAddress>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 f874 	bl	800dd50 <USBD_Get_USB_Status>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b086      	sub	sp, #24
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	60f8      	str	r0, [r7, #12]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	603b      	str	r3, [r7, #0]
 800dc82:	460b      	mov	r3, r1
 800dc84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc94:	7af9      	ldrb	r1, [r7, #11]
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	f7f6 ff11 	bl	8004ac0 <HAL_PCD_EP_Transmit>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dca2:	7dfb      	ldrb	r3, [r7, #23]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f000 f853 	bl	800dd50 <USBD_Get_USB_Status>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcae:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	607a      	str	r2, [r7, #4]
 800dcc2:	603b      	str	r3, [r7, #0]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcd6:	7af9      	ldrb	r1, [r7, #11]
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	f7f6 fe8d 	bl	80049fa <HAL_PCD_EP_Receive>
 800dce0:	4603      	mov	r3, r0
 800dce2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dce4:	7dfb      	ldrb	r3, [r7, #23]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 f832 	bl	800dd50 <USBD_Get_USB_Status>
 800dcec:	4603      	mov	r3, r0
 800dcee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3718      	adds	r7, #24
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b082      	sub	sp, #8
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	460b      	mov	r3, r1
 800dd04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd0c:	78fa      	ldrb	r2, [r7, #3]
 800dd0e:	4611      	mov	r1, r2
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7f6 febd 	bl	8004a90 <HAL_PCD_EP_GetRxCount>
 800dd16:	4603      	mov	r3, r0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd28:	4b03      	ldr	r3, [pc, #12]	; (800dd38 <USBD_static_malloc+0x18>)
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	370c      	adds	r7, #12
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	20006884 	.word	0x20006884

0800dd3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]

}
 800dd44:	bf00      	nop
 800dd46:	370c      	adds	r7, #12
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd5e:	79fb      	ldrb	r3, [r7, #7]
 800dd60:	2b03      	cmp	r3, #3
 800dd62:	d817      	bhi.n	800dd94 <USBD_Get_USB_Status+0x44>
 800dd64:	a201      	add	r2, pc, #4	; (adr r2, 800dd6c <USBD_Get_USB_Status+0x1c>)
 800dd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd6a:	bf00      	nop
 800dd6c:	0800dd7d 	.word	0x0800dd7d
 800dd70:	0800dd83 	.word	0x0800dd83
 800dd74:	0800dd89 	.word	0x0800dd89
 800dd78:	0800dd8f 	.word	0x0800dd8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd80:	e00b      	b.n	800dd9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd82:	2303      	movs	r3, #3
 800dd84:	73fb      	strb	r3, [r7, #15]
    break;
 800dd86:	e008      	b.n	800dd9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd8c:	e005      	b.n	800dd9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd8e:	2303      	movs	r3, #3
 800dd90:	73fb      	strb	r3, [r7, #15]
    break;
 800dd92:	e002      	b.n	800dd9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd94:	2303      	movs	r3, #3
 800dd96:	73fb      	strb	r3, [r7, #15]
    break;
 800dd98:	bf00      	nop
  }
  return usb_status;
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <__errno>:
 800dda8:	4b01      	ldr	r3, [pc, #4]	; (800ddb0 <__errno+0x8>)
 800ddaa:	6818      	ldr	r0, [r3, #0]
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	20000110 	.word	0x20000110

0800ddb4 <__libc_init_array>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4d0d      	ldr	r5, [pc, #52]	; (800ddec <__libc_init_array+0x38>)
 800ddb8:	4c0d      	ldr	r4, [pc, #52]	; (800ddf0 <__libc_init_array+0x3c>)
 800ddba:	1b64      	subs	r4, r4, r5
 800ddbc:	10a4      	asrs	r4, r4, #2
 800ddbe:	2600      	movs	r6, #0
 800ddc0:	42a6      	cmp	r6, r4
 800ddc2:	d109      	bne.n	800ddd8 <__libc_init_array+0x24>
 800ddc4:	4d0b      	ldr	r5, [pc, #44]	; (800ddf4 <__libc_init_array+0x40>)
 800ddc6:	4c0c      	ldr	r4, [pc, #48]	; (800ddf8 <__libc_init_array+0x44>)
 800ddc8:	f000 fcf8 	bl	800e7bc <_init>
 800ddcc:	1b64      	subs	r4, r4, r5
 800ddce:	10a4      	asrs	r4, r4, #2
 800ddd0:	2600      	movs	r6, #0
 800ddd2:	42a6      	cmp	r6, r4
 800ddd4:	d105      	bne.n	800dde2 <__libc_init_array+0x2e>
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dddc:	4798      	blx	r3
 800ddde:	3601      	adds	r6, #1
 800dde0:	e7ee      	b.n	800ddc0 <__libc_init_array+0xc>
 800dde2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde6:	4798      	blx	r3
 800dde8:	3601      	adds	r6, #1
 800ddea:	e7f2      	b.n	800ddd2 <__libc_init_array+0x1e>
 800ddec:	080123dc 	.word	0x080123dc
 800ddf0:	080123dc 	.word	0x080123dc
 800ddf4:	080123dc 	.word	0x080123dc
 800ddf8:	080123e0 	.word	0x080123e0

0800ddfc <__retarget_lock_acquire_recursive>:
 800ddfc:	4770      	bx	lr

0800ddfe <__retarget_lock_release_recursive>:
 800ddfe:	4770      	bx	lr

0800de00 <memcpy>:
 800de00:	440a      	add	r2, r1
 800de02:	4291      	cmp	r1, r2
 800de04:	f100 33ff 	add.w	r3, r0, #4294967295
 800de08:	d100      	bne.n	800de0c <memcpy+0xc>
 800de0a:	4770      	bx	lr
 800de0c:	b510      	push	{r4, lr}
 800de0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de16:	4291      	cmp	r1, r2
 800de18:	d1f9      	bne.n	800de0e <memcpy+0xe>
 800de1a:	bd10      	pop	{r4, pc}

0800de1c <memset>:
 800de1c:	4402      	add	r2, r0
 800de1e:	4603      	mov	r3, r0
 800de20:	4293      	cmp	r3, r2
 800de22:	d100      	bne.n	800de26 <memset+0xa>
 800de24:	4770      	bx	lr
 800de26:	f803 1b01 	strb.w	r1, [r3], #1
 800de2a:	e7f9      	b.n	800de20 <memset+0x4>

0800de2c <sbrk_aligned>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	4e0e      	ldr	r6, [pc, #56]	; (800de68 <sbrk_aligned+0x3c>)
 800de30:	460c      	mov	r4, r1
 800de32:	6831      	ldr	r1, [r6, #0]
 800de34:	4605      	mov	r5, r0
 800de36:	b911      	cbnz	r1, 800de3e <sbrk_aligned+0x12>
 800de38:	f000 f8f6 	bl	800e028 <_sbrk_r>
 800de3c:	6030      	str	r0, [r6, #0]
 800de3e:	4621      	mov	r1, r4
 800de40:	4628      	mov	r0, r5
 800de42:	f000 f8f1 	bl	800e028 <_sbrk_r>
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	d00a      	beq.n	800de60 <sbrk_aligned+0x34>
 800de4a:	1cc4      	adds	r4, r0, #3
 800de4c:	f024 0403 	bic.w	r4, r4, #3
 800de50:	42a0      	cmp	r0, r4
 800de52:	d007      	beq.n	800de64 <sbrk_aligned+0x38>
 800de54:	1a21      	subs	r1, r4, r0
 800de56:	4628      	mov	r0, r5
 800de58:	f000 f8e6 	bl	800e028 <_sbrk_r>
 800de5c:	3001      	adds	r0, #1
 800de5e:	d101      	bne.n	800de64 <sbrk_aligned+0x38>
 800de60:	f04f 34ff 	mov.w	r4, #4294967295
 800de64:	4620      	mov	r0, r4
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	20006aac 	.word	0x20006aac

0800de6c <_malloc_r>:
 800de6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de70:	1ccd      	adds	r5, r1, #3
 800de72:	f025 0503 	bic.w	r5, r5, #3
 800de76:	3508      	adds	r5, #8
 800de78:	2d0c      	cmp	r5, #12
 800de7a:	bf38      	it	cc
 800de7c:	250c      	movcc	r5, #12
 800de7e:	2d00      	cmp	r5, #0
 800de80:	4607      	mov	r7, r0
 800de82:	db01      	blt.n	800de88 <_malloc_r+0x1c>
 800de84:	42a9      	cmp	r1, r5
 800de86:	d905      	bls.n	800de94 <_malloc_r+0x28>
 800de88:	230c      	movs	r3, #12
 800de8a:	603b      	str	r3, [r7, #0]
 800de8c:	2600      	movs	r6, #0
 800de8e:	4630      	mov	r0, r6
 800de90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de94:	4e2e      	ldr	r6, [pc, #184]	; (800df50 <_malloc_r+0xe4>)
 800de96:	f000 f8f7 	bl	800e088 <__malloc_lock>
 800de9a:	6833      	ldr	r3, [r6, #0]
 800de9c:	461c      	mov	r4, r3
 800de9e:	bb34      	cbnz	r4, 800deee <_malloc_r+0x82>
 800dea0:	4629      	mov	r1, r5
 800dea2:	4638      	mov	r0, r7
 800dea4:	f7ff ffc2 	bl	800de2c <sbrk_aligned>
 800dea8:	1c43      	adds	r3, r0, #1
 800deaa:	4604      	mov	r4, r0
 800deac:	d14d      	bne.n	800df4a <_malloc_r+0xde>
 800deae:	6834      	ldr	r4, [r6, #0]
 800deb0:	4626      	mov	r6, r4
 800deb2:	2e00      	cmp	r6, #0
 800deb4:	d140      	bne.n	800df38 <_malloc_r+0xcc>
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	4631      	mov	r1, r6
 800deba:	4638      	mov	r0, r7
 800debc:	eb04 0803 	add.w	r8, r4, r3
 800dec0:	f000 f8b2 	bl	800e028 <_sbrk_r>
 800dec4:	4580      	cmp	r8, r0
 800dec6:	d13a      	bne.n	800df3e <_malloc_r+0xd2>
 800dec8:	6821      	ldr	r1, [r4, #0]
 800deca:	3503      	adds	r5, #3
 800decc:	1a6d      	subs	r5, r5, r1
 800dece:	f025 0503 	bic.w	r5, r5, #3
 800ded2:	3508      	adds	r5, #8
 800ded4:	2d0c      	cmp	r5, #12
 800ded6:	bf38      	it	cc
 800ded8:	250c      	movcc	r5, #12
 800deda:	4629      	mov	r1, r5
 800dedc:	4638      	mov	r0, r7
 800dede:	f7ff ffa5 	bl	800de2c <sbrk_aligned>
 800dee2:	3001      	adds	r0, #1
 800dee4:	d02b      	beq.n	800df3e <_malloc_r+0xd2>
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	442b      	add	r3, r5
 800deea:	6023      	str	r3, [r4, #0]
 800deec:	e00e      	b.n	800df0c <_malloc_r+0xa0>
 800deee:	6822      	ldr	r2, [r4, #0]
 800def0:	1b52      	subs	r2, r2, r5
 800def2:	d41e      	bmi.n	800df32 <_malloc_r+0xc6>
 800def4:	2a0b      	cmp	r2, #11
 800def6:	d916      	bls.n	800df26 <_malloc_r+0xba>
 800def8:	1961      	adds	r1, r4, r5
 800defa:	42a3      	cmp	r3, r4
 800defc:	6025      	str	r5, [r4, #0]
 800defe:	bf18      	it	ne
 800df00:	6059      	strne	r1, [r3, #4]
 800df02:	6863      	ldr	r3, [r4, #4]
 800df04:	bf08      	it	eq
 800df06:	6031      	streq	r1, [r6, #0]
 800df08:	5162      	str	r2, [r4, r5]
 800df0a:	604b      	str	r3, [r1, #4]
 800df0c:	4638      	mov	r0, r7
 800df0e:	f104 060b 	add.w	r6, r4, #11
 800df12:	f000 f8bf 	bl	800e094 <__malloc_unlock>
 800df16:	f026 0607 	bic.w	r6, r6, #7
 800df1a:	1d23      	adds	r3, r4, #4
 800df1c:	1af2      	subs	r2, r6, r3
 800df1e:	d0b6      	beq.n	800de8e <_malloc_r+0x22>
 800df20:	1b9b      	subs	r3, r3, r6
 800df22:	50a3      	str	r3, [r4, r2]
 800df24:	e7b3      	b.n	800de8e <_malloc_r+0x22>
 800df26:	6862      	ldr	r2, [r4, #4]
 800df28:	42a3      	cmp	r3, r4
 800df2a:	bf0c      	ite	eq
 800df2c:	6032      	streq	r2, [r6, #0]
 800df2e:	605a      	strne	r2, [r3, #4]
 800df30:	e7ec      	b.n	800df0c <_malloc_r+0xa0>
 800df32:	4623      	mov	r3, r4
 800df34:	6864      	ldr	r4, [r4, #4]
 800df36:	e7b2      	b.n	800de9e <_malloc_r+0x32>
 800df38:	4634      	mov	r4, r6
 800df3a:	6876      	ldr	r6, [r6, #4]
 800df3c:	e7b9      	b.n	800deb2 <_malloc_r+0x46>
 800df3e:	230c      	movs	r3, #12
 800df40:	603b      	str	r3, [r7, #0]
 800df42:	4638      	mov	r0, r7
 800df44:	f000 f8a6 	bl	800e094 <__malloc_unlock>
 800df48:	e7a1      	b.n	800de8e <_malloc_r+0x22>
 800df4a:	6025      	str	r5, [r4, #0]
 800df4c:	e7de      	b.n	800df0c <_malloc_r+0xa0>
 800df4e:	bf00      	nop
 800df50:	20006aa8 	.word	0x20006aa8

0800df54 <cleanup_glue>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	460c      	mov	r4, r1
 800df58:	6809      	ldr	r1, [r1, #0]
 800df5a:	4605      	mov	r5, r0
 800df5c:	b109      	cbz	r1, 800df62 <cleanup_glue+0xe>
 800df5e:	f7ff fff9 	bl	800df54 <cleanup_glue>
 800df62:	4621      	mov	r1, r4
 800df64:	4628      	mov	r0, r5
 800df66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df6a:	f000 b899 	b.w	800e0a0 <_free_r>
	...

0800df70 <_reclaim_reent>:
 800df70:	4b2c      	ldr	r3, [pc, #176]	; (800e024 <_reclaim_reent+0xb4>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4283      	cmp	r3, r0
 800df76:	b570      	push	{r4, r5, r6, lr}
 800df78:	4604      	mov	r4, r0
 800df7a:	d051      	beq.n	800e020 <_reclaim_reent+0xb0>
 800df7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df7e:	b143      	cbz	r3, 800df92 <_reclaim_reent+0x22>
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d14a      	bne.n	800e01c <_reclaim_reent+0xac>
 800df86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df88:	6819      	ldr	r1, [r3, #0]
 800df8a:	b111      	cbz	r1, 800df92 <_reclaim_reent+0x22>
 800df8c:	4620      	mov	r0, r4
 800df8e:	f000 f887 	bl	800e0a0 <_free_r>
 800df92:	6961      	ldr	r1, [r4, #20]
 800df94:	b111      	cbz	r1, 800df9c <_reclaim_reent+0x2c>
 800df96:	4620      	mov	r0, r4
 800df98:	f000 f882 	bl	800e0a0 <_free_r>
 800df9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df9e:	b111      	cbz	r1, 800dfa6 <_reclaim_reent+0x36>
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f000 f87d 	bl	800e0a0 <_free_r>
 800dfa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dfa8:	b111      	cbz	r1, 800dfb0 <_reclaim_reent+0x40>
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f000 f878 	bl	800e0a0 <_free_r>
 800dfb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dfb2:	b111      	cbz	r1, 800dfba <_reclaim_reent+0x4a>
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f000 f873 	bl	800e0a0 <_free_r>
 800dfba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dfbc:	b111      	cbz	r1, 800dfc4 <_reclaim_reent+0x54>
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f000 f86e 	bl	800e0a0 <_free_r>
 800dfc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dfc6:	b111      	cbz	r1, 800dfce <_reclaim_reent+0x5e>
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 f869 	bl	800e0a0 <_free_r>
 800dfce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dfd0:	b111      	cbz	r1, 800dfd8 <_reclaim_reent+0x68>
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f000 f864 	bl	800e0a0 <_free_r>
 800dfd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfda:	b111      	cbz	r1, 800dfe2 <_reclaim_reent+0x72>
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f000 f85f 	bl	800e0a0 <_free_r>
 800dfe2:	69a3      	ldr	r3, [r4, #24]
 800dfe4:	b1e3      	cbz	r3, 800e020 <_reclaim_reent+0xb0>
 800dfe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dfe8:	4620      	mov	r0, r4
 800dfea:	4798      	blx	r3
 800dfec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dfee:	b1b9      	cbz	r1, 800e020 <_reclaim_reent+0xb0>
 800dff0:	4620      	mov	r0, r4
 800dff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dff6:	f7ff bfad 	b.w	800df54 <cleanup_glue>
 800dffa:	5949      	ldr	r1, [r1, r5]
 800dffc:	b941      	cbnz	r1, 800e010 <_reclaim_reent+0xa0>
 800dffe:	3504      	adds	r5, #4
 800e000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e002:	2d80      	cmp	r5, #128	; 0x80
 800e004:	68d9      	ldr	r1, [r3, #12]
 800e006:	d1f8      	bne.n	800dffa <_reclaim_reent+0x8a>
 800e008:	4620      	mov	r0, r4
 800e00a:	f000 f849 	bl	800e0a0 <_free_r>
 800e00e:	e7ba      	b.n	800df86 <_reclaim_reent+0x16>
 800e010:	680e      	ldr	r6, [r1, #0]
 800e012:	4620      	mov	r0, r4
 800e014:	f000 f844 	bl	800e0a0 <_free_r>
 800e018:	4631      	mov	r1, r6
 800e01a:	e7ef      	b.n	800dffc <_reclaim_reent+0x8c>
 800e01c:	2500      	movs	r5, #0
 800e01e:	e7ef      	b.n	800e000 <_reclaim_reent+0x90>
 800e020:	bd70      	pop	{r4, r5, r6, pc}
 800e022:	bf00      	nop
 800e024:	20000110 	.word	0x20000110

0800e028 <_sbrk_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4d06      	ldr	r5, [pc, #24]	; (800e044 <_sbrk_r+0x1c>)
 800e02c:	2300      	movs	r3, #0
 800e02e:	4604      	mov	r4, r0
 800e030:	4608      	mov	r0, r1
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	f7f4 fb74 	bl	8002720 <_sbrk>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d102      	bne.n	800e042 <_sbrk_r+0x1a>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	b103      	cbz	r3, 800e042 <_sbrk_r+0x1a>
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	20006ab0 	.word	0x20006ab0

0800e048 <siprintf>:
 800e048:	b40e      	push	{r1, r2, r3}
 800e04a:	b500      	push	{lr}
 800e04c:	b09c      	sub	sp, #112	; 0x70
 800e04e:	ab1d      	add	r3, sp, #116	; 0x74
 800e050:	9002      	str	r0, [sp, #8]
 800e052:	9006      	str	r0, [sp, #24]
 800e054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e058:	4809      	ldr	r0, [pc, #36]	; (800e080 <siprintf+0x38>)
 800e05a:	9107      	str	r1, [sp, #28]
 800e05c:	9104      	str	r1, [sp, #16]
 800e05e:	4909      	ldr	r1, [pc, #36]	; (800e084 <siprintf+0x3c>)
 800e060:	f853 2b04 	ldr.w	r2, [r3], #4
 800e064:	9105      	str	r1, [sp, #20]
 800e066:	6800      	ldr	r0, [r0, #0]
 800e068:	9301      	str	r3, [sp, #4]
 800e06a:	a902      	add	r1, sp, #8
 800e06c:	f000 f8c0 	bl	800e1f0 <_svfiprintf_r>
 800e070:	9b02      	ldr	r3, [sp, #8]
 800e072:	2200      	movs	r2, #0
 800e074:	701a      	strb	r2, [r3, #0]
 800e076:	b01c      	add	sp, #112	; 0x70
 800e078:	f85d eb04 	ldr.w	lr, [sp], #4
 800e07c:	b003      	add	sp, #12
 800e07e:	4770      	bx	lr
 800e080:	20000110 	.word	0x20000110
 800e084:	ffff0208 	.word	0xffff0208

0800e088 <__malloc_lock>:
 800e088:	4801      	ldr	r0, [pc, #4]	; (800e090 <__malloc_lock+0x8>)
 800e08a:	f7ff beb7 	b.w	800ddfc <__retarget_lock_acquire_recursive>
 800e08e:	bf00      	nop
 800e090:	20006aa4 	.word	0x20006aa4

0800e094 <__malloc_unlock>:
 800e094:	4801      	ldr	r0, [pc, #4]	; (800e09c <__malloc_unlock+0x8>)
 800e096:	f7ff beb2 	b.w	800ddfe <__retarget_lock_release_recursive>
 800e09a:	bf00      	nop
 800e09c:	20006aa4 	.word	0x20006aa4

0800e0a0 <_free_r>:
 800e0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0a2:	2900      	cmp	r1, #0
 800e0a4:	d044      	beq.n	800e130 <_free_r+0x90>
 800e0a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0aa:	9001      	str	r0, [sp, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f1a1 0404 	sub.w	r4, r1, #4
 800e0b2:	bfb8      	it	lt
 800e0b4:	18e4      	addlt	r4, r4, r3
 800e0b6:	f7ff ffe7 	bl	800e088 <__malloc_lock>
 800e0ba:	4a1e      	ldr	r2, [pc, #120]	; (800e134 <_free_r+0x94>)
 800e0bc:	9801      	ldr	r0, [sp, #4]
 800e0be:	6813      	ldr	r3, [r2, #0]
 800e0c0:	b933      	cbnz	r3, 800e0d0 <_free_r+0x30>
 800e0c2:	6063      	str	r3, [r4, #4]
 800e0c4:	6014      	str	r4, [r2, #0]
 800e0c6:	b003      	add	sp, #12
 800e0c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0cc:	f7ff bfe2 	b.w	800e094 <__malloc_unlock>
 800e0d0:	42a3      	cmp	r3, r4
 800e0d2:	d908      	bls.n	800e0e6 <_free_r+0x46>
 800e0d4:	6825      	ldr	r5, [r4, #0]
 800e0d6:	1961      	adds	r1, r4, r5
 800e0d8:	428b      	cmp	r3, r1
 800e0da:	bf01      	itttt	eq
 800e0dc:	6819      	ldreq	r1, [r3, #0]
 800e0de:	685b      	ldreq	r3, [r3, #4]
 800e0e0:	1949      	addeq	r1, r1, r5
 800e0e2:	6021      	streq	r1, [r4, #0]
 800e0e4:	e7ed      	b.n	800e0c2 <_free_r+0x22>
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	b10b      	cbz	r3, 800e0f0 <_free_r+0x50>
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	d9fa      	bls.n	800e0e6 <_free_r+0x46>
 800e0f0:	6811      	ldr	r1, [r2, #0]
 800e0f2:	1855      	adds	r5, r2, r1
 800e0f4:	42a5      	cmp	r5, r4
 800e0f6:	d10b      	bne.n	800e110 <_free_r+0x70>
 800e0f8:	6824      	ldr	r4, [r4, #0]
 800e0fa:	4421      	add	r1, r4
 800e0fc:	1854      	adds	r4, r2, r1
 800e0fe:	42a3      	cmp	r3, r4
 800e100:	6011      	str	r1, [r2, #0]
 800e102:	d1e0      	bne.n	800e0c6 <_free_r+0x26>
 800e104:	681c      	ldr	r4, [r3, #0]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	6053      	str	r3, [r2, #4]
 800e10a:	4421      	add	r1, r4
 800e10c:	6011      	str	r1, [r2, #0]
 800e10e:	e7da      	b.n	800e0c6 <_free_r+0x26>
 800e110:	d902      	bls.n	800e118 <_free_r+0x78>
 800e112:	230c      	movs	r3, #12
 800e114:	6003      	str	r3, [r0, #0]
 800e116:	e7d6      	b.n	800e0c6 <_free_r+0x26>
 800e118:	6825      	ldr	r5, [r4, #0]
 800e11a:	1961      	adds	r1, r4, r5
 800e11c:	428b      	cmp	r3, r1
 800e11e:	bf04      	itt	eq
 800e120:	6819      	ldreq	r1, [r3, #0]
 800e122:	685b      	ldreq	r3, [r3, #4]
 800e124:	6063      	str	r3, [r4, #4]
 800e126:	bf04      	itt	eq
 800e128:	1949      	addeq	r1, r1, r5
 800e12a:	6021      	streq	r1, [r4, #0]
 800e12c:	6054      	str	r4, [r2, #4]
 800e12e:	e7ca      	b.n	800e0c6 <_free_r+0x26>
 800e130:	b003      	add	sp, #12
 800e132:	bd30      	pop	{r4, r5, pc}
 800e134:	20006aa8 	.word	0x20006aa8

0800e138 <__ssputs_r>:
 800e138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e13c:	688e      	ldr	r6, [r1, #8]
 800e13e:	429e      	cmp	r6, r3
 800e140:	4682      	mov	sl, r0
 800e142:	460c      	mov	r4, r1
 800e144:	4690      	mov	r8, r2
 800e146:	461f      	mov	r7, r3
 800e148:	d838      	bhi.n	800e1bc <__ssputs_r+0x84>
 800e14a:	898a      	ldrh	r2, [r1, #12]
 800e14c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e150:	d032      	beq.n	800e1b8 <__ssputs_r+0x80>
 800e152:	6825      	ldr	r5, [r4, #0]
 800e154:	6909      	ldr	r1, [r1, #16]
 800e156:	eba5 0901 	sub.w	r9, r5, r1
 800e15a:	6965      	ldr	r5, [r4, #20]
 800e15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e164:	3301      	adds	r3, #1
 800e166:	444b      	add	r3, r9
 800e168:	106d      	asrs	r5, r5, #1
 800e16a:	429d      	cmp	r5, r3
 800e16c:	bf38      	it	cc
 800e16e:	461d      	movcc	r5, r3
 800e170:	0553      	lsls	r3, r2, #21
 800e172:	d531      	bpl.n	800e1d8 <__ssputs_r+0xa0>
 800e174:	4629      	mov	r1, r5
 800e176:	f7ff fe79 	bl	800de6c <_malloc_r>
 800e17a:	4606      	mov	r6, r0
 800e17c:	b950      	cbnz	r0, 800e194 <__ssputs_r+0x5c>
 800e17e:	230c      	movs	r3, #12
 800e180:	f8ca 3000 	str.w	r3, [sl]
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e18a:	81a3      	strh	r3, [r4, #12]
 800e18c:	f04f 30ff 	mov.w	r0, #4294967295
 800e190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e194:	6921      	ldr	r1, [r4, #16]
 800e196:	464a      	mov	r2, r9
 800e198:	f7ff fe32 	bl	800de00 <memcpy>
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	6126      	str	r6, [r4, #16]
 800e1aa:	6165      	str	r5, [r4, #20]
 800e1ac:	444e      	add	r6, r9
 800e1ae:	eba5 0509 	sub.w	r5, r5, r9
 800e1b2:	6026      	str	r6, [r4, #0]
 800e1b4:	60a5      	str	r5, [r4, #8]
 800e1b6:	463e      	mov	r6, r7
 800e1b8:	42be      	cmp	r6, r7
 800e1ba:	d900      	bls.n	800e1be <__ssputs_r+0x86>
 800e1bc:	463e      	mov	r6, r7
 800e1be:	6820      	ldr	r0, [r4, #0]
 800e1c0:	4632      	mov	r2, r6
 800e1c2:	4641      	mov	r1, r8
 800e1c4:	f000 faa8 	bl	800e718 <memmove>
 800e1c8:	68a3      	ldr	r3, [r4, #8]
 800e1ca:	1b9b      	subs	r3, r3, r6
 800e1cc:	60a3      	str	r3, [r4, #8]
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	4433      	add	r3, r6
 800e1d2:	6023      	str	r3, [r4, #0]
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	e7db      	b.n	800e190 <__ssputs_r+0x58>
 800e1d8:	462a      	mov	r2, r5
 800e1da:	f000 fab7 	bl	800e74c <_realloc_r>
 800e1de:	4606      	mov	r6, r0
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d1e1      	bne.n	800e1a8 <__ssputs_r+0x70>
 800e1e4:	6921      	ldr	r1, [r4, #16]
 800e1e6:	4650      	mov	r0, sl
 800e1e8:	f7ff ff5a 	bl	800e0a0 <_free_r>
 800e1ec:	e7c7      	b.n	800e17e <__ssputs_r+0x46>
	...

0800e1f0 <_svfiprintf_r>:
 800e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	4698      	mov	r8, r3
 800e1f6:	898b      	ldrh	r3, [r1, #12]
 800e1f8:	061b      	lsls	r3, r3, #24
 800e1fa:	b09d      	sub	sp, #116	; 0x74
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	460d      	mov	r5, r1
 800e200:	4614      	mov	r4, r2
 800e202:	d50e      	bpl.n	800e222 <_svfiprintf_r+0x32>
 800e204:	690b      	ldr	r3, [r1, #16]
 800e206:	b963      	cbnz	r3, 800e222 <_svfiprintf_r+0x32>
 800e208:	2140      	movs	r1, #64	; 0x40
 800e20a:	f7ff fe2f 	bl	800de6c <_malloc_r>
 800e20e:	6028      	str	r0, [r5, #0]
 800e210:	6128      	str	r0, [r5, #16]
 800e212:	b920      	cbnz	r0, 800e21e <_svfiprintf_r+0x2e>
 800e214:	230c      	movs	r3, #12
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	f04f 30ff 	mov.w	r0, #4294967295
 800e21c:	e0d1      	b.n	800e3c2 <_svfiprintf_r+0x1d2>
 800e21e:	2340      	movs	r3, #64	; 0x40
 800e220:	616b      	str	r3, [r5, #20]
 800e222:	2300      	movs	r3, #0
 800e224:	9309      	str	r3, [sp, #36]	; 0x24
 800e226:	2320      	movs	r3, #32
 800e228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e22c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e230:	2330      	movs	r3, #48	; 0x30
 800e232:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3dc <_svfiprintf_r+0x1ec>
 800e236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e23a:	f04f 0901 	mov.w	r9, #1
 800e23e:	4623      	mov	r3, r4
 800e240:	469a      	mov	sl, r3
 800e242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e246:	b10a      	cbz	r2, 800e24c <_svfiprintf_r+0x5c>
 800e248:	2a25      	cmp	r2, #37	; 0x25
 800e24a:	d1f9      	bne.n	800e240 <_svfiprintf_r+0x50>
 800e24c:	ebba 0b04 	subs.w	fp, sl, r4
 800e250:	d00b      	beq.n	800e26a <_svfiprintf_r+0x7a>
 800e252:	465b      	mov	r3, fp
 800e254:	4622      	mov	r2, r4
 800e256:	4629      	mov	r1, r5
 800e258:	4638      	mov	r0, r7
 800e25a:	f7ff ff6d 	bl	800e138 <__ssputs_r>
 800e25e:	3001      	adds	r0, #1
 800e260:	f000 80aa 	beq.w	800e3b8 <_svfiprintf_r+0x1c8>
 800e264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e266:	445a      	add	r2, fp
 800e268:	9209      	str	r2, [sp, #36]	; 0x24
 800e26a:	f89a 3000 	ldrb.w	r3, [sl]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f000 80a2 	beq.w	800e3b8 <_svfiprintf_r+0x1c8>
 800e274:	2300      	movs	r3, #0
 800e276:	f04f 32ff 	mov.w	r2, #4294967295
 800e27a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e27e:	f10a 0a01 	add.w	sl, sl, #1
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	9307      	str	r3, [sp, #28]
 800e286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e28a:	931a      	str	r3, [sp, #104]	; 0x68
 800e28c:	4654      	mov	r4, sl
 800e28e:	2205      	movs	r2, #5
 800e290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e294:	4851      	ldr	r0, [pc, #324]	; (800e3dc <_svfiprintf_r+0x1ec>)
 800e296:	f7f1 ffab 	bl	80001f0 <memchr>
 800e29a:	9a04      	ldr	r2, [sp, #16]
 800e29c:	b9d8      	cbnz	r0, 800e2d6 <_svfiprintf_r+0xe6>
 800e29e:	06d0      	lsls	r0, r2, #27
 800e2a0:	bf44      	itt	mi
 800e2a2:	2320      	movmi	r3, #32
 800e2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2a8:	0711      	lsls	r1, r2, #28
 800e2aa:	bf44      	itt	mi
 800e2ac:	232b      	movmi	r3, #43	; 0x2b
 800e2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e2b8:	d015      	beq.n	800e2e6 <_svfiprintf_r+0xf6>
 800e2ba:	9a07      	ldr	r2, [sp, #28]
 800e2bc:	4654      	mov	r4, sl
 800e2be:	2000      	movs	r0, #0
 800e2c0:	f04f 0c0a 	mov.w	ip, #10
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ca:	3b30      	subs	r3, #48	; 0x30
 800e2cc:	2b09      	cmp	r3, #9
 800e2ce:	d94e      	bls.n	800e36e <_svfiprintf_r+0x17e>
 800e2d0:	b1b0      	cbz	r0, 800e300 <_svfiprintf_r+0x110>
 800e2d2:	9207      	str	r2, [sp, #28]
 800e2d4:	e014      	b.n	800e300 <_svfiprintf_r+0x110>
 800e2d6:	eba0 0308 	sub.w	r3, r0, r8
 800e2da:	fa09 f303 	lsl.w	r3, r9, r3
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	9304      	str	r3, [sp, #16]
 800e2e2:	46a2      	mov	sl, r4
 800e2e4:	e7d2      	b.n	800e28c <_svfiprintf_r+0x9c>
 800e2e6:	9b03      	ldr	r3, [sp, #12]
 800e2e8:	1d19      	adds	r1, r3, #4
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	9103      	str	r1, [sp, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	bfbb      	ittet	lt
 800e2f2:	425b      	neglt	r3, r3
 800e2f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e2f8:	9307      	strge	r3, [sp, #28]
 800e2fa:	9307      	strlt	r3, [sp, #28]
 800e2fc:	bfb8      	it	lt
 800e2fe:	9204      	strlt	r2, [sp, #16]
 800e300:	7823      	ldrb	r3, [r4, #0]
 800e302:	2b2e      	cmp	r3, #46	; 0x2e
 800e304:	d10c      	bne.n	800e320 <_svfiprintf_r+0x130>
 800e306:	7863      	ldrb	r3, [r4, #1]
 800e308:	2b2a      	cmp	r3, #42	; 0x2a
 800e30a:	d135      	bne.n	800e378 <_svfiprintf_r+0x188>
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	1d1a      	adds	r2, r3, #4
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	9203      	str	r2, [sp, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	bfb8      	it	lt
 800e318:	f04f 33ff 	movlt.w	r3, #4294967295
 800e31c:	3402      	adds	r4, #2
 800e31e:	9305      	str	r3, [sp, #20]
 800e320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3ec <_svfiprintf_r+0x1fc>
 800e324:	7821      	ldrb	r1, [r4, #0]
 800e326:	2203      	movs	r2, #3
 800e328:	4650      	mov	r0, sl
 800e32a:	f7f1 ff61 	bl	80001f0 <memchr>
 800e32e:	b140      	cbz	r0, 800e342 <_svfiprintf_r+0x152>
 800e330:	2340      	movs	r3, #64	; 0x40
 800e332:	eba0 000a 	sub.w	r0, r0, sl
 800e336:	fa03 f000 	lsl.w	r0, r3, r0
 800e33a:	9b04      	ldr	r3, [sp, #16]
 800e33c:	4303      	orrs	r3, r0
 800e33e:	3401      	adds	r4, #1
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e346:	4826      	ldr	r0, [pc, #152]	; (800e3e0 <_svfiprintf_r+0x1f0>)
 800e348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e34c:	2206      	movs	r2, #6
 800e34e:	f7f1 ff4f 	bl	80001f0 <memchr>
 800e352:	2800      	cmp	r0, #0
 800e354:	d038      	beq.n	800e3c8 <_svfiprintf_r+0x1d8>
 800e356:	4b23      	ldr	r3, [pc, #140]	; (800e3e4 <_svfiprintf_r+0x1f4>)
 800e358:	bb1b      	cbnz	r3, 800e3a2 <_svfiprintf_r+0x1b2>
 800e35a:	9b03      	ldr	r3, [sp, #12]
 800e35c:	3307      	adds	r3, #7
 800e35e:	f023 0307 	bic.w	r3, r3, #7
 800e362:	3308      	adds	r3, #8
 800e364:	9303      	str	r3, [sp, #12]
 800e366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e368:	4433      	add	r3, r6
 800e36a:	9309      	str	r3, [sp, #36]	; 0x24
 800e36c:	e767      	b.n	800e23e <_svfiprintf_r+0x4e>
 800e36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e372:	460c      	mov	r4, r1
 800e374:	2001      	movs	r0, #1
 800e376:	e7a5      	b.n	800e2c4 <_svfiprintf_r+0xd4>
 800e378:	2300      	movs	r3, #0
 800e37a:	3401      	adds	r4, #1
 800e37c:	9305      	str	r3, [sp, #20]
 800e37e:	4619      	mov	r1, r3
 800e380:	f04f 0c0a 	mov.w	ip, #10
 800e384:	4620      	mov	r0, r4
 800e386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e38a:	3a30      	subs	r2, #48	; 0x30
 800e38c:	2a09      	cmp	r2, #9
 800e38e:	d903      	bls.n	800e398 <_svfiprintf_r+0x1a8>
 800e390:	2b00      	cmp	r3, #0
 800e392:	d0c5      	beq.n	800e320 <_svfiprintf_r+0x130>
 800e394:	9105      	str	r1, [sp, #20]
 800e396:	e7c3      	b.n	800e320 <_svfiprintf_r+0x130>
 800e398:	fb0c 2101 	mla	r1, ip, r1, r2
 800e39c:	4604      	mov	r4, r0
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e7f0      	b.n	800e384 <_svfiprintf_r+0x194>
 800e3a2:	ab03      	add	r3, sp, #12
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	462a      	mov	r2, r5
 800e3a8:	4b0f      	ldr	r3, [pc, #60]	; (800e3e8 <_svfiprintf_r+0x1f8>)
 800e3aa:	a904      	add	r1, sp, #16
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	f3af 8000 	nop.w
 800e3b2:	1c42      	adds	r2, r0, #1
 800e3b4:	4606      	mov	r6, r0
 800e3b6:	d1d6      	bne.n	800e366 <_svfiprintf_r+0x176>
 800e3b8:	89ab      	ldrh	r3, [r5, #12]
 800e3ba:	065b      	lsls	r3, r3, #25
 800e3bc:	f53f af2c 	bmi.w	800e218 <_svfiprintf_r+0x28>
 800e3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3c2:	b01d      	add	sp, #116	; 0x74
 800e3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c8:	ab03      	add	r3, sp, #12
 800e3ca:	9300      	str	r3, [sp, #0]
 800e3cc:	462a      	mov	r2, r5
 800e3ce:	4b06      	ldr	r3, [pc, #24]	; (800e3e8 <_svfiprintf_r+0x1f8>)
 800e3d0:	a904      	add	r1, sp, #16
 800e3d2:	4638      	mov	r0, r7
 800e3d4:	f000 f87a 	bl	800e4cc <_printf_i>
 800e3d8:	e7eb      	b.n	800e3b2 <_svfiprintf_r+0x1c2>
 800e3da:	bf00      	nop
 800e3dc:	080123a0 	.word	0x080123a0
 800e3e0:	080123aa 	.word	0x080123aa
 800e3e4:	00000000 	.word	0x00000000
 800e3e8:	0800e139 	.word	0x0800e139
 800e3ec:	080123a6 	.word	0x080123a6

0800e3f0 <_printf_common>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	4616      	mov	r6, r2
 800e3f6:	4699      	mov	r9, r3
 800e3f8:	688a      	ldr	r2, [r1, #8]
 800e3fa:	690b      	ldr	r3, [r1, #16]
 800e3fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e400:	4293      	cmp	r3, r2
 800e402:	bfb8      	it	lt
 800e404:	4613      	movlt	r3, r2
 800e406:	6033      	str	r3, [r6, #0]
 800e408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e40c:	4607      	mov	r7, r0
 800e40e:	460c      	mov	r4, r1
 800e410:	b10a      	cbz	r2, 800e416 <_printf_common+0x26>
 800e412:	3301      	adds	r3, #1
 800e414:	6033      	str	r3, [r6, #0]
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	0699      	lsls	r1, r3, #26
 800e41a:	bf42      	ittt	mi
 800e41c:	6833      	ldrmi	r3, [r6, #0]
 800e41e:	3302      	addmi	r3, #2
 800e420:	6033      	strmi	r3, [r6, #0]
 800e422:	6825      	ldr	r5, [r4, #0]
 800e424:	f015 0506 	ands.w	r5, r5, #6
 800e428:	d106      	bne.n	800e438 <_printf_common+0x48>
 800e42a:	f104 0a19 	add.w	sl, r4, #25
 800e42e:	68e3      	ldr	r3, [r4, #12]
 800e430:	6832      	ldr	r2, [r6, #0]
 800e432:	1a9b      	subs	r3, r3, r2
 800e434:	42ab      	cmp	r3, r5
 800e436:	dc26      	bgt.n	800e486 <_printf_common+0x96>
 800e438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e43c:	1e13      	subs	r3, r2, #0
 800e43e:	6822      	ldr	r2, [r4, #0]
 800e440:	bf18      	it	ne
 800e442:	2301      	movne	r3, #1
 800e444:	0692      	lsls	r2, r2, #26
 800e446:	d42b      	bmi.n	800e4a0 <_printf_common+0xb0>
 800e448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e44c:	4649      	mov	r1, r9
 800e44e:	4638      	mov	r0, r7
 800e450:	47c0      	blx	r8
 800e452:	3001      	adds	r0, #1
 800e454:	d01e      	beq.n	800e494 <_printf_common+0xa4>
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	68e5      	ldr	r5, [r4, #12]
 800e45a:	6832      	ldr	r2, [r6, #0]
 800e45c:	f003 0306 	and.w	r3, r3, #6
 800e460:	2b04      	cmp	r3, #4
 800e462:	bf08      	it	eq
 800e464:	1aad      	subeq	r5, r5, r2
 800e466:	68a3      	ldr	r3, [r4, #8]
 800e468:	6922      	ldr	r2, [r4, #16]
 800e46a:	bf0c      	ite	eq
 800e46c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e470:	2500      	movne	r5, #0
 800e472:	4293      	cmp	r3, r2
 800e474:	bfc4      	itt	gt
 800e476:	1a9b      	subgt	r3, r3, r2
 800e478:	18ed      	addgt	r5, r5, r3
 800e47a:	2600      	movs	r6, #0
 800e47c:	341a      	adds	r4, #26
 800e47e:	42b5      	cmp	r5, r6
 800e480:	d11a      	bne.n	800e4b8 <_printf_common+0xc8>
 800e482:	2000      	movs	r0, #0
 800e484:	e008      	b.n	800e498 <_printf_common+0xa8>
 800e486:	2301      	movs	r3, #1
 800e488:	4652      	mov	r2, sl
 800e48a:	4649      	mov	r1, r9
 800e48c:	4638      	mov	r0, r7
 800e48e:	47c0      	blx	r8
 800e490:	3001      	adds	r0, #1
 800e492:	d103      	bne.n	800e49c <_printf_common+0xac>
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49c:	3501      	adds	r5, #1
 800e49e:	e7c6      	b.n	800e42e <_printf_common+0x3e>
 800e4a0:	18e1      	adds	r1, r4, r3
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	2030      	movs	r0, #48	; 0x30
 800e4a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4aa:	4422      	add	r2, r4
 800e4ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	e7c7      	b.n	800e448 <_printf_common+0x58>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	4649      	mov	r1, r9
 800e4be:	4638      	mov	r0, r7
 800e4c0:	47c0      	blx	r8
 800e4c2:	3001      	adds	r0, #1
 800e4c4:	d0e6      	beq.n	800e494 <_printf_common+0xa4>
 800e4c6:	3601      	adds	r6, #1
 800e4c8:	e7d9      	b.n	800e47e <_printf_common+0x8e>
	...

0800e4cc <_printf_i>:
 800e4cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d0:	7e0f      	ldrb	r7, [r1, #24]
 800e4d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4d4:	2f78      	cmp	r7, #120	; 0x78
 800e4d6:	4691      	mov	r9, r2
 800e4d8:	4680      	mov	r8, r0
 800e4da:	460c      	mov	r4, r1
 800e4dc:	469a      	mov	sl, r3
 800e4de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4e2:	d807      	bhi.n	800e4f4 <_printf_i+0x28>
 800e4e4:	2f62      	cmp	r7, #98	; 0x62
 800e4e6:	d80a      	bhi.n	800e4fe <_printf_i+0x32>
 800e4e8:	2f00      	cmp	r7, #0
 800e4ea:	f000 80d8 	beq.w	800e69e <_printf_i+0x1d2>
 800e4ee:	2f58      	cmp	r7, #88	; 0x58
 800e4f0:	f000 80a3 	beq.w	800e63a <_printf_i+0x16e>
 800e4f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4fc:	e03a      	b.n	800e574 <_printf_i+0xa8>
 800e4fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e502:	2b15      	cmp	r3, #21
 800e504:	d8f6      	bhi.n	800e4f4 <_printf_i+0x28>
 800e506:	a101      	add	r1, pc, #4	; (adr r1, 800e50c <_printf_i+0x40>)
 800e508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e50c:	0800e565 	.word	0x0800e565
 800e510:	0800e579 	.word	0x0800e579
 800e514:	0800e4f5 	.word	0x0800e4f5
 800e518:	0800e4f5 	.word	0x0800e4f5
 800e51c:	0800e4f5 	.word	0x0800e4f5
 800e520:	0800e4f5 	.word	0x0800e4f5
 800e524:	0800e579 	.word	0x0800e579
 800e528:	0800e4f5 	.word	0x0800e4f5
 800e52c:	0800e4f5 	.word	0x0800e4f5
 800e530:	0800e4f5 	.word	0x0800e4f5
 800e534:	0800e4f5 	.word	0x0800e4f5
 800e538:	0800e685 	.word	0x0800e685
 800e53c:	0800e5a9 	.word	0x0800e5a9
 800e540:	0800e667 	.word	0x0800e667
 800e544:	0800e4f5 	.word	0x0800e4f5
 800e548:	0800e4f5 	.word	0x0800e4f5
 800e54c:	0800e6a7 	.word	0x0800e6a7
 800e550:	0800e4f5 	.word	0x0800e4f5
 800e554:	0800e5a9 	.word	0x0800e5a9
 800e558:	0800e4f5 	.word	0x0800e4f5
 800e55c:	0800e4f5 	.word	0x0800e4f5
 800e560:	0800e66f 	.word	0x0800e66f
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	1d1a      	adds	r2, r3, #4
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	602a      	str	r2, [r5, #0]
 800e56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e574:	2301      	movs	r3, #1
 800e576:	e0a3      	b.n	800e6c0 <_printf_i+0x1f4>
 800e578:	6820      	ldr	r0, [r4, #0]
 800e57a:	6829      	ldr	r1, [r5, #0]
 800e57c:	0606      	lsls	r6, r0, #24
 800e57e:	f101 0304 	add.w	r3, r1, #4
 800e582:	d50a      	bpl.n	800e59a <_printf_i+0xce>
 800e584:	680e      	ldr	r6, [r1, #0]
 800e586:	602b      	str	r3, [r5, #0]
 800e588:	2e00      	cmp	r6, #0
 800e58a:	da03      	bge.n	800e594 <_printf_i+0xc8>
 800e58c:	232d      	movs	r3, #45	; 0x2d
 800e58e:	4276      	negs	r6, r6
 800e590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e594:	485e      	ldr	r0, [pc, #376]	; (800e710 <_printf_i+0x244>)
 800e596:	230a      	movs	r3, #10
 800e598:	e019      	b.n	800e5ce <_printf_i+0x102>
 800e59a:	680e      	ldr	r6, [r1, #0]
 800e59c:	602b      	str	r3, [r5, #0]
 800e59e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5a2:	bf18      	it	ne
 800e5a4:	b236      	sxthne	r6, r6
 800e5a6:	e7ef      	b.n	800e588 <_printf_i+0xbc>
 800e5a8:	682b      	ldr	r3, [r5, #0]
 800e5aa:	6820      	ldr	r0, [r4, #0]
 800e5ac:	1d19      	adds	r1, r3, #4
 800e5ae:	6029      	str	r1, [r5, #0]
 800e5b0:	0601      	lsls	r1, r0, #24
 800e5b2:	d501      	bpl.n	800e5b8 <_printf_i+0xec>
 800e5b4:	681e      	ldr	r6, [r3, #0]
 800e5b6:	e002      	b.n	800e5be <_printf_i+0xf2>
 800e5b8:	0646      	lsls	r6, r0, #25
 800e5ba:	d5fb      	bpl.n	800e5b4 <_printf_i+0xe8>
 800e5bc:	881e      	ldrh	r6, [r3, #0]
 800e5be:	4854      	ldr	r0, [pc, #336]	; (800e710 <_printf_i+0x244>)
 800e5c0:	2f6f      	cmp	r7, #111	; 0x6f
 800e5c2:	bf0c      	ite	eq
 800e5c4:	2308      	moveq	r3, #8
 800e5c6:	230a      	movne	r3, #10
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5ce:	6865      	ldr	r5, [r4, #4]
 800e5d0:	60a5      	str	r5, [r4, #8]
 800e5d2:	2d00      	cmp	r5, #0
 800e5d4:	bfa2      	ittt	ge
 800e5d6:	6821      	ldrge	r1, [r4, #0]
 800e5d8:	f021 0104 	bicge.w	r1, r1, #4
 800e5dc:	6021      	strge	r1, [r4, #0]
 800e5de:	b90e      	cbnz	r6, 800e5e4 <_printf_i+0x118>
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	d04d      	beq.n	800e680 <_printf_i+0x1b4>
 800e5e4:	4615      	mov	r5, r2
 800e5e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5ea:	fb03 6711 	mls	r7, r3, r1, r6
 800e5ee:	5dc7      	ldrb	r7, [r0, r7]
 800e5f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5f4:	4637      	mov	r7, r6
 800e5f6:	42bb      	cmp	r3, r7
 800e5f8:	460e      	mov	r6, r1
 800e5fa:	d9f4      	bls.n	800e5e6 <_printf_i+0x11a>
 800e5fc:	2b08      	cmp	r3, #8
 800e5fe:	d10b      	bne.n	800e618 <_printf_i+0x14c>
 800e600:	6823      	ldr	r3, [r4, #0]
 800e602:	07de      	lsls	r6, r3, #31
 800e604:	d508      	bpl.n	800e618 <_printf_i+0x14c>
 800e606:	6923      	ldr	r3, [r4, #16]
 800e608:	6861      	ldr	r1, [r4, #4]
 800e60a:	4299      	cmp	r1, r3
 800e60c:	bfde      	ittt	le
 800e60e:	2330      	movle	r3, #48	; 0x30
 800e610:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e614:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e618:	1b52      	subs	r2, r2, r5
 800e61a:	6122      	str	r2, [r4, #16]
 800e61c:	f8cd a000 	str.w	sl, [sp]
 800e620:	464b      	mov	r3, r9
 800e622:	aa03      	add	r2, sp, #12
 800e624:	4621      	mov	r1, r4
 800e626:	4640      	mov	r0, r8
 800e628:	f7ff fee2 	bl	800e3f0 <_printf_common>
 800e62c:	3001      	adds	r0, #1
 800e62e:	d14c      	bne.n	800e6ca <_printf_i+0x1fe>
 800e630:	f04f 30ff 	mov.w	r0, #4294967295
 800e634:	b004      	add	sp, #16
 800e636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e63a:	4835      	ldr	r0, [pc, #212]	; (800e710 <_printf_i+0x244>)
 800e63c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e640:	6829      	ldr	r1, [r5, #0]
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	f851 6b04 	ldr.w	r6, [r1], #4
 800e648:	6029      	str	r1, [r5, #0]
 800e64a:	061d      	lsls	r5, r3, #24
 800e64c:	d514      	bpl.n	800e678 <_printf_i+0x1ac>
 800e64e:	07df      	lsls	r7, r3, #31
 800e650:	bf44      	itt	mi
 800e652:	f043 0320 	orrmi.w	r3, r3, #32
 800e656:	6023      	strmi	r3, [r4, #0]
 800e658:	b91e      	cbnz	r6, 800e662 <_printf_i+0x196>
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	f023 0320 	bic.w	r3, r3, #32
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	2310      	movs	r3, #16
 800e664:	e7b0      	b.n	800e5c8 <_printf_i+0xfc>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	f043 0320 	orr.w	r3, r3, #32
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	2378      	movs	r3, #120	; 0x78
 800e670:	4828      	ldr	r0, [pc, #160]	; (800e714 <_printf_i+0x248>)
 800e672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e676:	e7e3      	b.n	800e640 <_printf_i+0x174>
 800e678:	0659      	lsls	r1, r3, #25
 800e67a:	bf48      	it	mi
 800e67c:	b2b6      	uxthmi	r6, r6
 800e67e:	e7e6      	b.n	800e64e <_printf_i+0x182>
 800e680:	4615      	mov	r5, r2
 800e682:	e7bb      	b.n	800e5fc <_printf_i+0x130>
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	6826      	ldr	r6, [r4, #0]
 800e688:	6961      	ldr	r1, [r4, #20]
 800e68a:	1d18      	adds	r0, r3, #4
 800e68c:	6028      	str	r0, [r5, #0]
 800e68e:	0635      	lsls	r5, r6, #24
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	d501      	bpl.n	800e698 <_printf_i+0x1cc>
 800e694:	6019      	str	r1, [r3, #0]
 800e696:	e002      	b.n	800e69e <_printf_i+0x1d2>
 800e698:	0670      	lsls	r0, r6, #25
 800e69a:	d5fb      	bpl.n	800e694 <_printf_i+0x1c8>
 800e69c:	8019      	strh	r1, [r3, #0]
 800e69e:	2300      	movs	r3, #0
 800e6a0:	6123      	str	r3, [r4, #16]
 800e6a2:	4615      	mov	r5, r2
 800e6a4:	e7ba      	b.n	800e61c <_printf_i+0x150>
 800e6a6:	682b      	ldr	r3, [r5, #0]
 800e6a8:	1d1a      	adds	r2, r3, #4
 800e6aa:	602a      	str	r2, [r5, #0]
 800e6ac:	681d      	ldr	r5, [r3, #0]
 800e6ae:	6862      	ldr	r2, [r4, #4]
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7f1 fd9c 	bl	80001f0 <memchr>
 800e6b8:	b108      	cbz	r0, 800e6be <_printf_i+0x1f2>
 800e6ba:	1b40      	subs	r0, r0, r5
 800e6bc:	6060      	str	r0, [r4, #4]
 800e6be:	6863      	ldr	r3, [r4, #4]
 800e6c0:	6123      	str	r3, [r4, #16]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6c8:	e7a8      	b.n	800e61c <_printf_i+0x150>
 800e6ca:	6923      	ldr	r3, [r4, #16]
 800e6cc:	462a      	mov	r2, r5
 800e6ce:	4649      	mov	r1, r9
 800e6d0:	4640      	mov	r0, r8
 800e6d2:	47d0      	blx	sl
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	d0ab      	beq.n	800e630 <_printf_i+0x164>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	079b      	lsls	r3, r3, #30
 800e6dc:	d413      	bmi.n	800e706 <_printf_i+0x23a>
 800e6de:	68e0      	ldr	r0, [r4, #12]
 800e6e0:	9b03      	ldr	r3, [sp, #12]
 800e6e2:	4298      	cmp	r0, r3
 800e6e4:	bfb8      	it	lt
 800e6e6:	4618      	movlt	r0, r3
 800e6e8:	e7a4      	b.n	800e634 <_printf_i+0x168>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	4632      	mov	r2, r6
 800e6ee:	4649      	mov	r1, r9
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	47d0      	blx	sl
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d09b      	beq.n	800e630 <_printf_i+0x164>
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	68e3      	ldr	r3, [r4, #12]
 800e6fc:	9903      	ldr	r1, [sp, #12]
 800e6fe:	1a5b      	subs	r3, r3, r1
 800e700:	42ab      	cmp	r3, r5
 800e702:	dcf2      	bgt.n	800e6ea <_printf_i+0x21e>
 800e704:	e7eb      	b.n	800e6de <_printf_i+0x212>
 800e706:	2500      	movs	r5, #0
 800e708:	f104 0619 	add.w	r6, r4, #25
 800e70c:	e7f5      	b.n	800e6fa <_printf_i+0x22e>
 800e70e:	bf00      	nop
 800e710:	080123b1 	.word	0x080123b1
 800e714:	080123c2 	.word	0x080123c2

0800e718 <memmove>:
 800e718:	4288      	cmp	r0, r1
 800e71a:	b510      	push	{r4, lr}
 800e71c:	eb01 0402 	add.w	r4, r1, r2
 800e720:	d902      	bls.n	800e728 <memmove+0x10>
 800e722:	4284      	cmp	r4, r0
 800e724:	4623      	mov	r3, r4
 800e726:	d807      	bhi.n	800e738 <memmove+0x20>
 800e728:	1e43      	subs	r3, r0, #1
 800e72a:	42a1      	cmp	r1, r4
 800e72c:	d008      	beq.n	800e740 <memmove+0x28>
 800e72e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e732:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e736:	e7f8      	b.n	800e72a <memmove+0x12>
 800e738:	4402      	add	r2, r0
 800e73a:	4601      	mov	r1, r0
 800e73c:	428a      	cmp	r2, r1
 800e73e:	d100      	bne.n	800e742 <memmove+0x2a>
 800e740:	bd10      	pop	{r4, pc}
 800e742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e74a:	e7f7      	b.n	800e73c <memmove+0x24>

0800e74c <_realloc_r>:
 800e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	4680      	mov	r8, r0
 800e752:	4614      	mov	r4, r2
 800e754:	460e      	mov	r6, r1
 800e756:	b921      	cbnz	r1, 800e762 <_realloc_r+0x16>
 800e758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e75c:	4611      	mov	r1, r2
 800e75e:	f7ff bb85 	b.w	800de6c <_malloc_r>
 800e762:	b92a      	cbnz	r2, 800e770 <_realloc_r+0x24>
 800e764:	f7ff fc9c 	bl	800e0a0 <_free_r>
 800e768:	4625      	mov	r5, r4
 800e76a:	4628      	mov	r0, r5
 800e76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e770:	f000 f81b 	bl	800e7aa <_malloc_usable_size_r>
 800e774:	4284      	cmp	r4, r0
 800e776:	4607      	mov	r7, r0
 800e778:	d802      	bhi.n	800e780 <_realloc_r+0x34>
 800e77a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e77e:	d812      	bhi.n	800e7a6 <_realloc_r+0x5a>
 800e780:	4621      	mov	r1, r4
 800e782:	4640      	mov	r0, r8
 800e784:	f7ff fb72 	bl	800de6c <_malloc_r>
 800e788:	4605      	mov	r5, r0
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d0ed      	beq.n	800e76a <_realloc_r+0x1e>
 800e78e:	42bc      	cmp	r4, r7
 800e790:	4622      	mov	r2, r4
 800e792:	4631      	mov	r1, r6
 800e794:	bf28      	it	cs
 800e796:	463a      	movcs	r2, r7
 800e798:	f7ff fb32 	bl	800de00 <memcpy>
 800e79c:	4631      	mov	r1, r6
 800e79e:	4640      	mov	r0, r8
 800e7a0:	f7ff fc7e 	bl	800e0a0 <_free_r>
 800e7a4:	e7e1      	b.n	800e76a <_realloc_r+0x1e>
 800e7a6:	4635      	mov	r5, r6
 800e7a8:	e7df      	b.n	800e76a <_realloc_r+0x1e>

0800e7aa <_malloc_usable_size_r>:
 800e7aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7ae:	1f18      	subs	r0, r3, #4
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	bfbc      	itt	lt
 800e7b4:	580b      	ldrlt	r3, [r1, r0]
 800e7b6:	18c0      	addlt	r0, r0, r3
 800e7b8:	4770      	bx	lr
	...

0800e7bc <_init>:
 800e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7be:	bf00      	nop
 800e7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7c2:	bc08      	pop	{r3}
 800e7c4:	469e      	mov	lr, r3
 800e7c6:	4770      	bx	lr

0800e7c8 <_fini>:
 800e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ca:	bf00      	nop
 800e7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ce:	bc08      	pop	{r3}
 800e7d0:	469e      	mov	lr, r3
 800e7d2:	4770      	bx	lr
