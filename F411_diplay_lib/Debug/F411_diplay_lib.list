
F411_diplay_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004014  08013690  08013690  00023690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176a4  080176a4  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  080176a4  080176a4  000276a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176ac  080176ac  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176ac  080176ac  000276ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080176b0  080176b0  000276b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  080176b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000699c  200002e4  08017998  000302e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20006c80  08017998  00036c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026eba  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056b4  00000000  00000000  000571ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  0005c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  0005e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db2c  00000000  00000000  000604d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025397  00000000  00000000  0007dffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a95f2  00000000  00000000  000a3393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c985  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099e0  00000000  00000000  0014c9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001563b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00156484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013678 	.word	0x08013678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	08013678 	.word	0x08013678

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f002 f9b2 	bl	8003374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f86e 	bl	80010f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	T = HAL_GetTick();
 8001014:	f002 f9e4 	bl	80033e0 <HAL_GetTick>
 8001018:	4603      	mov	r3, r0
 800101a:	4a24      	ldr	r2, [pc, #144]	; (80010ac <main+0xa4>)
 800101c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 fa9b 	bl	8001558 <MX_GPIO_Init>
  MX_DMA_Init();
 8001022:	f000 fa71 	bl	8001508 <MX_DMA_Init>
  MX_CRC_Init();
 8001026:	f000 f92b 	bl	8001280 <MX_CRC_Init>
  MX_SPI1_Init();
 800102a:	f000 f93d 	bl	80012a8 <MX_SPI1_Init>
  MX_TIM2_Init();
 800102e:	f000 f971 	bl	8001314 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001032:	f000 f8c5 	bl	80011c0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001036:	f000 f9b9 	bl	80013ac <MX_TIM3_Init>
  MX_TIM4_Init();
 800103a:	f000 fa11 	bl	8001460 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);
 800103e:	481c      	ldr	r0, [pc, #112]	; (80010b0 <main+0xa8>)
 8001040:	f005 ff10 	bl	8006e64 <HAL_TIM_Base_Start>
	MX_USB_DEVICE_Init();
 8001044:	f00d f8a2 	bl	800e18c <MX_USB_DEVICE_Init>

	ST7789_Init();
 8001048:	f000 fd7c 	bl	8001b44 <ST7789_Init>
	ST7789_rotation(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f001 fc47 	bl	80028e0 <ST7789_rotation>
//	c
//	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001052:	f00a fb23 	bl	800b69c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <main+0xac>)
 8001058:	2100      	movs	r1, #0
 800105a:	4817      	ldr	r0, [pc, #92]	; (80010b8 <main+0xb0>)
 800105c:	f00a fb68 	bl	800b730 <osThreadNew>
 8001060:	4603      	mov	r3, r0
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <main+0xb4>)
 8001064:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <main+0xb8>)
 8001068:	2100      	movs	r1, #0
 800106a:	4816      	ldr	r0, [pc, #88]	; (80010c4 <main+0xbc>)
 800106c:	f00a fb60 	bl	800b730 <osThreadNew>
 8001070:	4603      	mov	r3, r0
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <main+0xc0>)
 8001074:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <main+0xc4>)
 8001078:	2100      	movs	r1, #0
 800107a:	4815      	ldr	r0, [pc, #84]	; (80010d0 <main+0xc8>)
 800107c:	f00a fb58 	bl	800b730 <osThreadNew>
 8001080:	4603      	mov	r3, r0
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <main+0xcc>)
 8001084:	6013      	str	r3, [r2, #0]

  /* creation of USBTask */
  USBTaskHandle = osThreadNew(StartUSBTask, NULL, &USBTask_attributes);
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <main+0xd0>)
 8001088:	2100      	movs	r1, #0
 800108a:	4814      	ldr	r0, [pc, #80]	; (80010dc <main+0xd4>)
 800108c:	f00a fb50 	bl	800b730 <osThreadNew>
 8001090:	4603      	mov	r3, r0
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <main+0xd8>)
 8001094:	6013      	str	r3, [r2, #0]

  /* creation of MotorSpeedTask */
  MotorSpeedTaskHandle = osThreadNew(StartMotorSpeedTask, NULL, &MotorSpeedTask_attributes);
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <main+0xdc>)
 8001098:	2100      	movs	r1, #0
 800109a:	4813      	ldr	r0, [pc, #76]	; (80010e8 <main+0xe0>)
 800109c:	f00a fb48 	bl	800b730 <osThreadNew>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <main+0xe4>)
 80010a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a6:	f00a fb1d 	bl	800b6e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010aa:	e7fe      	b.n	80010aa <main+0xa2>
 80010ac:	20000554 	.word	0x20000554
 80010b0:	200004f8 	.word	0x200004f8
 80010b4:	08017108 	.word	0x08017108
 80010b8:	08001741 	.word	0x08001741
 80010bc:	20000540 	.word	0x20000540
 80010c0:	0801712c 	.word	0x0801712c
 80010c4:	08001945 	.word	0x08001945
 80010c8:	20000544 	.word	0x20000544
 80010cc:	08017150 	.word	0x08017150
 80010d0:	080019a9 	.word	0x080019a9
 80010d4:	20000548 	.word	0x20000548
 80010d8:	08017174 	.word	0x08017174
 80010dc:	08001af1 	.word	0x08001af1
 80010e0:	2000054c 	.word	0x2000054c
 80010e4:	08017198 	.word	0x08017198
 80010e8:	08001b03 	.word	0x08001b03
 80010ec:	20000550 	.word	0x20000550

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	; 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	2230      	movs	r2, #48	; 0x30
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00d fe9b 	bl	800ee3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <SystemClock_Config+0xc8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <SystemClock_Config+0xc8>)
 800111e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <SystemClock_Config+0xc8>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <SystemClock_Config+0xcc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a20      	ldr	r2, [pc, #128]	; (80011bc <SystemClock_Config+0xcc>)
 800113a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <SystemClock_Config+0xcc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001160:	230f      	movs	r3, #15
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001164:	2390      	movs	r3, #144	; 0x90
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001168:	2304      	movs	r3, #4
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800116c:	2305      	movs	r3, #5
 800116e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	4618      	mov	r0, r3
 8001176:	f004 ff11 	bl	8005f9c <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001180:	f000 fcda 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 f973 	bl	800648c <HAL_RCC_ClockConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011ac:	f000 fcc4 	bl	8001b38 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3750      	adds	r7, #80	; 0x50
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_ADC1_Init+0xb4>)
 80011d4:	4a28      	ldr	r2, [pc, #160]	; (8001278 <MX_ADC1_Init+0xb8>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_ADC1_Init+0xb4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <MX_ADC1_Init+0xb4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_ADC1_Init+0xb4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_ADC1_Init+0xb4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_ADC1_Init+0xb4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_ADC1_Init+0xb4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_ADC1_Init+0xb4>)
 8001200:	4a1e      	ldr	r2, [pc, #120]	; (800127c <MX_ADC1_Init+0xbc>)
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_ADC1_Init+0xb4>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_ADC1_Init+0xb4>)
 800120c:	2202      	movs	r2, #2
 800120e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_ADC1_Init+0xb4>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_ADC1_Init+0xb4>)
 800121a:	2201      	movs	r2, #1
 800121c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_ADC1_Init+0xb4>)
 8001220:	f002 f90e 	bl	8003440 <HAL_ADC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 fc85 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800122e:	2306      	movs	r3, #6
 8001230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001236:	2307      	movs	r3, #7
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_ADC1_Init+0xb4>)
 8001240:	f002 fb6a 	bl	8003918 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800124a:	f000 fc75 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800124e:	2301      	movs	r3, #1
 8001250:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_ADC1_Init+0xb4>)
 800125c:	f002 fb5c 	bl	8003918 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001266:	f000 fc67 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000300 	.word	0x20000300
 8001278:	40012000 	.word	0x40012000
 800127c:	0f000001 	.word	0x0f000001

08001280 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_CRC_Init+0x20>)
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <MX_CRC_Init+0x24>)
 8001288:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_CRC_Init+0x20>)
 800128c:	f002 fee0 	bl	8004050 <HAL_CRC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001296:	f000 fc4f 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200003a8 	.word	0x200003a8
 80012a4:	40023000 	.word	0x40023000

080012a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_SPI1_Init+0x64>)
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <MX_SPI1_Init+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_SPI1_Init+0x64>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_SPI1_Init+0x64>)
 80012c8:	2202      	movs	r2, #2
 80012ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_SPI1_Init+0x64>)
 80012d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_SPI1_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_SPI1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_SPI1_Init+0x64>)
 80012f4:	220a      	movs	r2, #10
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_SPI1_Init+0x64>)
 80012fa:	f005 fac5 	bl	8006888 <HAL_SPI_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001304:	f000 fc18 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200003b0 	.word	0x200003b0
 8001310:	40013000 	.word	0x40013000

08001314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM2_Init+0x94>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44999;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM2_Init+0x94>)
 800133a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800133e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_TIM2_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM2_Init+0x94>)
 8001348:	220f      	movs	r2, #15
 800134a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_TIM2_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_TIM2_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_TIM2_Init+0x94>)
 800135a:	f005 fd33 	bl	8006dc4 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001364:	f000 fbe8 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <MX_TIM2_Init+0x94>)
 8001376:	f006 f84b 	bl	8007410 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 fbda 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_TIM2_Init+0x94>)
 8001392:	f006 fca7 	bl	8007ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800139c:	f000 fbcc 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000468 	.word	0x20000468

080013ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_TIM3_Init+0xac>)
 80013d0:	4a22      	ldr	r2, [pc, #136]	; (800145c <MX_TIM3_Init+0xb0>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_TIM3_Init+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_TIM3_Init+0xac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_TIM3_Init+0xac>)
 80013e2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80013e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_TIM3_Init+0xac>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_TIM3_Init+0xac>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013f4:	4818      	ldr	r0, [pc, #96]	; (8001458 <MX_TIM3_Init+0xac>)
 80013f6:	f005 fdf1 	bl	8006fdc <HAL_TIM_PWM_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 fb9a 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4619      	mov	r1, r3
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <MX_TIM3_Init+0xac>)
 8001414:	f006 fc66 	bl	8007ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800141e:	f000 fb8b 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001422:	2360      	movs	r3, #96	; 0x60
 8001424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_TIM3_Init+0xac>)
 800143a:	f005 ff27 	bl	800728c <HAL_TIM_PWM_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001444:	f000 fb78 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001448:	4803      	ldr	r0, [pc, #12]	; (8001458 <MX_TIM3_Init+0xac>)
 800144a:	f001 fe23 	bl	8003094 <HAL_TIM_MspPostInit>

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200004b0 	.word	0x200004b0
 800145c:	40000400 	.word	0x40000400

08001460 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_TIM4_Init+0xa0>)
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <MX_TIM4_Init+0xa4>)
 8001482:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_TIM4_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_TIM4_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_TIM4_Init+0xa0>)
 8001492:	f242 7210 	movw	r2, #10000	; 0x2710
 8001496:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_TIM4_Init+0xa0>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_TIM4_Init+0xa0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <MX_TIM4_Init+0xa0>)
 80014a6:	f005 fc8d 	bl	8006dc4 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80014b0:	f000 fb42 	bl	8001b38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80014b4:	2307      	movs	r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80014b8:	2350      	movs	r3, #80	; 0x50
 80014ba:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 80014c0:	230f      	movs	r3, #15
 80014c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <MX_TIM4_Init+0xa0>)
 80014cc:	f006 f867 	bl	800759e <HAL_TIM_SlaveConfigSynchro>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80014d6:	f000 fb2f 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <MX_TIM4_Init+0xa0>)
 80014e8:	f006 fbfc 	bl	8007ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80014f2:	f000 fb21 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200004f8 	.word	0x200004f8
 8001504:	40000800 	.word	0x40000800

08001508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_DMA_Init+0x4c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <MX_DMA_Init+0x4c>)
 8001518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_DMA_Init+0x4c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	2038      	movs	r0, #56	; 0x38
 8001530:	f002 fd64 	bl	8003ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001534:	2038      	movs	r0, #56	; 0x38
 8001536:	f002 fd7d 	bl	8004034 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	203a      	movs	r0, #58	; 0x3a
 8001540:	f002 fd5c 	bl	8003ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001544:	203a      	movs	r0, #58	; 0x3a
 8001546:	f002 fd75 	bl	8004034 <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_GPIO_Init+0x98>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MX_GPIO_Init+0x98>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_GPIO_Init+0x98>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_GPIO_Init+0x98>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <MX_GPIO_Init+0x98>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_GPIO_Init+0x98>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_GPIO_Init+0x98>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <MX_GPIO_Init+0x98>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_GPIO_Init+0x98>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|DC_Pin|CS_Pin|M_IN1_Pin
 80015c2:	2200      	movs	r2, #0
 80015c4:	212f      	movs	r1, #47	; 0x2f
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <MX_GPIO_Init+0x9c>)
 80015c8:	f003 fa52 	bl	8004a70 <HAL_GPIO_WritePin>
                          |M_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RST_Pin DC_Pin CS_Pin M_IN1_Pin
                           M_IN2_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CS_Pin|M_IN1_Pin
 80015cc:	232f      	movs	r3, #47	; 0x2f
 80015ce:	60fb      	str	r3, [r7, #12]
                          |M_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_GPIO_Init+0x9c>)
 80015e4:	f003 f8c0 	bl	8004768 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020400 	.word	0x40020400

080015f8 <printTime>:

/* USER CODE BEGIN 4 */
void printTime() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af04      	add	r7, sp, #16
	char str_s[10];
	TIME_ON.h = HAL_GetTick() / ONEHOUR;
 80015fe:	f001 feef 	bl	80033e0 <HAL_GetTick>
 8001602:	4603      	mov	r3, r0
 8001604:	4a47      	ldr	r2, [pc, #284]	; (8001724 <printTime+0x12c>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0d5b      	lsrs	r3, r3, #21
 800160c:	4a46      	ldr	r2, [pc, #280]	; (8001728 <printTime+0x130>)
 800160e:	6013      	str	r3, [r2, #0]
	TIME_ON.m = HAL_GetTick() / MINUT;
 8001610:	f001 fee6 	bl	80033e0 <HAL_GetTick>
 8001614:	4603      	mov	r3, r0
 8001616:	4a45      	ldr	r2, [pc, #276]	; (800172c <printTime+0x134>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0b9b      	lsrs	r3, r3, #14
 800161e:	4a42      	ldr	r2, [pc, #264]	; (8001728 <printTime+0x130>)
 8001620:	6053      	str	r3, [r2, #4]
	TIME_ON.s = HAL_GetTick() / SEC;
 8001622:	f001 fedd 	bl	80033e0 <HAL_GetTick>
 8001626:	4603      	mov	r3, r0
 8001628:	4a41      	ldr	r2, [pc, #260]	; (8001730 <printTime+0x138>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	099b      	lsrs	r3, r3, #6
 8001630:	4a3d      	ldr	r2, [pc, #244]	; (8001728 <printTime+0x130>)
 8001632:	6093      	str	r3, [r2, #8]

	if (TIME_ON.s > 59) {
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <printTime+0x130>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b3b      	cmp	r3, #59	; 0x3b
 800163a:	d923      	bls.n	8001684 <printTime+0x8c>
		if (TIME_ON.h > 0) {
 800163c:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <printTime+0x130>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00f      	beq.n	8001664 <printTime+0x6c>
			TIME_ON.s = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 8001644:	f001 fecc 	bl	80033e0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <printTime+0x130>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4939      	ldr	r1, [pc, #228]	; (8001734 <printTime+0x13c>)
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a36      	ldr	r2, [pc, #216]	; (8001730 <printTime+0x138>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <printTime+0x130>)
 8001660:	6093      	str	r3, [r2, #8]
 8001662:	e00f      	b.n	8001684 <printTime+0x8c>

		} else {
			TIME_ON.s = (HAL_GetTick() - (MINUT * TIME_ON.m)) / SEC;
 8001664:	f001 febc 	bl	80033e0 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <printTime+0x130>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <printTime+0x138>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <printTime+0x130>)
 8001682:	6093      	str	r3, [r2, #8]
		}
	}
	if (TIME_ON.m > 59) {
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <printTime+0x130>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b3b      	cmp	r3, #59	; 0x3b
 800168a:	d90f      	bls.n	80016ac <printTime+0xb4>
		TIME_ON.m = (HAL_GetTick() - (MINUT * TIME_ON.h)) / SEC;
 800168c:	f001 fea8 	bl	80033e0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <printTime+0x130>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f64e 2160 	movw	r1, #60000	; 0xea60
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4a23      	ldr	r2, [pc, #140]	; (8001730 <printTime+0x138>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <printTime+0x130>)
 80016aa:	6053      	str	r3, [r2, #4]
	}
	if (TIME_ON.h >= HAL_ERROR) {
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <printTime+0x130>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00e      	beq.n	80016d2 <printTime+0xda>
		TIME_ON.h = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 80016b4:	f001 fe94 	bl	80033e0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <printTime+0x130>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	491d      	ldr	r1, [pc, #116]	; (8001734 <printTime+0x13c>)
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <printTime+0x138>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <printTime+0x130>)
 80016d0:	6013      	str	r3, [r2, #0]
	}

	sprintf(str_s, "%li:%li:%li ", TIME_ON.h, TIME_ON.m, TIME_ON.s);
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <printTime+0x130>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <printTime+0x130>)
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <printTime+0x130>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	1d38      	adds	r0, r7, #4
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	460b      	mov	r3, r1
 80016e4:	4914      	ldr	r1, [pc, #80]	; (8001738 <printTime+0x140>)
 80016e6:	f00e fb3f 	bl	800fd68 <siprintf>

	ST7789_DrawFillRoundRect(0, 0, 90, 50, 0, ST7789_BLACK);
 80016ea:	2300      	movs	r3, #0
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2332      	movs	r3, #50	; 0x32
 80016f4:	225a      	movs	r2, #90	; 0x5a
 80016f6:	2100      	movs	r1, #0
 80016f8:	2000      	movs	r0, #0
 80016fa:	f001 f96b 	bl	80029d4 <ST7789_DrawFillRoundRect>

	ST7789_print(5, 5, ST7789_GREEN, ST7789_BLACK, 0, &Font_11x18, 1, str_s);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	2301      	movs	r3, #1
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <printTime+0x144>)
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	2300      	movs	r3, #0
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2300      	movs	r3, #0
 8001710:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001714:	2105      	movs	r1, #5
 8001716:	2005      	movs	r0, #5
 8001718:	f001 f81e 	bl	8002758 <ST7789_print>
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	95217cb1 	.word	0x95217cb1
 8001728:	20000558 	.word	0x20000558
 800172c:	45e7b273 	.word	0x45e7b273
 8001730:	10624dd3 	.word	0x10624dd3
 8001734:	0036ee80 	.word	0x0036ee80
 8001738:	080136c8 	.word	0x080136c8
 800173c:	20000000 	.word	0x20000000

08001740 <StartDisplayTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af04      	add	r7, sp, #16
 8001746:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001748:	f00c fd20 	bl	800e18c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	char str[10];
	ST7789_FillScreen(ST7789_BLACK);
 800174c:	2000      	movs	r0, #0
 800174e:	f000 fb0b 	bl	8001d68 <ST7789_FillScreen>
	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8001752:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001756:	2250      	movs	r2, #80	; 0x50
 8001758:	2178      	movs	r1, #120	; 0x78
 800175a:	20a0      	movs	r0, #160	; 0xa0
 800175c:	f000 fdda 	bl	8002314 <ST7789_DrawCircleFilled>
	flagt.stratSend = 0;
 8001760:	4b71      	ldr	r3, [pc, #452]	; (8001928 <StartDisplayTask+0x1e8>)
 8001762:	2200      	movs	r2, #0
 8001764:	705a      	strb	r2, [r3, #1]
	flagt.Heat = 0;
 8001766:	4b70      	ldr	r3, [pc, #448]	; (8001928 <StartDisplayTask+0x1e8>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for (;;) {
		if (TIME_ON.m <= TIMEFORSENSORS) {
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <StartDisplayTask+0x1ec>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d850      	bhi.n	8001816 <StartDisplayTask+0xd6>
			if (ch4.actual != ch4.last) {
 8001774:	4b6e      	ldr	r3, [pc, #440]	; (8001930 <StartDisplayTask+0x1f0>)
 8001776:	881a      	ldrh	r2, [r3, #0]
 8001778:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <StartDisplayTask+0x1f0>)
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	429a      	cmp	r2, r3
 800177e:	f000 80cc 	beq.w	800191a <StartDisplayTask+0x1da>
				sprintf(str, "%i %%", ch4.actual);
 8001782:	4b6b      	ldr	r3, [pc, #428]	; (8001930 <StartDisplayTask+0x1f0>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4969      	ldr	r1, [pc, #420]	; (8001934 <StartDisplayTask+0x1f4>)
 800178e:	4618      	mov	r0, r3
 8001790:	f00e faea 	bl	800fd68 <siprintf>
				ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8001794:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001798:	2250      	movs	r2, #80	; 0x50
 800179a:	2178      	movs	r1, #120	; 0x78
 800179c:	20a0      	movs	r0, #160	; 0xa0
 800179e:	f000 fdb9 	bl	8002314 <ST7789_DrawCircleFilled>

				ST7789_print(130, 70, ST7789_WHITE, ST7789_BLACK, 0,
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <StartDisplayTask+0x1f8>)
 80017a4:	9303      	str	r3, [sp, #12]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	4b64      	ldr	r3, [pc, #400]	; (800193c <StartDisplayTask+0x1fc>)
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b8:	2146      	movs	r1, #70	; 0x46
 80017ba:	2082      	movs	r0, #130	; 0x82
 80017bc:	f000 ffcc 	bl	8002758 <ST7789_print>
						&Font_16x26, 1, "Wait");

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	9303      	str	r3, [sp, #12]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <StartDisplayTask+0x1fc>)
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d8:	216e      	movs	r1, #110	; 0x6e
 80017da:	2087      	movs	r0, #135	; 0x87
 80017dc:	f000 ffbc 	bl	8002758 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4956      	ldr	r1, [pc, #344]	; (8001940 <StartDisplayTask+0x200>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00e fabe 	bl	800fd68 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	9303      	str	r3, [sp, #12]
 80017f2:	2301      	movs	r3, #1
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <StartDisplayTask+0x1fc>)
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	2300      	movs	r3, #0
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2300      	movs	r3, #0
 8001800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001804:	2196      	movs	r1, #150	; 0x96
 8001806:	2087      	movs	r0, #135	; 0x87
 8001808:	f000 ffa6 	bl	8002758 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 800180c:	4b48      	ldr	r3, [pc, #288]	; (8001930 <StartDisplayTask+0x1f0>)
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <StartDisplayTask+0x1f0>)
 8001812:	805a      	strh	r2, [r3, #2]
 8001814:	e081      	b.n	800191a <StartDisplayTask+0x1da>
			}
		} else {
			if (flagt.Heat == 0) {
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <StartDisplayTask+0x1e8>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d13b      	bne.n	8001896 <StartDisplayTask+0x156>
				sprintf(str, "%i %%", ch4.actual);
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <StartDisplayTask+0x1f0>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4942      	ldr	r1, [pc, #264]	; (8001934 <StartDisplayTask+0x1f4>)
 800182a:	4618      	mov	r0, r3
 800182c:	f00e fa9c 	bl	800fd68 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 8001830:	231f      	movs	r3, #31
 8001832:	2250      	movs	r2, #80	; 0x50
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	20a0      	movs	r0, #160	; 0xa0
 8001838:	f000 fd6c 	bl	8002314 <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	2301      	movs	r3, #1
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <StartDisplayTask+0x1fc>)
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2300      	movs	r3, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001854:	216e      	movs	r1, #110	; 0x6e
 8001856:	2087      	movs	r0, #135	; 0x87
 8001858:	f000 ff7e 	bl	8002758 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4937      	ldr	r1, [pc, #220]	; (8001940 <StartDisplayTask+0x200>)
 8001862:	4618      	mov	r0, r3
 8001864:	f00e fa80 	bl	800fd68 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	9303      	str	r3, [sp, #12]
 800186e:	2301      	movs	r3, #1
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <StartDisplayTask+0x1fc>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001880:	2196      	movs	r1, #150	; 0x96
 8001882:	2087      	movs	r0, #135	; 0x87
 8001884:	f000 ff68 	bl	8002758 <ST7789_print>
						&Font_16x26, 1, str);
				ch4.last = ch4.actual;
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <StartDisplayTask+0x1f0>)
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <StartDisplayTask+0x1f0>)
 800188e:	805a      	strh	r2, [r3, #2]
				flagt.Heat = 1;
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <StartDisplayTask+0x1e8>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
			}
			if (ch4.actual != ch4.last) {
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <StartDisplayTask+0x1f0>)
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <StartDisplayTask+0x1f0>)
 800189c:	885b      	ldrh	r3, [r3, #2]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d038      	beq.n	8001914 <StartDisplayTask+0x1d4>
				sprintf(str, "%i %%", ch4.actual);
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <StartDisplayTask+0x1f0>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4921      	ldr	r1, [pc, #132]	; (8001934 <StartDisplayTask+0x1f4>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00e fa5a 	bl	800fd68 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 80018b4:	231f      	movs	r3, #31
 80018b6:	2250      	movs	r2, #80	; 0x50
 80018b8:	2178      	movs	r1, #120	; 0x78
 80018ba:	20a0      	movs	r0, #160	; 0xa0
 80018bc:	f000 fd2a 	bl	8002314 <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	9303      	str	r3, [sp, #12]
 80018c6:	2301      	movs	r3, #1
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <StartDisplayTask+0x1fc>)
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2300      	movs	r3, #0
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	216e      	movs	r1, #110	; 0x6e
 80018da:	2087      	movs	r0, #135	; 0x87
 80018dc:	f000 ff3c 	bl	8002758 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4916      	ldr	r1, [pc, #88]	; (8001940 <StartDisplayTask+0x200>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00e fa3e 	bl	800fd68 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	9303      	str	r3, [sp, #12]
 80018f2:	2301      	movs	r3, #1
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <StartDisplayTask+0x1fc>)
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	2300      	movs	r3, #0
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2300      	movs	r3, #0
 8001900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001904:	2196      	movs	r1, #150	; 0x96
 8001906:	2087      	movs	r0, #135	; 0x87
 8001908:	f000 ff26 	bl	8002758 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <StartDisplayTask+0x1f0>)
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <StartDisplayTask+0x1f0>)
 8001912:	805a      	strh	r2, [r3, #2]
			}
			flagt.stratSend = 1;
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <StartDisplayTask+0x1e8>)
 8001916:	2201      	movs	r2, #1
 8001918:	705a      	strb	r2, [r3, #1]
		}

		printTime();
 800191a:	f7ff fe6d 	bl	80015f8 <printTime>
		osDelay(SEC);
 800191e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001922:	f009 ff97 	bl	800b854 <osDelay>
		if (TIME_ON.m <= TIMEFORSENSORS) {
 8001926:	e721      	b.n	800176c <StartDisplayTask+0x2c>
 8001928:	20000574 	.word	0x20000574
 800192c:	20000558 	.word	0x20000558
 8001930:	20000564 	.word	0x20000564
 8001934:	080136d8 	.word	0x080136d8
 8001938:	080136e0 	.word	0x080136e0
 800193c:	20000008 	.word	0x20000008
 8001940:	080136e8 	.word	0x080136e8

08001944 <StartMotorTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
	/* Infinite loop */
	for (;;) {
		if (ch4.actual > 20) {
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <StartMotorTask+0x58>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	2b14      	cmp	r3, #20
 8001952:	d90f      	bls.n	8001974 <StartMotorTask+0x30>
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	4811      	ldr	r0, [pc, #68]	; (80019a0 <StartMotorTask+0x5c>)
 800195a:	f003 f889 	bl	8004a70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2108      	movs	r1, #8
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <StartMotorTask+0x5c>)
 8001964:	f003 f884 	bl	8004a70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2120      	movs	r1, #32
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <StartMotorTask+0x5c>)
 800196e:	f003 f87f 	bl	8004a70 <HAL_GPIO_WritePin>
 8001972:	e00e      	b.n	8001992 <StartMotorTask+0x4e>
		} else {
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2110      	movs	r1, #16
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <StartMotorTask+0x5c>)
 800197a:	f003 f879 	bl	8004a70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2108      	movs	r1, #8
 8001982:	4807      	ldr	r0, [pc, #28]	; (80019a0 <StartMotorTask+0x5c>)
 8001984:	f003 f874 	bl	8004a70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2120      	movs	r1, #32
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <StartMotorTask+0x5c>)
 800198e:	f003 f86f 	bl	8004a70 <HAL_GPIO_WritePin>
		}
		osDelay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f009 ff5e 	bl	800b854 <osDelay>
		if (ch4.actual > 20) {
 8001998:	e7d8      	b.n	800194c <StartMotorTask+0x8>
 800199a:	bf00      	nop
 800199c:	20000564 	.word	0x20000564
 80019a0:	40020400 	.word	0x40020400
 80019a4:	00000000 	.word	0x00000000

080019a8 <StartADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
//		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
//			Error_Handler();
//		}
//
//		HAL_ADC_Start(&hadc1);
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) raw, 2);
 80019b0:	2202      	movs	r2, #2
 80019b2:	4943      	ldr	r1, [pc, #268]	; (8001ac0 <StartADCTask+0x118>)
 80019b4:	4843      	ldr	r0, [pc, #268]	; (8001ac4 <StartADCTask+0x11c>)
 80019b6:	f001 fe97 	bl	80036e8 <HAL_ADC_Start_DMA>
//		HAL_ADC_PollForConversion(&hadc1, 1000);
//		raw = HAL_ADC_GetValue(&hadc1);
		sprintf((char*) data, "-%i ", raw[0]);
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <StartADCTask+0x118>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	4941      	ldr	r1, [pc, #260]	; (8001ac8 <StartADCTask+0x120>)
 80019c2:	4842      	ldr	r0, [pc, #264]	; (8001acc <StartADCTask+0x124>)
 80019c4:	f00e f9d0 	bl	800fd68 <siprintf>
		CDC_Transmit_FS(data, strlen((char*) data));
 80019c8:	4840      	ldr	r0, [pc, #256]	; (8001acc <StartADCTask+0x124>)
 80019ca:	f7fe fc09 	bl	80001e0 <strlen>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4619      	mov	r1, r3
 80019d4:	483d      	ldr	r0, [pc, #244]	; (8001acc <StartADCTask+0x124>)
 80019d6:	f00c fcad 	bl	800e334 <CDC_Transmit_FS>

		ch4.temp_BIT12 = raw[1];
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <StartADCTask+0x118>)
 80019dc:	885a      	ldrh	r2, [r3, #2]
 80019de:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <StartADCTask+0x128>)
 80019e0:	80da      	strh	r2, [r3, #6]
//		HAL_ADC_GetValue(&hadc1);
//		HAL_ADC_Stop(&hadc1);
//
		Vout = ch4.temp_BIT12 * (V_SUPPLY / 4095);
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <StartADCTask+0x128>)
 80019e4:	88db      	ldrh	r3, [r3, #6]
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001ad4 <StartADCTask+0x12c>
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fa:	ee17 3a90 	vmov	r3, s15
 80019fe:	82fb      	strh	r3, [r7, #22]
//
		Vout_Temp = (Vout * R10K) / (V_SUPPLY - Vout);
 8001a00:	8afb      	ldrh	r3, [r7, #22]
 8001a02:	f242 62fc 	movw	r2, #9980	; 0x26fc
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a12:	8afb      	ldrh	r3, [r7, #22]
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ad8 <StartADCTask+0x130>
 8001a20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a28:	edc7 7a04 	vstr	s15, [r7, #16]
//
		ch4.real_temp = ((T0 * B_PARAM_THERMISTOR)
				/ (T0 * (long) (Vout_Temp / R10K) + B_PARAM_THERMISTOR));
 8001a2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a30:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001adc <StartADCTask+0x134>
 8001a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a40:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ae0 <StartADCTask+0x138>
 8001a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a48:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ae4 <StartADCTask+0x13c>
 8001a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a50:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001ae8 <StartADCTask+0x140>
 8001a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
		ch4.real_temp = ((T0 * B_PARAM_THERMISTOR)
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <StartADCTask+0x128>)
 8001a5a:	edc3 7a02 	vstr	s15, [r3, #8]
//
		Celsius_temp = ch4.real_temp - 273.15;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <StartADCTask+0x128>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd78 	bl	8000558 <__aeabi_f2d>
 8001a68:	a313      	add	r3, pc, #76	; (adr r3, 8001ab8 <StartADCTask+0x110>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fc13 	bl	8000298 <__aeabi_dsub>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f8bd 	bl	8000bf8 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]
//			Error_Handler();
//		}
//
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, 1000);
		ch4.BIT12 = raw[0];
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <StartADCTask+0x118>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <StartADCTask+0x128>)
 8001a88:	809a      	strh	r2, [r3, #4]
//		HAL_ADC_GetValue(&hadc1);
//		HAL_ADC_Stop(&hadc1);
//		sprintf((char*) data, "%i ", ch4.BIT12);
//		CDC_Transmit_FS(data, strlen((char*) data));
////		adcVal = ch4.BIT12;
		ch4.actual = (ch4.BIT12 * 100) / SEBSORMAXVAL;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <StartADCTask+0x128>)
 8001a8c:	889b      	ldrh	r3, [r3, #4]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <StartADCTask+0x144>)
 8001a98:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9c:	441a      	add	r2, r3
 8001a9e:	12d2      	asrs	r2, r2, #11
 8001aa0:	17db      	asrs	r3, r3, #31
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <StartADCTask+0x128>)
 8001aa8:	801a      	strh	r2, [r3, #0]
		osDelay(900);
 8001aaa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001aae:	f009 fed1 	bl	800b854 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) raw, 2);
 8001ab2:	e77d      	b.n	80019b0 <StartADCTask+0x8>
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	66666666 	.word	0x66666666
 8001abc:	40711266 	.word	0x40711266
 8001ac0:	200005f8 	.word	0x200005f8
 8001ac4:	20000300 	.word	0x20000300
 8001ac8:	080136ec 	.word	0x080136ec
 8001acc:	20000578 	.word	0x20000578
 8001ad0:	20000564 	.word	0x20000564
 8001ad4:	3a534067 	.word	0x3a534067
 8001ad8:	40533333 	.word	0x40533333
 8001adc:	461bf000 	.word	0x461bf000
 8001ae0:	43951333 	.word	0x43951333
 8001ae4:	4576e000 	.word	0x4576e000
 8001ae8:	498fc2e4 	.word	0x498fc2e4
 8001aec:	a00a00a1 	.word	0xa00a00a1

08001af0 <StartUSBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUSBTask */
void StartUSBTask(void *argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
//				ch4.temp_BIT12);
//		CDC_Transmit_FS(data, strlen((char*) data));

//			}
//		}
		osDelay(SEC);
 8001af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001afc:	f009 feaa 	bl	800b854 <osDelay>
 8001b00:	e7fa      	b.n	8001af8 <StartUSBTask+0x8>

08001b02 <StartMotorSpeedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorSpeedTask */
void StartMotorSpeedTask(void *argument)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
//		motor.TimeForM /= MINUT;
//
//		motor.count = __HAL_TIM_GetCounter(&htim4);
//		motor.speed = motor.count / motor.TimeForM / 2; // 2 signal per revolution
//		motor.TimeForM = HAL_GetTick();
		osDelay(1000);
 8001b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b0e:	f009 fea1 	bl	800b854 <osDelay>
 8001b12:	e7fa      	b.n	8001b0a <StartMotorSpeedTask+0x8>

08001b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b26:	f001 fc47 	bl	80033b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <ST7789_Init>:
	  
	  
//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	
	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);	
 8001b48:	20c8      	movs	r0, #200	; 0xc8
 8001b4a:	f001 fc55 	bl	80033f8 <HAL_Delay>

	ST7789_Width = ST7789_WIDTH;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <ST7789_Init+0x30>)
 8001b50:	22f0      	movs	r2, #240	; 0xf0
 8001b52:	801a      	strh	r2, [r3, #0]
	ST7789_Height = ST7789_HEIGHT;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <ST7789_Init+0x34>)
 8001b56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b5a:	801a      	strh	r2, [r3, #0]


    ST7789_Select();
 8001b5c:	f000 f810 	bl	8001b80 <ST7789_Select>
	
    ST7789_HardReset(); 
 8001b60:	f000 f870 	bl	8001c44 <ST7789_HardReset>
    ST7789_ExecuteCommandList(init_cmds);
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <ST7789_Init+0x38>)
 8001b66:	f000 f823 	bl	8001bb0 <ST7789_ExecuteCommandList>
	
    ST7789_Unselect();
 8001b6a:	f000 f815 	bl	8001b98 <ST7789_Unselect>

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200005fe 	.word	0x200005fe
 8001b78:	20000600 	.word	0x20000600
 8001b7c:	080171bc 	.word	0x080171bc

08001b80 <ST7789_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Select(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2104      	movs	r1, #4
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <ST7789_Select+0x14>)
 8001b8a:	f002 ff71 	bl	8004a70 <HAL_GPIO_WritePin>
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40020400 	.word	0x40020400

08001b98 <ST7789_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Unselect(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <ST7789_Unselect+0x14>)
 8001ba2:	f002 ff65 	bl	8004a70 <HAL_GPIO_WritePin>
			#endif
			//-----------------------------------------------------
	
	#endif
	
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020400 	.word	0x40020400

08001bb0 <ST7789_ExecuteCommandList>:


//==============================================================================
// Процедура отправки данных для инициализации дисплея
//==============================================================================
 void ST7789_ExecuteCommandList(const uint8_t *addr) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001bc2:	e034      	b.n	8001c2e <ST7789_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	72fb      	strb	r3, [r7, #11]
        ST7789_SendCmd(cmd);
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f84b 	bl	8001c6c <ST7789_SendCmd>

        numArgs = *addr++;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001be0:	7abb      	ldrb	r3, [r7, #10]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001bea:	7abb      	ldrb	r3, [r7, #10]
 8001bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001bf2:	7abb      	ldrb	r3, [r7, #10]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <ST7789_ExecuteCommandList+0x5a>
            ST7789_SendDataMASS((uint8_t*)addr, numArgs);
 8001bf8:	7abb      	ldrb	r3, [r7, #10]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f875 	bl	8001cec <ST7789_SendDataMASS>
            addr += numArgs;
 8001c02:	7abb      	ldrb	r3, [r7, #10]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001c0a:	89bb      	ldrh	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00e      	beq.n	8001c2e <ST7789_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001c1a:	89bb      	ldrh	r3, [r7, #12]
 8001c1c:	2bff      	cmp	r3, #255	; 0xff
 8001c1e:	d102      	bne.n	8001c26 <ST7789_ExecuteCommandList+0x76>
 8001c20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c24:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fbe5 	bl	80033f8 <HAL_Delay>
    while(numCommands--) {
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	1e5a      	subs	r2, r3, #1
 8001c32:	73fa      	strb	r2, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1c5      	bne.n	8001bc4 <ST7789_ExecuteCommandList+0x14>
        }
    }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <ST7789_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void ST7789_HardReset(void){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <ST7789_HardReset+0x24>)
 8001c4e:	f002 ff0f 	bl	8004a70 <HAL_GPIO_WritePin>
	HAL_Delay(20);	
 8001c52:	2014      	movs	r0, #20
 8001c54:	f001 fbd0 	bl	80033f8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <ST7789_HardReset+0x24>)
 8001c5e:	f002 ff07 	bl	8004a70 <HAL_GPIO_WritePin>
	
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40020400 	.word	0x40020400

08001c6c <ST7789_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline void ST7789_SendCmd(uint8_t Cmd){	
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
		
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7789_SPI_HAL
	
		 // pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2102      	movs	r1, #2
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <ST7789_SendCmd+0x44>)
 8001c7c:	f002 fef8 	bl	8004a70 <HAL_GPIO_WritePin>
					 
		 HAL_SPI_Transmit(&ST7789_SPI_HAL, &Cmd, 1, HAL_MAX_DELAY);
 8001c80:	1df9      	adds	r1, r7, #7
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	2201      	movs	r2, #1
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <ST7789_SendCmd+0x48>)
 8001c8a:	f004 fe86 	bl	800699a <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8001c8e:	bf00      	nop
 8001c90:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <ST7789_SendCmd+0x48>)
 8001c92:	f004 ffbe 	bl	8006c12 <HAL_SPI_GetState>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d1f9      	bne.n	8001c90 <ST7789_SendCmd+0x24>
				
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <ST7789_SendCmd+0x44>)
 8001ca2:	f002 fee5 	bl	8004a70 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
	
	#endif
	//-----------------------------------------------------------------------------------

}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	200003b0 	.word	0x200003b0

08001cb8 <ST7789_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline void ST7789_SendData(uint8_t Data ){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
	
		HAL_SPI_Transmit(&ST7789_SPI_HAL, &Data, 1, HAL_MAX_DELAY);
 8001cc2:	1df9      	adds	r1, r7, #7
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <ST7789_SendData+0x30>)
 8001ccc:	f004 fe65 	bl	800699a <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8001cd0:	bf00      	nop
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <ST7789_SendData+0x30>)
 8001cd4:	f004 ff9d 	bl	8006c12 <HAL_SPI_GetState>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d1f9      	bne.n	8001cd2 <ST7789_SendData+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200003b0 	.word	0x200003b0

08001cec <ST7789_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
		
		if( buff_size <= 0xFFFF ){
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d21a      	bcs.n	8001d34 <ST7789_SendDataMASS+0x48>
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4816      	ldr	r0, [pc, #88]	; (8001d64 <ST7789_SendDataMASS+0x78>)
 8001d0a:	f004 fe46 	bl	800699a <HAL_SPI_Transmit>
 8001d0e:	e01d      	b.n	8001d4c <ST7789_SendDataMASS+0x60>
		}
		else{
			while( buff_size > 0xFFFF ){
				HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, 0xFFFF, HAL_MAX_DELAY);
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4812      	ldr	r0, [pc, #72]	; (8001d64 <ST7789_SendDataMASS+0x78>)
 8001d1c:	f004 fe3d 	bl	800699a <HAL_SPI_Transmit>
				buff_size-=0xFFFF;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001d26:	3bff      	subs	r3, #255	; 0xff
 8001d28:	603b      	str	r3, [r7, #0]
				buff+=0xFFFF;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d30:	33ff      	adds	r3, #255	; 0xff
 8001d32:	607b      	str	r3, [r7, #4]
			while( buff_size > 0xFFFF ){
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d2e9      	bcs.n	8001d10 <ST7789_SendDataMASS+0x24>
			}
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <ST7789_SendDataMASS+0x78>)
 8001d48:	f004 fe27 	bl	800699a <HAL_SPI_Transmit>
		}
		
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8001d4c:	bf00      	nop
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <ST7789_SendDataMASS+0x78>)
 8001d50:	f004 ff5f 	bl	8006c12 <HAL_SPI_GetState>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d1f9      	bne.n	8001d4e <ST7789_SendDataMASS+0x62>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200003b0 	.word	0x200003b0

08001d68 <ST7789_FillScreen>:


//==============================================================================
// Процедура закрашивает экран цветом color
//==============================================================================
void ST7789_FillScreen(uint16_t color){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
	
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <ST7789_FillScreen+0x2c>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <ST7789_FillScreen+0x30>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b219      	sxth	r1, r3
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	460b      	mov	r3, r1
 8001d84:	2100      	movs	r1, #0
 8001d86:	2000      	movs	r0, #0
 8001d88:	f000 f808 	bl	8001d9c <ST7789_FillRect>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200005fe 	.word	0x200005fe
 8001d98:	20000600 	.word	0x20000600

08001d9c <ST7789_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	
  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 8001dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <ST7789_FillRect+0xb4>)
 8001dc0:	8812      	ldrh	r2, [r2, #0]
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	da40      	bge.n	8001e48 <ST7789_FillRect+0xac>
 8001dc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <ST7789_FillRect+0xb8>)
 8001dcc:	8812      	ldrh	r2, [r2, #0]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	da3a      	bge.n	8001e48 <ST7789_FillRect+0xac>
	  return;
  }
  
  if ((x + w) > ST7789_Width){	  
 8001dd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <ST7789_FillRect+0xb4>)
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	dd05      	ble.n	8001df0 <ST7789_FillRect+0x54>
	  w = ST7789_Width - x;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <ST7789_FillRect+0xb4>)
 8001de6:	881a      	ldrh	r2, [r3, #0]
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	807b      	strh	r3, [r7, #2]
  }
  
  if ((y + h) > ST7789_Height){
 8001df0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001df4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <ST7789_FillRect+0xb8>)
 8001dfc:	8812      	ldrh	r2, [r2, #0]
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	dd05      	ble.n	8001e0e <ST7789_FillRect+0x72>
	  h = ST7789_Height - y;
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <ST7789_FillRect+0xb8>)
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	803b      	strh	r3, [r7, #0]
  }
  
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 8001e0e:	88f8      	ldrh	r0, [r7, #6]
 8001e10:	88b9      	ldrh	r1, [r7, #4]
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	4413      	add	r3, r2
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29c      	uxth	r4, r3
 8001e1e:	88ba      	ldrh	r2, [r7, #4]
 8001e20:	883b      	ldrh	r3, [r7, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	f000 f814 	bl	8001e58 <ST7789_SetWindow>
  
//  for (uint32_t i = 0; i < (h * w); i++){
//	  ST7789_RamWrite(&color, 1);
//  }
		
  ST7789_RamWrite(&color, (h * w)); 
 8001e30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f107 0018 	add.w	r0, r7, #24
 8001e42:	f000 f82f 	bl	8001ea4 <ST7789_RamWrite>
 8001e46:	e000      	b.n	8001e4a <ST7789_FillRect+0xae>
	  return;
 8001e48:	bf00      	nop
}
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	200005fe 	.word	0x200005fe
 8001e54:	20000600 	.word	0x20000600

08001e58 <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4604      	mov	r4, r0
 8001e60:	4608      	mov	r0, r1
 8001e62:	4611      	mov	r1, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	4623      	mov	r3, r4
 8001e68:	80fb      	strh	r3, [r7, #6]
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80bb      	strh	r3, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	807b      	strh	r3, [r7, #2]
 8001e72:	4613      	mov	r3, r2
 8001e74:	803b      	strh	r3, [r7, #0]
	
	ST7789_Select();
 8001e76:	f7ff fe83 	bl	8001b80 <ST7789_Select>
	
	ST7789_ColumnSet(x0, x1);
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f833 	bl	8001eec <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 8001e86:	883a      	ldrh	r2, [r7, #0]
 8001e88:	88bb      	ldrh	r3, [r7, #4]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f86f 	bl	8001f70 <ST7789_RowSet>
	
	// write to RAM
	ST7789_SendCmd(ST7789_RAMWR);
 8001e92:	202c      	movs	r0, #44	; 0x2c
 8001e94:	f7ff feea 	bl	8001c6c <ST7789_SendCmd>
	
	ST7789_Unselect();
 8001e98:	f7ff fe7e 	bl	8001b98 <ST7789_Unselect>
	
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}

08001ea4 <ST7789_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
void ST7789_RamWrite(uint16_t *pBuff, uint32_t Len){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	
  ST7789_Select();
 8001eae:	f7ff fe67 	bl	8001b80 <ST7789_Select>
	
  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	737b      	strb	r3, [r7, #13]
	
  while (Len--){
 8001ec6:	e005      	b.n	8001ed4 <ST7789_RamWrite+0x30>
//    ST7789_SendData( buff[0] );  
//    ST7789_SendData( buff[1] );
	  ST7789_SendDataMASS( buff, 2);
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff0c 	bl	8001cec <ST7789_SendDataMASS>
  while (Len--){
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	1e5a      	subs	r2, r3, #1
 8001ed8:	603a      	str	r2, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f4      	bne.n	8001ec8 <ST7789_RamWrite+0x24>
  } 
	
  ST7789_Unselect();
 8001ede:	f7ff fe5b 	bl	8001b98 <ST7789_Unselect>
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <ST7789_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
 void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	80fb      	strh	r3, [r7, #6]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	80bb      	strh	r3, [r7, #4]
	
  if (ColumnStart > ColumnEnd){
 8001efc:	88fa      	ldrh	r2, [r7, #6]
 8001efe:	88bb      	ldrh	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d82a      	bhi.n	8001f5a <ST7789_ColumnSet+0x6e>
    return;
  }
  
  if (ColumnEnd > ST7789_Width){
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <ST7789_ColumnSet+0x7c>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	88ba      	ldrh	r2, [r7, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d827      	bhi.n	8001f5e <ST7789_ColumnSet+0x72>
    return;
  }
  
  ColumnStart += ST7789_X_Start;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <ST7789_ColumnSet+0x80>)
 8001f10:	881a      	ldrh	r2, [r3, #0]
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	4413      	add	r3, r2
 8001f16:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += ST7789_X_Start;
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <ST7789_ColumnSet+0x80>)
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	88bb      	ldrh	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	80bb      	strh	r3, [r7, #4]
  
  ST7789_SendCmd(ST7789_CASET);
 8001f22:	202a      	movs	r0, #42	; 0x2a
 8001f24:	f7ff fea2 	bl	8001c6c <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);  
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fec1 	bl	8001cb8 <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);  
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff febc 	bl	8001cb8 <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);  
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff feb5 	bl	8001cb8 <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);  
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff feb0 	bl	8001cb8 <ST7789_SendData>
 8001f58:	e002      	b.n	8001f60 <ST7789_ColumnSet+0x74>
    return;
 8001f5a:	bf00      	nop
 8001f5c:	e000      	b.n	8001f60 <ST7789_ColumnSet+0x74>
    return;
 8001f5e:	bf00      	nop
  
}
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200005fe 	.word	0x200005fe
 8001f6c:	200005fa 	.word	0x200005fa

08001f70 <ST7789_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
 void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	460a      	mov	r2, r1
 8001f7a:	80fb      	strh	r3, [r7, #6]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	80bb      	strh	r3, [r7, #4]
	
  if (RowStart > RowEnd){
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	88bb      	ldrh	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d82a      	bhi.n	8001fde <ST7789_RowSet+0x6e>
    return;
  }
  
  if (RowEnd > ST7789_Height){
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <ST7789_RowSet+0x7c>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	88ba      	ldrh	r2, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d827      	bhi.n	8001fe2 <ST7789_RowSet+0x72>
    return;
  }
  
  RowStart += ST7789_Y_Start;
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <ST7789_RowSet+0x80>)
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	4413      	add	r3, r2
 8001f9a:	80fb      	strh	r3, [r7, #6]
  RowEnd += ST7789_Y_Start;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <ST7789_RowSet+0x80>)
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	88bb      	ldrh	r3, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	80bb      	strh	r3, [r7, #4]
 
  ST7789_SendCmd(ST7789_RASET);
 8001fa6:	202b      	movs	r0, #43	; 0x2b
 8001fa8:	f7ff fe60 	bl	8001c6c <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);  
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fe7f 	bl	8001cb8 <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);  
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fe7a 	bl	8001cb8 <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);  
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe73 	bl	8001cb8 <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);  
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fe6e 	bl	8001cb8 <ST7789_SendData>
 8001fdc:	e002      	b.n	8001fe4 <ST7789_RowSet+0x74>
    return;
 8001fde:	bf00      	nop
 8001fe0:	e000      	b.n	8001fe4 <ST7789_RowSet+0x74>
    return;
 8001fe2:	bf00      	nop

}
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000600 	.word	0x20000600
 8001ff0:	200005fc 	.word	0x200005fc

08001ff4 <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
 void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
	
  int16_t TempValue = *pValue1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f9b3 2000 	ldrsh.w	r2, [r3]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	89fa      	ldrh	r2, [r7, #14]
 8002012:	801a      	strh	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <ST7789_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void ST7789_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af02      	add	r7, sp, #8
 8002026:	4604      	mov	r4, r0
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	4623      	mov	r3, r4
 8002030:	80fb      	strh	r3, [r7, #6]
 8002032:	4603      	mov	r3, r0
 8002034:	80bb      	strh	r3, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	807b      	strh	r3, [r7, #2]
 800203a:	4613      	mov	r3, r2
 800203c:	803b      	strh	r3, [r7, #0]
	
  if (x1 > x2){
 800203e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002042:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002046:	429a      	cmp	r2, r3
 8002048:	dd05      	ble.n	8002056 <ST7789_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 800204a:	1cba      	adds	r2, r7, #2
 800204c:	1dbb      	adds	r3, r7, #6
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ffcf 	bl	8001ff4 <SwapInt16Values>
  }
  
  if (y1 > y2){
 8002056:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800205a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800205e:	429a      	cmp	r2, r3
 8002060:	dd05      	ble.n	800206e <ST7789_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 8002062:	463a      	mov	r2, r7
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ffc3 	bl	8001ff4 <SwapInt16Values>
  }
  
  ST7789_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 800206e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002072:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002076:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800207a:	b29a      	uxth	r2, r3
 800207c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002080:	b29b      	uxth	r3, r3
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	b21c      	sxth	r4, r3
 8002088:	f9b7 3000 	ldrsh.w	r3, [r7]
 800208c:	b29a      	uxth	r2, r3
 800208e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002092:	b29b      	uxth	r3, r3
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	b29b      	uxth	r3, r3
 8002098:	b21a      	sxth	r2, r3
 800209a:	8b3b      	ldrh	r3, [r7, #24]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	4622      	mov	r2, r4
 80020a2:	f7ff fe7b 	bl	8001d9c <ST7789_FillRect>
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <ST7789_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
 void ST7789_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80020ae:	b590      	push	{r4, r7, lr}
 80020b0:	b087      	sub	sp, #28
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4604      	mov	r4, r0
 80020b6:	4608      	mov	r0, r1
 80020b8:	4611      	mov	r1, r2
 80020ba:	461a      	mov	r2, r3
 80020bc:	4623      	mov	r3, r4
 80020be:	80fb      	strh	r3, [r7, #6]
 80020c0:	4603      	mov	r3, r0
 80020c2:	80bb      	strh	r3, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	803b      	strh	r3, [r7, #0]
	
  const int16_t deltaX = abs(x2 - x1);
 80020cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80020d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bfb8      	it	lt
 80020da:	425b      	neglt	r3, r3
 80020dc:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80020de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80020e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bfb8      	it	lt
 80020ec:	425b      	neglt	r3, r3
 80020ee:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 80020f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	da01      	bge.n	8002100 <ST7789_DrawLine_Slow+0x52>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e001      	b.n	8002104 <ST7789_DrawLine_Slow+0x56>
 8002100:	f04f 33ff 	mov.w	r3, #4294967295
 8002104:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 8002106:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800210a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800210e:	429a      	cmp	r2, r3
 8002110:	da01      	bge.n	8002116 <ST7789_DrawLine_Slow+0x68>
 8002112:	2301      	movs	r3, #1
 8002114:	e001      	b.n	800211a <ST7789_DrawLine_Slow+0x6c>
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 800211c:	8aba      	ldrh	r2, [r7, #20]
 800211e:	8a7b      	ldrh	r3, [r7, #18]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	b29b      	uxth	r3, r3
 8002124:	82fb      	strh	r3, [r7, #22]

  ST7789_DrawPixel(x2, y2, color);
 8002126:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002128:	f9b7 1000 	ldrsh.w	r1, [r7]
 800212c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f8bd 	bl	80022b0 <ST7789_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 8002136:	e02c      	b.n	8002192 <ST7789_DrawLine_Slow+0xe4>
	  
    ST7789_DrawPixel(x1, y1, color);
 8002138:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800213a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800213e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f8b4 	bl	80022b0 <ST7789_DrawPixel>
    const int16_t error2 = error * 2;
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	b29b      	uxth	r3, r3
 800214e:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) {
 8002150:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002154:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002158:	425b      	negs	r3, r3
 800215a:	429a      	cmp	r2, r3
 800215c:	dd09      	ble.n	8002172 <ST7789_DrawLine_Slow+0xc4>
		
      error -= deltaY;
 800215e:	8afa      	ldrh	r2, [r7, #22]
 8002160:	8a7b      	ldrh	r3, [r7, #18]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	b29b      	uxth	r3, r3
 8002166:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8002168:	88fa      	ldrh	r2, [r7, #6]
 800216a:	8a3b      	ldrh	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 8002172:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002176:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800217a:	429a      	cmp	r2, r3
 800217c:	da09      	bge.n	8002192 <ST7789_DrawLine_Slow+0xe4>
		
      error += deltaX;
 800217e:	8afa      	ldrh	r2, [r7, #22]
 8002180:	8abb      	ldrh	r3, [r7, #20]
 8002182:	4413      	add	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 8002188:	88ba      	ldrh	r2, [r7, #4]
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	4413      	add	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 8002192:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002196:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800219a:	429a      	cmp	r2, r3
 800219c:	d1cc      	bne.n	8002138 <ST7789_DrawLine_Slow+0x8a>
 800219e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80021a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d1c6      	bne.n	8002138 <ST7789_DrawLine_Slow+0x8a>
    }
  }
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <ST7789_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	4604      	mov	r4, r0
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4623      	mov	r3, r4
 80021c4:	80fb      	strh	r3, [r7, #6]
 80021c6:	4603      	mov	r3, r0
 80021c8:	80bb      	strh	r3, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	807b      	strh	r3, [r7, #2]
 80021ce:	4613      	mov	r3, r2
 80021d0:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 80021d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d129      	bne.n	8002232 <ST7789_DrawLine+0x7e>

    if (y1 > y2){
 80021de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80021e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dd11      	ble.n	800220e <ST7789_DrawLine+0x5a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 80021ea:	88ba      	ldrh	r2, [r7, #4]
 80021ec:	883b      	ldrh	r3, [r7, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80021fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002200:	8b3b      	ldrh	r3, [r7, #24]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	2201      	movs	r2, #1
 8002208:	f7ff fdc8 	bl	8001d9c <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}
	
    return;
 800220c:	e04c      	b.n	80022a8 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 800220e:	883a      	ldrh	r2, [r7, #0]
 8002210:	88bb      	ldrh	r3, [r7, #4]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	b29b      	uxth	r3, r3
 8002216:	3301      	adds	r3, #1
 8002218:	b29b      	uxth	r3, r3
 800221a:	b21a      	sxth	r2, r3
 800221c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002220:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002224:	8b3b      	ldrh	r3, [r7, #24]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	2201      	movs	r2, #1
 800222c:	f7ff fdb6 	bl	8001d9c <ST7789_FillRect>
    return;
 8002230:	e03a      	b.n	80022a8 <ST7789_DrawLine+0xf4>
  }
  
  if (y1 == y2){
 8002232:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002236:	f9b7 3000 	ldrsh.w	r3, [r7]
 800223a:	429a      	cmp	r2, r3
 800223c:	d127      	bne.n	800228e <ST7789_DrawLine+0xda>
    
    if (x1 > x2){
 800223e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002242:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002246:	429a      	cmp	r2, r3
 8002248:	dd10      	ble.n	800226c <ST7789_DrawLine+0xb8>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b29b      	uxth	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	b21a      	sxth	r2, r3
 8002258:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800225c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002260:	8b3b      	ldrh	r3, [r7, #24]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2301      	movs	r3, #1
 8002266:	f7ff fd99 	bl	8001d9c <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}
	
    return;
 800226a:	e01d      	b.n	80022a8 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 800226c:	887a      	ldrh	r2, [r7, #2]
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	b21a      	sxth	r2, r3
 800227a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800227e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002282:	8b3b      	ldrh	r3, [r7, #24]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	f7ff fd88 	bl	8001d9c <ST7789_FillRect>
    return;
 800228c:	e00c      	b.n	80022a8 <ST7789_DrawLine+0xf4>
  }
  
  ST7789_DrawLine_Slow(x1, y1, x2, y2, color);
 800228e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002292:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002296:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800229a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800229e:	8b3b      	ldrh	r3, [r7, #24]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	4623      	mov	r3, r4
 80022a4:	f7ff ff03 	bl	80020ae <ST7789_DrawLine_Slow>
}
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}
	...

080022b0 <ST7789_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	460b      	mov	r3, r1
 80022bc:	80bb      	strh	r3, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	807b      	strh	r3, [r7, #2]
	
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 80022c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db1b      	blt.n	8002302 <ST7789_DrawPixel+0x52>
 80022ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <ST7789_DrawPixel+0x5c>)
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	4293      	cmp	r3, r2
 80022d4:	da15      	bge.n	8002302 <ST7789_DrawPixel+0x52>
 80022d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db11      	blt.n	8002302 <ST7789_DrawPixel+0x52>
 80022de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <ST7789_DrawPixel+0x60>)
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	4293      	cmp	r3, r2
 80022e8:	da0b      	bge.n	8002302 <ST7789_DrawPixel+0x52>
    return;
  }

  ST7789_SetWindow(x, y, x, y);
 80022ea:	88f8      	ldrh	r0, [r7, #6]
 80022ec:	88b9      	ldrh	r1, [r7, #4]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	f7ff fdb1 	bl	8001e58 <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 80022f6:	1cbb      	adds	r3, r7, #2
 80022f8:	2101      	movs	r1, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fdd2 	bl	8001ea4 <ST7789_RamWrite>
 8002300:	e000      	b.n	8002304 <ST7789_DrawPixel+0x54>
    return;
 8002302:	bf00      	nop
}
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200005fe 	.word	0x200005fe
 8002310:	20000600 	.word	0x20000600

08002314 <ST7789_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void ST7789_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af02      	add	r7, sp, #8
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4623      	mov	r3, r4
 8002324:	80fb      	strh	r3, [r7, #6]
 8002326:	4603      	mov	r3, r0
 8002328:	80bb      	strh	r3, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	807b      	strh	r3, [r7, #2]
 800232e:	4613      	mov	r3, r2
 8002330:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  int y = radius;
 8002336:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800233a:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 800233c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	f1c3 0301 	rsb	r3, r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
  int error = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 800234c:	e075      	b.n	800243a <ST7789_DrawCircleFilled+0x126>
	  
    ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	b29a      	uxth	r2, r3
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	4413      	add	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	b218      	sxth	r0, r3
 800235a:	88ba      	ldrh	r2, [r7, #4]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	b29b      	uxth	r3, r3
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	b29b      	uxth	r3, r3
 8002364:	b219      	sxth	r1, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	b29a      	uxth	r2, r3
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4413      	add	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	b21c      	sxth	r4, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	b29a      	uxth	r2, r3
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	b21a      	sxth	r2, r3
 800237e:	883b      	ldrh	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	4622      	mov	r2, r4
 8002386:	f7ff ff15 	bl	80021b4 <ST7789_DrawLine>
    ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	b29b      	uxth	r3, r3
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	b29b      	uxth	r3, r3
 8002394:	b218      	sxth	r0, r3
 8002396:	88ba      	ldrh	r2, [r7, #4]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	b29b      	uxth	r3, r3
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b219      	sxth	r1, r3
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b21c      	sxth	r4, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	88bb      	ldrh	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	883b      	ldrh	r3, [r7, #0]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	4622      	mov	r2, r4
 80023c2:	f7ff fef7 	bl	80021b4 <ST7789_DrawLine>
    error = 2 * (delta + y) - 1;
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da0c      	bge.n	80023f2 <ST7789_DrawCircleFilled+0xde>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	dc09      	bgt.n	80023f2 <ST7789_DrawCircleFilled+0xde>
		
      ++x;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	3301      	adds	r3, #1
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
      continue;
 80023f0:	e023      	b.n	800243a <ST7789_DrawCircleFilled+0x126>
    }
	
    error = 2 * (delta - x) - 1;
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	dd0d      	ble.n	8002420 <ST7789_DrawCircleFilled+0x10c>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	dd0a      	ble.n	8002420 <ST7789_DrawCircleFilled+0x10c>
		
      --y;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3b01      	subs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	f1c3 0301 	rsb	r3, r3, #1
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
      continue;
 800241e:	e00c      	b.n	800243a <ST7789_DrawCircleFilled+0x126>
    }
	
    ++x;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3301      	adds	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
    --y;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	3b01      	subs	r3, #1
 8002438:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da86      	bge.n	800234e <ST7789_DrawCircleFilled+0x3a>
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}
	...

0800244c <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	4604      	mov	r4, r0
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4623      	mov	r3, r4
 800245c:	80fb      	strh	r3, [r7, #6]
 800245e:	4603      	mov	r3, r0
 8002460:	80bb      	strh	r3, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	807b      	strh	r3, [r7, #2]
 8002466:	4613      	mov	r3, r2
 8002468:	803b      	strh	r3, [r7, #0]
	
	uint32_t i, b, j;
	
	uint32_t X = x, Y = y;
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	88bb      	ldrh	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]
	
	uint8_t xx, yy;
	
	if( multiplier < 1 ){
 8002472:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <ST7789_DrawChar+0x34>
		multiplier = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}

	/* Check available space in LCD */
	if (ST7789_Width >= ( x + Font->FontWidth) || ST7789_Height >= ( y + Font->FontHeight)){
 8002480:	4b90      	ldr	r3, [pc, #576]	; (80026c4 <ST7789_DrawChar+0x278>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	4413      	add	r3, r2
 800248e:	4299      	cmp	r1, r3
 8002490:	da09      	bge.n	80024a6 <ST7789_DrawChar+0x5a>
 8002492:	4b8d      	ldr	r3, [pc, #564]	; (80026c8 <ST7789_DrawChar+0x27c>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	88bb      	ldrh	r3, [r7, #4]
 800249a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800249c:	7852      	ldrb	r2, [r2, #1]
 800249e:	4413      	add	r3, r2
 80024a0:	4299      	cmp	r1, r3
 80024a2:	f2c0 8154 	blt.w	800274e <ST7789_DrawChar+0x302>

	
			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {		
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e149      	b.n	8002740 <ST7789_DrawChar+0x2f4>
				
				if( ch < 127 ){			
 80024ac:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024b0:	2b7e      	cmp	r3, #126	; 0x7e
 80024b2:	d810      	bhi.n	80024d6 <ST7789_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024bc:	3b20      	subs	r3, #32
 80024be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024c0:	7849      	ldrb	r1, [r1, #1]
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	440b      	add	r3, r1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e0b8      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch > 191 ){
 80024d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024da:	2bbf      	cmp	r3, #191	; 0xbf
 80024dc:	d910      	bls.n	8002500 <ST7789_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом 
					// только кирилицу то нужно добавлять 95 если шрифт 
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024e6:	3b60      	subs	r3, #96	; 0x60
 80024e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024ea:	7849      	ldrb	r1, [r1, #1]
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	440b      	add	r3, r1
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	e0a3      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 8002500:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002504:	2ba8      	cmp	r3, #168	; 0xa8
 8002506:	d110      	bne.n	800252a <ST7789_DrawChar+0xde>
					// 160 эллемент ( символ Ё ) 
					b = Font->data[( 160 ) * Font->FontHeight + i];
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	4619      	mov	r1, r3
 8002512:	460b      	mov	r3, r1
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	015b      	lsls	r3, r3, #5
 800251a:	4619      	mov	r1, r3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	440b      	add	r3, r1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	e08e      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 800252a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800252e:	2bb8      	cmp	r3, #184	; 0xb8
 8002530:	d111      	bne.n	8002556 <ST7789_DrawChar+0x10a>
					// 161 эллемент  ( символ ё ) 
					b = Font->data[( 161 ) * Font->FontHeight + i];
 8002532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	461a      	mov	r2, r3
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	015b      	lsls	r3, r3, #5
 8002544:	4413      	add	r3, r2
 8002546:	461a      	mov	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	440b      	add	r3, r1
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e078      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------
				
				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 8002556:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800255a:	2baa      	cmp	r3, #170	; 0xaa
 800255c:	d10f      	bne.n	800257e <ST7789_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 800255e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	785b      	ldrb	r3, [r3, #1]
 8002566:	4619      	mov	r1, r3
 8002568:	23a2      	movs	r3, #162	; 0xa2
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4619      	mov	r1, r3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	440b      	add	r3, r1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e064      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 800257e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002582:	2baf      	cmp	r3, #175	; 0xaf
 8002584:	d10f      	bne.n	80025a6 <ST7789_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	4619      	mov	r1, r3
 8002590:	23a3      	movs	r3, #163	; 0xa3
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4619      	mov	r1, r3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	440b      	add	r3, r1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e050      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 80025a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80025aa:	2bb2      	cmp	r3, #178	; 0xb2
 80025ac:	d10f      	bne.n	80025ce <ST7789_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	4619      	mov	r1, r3
 80025b8:	23a4      	movs	r3, #164	; 0xa4
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	440b      	add	r3, r1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e03c      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 80025ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80025d2:	2bb3      	cmp	r3, #179	; 0xb3
 80025d4:	d111      	bne.n	80025fa <ST7789_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	4619      	mov	r1, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	0159      	lsls	r1, r3, #5
 80025e8:	440b      	add	r3, r1
 80025ea:	4619      	mov	r1, r3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	440b      	add	r3, r1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e026      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 80025fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80025fe:	2bba      	cmp	r3, #186	; 0xba
 8002600:	d10f      	bne.n	8002622 <ST7789_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 8002602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	4619      	mov	r1, r3
 800260c:	23a6      	movs	r3, #166	; 0xa6
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4619      	mov	r1, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	440b      	add	r3, r1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	e012      	b.n	8002648 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 8002622:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002626:	2bbf      	cmp	r3, #191	; 0xbf
 8002628:	d10e      	bne.n	8002648 <ST7789_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 800262a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	4619      	mov	r1, r3
 8002634:	23a7      	movs	r3, #167	; 0xa7
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4619      	mov	r1, r3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	440b      	add	r3, r1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------
			
				for (j = 0; j < Font->FontWidth; j++) {
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e068      	b.n	8002720 <ST7789_DrawChar+0x2d4>
					
					if ((b << j) & 0x8000) {
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d028      	beq.n	80026b0 <ST7789_DrawChar+0x264>
						
						for (yy = 0; yy < multiplier; yy++){
 800265e:	2300      	movs	r3, #0
 8002660:	72bb      	strb	r3, [r7, #10]
 8002662:	e01f      	b.n	80026a4 <ST7789_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 8002664:	2300      	movs	r3, #0
 8002666:	72fb      	strb	r3, [r7, #11]
 8002668:	e014      	b.n	8002694 <ST7789_DrawChar+0x248>
									ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	b29a      	uxth	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	b29b      	uxth	r3, r3
 8002672:	4413      	add	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	b218      	sxth	r0, r3
 8002678:	7abb      	ldrb	r3, [r7, #10]
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4413      	add	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	b21b      	sxth	r3, r3
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	4619      	mov	r1, r3
 800268a:	f7ff fe11 	bl	80022b0 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	3301      	adds	r3, #1
 8002692:	72fb      	strb	r3, [r7, #11]
 8002694:	7afa      	ldrb	r2, [r7, #11]
 8002696:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800269a:	429a      	cmp	r2, r3
 800269c:	d3e5      	bcc.n	800266a <ST7789_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 800269e:	7abb      	ldrb	r3, [r7, #10]
 80026a0:	3301      	adds	r3, #1
 80026a2:	72bb      	strb	r3, [r7, #10]
 80026a4:	7aba      	ldrb	r2, [r7, #10]
 80026a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d3da      	bcc.n	8002664 <ST7789_DrawChar+0x218>
 80026ae:	e02f      	b.n	8002710 <ST7789_DrawChar+0x2c4>
							}
						}
						
					} 
					else if( TransparentBg ){
 80026b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02b      	beq.n	8002710 <ST7789_DrawChar+0x2c4>
						
						for (yy = 0; yy < multiplier; yy++){
 80026b8:	2300      	movs	r3, #0
 80026ba:	72bb      	strb	r3, [r7, #10]
 80026bc:	e023      	b.n	8002706 <ST7789_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 80026be:	2300      	movs	r3, #0
 80026c0:	72fb      	strb	r3, [r7, #11]
 80026c2:	e018      	b.n	80026f6 <ST7789_DrawChar+0x2aa>
 80026c4:	200005fe 	.word	0x200005fe
 80026c8:	20000600 	.word	0x20000600
									ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 80026cc:	7afb      	ldrb	r3, [r7, #11]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b218      	sxth	r0, r3
 80026da:	7abb      	ldrb	r3, [r7, #10]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	883a      	ldrh	r2, [r7, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7ff fde0 	bl	80022b0 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	3301      	adds	r3, #1
 80026f4:	72fb      	strb	r3, [r7, #11]
 80026f6:	7afa      	ldrb	r2, [r7, #11]
 80026f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d3e5      	bcc.n	80026cc <ST7789_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8002700:	7abb      	ldrb	r3, [r7, #10]
 8002702:	3301      	adds	r3, #1
 8002704:	72bb      	strb	r3, [r7, #10]
 8002706:	7aba      	ldrb	r2, [r7, #10]
 8002708:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800270c:	429a      	cmp	r2, r3
 800270e:	d3d6      	bcc.n	80026be <ST7789_DrawChar+0x272>
							}
						}
						
					}
					X = X + multiplier;
 8002710:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4293      	cmp	r3, r2
 800272a:	d390      	bcc.n	800264e <ST7789_DrawChar+0x202>
				}
				X = x;
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8002730:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {		
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	461a      	mov	r2, r3
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4293      	cmp	r3, r2
 800274a:	f4ff aeaf 	bcc.w	80024ac <ST7789_DrawChar+0x60>
			}
	}
}
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	bf00      	nop

08002758 <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af04      	add	r7, sp, #16
 800275e:	4604      	mov	r4, r0
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4623      	mov	r3, r4
 8002768:	80fb      	strh	r3, [r7, #6]
 800276a:	4603      	mov	r3, r0
 800276c:	80bb      	strh	r3, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]
 8002772:	4613      	mov	r3, r2
 8002774:	803b      	strh	r3, [r7, #0]
	
	if( multiplier < 1 ){
 8002776:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <ST7789_print+0x2c>
		multiplier = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8002784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002786:	f7fd fd2b 	bl	80001e0 <strlen>
 800278a:	4603      	mov	r3, r0
 800278c:	81bb      	strh	r3, [r7, #12]
	
	while (len--) {
 800278e:	e09c      	b.n	80028ca <ST7789_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2bbf      	cmp	r3, #191	; 0xbf
 8002796:	d977      	bls.n	8002888 <ST7789_print+0x130>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2bd0      	cmp	r3, #208	; 0xd0
 800279e:	d002      	beq.n	80027a6 <ST7789_print+0x4e>
 80027a0:	2bd1      	cmp	r3, #209	; 0xd1
 80027a2:	d02c      	beq.n	80027fe <ST7789_print+0xa6>
 80027a4:	e05b      	b.n	800285e <ST7789_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	3301      	adds	r3, #1
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b8f      	cmp	r3, #143	; 0x8f
 80027b2:	d908      	bls.n	80027c6 <ST7789_print+0x6e>
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2bbf      	cmp	r3, #191	; 0xbf
 80027ba:	d804      	bhi.n	80027c6 <ST7789_print+0x6e>
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	3330      	adds	r3, #48	; 0x30
 80027c2:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 80027c4:	e048      	b.n	8002858 <ST7789_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b81      	cmp	r3, #129	; 0x81
 80027cc:	d102      	bne.n	80027d4 <ST7789_print+0x7c>
 80027ce:	23a8      	movs	r3, #168	; 0xa8
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e044      	b.n	800285e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b84      	cmp	r3, #132	; 0x84
 80027da:	d102      	bne.n	80027e2 <ST7789_print+0x8a>
 80027dc:	23aa      	movs	r3, #170	; 0xaa
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e03d      	b.n	800285e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b86      	cmp	r3, #134	; 0x86
 80027e8:	d102      	bne.n	80027f0 <ST7789_print+0x98>
 80027ea:	23b2      	movs	r3, #178	; 0xb2
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e036      	b.n	800285e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b87      	cmp	r3, #135	; 0x87
 80027f6:	d12f      	bne.n	8002858 <ST7789_print+0x100>
 80027f8:	23af      	movs	r3, #175	; 0xaf
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e02f      	b.n	800285e <ST7789_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	3301      	adds	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b25b      	sxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	da08      	bge.n	8002820 <ST7789_print+0xc8>
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b8f      	cmp	r3, #143	; 0x8f
 8002814:	d804      	bhi.n	8002820 <ST7789_print+0xc8>
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3370      	adds	r3, #112	; 0x70
 800281c:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 800281e:	e01d      	b.n	800285c <ST7789_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b91      	cmp	r3, #145	; 0x91
 8002826:	d102      	bne.n	800282e <ST7789_print+0xd6>
 8002828:	23b8      	movs	r3, #184	; 0xb8
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e017      	b.n	800285e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b94      	cmp	r3, #148	; 0x94
 8002834:	d102      	bne.n	800283c <ST7789_print+0xe4>
 8002836:	23ba      	movs	r3, #186	; 0xba
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	e010      	b.n	800285e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b96      	cmp	r3, #150	; 0x96
 8002842:	d102      	bne.n	800284a <ST7789_print+0xf2>
 8002844:	23b3      	movs	r3, #179	; 0xb3
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e009      	b.n	800285e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b97      	cmp	r3, #151	; 0x97
 8002850:	d104      	bne.n	800285c <ST7789_print+0x104>
 8002852:	23bf      	movs	r3, #191	; 0xbf
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e002      	b.n	800285e <ST7789_print+0x106>
					break;
 8002858:	bf00      	nop
 800285a:	e000      	b.n	800285e <ST7789_print+0x106>
					break;
 800285c:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 800285e:	89bb      	ldrh	r3, [r7, #12]
 8002860:	3b01      	subs	r3, #1
 8002862:	81bb      	strh	r3, [r7, #12]
			
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8002864:	883c      	ldrh	r4, [r7, #0]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	88b9      	ldrh	r1, [r7, #4]
 800286a:	88f8      	ldrh	r0, [r7, #6]
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	9303      	str	r3, [sp, #12]
 8002870:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4623      	mov	r3, r4
 8002882:	f7ff fde3 	bl	800244c <ST7789_DrawChar>
 8002886:	e011      	b.n	80028ac <ST7789_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	883c      	ldrh	r4, [r7, #0]
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	88b9      	ldrh	r1, [r7, #4]
 8002892:	88f8      	ldrh	r0, [r7, #6]
 8002894:	9303      	str	r3, [sp, #12]
 8002896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	4623      	mov	r3, r4
 80028a8:	f7ff fdd0 	bl	800244c <ST7789_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	fb12 f303 	smulbb	r3, r2, r3
 80028bc:	b29a      	uxth	r2, r3
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	4413      	add	r3, r2
 80028c2:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	3301      	adds	r3, #1
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (len--) {
 80028ca:	89bb      	ldrh	r3, [r7, #12]
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	81ba      	strh	r2, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f47f af5d 	bne.w	8002790 <ST7789_print+0x38>
	}
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}

080028e0 <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
	
	ST7789_Select();
 80028ea:	f7ff f949 	bl	8001b80 <ST7789_Select>
	
	ST7789_SendCmd(ST7789_MADCTL);
 80028ee:	2036      	movs	r0, #54	; 0x36
 80028f0:	f7ff f9bc 	bl	8001c6c <ST7789_SendCmd>

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d85b      	bhi.n	80029b4 <ST7789_rotation+0xd4>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <ST7789_rotation+0x24>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002915 	.word	0x08002915
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002965 	.word	0x08002965
 8002910:	0800298d 	.word	0x0800298d
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_RGB);
 8002914:	2000      	movs	r0, #0
 8002916:	f7ff f9cf 	bl	8001cb8 <ST7789_SendData>
				ST7789_Width = 240;
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <ST7789_rotation+0xe4>)
 800291c:	22f0      	movs	r2, #240	; 0xf0
 800291e:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <ST7789_rotation+0xe8>)
 8002922:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002926:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <ST7789_rotation+0xec>)
 800292a:	2200      	movs	r2, #0
 800292c:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <ST7789_rotation+0xf0>)
 8002930:	2200      	movs	r2, #0
 8002932:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff fa17 	bl	8001d68 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 800293a:	e03c      	b.n	80029b6 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800293c:	2060      	movs	r0, #96	; 0x60
 800293e:	f7ff f9bb 	bl	8001cb8 <ST7789_SendData>
				ST7789_Width = 320;
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <ST7789_rotation+0xe4>)
 8002944:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002948:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;		
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <ST7789_rotation+0xe8>)
 800294c:	22f0      	movs	r2, #240	; 0xf0
 800294e:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <ST7789_rotation+0xec>)
 8002952:	2200      	movs	r2, #0
 8002954:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <ST7789_rotation+0xf0>)
 8002958:	2200      	movs	r2, #0
 800295a:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 800295c:	2000      	movs	r0, #0
 800295e:	f7ff fa03 	bl	8001d68 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8002962:	e028      	b.n	80029b6 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002964:	20c0      	movs	r0, #192	; 0xc0
 8002966:	f7ff f9a7 	bl	8001cb8 <ST7789_SendData>
				ST7789_Width = 240;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <ST7789_rotation+0xe4>)
 800296c:	22f0      	movs	r2, #240	; 0xf0
 800296e:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <ST7789_rotation+0xe8>)
 8002972:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002976:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <ST7789_rotation+0xec>)
 800297a:	2200      	movs	r2, #0
 800297c:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <ST7789_rotation+0xf0>)
 8002980:	2200      	movs	r2, #0
 8002982:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8002984:	2000      	movs	r0, #0
 8002986:	f7ff f9ef 	bl	8001d68 <ST7789_FillScreen>
			#endif
			//==========================================================================
			
		 break;
 800298a:	e014      	b.n	80029b6 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800298c:	20a0      	movs	r0, #160	; 0xa0
 800298e:	f7ff f993 	bl	8001cb8 <ST7789_SendData>
				ST7789_Width = 320;
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <ST7789_rotation+0xe4>)
 8002994:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002998:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <ST7789_rotation+0xe8>)
 800299c:	22f0      	movs	r2, #240	; 0xf0
 800299e:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <ST7789_rotation+0xec>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <ST7789_rotation+0xf0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff f9db 	bl	8001d68 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 80029b2:	e000      	b.n	80029b6 <ST7789_rotation+0xd6>
	   
	   default:
		 break;
 80029b4:	bf00      	nop
	  }
	  
	  ST7789_Unselect();
 80029b6:	f7ff f8ef 	bl	8001b98 <ST7789_Unselect>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200005fe 	.word	0x200005fe
 80029c8:	20000600 	.word	0x20000600
 80029cc:	200005fa 	.word	0x200005fa
 80029d0:	200005fc 	.word	0x200005fc

080029d4 <ST7789_DrawFillRoundRect>:


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( заполненый )
//==============================================================================
void ST7789_DrawFillRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint16_t color) {
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af02      	add	r7, sp, #8
 80029da:	4604      	mov	r4, r0
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	80fb      	strh	r3, [r7, #6]
 80029e6:	4603      	mov	r3, r0
 80029e8:	80bb      	strh	r3, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	807b      	strh	r3, [r7, #2]
 80029ee:	4613      	mov	r3, r2
 80029f0:	803b      	strh	r3, [r7, #0]
	
	int16_t max_radius = ((width < height) ? width : height) / 2; // 1/2 minor axis
 80029f2:	883a      	ldrh	r2, [r7, #0]
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	4293      	cmp	r3, r2
 80029f8:	bf28      	it	cs
 80029fa:	4613      	movcs	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	0fda      	lsrs	r2, r3, #31
 8002a00:	4413      	add	r3, r2
 8002a02:	105b      	asrs	r3, r3, #1
 8002a04:	81fb      	strh	r3, [r7, #14]
  if (cornerRadius > max_radius){
 8002a06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	dd01      	ble.n	8002a16 <ST7789_DrawFillRoundRect+0x42>
    cornerRadius = max_radius;
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	843b      	strh	r3, [r7, #32]
	}
	
  ST7789_DrawRectangleFilled(x + cornerRadius, y, x + cornerRadius + width - 2 * cornerRadius, y + height, color);
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	8c3b      	ldrh	r3, [r7, #32]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b218      	sxth	r0, r3
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	8c3b      	ldrh	r3, [r7, #32]
 8002a24:	4413      	add	r3, r2
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	8c3b      	ldrh	r3, [r7, #32]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	b21c      	sxth	r4, r3
 8002a3a:	88ba      	ldrh	r2, [r7, #4]
 8002a3c:	883b      	ldrh	r3, [r7, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b21a      	sxth	r2, r3
 8002a44:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	4622      	mov	r2, r4
 8002a50:	f7ff fae6 	bl	8002020 <ST7789_DrawRectangleFilled>
  // draw four corners
  ST7789_DrawFillCircleHelper(x + width - cornerRadius - 1, y + cornerRadius, cornerRadius, 1, height - 2 * cornerRadius - 1, color);
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	8c3b      	ldrh	r3, [r7, #32]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b218      	sxth	r0, r3
 8002a68:	88ba      	ldrh	r2, [r7, #4]
 8002a6a:	8c3b      	ldrh	r3, [r7, #32]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	b219      	sxth	r1, r3
 8002a72:	8c3b      	ldrh	r3, [r7, #32]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	883a      	ldrh	r2, [r7, #0]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8002a88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a8a:	9201      	str	r2, [sp, #4]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	4622      	mov	r2, r4
 8002a92:	f000 f820 	bl	8002ad6 <ST7789_DrawFillCircleHelper>
  ST7789_DrawFillCircleHelper(x + cornerRadius, y + cornerRadius, cornerRadius, 2, height - 2 * cornerRadius - 1, color);
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	8c3b      	ldrh	r3, [r7, #32]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b218      	sxth	r0, r3
 8002aa0:	88ba      	ldrh	r2, [r7, #4]
 8002aa2:	8c3b      	ldrh	r3, [r7, #32]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b219      	sxth	r1, r3
 8002aaa:	8c3b      	ldrh	r3, [r7, #32]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	883a      	ldrh	r2, [r7, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8002ac0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ac2:	9201      	str	r2, [sp, #4]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	4622      	mov	r2, r4
 8002aca:	f000 f804 	bl	8002ad6 <ST7789_DrawFillCircleHelper>
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}

08002ad6 <ST7789_DrawFillCircleHelper>:
//==============================================================================

//==============================================================================
// Процедура рисования половины окружности ( правая или левая ) ( заполненый )
//==============================================================================
void ST7789_DrawFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8002ad6:	b590      	push	{r4, r7, lr}
 8002ad8:	b089      	sub	sp, #36	; 0x24
 8002ada:	af02      	add	r7, sp, #8
 8002adc:	4604      	mov	r4, r0
 8002ade:	4608      	mov	r0, r1
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	80fb      	strh	r3, [r7, #6]
 8002ae8:	4603      	mov	r3, r0
 8002aea:	80bb      	strh	r3, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	f1c3 0301 	rsb	r3, r3, #1
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	461a      	mov	r2, r3
 8002b06:	03d2      	lsls	r2, r2, #15
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8002b18:	8a3b      	ldrh	r3, [r7, #16]
 8002b1a:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8002b1c:	89fb      	ldrh	r3, [r7, #14]
 8002b1e:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8002b20:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 8002b2c:	e0d5      	b.n	8002cda <ST7789_DrawFillCircleHelper+0x204>
    if (f >= 0) {
 8002b2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0e      	blt.n	8002b54 <ST7789_DrawFillCircleHelper+0x7e>
      y--;
 8002b36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8002b42:	8a7b      	ldrh	r3, [r7, #18]
 8002b44:	3302      	adds	r3, #2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8002b4a:	8afa      	ldrh	r2, [r7, #22]
 8002b4c:	8a7b      	ldrh	r3, [r7, #18]
 8002b4e:	4413      	add	r3, r2
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8002b54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8002b60:	8abb      	ldrh	r3, [r7, #20]
 8002b62:	3302      	adds	r3, #2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8002b68:	8afa      	ldrh	r2, [r7, #22]
 8002b6a:	8abb      	ldrh	r3, [r7, #20]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	82fb      	strh	r3, [r7, #22]

    if (x < (y + 1)) {
 8002b72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	db51      	blt.n	8002c22 <ST7789_DrawFillCircleHelper+0x14c>
      if (corners & 1){
 8002b7e:	787b      	ldrb	r3, [r7, #1]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d023      	beq.n	8002bd0 <ST7789_DrawFillCircleHelper+0xfa>
        ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 - y - 1 + 2 * y + delta, color);
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	8a3b      	ldrh	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b218      	sxth	r0, r3
 8002b92:	88ba      	ldrh	r2, [r7, #4]
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b219      	sxth	r1, r3
 8002b9c:	88fa      	ldrh	r2, [r7, #6]
 8002b9e:	8a3b      	ldrh	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	b21c      	sxth	r4, r3
 8002ba6:	88ba      	ldrh	r2, [r7, #4]
 8002ba8:	89fb      	ldrh	r3, [r7, #14]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bba:	4413      	add	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	4622      	mov	r2, r4
 8002bcc:	f7ff faf2 	bl	80021b4 <ST7789_DrawLine>
			}
      if (corners & 2){
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d023      	beq.n	8002c22 <ST7789_DrawFillCircleHelper+0x14c>
        ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 - y - 1 + 2 * y + delta, color);
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	8a3b      	ldrh	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b218      	sxth	r0, r3
 8002be4:	88ba      	ldrh	r2, [r7, #4]
 8002be6:	89fb      	ldrh	r3, [r7, #14]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	b219      	sxth	r1, r3
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	8a3b      	ldrh	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	b21c      	sxth	r4, r3
 8002bf8:	88ba      	ldrh	r2, [r7, #4]
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	89fb      	ldrh	r3, [r7, #14]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	4622      	mov	r2, r4
 8002c1e:	f7ff fac9 	bl	80021b4 <ST7789_DrawLine>
			}
    }
    if (y != py) {
 8002c22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d053      	beq.n	8002cd6 <ST7789_DrawFillCircleHelper+0x200>
      if (corners & 1){
 8002c2e:	787b      	ldrb	r3, [r7, #1]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <ST7789_DrawFillCircleHelper+0x1aa>
        ST7789_DrawLine(x0 + py, y0 - px, x0 + py, y0 - px - 1 + 2 * px + delta, color);
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	b218      	sxth	r0, r3
 8002c42:	88ba      	ldrh	r2, [r7, #4]
 8002c44:	89bb      	ldrh	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	b219      	sxth	r1, r3
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	897b      	ldrh	r3, [r7, #10]
 8002c50:	4413      	add	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	b21c      	sxth	r4, r3
 8002c56:	88ba      	ldrh	r2, [r7, #4]
 8002c58:	89bb      	ldrh	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	89bb      	ldrh	r3, [r7, #12]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	f7ff fa9a 	bl	80021b4 <ST7789_DrawLine>
			}
      if (corners & 2){
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d023      	beq.n	8002cd2 <ST7789_DrawFillCircleHelper+0x1fc>
        ST7789_DrawLine(x0 - py, y0 - px, x0 - py, y0 - px - 1 + 2 * px + delta, color);
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b218      	sxth	r0, r3
 8002c94:	88ba      	ldrh	r2, [r7, #4]
 8002c96:	89bb      	ldrh	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b219      	sxth	r1, r3
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b21c      	sxth	r4, r3
 8002ca8:	88ba      	ldrh	r2, [r7, #4]
 8002caa:	89bb      	ldrh	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	89bb      	ldrh	r3, [r7, #12]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	4622      	mov	r2, r4
 8002cce:	f7ff fa71 	bl	80021b4 <ST7789_DrawLine>
			}
			py = y;
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 8002cd6:	8a3b      	ldrh	r3, [r7, #16]
 8002cd8:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 8002cda:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	f6ff af23 	blt.w	8002b2e <ST7789_DrawFillCircleHelper+0x58>
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}
	...

08002cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_MspInit+0x54>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <HAL_MspInit+0x54>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_MspInit+0x54>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_MspInit+0x54>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_MspInit+0x54>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_MspInit+0x54>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	210f      	movs	r1, #15
 8002d36:	f06f 0001 	mvn.w	r0, #1
 8002d3a:	f001 f95f 	bl	8003ffc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a33      	ldr	r2, [pc, #204]	; (8002e38 <HAL_ADC_MspInit+0xec>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d15f      	bne.n	8002e2e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <HAL_ADC_MspInit+0xf0>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4a31      	ldr	r2, [pc, #196]	; (8002e3c <HAL_ADC_MspInit+0xf0>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7e:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <HAL_ADC_MspInit+0xf0>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <HAL_ADC_MspInit+0xf0>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <HAL_ADC_MspInit+0xf0>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <HAL_ADC_MspInit+0xf0>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = THermistor_Pin|CH4_Pin;
 8002da6:	2342      	movs	r3, #66	; 0x42
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002daa:	2303      	movs	r3, #3
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4821      	ldr	r0, [pc, #132]	; (8002e40 <HAL_ADC_MspInit+0xf4>)
 8002dba:	f001 fcd5 	bl	8004768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002dc0:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <HAL_ADC_MspInit+0xfc>)
 8002dc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ddc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e02:	4810      	ldr	r0, [pc, #64]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002e04:	f001 f940 	bl	8004088 <HAL_DMA_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002e0e:	f7fe fe93 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_ADC_MspInit+0xf8>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2105      	movs	r1, #5
 8002e22:	2012      	movs	r0, #18
 8002e24:	f001 f8ea 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e28:	2012      	movs	r0, #18
 8002e2a:	f001 f903 	bl	8004034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e2e:	bf00      	nop
 8002e30:	3728      	adds	r7, #40	; 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40012000 	.word	0x40012000
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	20000348 	.word	0x20000348
 8002e48:	40026410 	.word	0x40026410

08002e4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <HAL_CRC_MspInit+0x3c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10d      	bne.n	8002e7a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_CRC_MspInit+0x40>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_CRC_MspInit+0x40>)
 8002e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_CRC_MspInit+0x40>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40023000 	.word	0x40023000
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <HAL_SPI_MspInit+0xe4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d15c      	bne.n	8002f6c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_SPI_MspInit+0xe8>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <HAL_SPI_MspInit+0xe8>)
 8002ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_SPI_MspInit+0xe8>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <HAL_SPI_MspInit+0xe8>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <HAL_SPI_MspInit+0xe8>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_SPI_MspInit+0xe8>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002eea:	23a0      	movs	r3, #160	; 0xa0
 8002eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002efa:	2305      	movs	r3, #5
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	481d      	ldr	r0, [pc, #116]	; (8002f7c <HAL_SPI_MspInit+0xec>)
 8002f06:	f001 fc2f 	bl	8004768 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_SPI_MspInit+0xf4>)
 8002f0e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f16:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f32:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f3a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f42:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f50:	480b      	ldr	r0, [pc, #44]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f52:	f001 f899 	bl	8004088 <HAL_DMA_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002f5c:	f7fe fdec 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f64:	649a      	str	r2, [r3, #72]	; 0x48
 8002f66:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <HAL_SPI_MspInit+0xf0>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f6c:	bf00      	nop
 8002f6e:	3728      	adds	r7, #40	; 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40013000 	.word	0x40013000
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	20000408 	.word	0x20000408
 8002f84:	40026440 	.word	0x40026440

08002f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d116      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a24      	ldr	r2, [pc, #144]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2105      	movs	r1, #5
 8002fca:	201c      	movs	r0, #28
 8002fcc:	f001 f816 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fd0:	201c      	movs	r0, #28
 8002fd2:	f001 f82f 	bl	8004034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fd6:	e030      	b.n	800303a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM4)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_TIM_Base_MspInit+0xc0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d12b      	bne.n	800303a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_TIM_Base_MspInit+0xbc>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_Spedd_Pin;
 800301a:	2340      	movs	r3, #64	; 0x40
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800302a:	2302      	movs	r3, #2
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M_Spedd_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <HAL_TIM_Base_MspInit+0xc4>)
 8003036:	f001 fb97 	bl	8004768 <HAL_GPIO_Init>
}
 800303a:	bf00      	nop
 800303c:	3728      	adds	r7, #40	; 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40000800 	.word	0x40000800
 800304c:	40020400 	.word	0x40020400

08003050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10d      	bne.n	800307e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40000400 	.word	0x40000400
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a12      	ldr	r2, [pc, #72]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11d      	bne.n	80030f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = M_EN_Pin;
 80030d2:	2310      	movs	r3, #16
 80030d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030de:	2302      	movs	r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M_EN_GPIO_Port, &GPIO_InitStruct);
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	4619      	mov	r1, r3
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <HAL_TIM_MspPostInit+0x70>)
 80030ee:	f001 fb3b 	bl	8004768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030f2:	bf00      	nop
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40000400 	.word	0x40000400
 8003100:	40023800 	.word	0x40023800
 8003104:	40020400 	.word	0x40020400

08003108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08c      	sub	sp, #48	; 0x30
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_InitTick+0xd0>)
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <HAL_InitTick+0xd0>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6453      	str	r3, [r2, #68]	; 0x44
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_InitTick+0xd0>)
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003134:	f107 020c 	add.w	r2, r7, #12
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fb70 	bl	8006824 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003144:	f003 fb5a 	bl	80067fc <HAL_RCC_GetPCLK2Freq>
 8003148:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	4a23      	ldr	r2, [pc, #140]	; (80031dc <HAL_InitTick+0xd4>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	3b01      	subs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_InitTick+0xd8>)
 800315a:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <HAL_InitTick+0xdc>)
 800315c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_InitTick+0xd8>)
 8003160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003164:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_InitTick+0xd8>)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_InitTick+0xd8>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_InitTick+0xd8>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_InitTick+0xd8>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800317e:	4818      	ldr	r0, [pc, #96]	; (80031e0 <HAL_InitTick+0xd8>)
 8003180:	f003 fe20 	bl	8006dc4 <HAL_TIM_Base_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800318a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11b      	bne.n	80031ca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003192:	4813      	ldr	r0, [pc, #76]	; (80031e0 <HAL_InitTick+0xd8>)
 8003194:	f003 fec0 	bl	8006f18 <HAL_TIM_Base_Start_IT>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800319e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d111      	bne.n	80031ca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031a6:	2019      	movs	r0, #25
 80031a8:	f000 ff44 	bl	8004034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d808      	bhi.n	80031c4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80031b2:	2200      	movs	r2, #0
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	2019      	movs	r0, #25
 80031b8:	f000 ff20 	bl	8003ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_InitTick+0xe0>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e002      	b.n	80031ca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80031ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3730      	adds	r7, #48	; 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	431bde83 	.word	0x431bde83
 80031e0:	20000604 	.word	0x20000604
 80031e4:	40010000 	.word	0x40010000
 80031e8:	20000014 	.word	0x20000014

080031ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <NMI_Handler+0x4>

080031f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <HardFault_Handler+0x4>

080031f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <MemManage_Handler+0x4>

080031fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003202:	e7fe      	b.n	8003202 <BusFault_Handler+0x4>

08003204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <UsageFault_Handler+0x4>

0800320a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <ADC_IRQHandler+0x10>)
 800321e:	f000 f952 	bl	80034c6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000300 	.word	0x20000300

0800322c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003232:	f003 ff22 	bl	800707a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000604 	.word	0x20000604

08003240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <TIM2_IRQHandler+0x10>)
 8003246:	f003 ff18 	bl	800707a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000468 	.word	0x20000468

08003254 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <DMA2_Stream0_IRQHandler+0x10>)
 800325a:	f001 f81b 	bl	8004294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000348 	.word	0x20000348

08003268 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <DMA2_Stream2_IRQHandler+0x10>)
 800326e:	f001 f811 	bl	8004294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000408 	.word	0x20000408

0800327c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <OTG_FS_IRQHandler+0x10>)
 8003282:	f001 fd5e 	bl	8004d42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20006544 	.word	0x20006544

08003290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <_sbrk+0x5c>)
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <_sbrk+0x60>)
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <_sbrk+0x64>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <_sbrk+0x64>)
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <_sbrk+0x68>)
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d207      	bcs.n	80032d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c0:	f00b fc8a 	bl	800ebd8 <__errno>
 80032c4:	4603      	mov	r3, r0
 80032c6:	220c      	movs	r2, #12
 80032c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	e009      	b.n	80032e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <_sbrk+0x64>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <_sbrk+0x64>)
 80032e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20020000 	.word	0x20020000
 80032f0:	00000800 	.word	0x00000800
 80032f4:	2000064c 	.word	0x2000064c
 80032f8:	20006c80 	.word	0x20006c80

080032fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <SystemInit+0x20>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <SystemInit+0x20>)
 8003308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800330c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003324:	480d      	ldr	r0, [pc, #52]	; (800335c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003326:	490e      	ldr	r1, [pc, #56]	; (8003360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003328:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800333c:	4c0b      	ldr	r4, [pc, #44]	; (800336c <LoopFillZerobss+0x26>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800334a:	f7ff ffd7 	bl	80032fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800334e:	f00b fd3f 	bl	800edd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003352:	f7fd fe59 	bl	8001008 <main>
  bx  lr    
 8003356:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800335c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003360:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8003364:	080176b4 	.word	0x080176b4
  ldr r2, =_sbss
 8003368:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 800336c:	20006c80 	.word	0x20006c80

08003370 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003370:	e7fe      	b.n	8003370 <DMA1_Stream0_IRQHandler>
	...

08003374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_Init+0x40>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <HAL_Init+0x40>)
 800337e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_Init+0x40>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_Init+0x40>)
 800338a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800338e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <HAL_Init+0x40>)
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800339c:	2003      	movs	r0, #3
 800339e:	f000 fe22 	bl	8003fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033a2:	200f      	movs	r0, #15
 80033a4:	f7ff feb0 	bl	8003108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033a8:	f7ff fca4 	bl	8002cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023c00 	.word	0x40023c00

080033b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_IncTick+0x20>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_IncTick+0x24>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_IncTick+0x24>)
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000018 	.word	0x20000018
 80033dc:	20000650 	.word	0x20000650

080033e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return uwTick;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_GetTick+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000650 	.word	0x20000650

080033f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff ffee 	bl	80033e0 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d005      	beq.n	800341e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_Delay+0x44>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800341e:	bf00      	nop
 8003420:	f7ff ffde 	bl	80033e0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d8f7      	bhi.n	8003420 <HAL_Delay+0x28>
  {
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000018 	.word	0x20000018

08003440 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e033      	b.n	80034be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fc74 	bl	8002d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d118      	bne.n	80034b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003486:	f023 0302 	bic.w	r3, r3, #2
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fb72 	bl	8003b7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
 80034ae:	e001      	b.n	80034b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d049      	beq.n	8003590 <HAL_ADC_IRQHandler+0xca>
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d046      	beq.n	8003590 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d12b      	bne.n	8003580 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800352c:	2b00      	cmp	r3, #0
 800352e:	d127      	bne.n	8003580 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003548:	2b00      	cmp	r3, #0
 800354a:	d119      	bne.n	8003580 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0220 	bic.w	r2, r2, #32
 800355a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f9a1 	bl	80038c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f06f 0212 	mvn.w	r2, #18
 800358e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d057      	beq.n	8003656 <HAL_ADC_IRQHandler+0x190>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d054      	beq.n	8003656 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d139      	bne.n	8003646 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d12b      	bne.n	8003646 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d124      	bne.n	8003646 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800360e:	2b00      	cmp	r3, #0
 8003610:	d119      	bne.n	8003646 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003620:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fc16 	bl	8003e78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 020c 	mvn.w	r2, #12
 8003654:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d017      	beq.n	800369c <HAL_ADC_IRQHandler+0x1d6>
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d014      	beq.n	800369c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10d      	bne.n	800369c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f92f 	bl	80038f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0201 	mvn.w	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036aa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d015      	beq.n	80036de <HAL_ADC_IRQHandler+0x218>
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f043 0202 	orr.w	r2, r3, #2
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0220 	mvn.w	r2, #32
 80036cc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f918 	bl	8003904 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0220 	mvn.w	r2, #32
 80036dc:	601a      	str	r2, [r3, #0]
  }
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_ADC_Start_DMA+0x1e>
 8003702:	2302      	movs	r3, #2
 8003704:	e0ce      	b.n	80038a4 <HAL_ADC_Start_DMA+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d018      	beq.n	800374e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800372c:	4b5f      	ldr	r3, [pc, #380]	; (80038ac <HAL_ADC_Start_DMA+0x1c4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5f      	ldr	r2, [pc, #380]	; (80038b0 <HAL_ADC_Start_DMA+0x1c8>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9a      	lsrs	r2, r3, #18
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003740:	e002      	b.n	8003748 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3b01      	subs	r3, #1
 8003746:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f9      	bne.n	8003742 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375c:	d107      	bne.n	800376e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800376c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	f040 8086 	bne.w	800388a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d106      	bne.n	80037cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f023 0206 	bic.w	r2, r3, #6
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
 80037ca:	e002      	b.n	80037d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <HAL_ADC_Start_DMA+0x1cc>)
 80037dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	4a35      	ldr	r2, [pc, #212]	; (80038b8 <HAL_ADC_Start_DMA+0x1d0>)
 80037e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4a34      	ldr	r2, [pc, #208]	; (80038bc <HAL_ADC_Start_DMA+0x1d4>)
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_ADC_Start_DMA+0x1d8>)
 80037f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800380e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	334c      	adds	r3, #76	; 0x4c
 800382a:	4619      	mov	r1, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f000 fcd8 	bl	80041e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10f      	bne.n	8003860 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d129      	bne.n	80038a2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	e020      	b.n	80038a2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <HAL_ADC_Start_DMA+0x1dc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d11b      	bne.n	80038a2 <HAL_ADC_Start_DMA+0x1ba>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d114      	bne.n	80038a2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	e00b      	b.n	80038a2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0210 	orr.w	r2, r3, #16
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000010 	.word	0x20000010
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	40012300 	.word	0x40012300
 80038b8:	08003d75 	.word	0x08003d75
 80038bc:	08003e2f 	.word	0x08003e2f
 80038c0:	08003e4b 	.word	0x08003e4b
 80038c4:	40012000 	.word	0x40012000

080038c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x1c>
 8003930:	2302      	movs	r3, #2
 8003932:	e113      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x244>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b09      	cmp	r3, #9
 8003942:	d925      	bls.n	8003990 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68d9      	ldr	r1, [r3, #12]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	3b1e      	subs	r3, #30
 800395a:	2207      	movs	r2, #7
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43da      	mvns	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	400a      	ands	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68d9      	ldr	r1, [r3, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	4618      	mov	r0, r3
 800397c:	4603      	mov	r3, r0
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4403      	add	r3, r0
 8003982:	3b1e      	subs	r3, #30
 8003984:	409a      	lsls	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	e022      	b.n	80039d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6919      	ldr	r1, [r3, #16]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	2207      	movs	r2, #7
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	400a      	ands	r2, r1
 80039b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6919      	ldr	r1, [r3, #16]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4618      	mov	r0, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4403      	add	r3, r0
 80039cc:	409a      	lsls	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d824      	bhi.n	8003a28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	3b05      	subs	r3, #5
 80039f0:	221f      	movs	r2, #31
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3b05      	subs	r3, #5
 8003a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
 8003a26:	e04c      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d824      	bhi.n	8003a7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b23      	subs	r3, #35	; 0x23
 8003a42:	221f      	movs	r2, #31
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	400a      	ands	r2, r1
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b23      	subs	r3, #35	; 0x23
 8003a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
 8003a78:	e023      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	3b41      	subs	r3, #65	; 0x41
 8003a8c:	221f      	movs	r2, #31
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	400a      	ands	r2, r1
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3b41      	subs	r3, #65	; 0x41
 8003ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_ADC_ConfigChannel+0x250>)
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <HAL_ADC_ConfigChannel+0x254>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10f      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d8>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b12      	cmp	r3, #18
 8003ad6:	d10b      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_ADC_ConfigChannel+0x254>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12b      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_ADC_ConfigChannel+0x258>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x1f4>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b11      	cmp	r3, #17
 8003b0a:	d122      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_ADC_ConfigChannel+0x258>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_ADC_ConfigChannel+0x25c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <HAL_ADC_ConfigChannel+0x260>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	0c9a      	lsrs	r2, r3, #18
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f9      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40012300 	.word	0x40012300
 8003b6c:	40012000 	.word	0x40012000
 8003b70:	10000012 	.word	0x10000012
 8003b74:	20000010 	.word	0x20000010
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b84:	4b79      	ldr	r3, [pc, #484]	; (8003d6c <ADC_Init+0x1f0>)
 8003b86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	021a      	lsls	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <ADC_Init+0x1f4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6899      	ldr	r1, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6899      	ldr	r1, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	e00f      	b.n	8003c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0202 	bic.w	r2, r2, #2
 8003c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6899      	ldr	r1, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7e1b      	ldrb	r3, [r3, #24]
 8003c94:	005a      	lsls	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01b      	beq.n	8003ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	035a      	lsls	r2, r3, #13
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	e007      	b.n	8003cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	051a      	lsls	r2, r3, #20
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d32:	025a      	lsls	r2, r3, #9
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	029a      	lsls	r2, r3, #10
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40012300 	.word	0x40012300
 8003d70:	0f000001 	.word	0x0f000001

08003d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13c      	bne.n	8003e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d12b      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d127      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d119      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0220 	bic.w	r2, r2, #32
 8003dda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fd61 	bl	80038c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e06:	e00e      	b.n	8003e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fd75 	bl	8003904 <HAL_ADC_ErrorCallback>
}
 8003e1a:	e004      	b.n	8003e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff fd4d 	bl	80038dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff fd4a 	bl	8003904 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ebe:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	60d3      	str	r3, [r2, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4907      	ldr	r1, [pc, #28]	; (8003f28 <__NVIC_EnableIRQ+0x38>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db0a      	blt.n	8003f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <__NVIC_SetPriority+0x4c>)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f54:	e00a      	b.n	8003f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4908      	ldr	r1, [pc, #32]	; (8003f7c <__NVIC_SetPriority+0x50>)
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3b04      	subs	r3, #4
 8003f64:	0112      	lsls	r2, r2, #4
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	440b      	add	r3, r1
 8003f6a:	761a      	strb	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f1c3 0307 	rsb	r3, r3, #7
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	bf28      	it	cs
 8003f9e:	2304      	movcs	r3, #4
 8003fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d902      	bls.n	8003fb0 <NVIC_EncodePriority+0x30>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3b03      	subs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <NVIC_EncodePriority+0x32>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	4313      	orrs	r3, r2
         );
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff4c 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800400e:	f7ff ff61 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 8004012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	6978      	ldr	r0, [r7, #20]
 800401a:	f7ff ffb1 	bl	8003f80 <NVIC_EncodePriority>
 800401e:	4602      	mov	r2, r0
 8004020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff80 	bl	8003f2c <__NVIC_SetPriority>
}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff54 	bl	8003ef0 <__NVIC_EnableIRQ>
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00e      	b.n	8004080 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	795b      	ldrb	r3, [r3, #5]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fe feea 	bl	8002e4c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7ff f9a4 	bl	80033e0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e099      	b.n	80041d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c4:	e00f      	b.n	80040e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c6:	f7ff f98b 	bl	80033e0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	d908      	bls.n	80040e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2203      	movs	r2, #3
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e078      	b.n	80041d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e8      	bne.n	80040c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_DMA_Init+0x158>)
 8004100:	4013      	ands	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004112:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b04      	cmp	r3, #4
 800413e:	d107      	bne.n	8004150 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	4313      	orrs	r3, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0307 	bic.w	r3, r3, #7
 8004166:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b04      	cmp	r3, #4
 8004178:	d117      	bne.n	80041aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fa6f 	bl	8004670 <DMA_CheckFifoParam>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2240      	movs	r2, #64	; 0x40
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041a6:	2301      	movs	r3, #1
 80041a8:	e016      	b.n	80041d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fa26 	bl	8004604 <DMA_CalcBaseAndBitshift>
 80041b8:	4603      	mov	r3, r0
 80041ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	223f      	movs	r2, #63	; 0x3f
 80041c2:	409a      	lsls	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	f010803f 	.word	0xf010803f

080041e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_DMA_Start_IT+0x26>
 8004206:	2302      	movs	r3, #2
 8004208:	e040      	b.n	800428c <HAL_DMA_Start_IT+0xa8>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d12f      	bne.n	800427e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f9b8 	bl	80045a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	223f      	movs	r2, #63	; 0x3f
 800423e:	409a      	lsls	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0216 	orr.w	r2, r2, #22
 8004252:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0208 	orr.w	r2, r2, #8
 800426a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e005      	b.n	800428a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042a0:	4b8e      	ldr	r3, [pc, #568]	; (80044dc <HAL_DMA_IRQHandler+0x248>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a8e      	ldr	r2, [pc, #568]	; (80044e0 <HAL_DMA_IRQHandler+0x24c>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	0a9b      	lsrs	r3, r3, #10
 80042ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	2208      	movs	r2, #8
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01a      	beq.n	8004300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	2208      	movs	r2, #8
 80042ee:	409a      	lsls	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0202 	orr.w	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	2204      	movs	r2, #4
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	2204      	movs	r2, #4
 800435a:	409a      	lsls	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0204 	orr.w	r2, r3, #4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	2210      	movs	r2, #16
 8004372:	409a      	lsls	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d043      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	2210      	movs	r2, #16
 8004390:	409a      	lsls	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d018      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d024      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
 80043c2:	e01f      	b.n	8004404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e016      	b.n	8004404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0208 	bic.w	r2, r2, #8
 80043f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	2220      	movs	r2, #32
 800440a:	409a      	lsls	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 808f 	beq.w	8004534 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8087 	beq.w	8004534 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2220      	movs	r2, #32
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b05      	cmp	r3, #5
 800443c:	d136      	bne.n	80044ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0216 	bic.w	r2, r2, #22
 800444c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <HAL_DMA_IRQHandler+0x1da>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	223f      	movs	r2, #63	; 0x3f
 8004484:	409a      	lsls	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07e      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
        }
        return;
 80044aa:	e079      	b.n	80045a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01d      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d031      	beq.n	8004534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
 80044d8:	e02c      	b.n	8004534 <HAL_DMA_IRQHandler+0x2a0>
 80044da:	bf00      	nop
 80044dc:	20000010 	.word	0x20000010
 80044e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d023      	beq.n	8004534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
 80044f4:	e01e      	b.n	8004534 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0210 	bic.w	r2, r2, #16
 8004512:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	2b00      	cmp	r3, #0
 800453a:	d032      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d022      	beq.n	800458e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2205      	movs	r2, #5
 800454c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3301      	adds	r3, #1
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	429a      	cmp	r2, r3
 800456a:	d307      	bcc.n	800457c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f2      	bne.n	8004560 <HAL_DMA_IRQHandler+0x2cc>
 800457a:	e000      	b.n	800457e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800457c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
 800459e:	e000      	b.n	80045a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80045a0:	bf00      	nop
    }
  }
}
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d108      	bne.n	80045e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045e6:	e007      	b.n	80045f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	3b10      	subs	r3, #16
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <DMA_CalcBaseAndBitshift+0x64>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <DMA_CalcBaseAndBitshift+0x68>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d909      	bls.n	8004646 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	1d1a      	adds	r2, r3, #4
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	659a      	str	r2, [r3, #88]	; 0x58
 8004644:	e007      	b.n	8004656 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	aaaaaaab 	.word	0xaaaaaaab
 800466c:	080171f8 	.word	0x080171f8

08004670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11f      	bne.n	80046ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d856      	bhi.n	800473e <DMA_CheckFifoParam+0xce>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <DMA_CheckFifoParam+0x28>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046bb 	.word	0x080046bb
 80046a0:	080046a9 	.word	0x080046a9
 80046a4:	0800473f 	.word	0x0800473f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d046      	beq.n	8004742 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e043      	b.n	8004742 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046c2:	d140      	bne.n	8004746 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c8:	e03d      	b.n	8004746 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d2:	d121      	bne.n	8004718 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d837      	bhi.n	800474a <DMA_CheckFifoParam+0xda>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <DMA_CheckFifoParam+0x70>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046f7 	.word	0x080046f7
 80046e8:	080046f1 	.word	0x080046f1
 80046ec:	08004709 	.word	0x08004709
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      break;
 80046f4:	e030      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d025      	beq.n	800474e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004706:	e022      	b.n	800474e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004710:	d11f      	bne.n	8004752 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004716:	e01c      	b.n	8004752 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d903      	bls.n	8004726 <DMA_CheckFifoParam+0xb6>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d003      	beq.n	800472c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004724:	e018      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
      break;
 800472a:	e015      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e00b      	b.n	8004756 <DMA_CheckFifoParam+0xe6>
      break;
 800473e:	bf00      	nop
 8004740:	e00a      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 8004742:	bf00      	nop
 8004744:	e008      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 8004746:	bf00      	nop
 8004748:	e006      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
 800474c:	e004      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;   
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
    }
  } 
  
  return status; 
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop

08004768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e159      	b.n	8004a38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004784:	2201      	movs	r2, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	f040 8148 	bne.w	8004a32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d005      	beq.n	80047ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d130      	bne.n	800481c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	2203      	movs	r2, #3
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f0:	2201      	movs	r2, #1
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 0201 	and.w	r2, r3, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d017      	beq.n	8004858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d123      	bne.n	80048ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	08da      	lsrs	r2, r3, #3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3208      	adds	r2, #8
 800486c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	220f      	movs	r2, #15
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	08da      	lsrs	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3208      	adds	r2, #8
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	2203      	movs	r2, #3
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0203 	and.w	r2, r3, #3
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a2 	beq.w	8004a32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	4b57      	ldr	r3, [pc, #348]	; (8004a50 <HAL_GPIO_Init+0x2e8>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	4a56      	ldr	r2, [pc, #344]	; (8004a50 <HAL_GPIO_Init+0x2e8>)
 80048f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048fc:	6453      	str	r3, [r2, #68]	; 0x44
 80048fe:	4b54      	ldr	r3, [pc, #336]	; (8004a50 <HAL_GPIO_Init+0x2e8>)
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800490a:	4a52      	ldr	r2, [pc, #328]	; (8004a54 <HAL_GPIO_Init+0x2ec>)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	3302      	adds	r3, #2
 8004912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	220f      	movs	r2, #15
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a49      	ldr	r2, [pc, #292]	; (8004a58 <HAL_GPIO_Init+0x2f0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d019      	beq.n	800496a <HAL_GPIO_Init+0x202>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a48      	ldr	r2, [pc, #288]	; (8004a5c <HAL_GPIO_Init+0x2f4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_GPIO_Init+0x1fe>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a47      	ldr	r2, [pc, #284]	; (8004a60 <HAL_GPIO_Init+0x2f8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00d      	beq.n	8004962 <HAL_GPIO_Init+0x1fa>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a46      	ldr	r2, [pc, #280]	; (8004a64 <HAL_GPIO_Init+0x2fc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <HAL_GPIO_Init+0x1f6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a45      	ldr	r2, [pc, #276]	; (8004a68 <HAL_GPIO_Init+0x300>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <HAL_GPIO_Init+0x1f2>
 8004956:	2304      	movs	r3, #4
 8004958:	e008      	b.n	800496c <HAL_GPIO_Init+0x204>
 800495a:	2307      	movs	r3, #7
 800495c:	e006      	b.n	800496c <HAL_GPIO_Init+0x204>
 800495e:	2303      	movs	r3, #3
 8004960:	e004      	b.n	800496c <HAL_GPIO_Init+0x204>
 8004962:	2302      	movs	r3, #2
 8004964:	e002      	b.n	800496c <HAL_GPIO_Init+0x204>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_GPIO_Init+0x204>
 800496a:	2300      	movs	r3, #0
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	f002 0203 	and.w	r2, r2, #3
 8004972:	0092      	lsls	r2, r2, #2
 8004974:	4093      	lsls	r3, r2
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800497c:	4935      	ldr	r1, [pc, #212]	; (8004a54 <HAL_GPIO_Init+0x2ec>)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	3302      	adds	r3, #2
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800498a:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <HAL_GPIO_Init+0x304>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ae:	4a2f      	ldr	r2, [pc, #188]	; (8004a6c <HAL_GPIO_Init+0x304>)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b4:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <HAL_GPIO_Init+0x304>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_GPIO_Init+0x304>)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049de:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <HAL_GPIO_Init+0x304>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a02:	4a1a      	ldr	r2, [pc, #104]	; (8004a6c <HAL_GPIO_Init+0x304>)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_GPIO_Init+0x304>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <HAL_GPIO_Init+0x304>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	f67f aea2 	bls.w	8004784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	3724      	adds	r7, #36	; 0x24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40013800 	.word	0x40013800
 8004a58:	40020000 	.word	0x40020000
 8004a5c:	40020400 	.word	0x40020400
 8004a60:	40020800 	.word	0x40020800
 8004a64:	40020c00 	.word	0x40020c00
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40013c00 	.word	0x40013c00

08004a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a80:	787b      	ldrb	r3, [r7, #1]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a86:	887a      	ldrh	r2, [r7, #2]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a8c:	e003      	b.n	8004a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	041a      	lsls	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa4:	b08f      	sub	sp, #60	; 0x3c
 8004aa6:	af0a      	add	r7, sp, #40	; 0x28
 8004aa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e10f      	b.n	8004cd4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f009 fd78 	bl	800e5c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f003 fa8d 	bl	8008012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	687e      	ldr	r6, [r7, #4]
 8004b00:	466d      	mov	r5, sp
 8004b02:	f106 0410 	add.w	r4, r6, #16
 8004b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b16:	1d33      	adds	r3, r6, #4
 8004b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b1a:	6838      	ldr	r0, [r7, #0]
 8004b1c:	f003 f964 	bl	8007de8 <USB_CoreInit>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0d0      	b.n	8004cd4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f003 fa7b 	bl	8008034 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
 8004b42:	e04a      	b.n	8004bda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	333d      	adds	r3, #61	; 0x3d
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	333c      	adds	r3, #60	; 0x3c
 8004b68:	7bfa      	ldrb	r2, [r7, #15]
 8004b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b6c:	7bfa      	ldrb	r2, [r7, #15]
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	b298      	uxth	r0, r3
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	3344      	adds	r3, #68	; 0x44
 8004b80:	4602      	mov	r2, r0
 8004b82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b84:	7bfa      	ldrb	r2, [r7, #15]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	3340      	adds	r3, #64	; 0x40
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3348      	adds	r3, #72	; 0x48
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	334c      	adds	r3, #76	; 0x4c
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3354      	adds	r3, #84	; 0x54
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
 8004bda:	7bfa      	ldrb	r2, [r7, #15]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3af      	bcc.n	8004b44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
 8004be8:	e044      	b.n	8004c74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bea:	7bfa      	ldrb	r2, [r7, #15]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c16:	7bfa      	ldrb	r2, [r7, #15]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	3301      	adds	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3b5      	bcc.n	8004bea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	687e      	ldr	r6, [r7, #4]
 8004c86:	466d      	mov	r5, sp
 8004c88:	f106 0410 	add.w	r4, r6, #16
 8004c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c98:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c9c:	1d33      	adds	r3, r6, #4
 8004c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ca0:	6838      	ldr	r0, [r7, #0]
 8004ca2:	f003 fa13 	bl	80080cc <USB_DevInit>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e00d      	b.n	8004cd4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f004 fb62 	bl	8009396 <USB_DevDisconnect>

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_PCD_Start+0x1c>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e020      	b.n	8004d3a <HAL_PCD_Start+0x5e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d109      	bne.n	8004d1c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d005      	beq.n	8004d1c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f003 f965 	bl	8007ff0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 fb12 	bl	8009354 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d42:	b590      	push	{r4, r7, lr}
 8004d44:	b08d      	sub	sp, #52	; 0x34
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f004 fbd0 	bl	80094fe <USB_GetMode>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 848a 	bne.w	800567a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f004 fb34 	bl	80093d8 <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8480 	beq.w	8005678 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 fb21 	bl	80093d8 <USB_ReadInterrupts>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d107      	bne.n	8004db0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f002 0202 	and.w	r2, r2, #2
 8004dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f004 fb0f 	bl	80093d8 <USB_ReadInterrupts>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d161      	bne.n	8004e88 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0210 	bic.w	r2, r2, #16
 8004dd2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f003 020f 	and.w	r2, r3, #15
 8004de0:	4613      	mov	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	3304      	adds	r3, #4
 8004df2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	0c5b      	lsrs	r3, r3, #17
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d124      	bne.n	8004e4a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d035      	beq.n	8004e78 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6a38      	ldr	r0, [r7, #32]
 8004e20:	f004 f946 	bl	80090b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e30:	441a      	add	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e42:	441a      	add	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	621a      	str	r2, [r3, #32]
 8004e48:	e016      	b.n	8004e78 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	0c5b      	lsrs	r3, r3, #17
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d110      	bne.n	8004e78 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6a38      	ldr	r0, [r7, #32]
 8004e62:	f004 f925 	bl	80090b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6a1a      	ldr	r2, [r3, #32]
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e72:	441a      	add	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0210 	orr.w	r2, r2, #16
 8004e86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f004 faa3 	bl	80093d8 <USB_ReadInterrupts>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e9c:	f040 80a7 	bne.w	8004fee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f004 faa8 	bl	80093fe <USB_ReadDevAllOutEpInterrupt>
 8004eae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004eb0:	e099      	b.n	8004fe6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 808e 	beq.w	8004fda <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f004 facc 	bl	8009466 <USB_ReadDevOutEPInterrupt>
 8004ece:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00c      	beq.n	8004ef4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	2301      	movs	r3, #1
 8004eea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fec2 	bl	8005c78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00c      	beq.n	8004f18 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 ff98 	bl	8005e48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2310      	movs	r3, #16
 8004f32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d030      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d109      	bne.n	8004f5e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f5c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3304      	adds	r3, #4
 8004f72:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d108      	bne.n	8004f8e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f009 fc17 	bl	800e7bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2320      	movs	r3, #32
 8004fba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fd8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	3301      	adds	r3, #1
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f47f af62 	bne.w	8004eb2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f004 f9f0 	bl	80093d8 <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005002:	f040 80db 	bne.w	80051bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f004 fa11 	bl	8009432 <USB_ReadDevAllInEpInterrupt>
 8005010:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005016:	e0cd      	b.n	80051b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80c2 	beq.w	80051a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f004 fa37 	bl	80094a2 <USB_ReadDevInEPInterrupt>
 8005034:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d057      	beq.n	80050f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	2201      	movs	r2, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	43db      	mvns	r3, r3
 800505a:	69f9      	ldr	r1, [r7, #28]
 800505c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005060:	4013      	ands	r3, r2
 8005062:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	461a      	mov	r2, r3
 8005072:	2301      	movs	r3, #1
 8005074:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d132      	bne.n	80050e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	334c      	adds	r3, #76	; 0x4c
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4403      	add	r3, r0
 800509e:	3348      	adds	r3, #72	; 0x48
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4419      	add	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4403      	add	r3, r0
 80050b2:	334c      	adds	r3, #76	; 0x4c
 80050b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d113      	bne.n	80050e4 <HAL_PCD_IRQHandler+0x3a2>
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	3354      	adds	r3, #84	; 0x54
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d108      	bne.n	80050e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050dc:	461a      	mov	r2, r3
 80050de:	2101      	movs	r1, #1
 80050e0:	f004 fa3e 	bl	8009560 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f009 faeb 	bl	800e6c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005106:	461a      	mov	r2, r3
 8005108:	2308      	movs	r3, #8
 800510a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	461a      	mov	r2, r3
 8005124:	2310      	movs	r3, #16
 8005126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	461a      	mov	r2, r3
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d023      	beq.n	8005196 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800514e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005150:	6a38      	ldr	r0, [r7, #32]
 8005152:	f003 f91f 	bl	8008394 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	3338      	adds	r3, #56	; 0x38
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	3304      	adds	r3, #4
 8005168:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	78db      	ldrb	r3, [r3, #3]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d108      	bne.n	8005184 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2200      	movs	r2, #0
 8005176:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	b2db      	uxtb	r3, r3
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f009 fb2e 	bl	800e7e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	461a      	mov	r2, r3
 8005192:	2302      	movs	r3, #2
 8005194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fcdb 	bl	8005b5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	3301      	adds	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f47f af2e 	bne.w	8005018 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f004 f909 	bl	80093d8 <USB_ReadInterrupts>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d0:	d122      	bne.n	8005218 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d108      	bne.n	8005202 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051f8:	2100      	movs	r1, #0
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fec2 	bl	8005f84 <HAL_PCDEx_LPM_Callback>
 8005200:	e002      	b.n	8005208 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f009 facc 	bl	800e7a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f004 f8db 	bl	80093d8 <USB_ReadInterrupts>
 8005222:	4603      	mov	r3, r0
 8005224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522c:	d112      	bne.n	8005254 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f009 fa88 	bl	800e754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005252:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f004 f8bd 	bl	80093d8 <USB_ReadInterrupts>
 800525e:	4603      	mov	r3, r0
 8005260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	f040 80b7 	bne.w	80053da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2110      	movs	r1, #16
 8005286:	4618      	mov	r0, r3
 8005288:	f003 f884 	bl	8008394 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800528c:	2300      	movs	r3, #0
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005290:	e046      	b.n	8005320 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	461a      	mov	r2, r3
 80052a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005318:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	3301      	adds	r3, #1
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005326:	429a      	cmp	r2, r3
 8005328:	d3b3      	bcc.n	8005292 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005338:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800533c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005356:	f043 030b 	orr.w	r3, r3, #11
 800535a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536c:	f043 030b 	orr.w	r3, r3, #11
 8005370:	6453      	str	r3, [r2, #68]	; 0x44
 8005372:	e015      	b.n	80053a0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005386:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800538a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	f043 030b 	orr.w	r3, r3, #11
 800539e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053c4:	461a      	mov	r2, r3
 80053c6:	f004 f8cb 	bl	8009560 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f003 fffa 	bl	80093d8 <USB_ReadInterrupts>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	d124      	bne.n	800543a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f004 f890 	bl	800951a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f003 f845 	bl	800848e <USB_GetDevSpeed>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681c      	ldr	r4, [r3, #0]
 8005410:	f001 f9e8 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8005414:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	4620      	mov	r0, r4
 8005420:	f002 fd44 	bl	8007eac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f009 f976 	bl	800e716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005438:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f003 ffca 	bl	80093d8 <USB_ReadInterrupts>
 8005444:	4603      	mov	r3, r0
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b08      	cmp	r3, #8
 800544c:	d10a      	bne.n	8005464 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f009 f953 	bl	800e6fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f002 0208 	and.w	r2, r2, #8
 8005462:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f003 ffb5 	bl	80093d8 <USB_ReadInterrupts>
 800546e:	4603      	mov	r3, r0
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d122      	bne.n	80054be <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005484:	2301      	movs	r3, #1
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
 8005488:	e014      	b.n	80054b4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d105      	bne.n	80054ae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fb27 	bl	8005afc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	3301      	adds	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d3e5      	bcc.n	800548a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f003 ff88 	bl	80093d8 <USB_ReadInterrupts>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d13b      	bne.n	800554c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054d4:	2301      	movs	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	e02b      	b.n	8005532 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	4613      	mov	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	3340      	adds	r3, #64	; 0x40
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d115      	bne.n	800552c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005500:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005502:	2b00      	cmp	r3, #0
 8005504:	da12      	bge.n	800552c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	333f      	adds	r3, #63	; 0x3f
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005522:	b2db      	uxtb	r3, r3
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fae8 	bl	8005afc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	3301      	adds	r3, #1
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	429a      	cmp	r2, r3
 800553a:	d3ce      	bcc.n	80054da <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800554a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f003 ff41 	bl	80093d8 <USB_ReadInterrupts>
 8005556:	4603      	mov	r3, r0
 8005558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005560:	d155      	bne.n	800560e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005562:	2301      	movs	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	e045      	b.n	80055f4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557c:	4613      	mov	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d12e      	bne.n	80055ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005590:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005592:	2b00      	cmp	r3, #0
 8005594:	da2b      	bge.n	80055ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80055a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d121      	bne.n	80055ee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ea:	6053      	str	r3, [r2, #4]
            break;
 80055ec:	e007      	b.n	80055fe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	3301      	adds	r3, #1
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d3b4      	bcc.n	8005568 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800560c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f003 fee0 	bl	80093d8 <USB_ReadInterrupts>
 8005618:	4603      	mov	r3, r0
 800561a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005622:	d10a      	bne.n	800563a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f009 f8ed 	bl	800e804 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f003 feca 	bl	80093d8 <USB_ReadInterrupts>
 8005644:	4603      	mov	r3, r0
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d115      	bne.n	800567a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f009 f8dd 	bl	800e820 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6859      	ldr	r1, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	e000      	b.n	800567a <HAL_PCD_IRQHandler+0x938>
      return;
 8005678:	bf00      	nop
    }
  }
}
 800567a:	3734      	adds	r7, #52	; 0x34
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}

08005680 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_PCD_SetAddress+0x1a>
 8005696:	2302      	movs	r3, #2
 8005698:	e013      	b.n	80056c2 <HAL_PCD_SetAddress+0x42>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f003 fe28 	bl	8009308 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	4608      	mov	r0, r1
 80056d4:	4611      	mov	r1, r2
 80056d6:	461a      	mov	r2, r3
 80056d8:	4603      	mov	r3, r0
 80056da:	70fb      	strb	r3, [r7, #3]
 80056dc:	460b      	mov	r3, r1
 80056de:	803b      	strh	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da0f      	bge.n	8005710 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	f003 020f 	and.w	r2, r3, #15
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	3338      	adds	r3, #56	; 0x38
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	3304      	adds	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	705a      	strb	r2, [r3, #1]
 800570e:	e00f      	b.n	8005730 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	f003 020f 	and.w	r2, r3, #15
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	3304      	adds	r3, #4
 8005728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800573c:	883a      	ldrh	r2, [r7, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	78ba      	ldrb	r2, [r7, #2]
 8005746:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d004      	beq.n	800575a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800575a:	78bb      	ldrb	r3, [r7, #2]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d102      	bne.n	8005766 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_PCD_EP_Open+0xaa>
 8005770:	2302      	movs	r3, #2
 8005772:	e00e      	b.n	8005792 <HAL_PCD_EP_Open+0xc8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	4618      	mov	r0, r3
 8005784:	f002 fea8 	bl	80084d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005790:	7afb      	ldrb	r3, [r7, #11]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da0f      	bge.n	80057ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	3338      	adds	r3, #56	; 0x38
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	3304      	adds	r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	705a      	strb	r2, [r3, #1]
 80057cc:	e00f      	b.n	80057ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 020f 	and.w	r2, r3, #15
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4413      	add	r3, r2
 80057e4:	3304      	adds	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_PCD_EP_Close+0x6e>
 8005804:	2302      	movs	r3, #2
 8005806:	e00e      	b.n	8005826 <HAL_PCD_EP_Close+0x8c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68f9      	ldr	r1, [r7, #12]
 8005816:	4618      	mov	r0, r3
 8005818:	f002 fee6 	bl	80085e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	460b      	mov	r3, r1
 800583c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	f003 020f 	and.w	r2, r3, #15
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2200      	movs	r2, #0
 800586e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005870:	7afb      	ldrb	r3, [r7, #11]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	b2da      	uxtb	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d102      	bne.n	800588a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	f003 f9c5 	bl	8008c30 <USB_EP0StartXfer>
 80058a6:	e008      	b.n	80058ba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	f002 ff73 	bl	80087a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	460b      	mov	r3, r1
 8005902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005904:	7afb      	ldrb	r3, [r7, #11]
 8005906:	f003 020f 	and.w	r2, r3, #15
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	3338      	adds	r3, #56	; 0x38
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	3304      	adds	r3, #4
 800591a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2200      	movs	r2, #0
 800592c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2201      	movs	r2, #1
 8005932:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005934:	7afb      	ldrb	r3, [r7, #11]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	b2da      	uxtb	r2, r3
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d102      	bne.n	800594e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800594e:	7afb      	ldrb	r3, [r7, #11]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	f003 f963 	bl	8008c30 <USB_EP0StartXfer>
 800596a:	e008      	b.n	800597e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	f002 ff11 	bl	80087a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	f003 020f 	and.w	r2, r3, #15
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d901      	bls.n	80059a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e050      	b.n	8005a48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da0f      	bge.n	80059ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f003 020f 	and.w	r2, r3, #15
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	3338      	adds	r3, #56	; 0x38
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	3304      	adds	r3, #4
 80059c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	705a      	strb	r2, [r3, #1]
 80059cc:	e00d      	b.n	80059ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4413      	add	r3, r2
 80059e0:	3304      	adds	r3, #4
 80059e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_PCD_EP_SetStall+0x82>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e01e      	b.n	8005a48 <HAL_PCD_EP_SetStall+0xc0>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f003 fba1 	bl	8009160 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	b2d9      	uxtb	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f003 fd91 	bl	8009560 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 020f 	and.w	r2, r3, #15
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d901      	bls.n	8005a6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e042      	b.n	8005af4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da0f      	bge.n	8005a96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	f003 020f 	and.w	r2, r3, #15
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	3338      	adds	r3, #56	; 0x38
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	705a      	strb	r2, [r3, #1]
 8005a94:	e00f      	b.n	8005ab6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	3304      	adds	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_PCD_EP_ClrStall+0x86>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e00e      	b.n	8005af4 <HAL_PCD_EP_ClrStall+0xa4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f003 fba9 	bl	800923c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da0c      	bge.n	8005b2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	3338      	adds	r3, #56	; 0x38
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e00c      	b.n	8005b44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 020f 	and.w	r2, r3, #15
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	4413      	add	r3, r2
 8005b40:	3304      	adds	r3, #4
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f003 f9c8 	bl	8008ee0 <USB_EPStopXfer>
 8005b50:	4603      	mov	r3, r0
 8005b52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b54:	7afb      	ldrb	r3, [r7, #11]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b08a      	sub	sp, #40	; 0x28
 8005b62:	af02      	add	r7, sp, #8
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	3338      	adds	r3, #56	; 0x38
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	3304      	adds	r3, #4
 8005b84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1a      	ldr	r2, [r3, #32]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d901      	bls.n	8005b96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e06c      	b.n	8005c70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d902      	bls.n	8005bb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3303      	adds	r3, #3
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bba:	e02b      	b.n	8005c14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d902      	bls.n	8005bd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	3303      	adds	r3, #3
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6919      	ldr	r1, [r3, #16]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f003 fa1c 	bl	8009034 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	441a      	add	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d809      	bhi.n	8005c3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d203      	bcs.n	8005c3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1be      	bne.n	8005bbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d811      	bhi.n	8005c6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2201      	movs	r2, #1
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	43db      	mvns	r3, r3
 8005c64:	6939      	ldr	r1, [r7, #16]
 8005c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	333c      	adds	r3, #60	; 0x3c
 8005c90:	3304      	adds	r3, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d17b      	bne.n	8005da6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d015      	beq.n	8005ce4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4a61      	ldr	r2, [pc, #388]	; (8005e40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f240 80b9 	bls.w	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80b3 	beq.w	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce0:	6093      	str	r3, [r2, #8]
 8005ce2:	e0a7      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	6093      	str	r3, [r2, #8]
 8005d00:	e098      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f040 8093 	bne.w	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4a4b      	ldr	r2, [pc, #300]	; (8005e40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d90f      	bls.n	8005d36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d32:	6093      	str	r3, [r2, #8]
 8005d34:	e07e      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	0159      	lsls	r1, r3, #5
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	440b      	add	r3, r1
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d114      	bne.n	8005d98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d80:	461a      	mov	r2, r3
 8005d82:	2101      	movs	r1, #1
 8005d84:	f003 fbec 	bl	8009560 <USB_EP0_OutStart>
 8005d88:	e006      	b.n	8005d98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	441a      	add	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f008 fc76 	bl	800e690 <HAL_PCD_DataOutStageCallback>
 8005da4:	e046      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4a26      	ldr	r2, [pc, #152]	; (8005e44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d124      	bne.n	8005df8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dca:	6093      	str	r3, [r2, #8]
 8005dcc:	e032      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2320      	movs	r3, #32
 8005de8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f008 fc4d 	bl	800e690 <HAL_PCD_DataOutStageCallback>
 8005df6:	e01d      	b.n	8005e34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d114      	bne.n	8005e28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e20:	461a      	mov	r2, r3
 8005e22:	2100      	movs	r1, #0
 8005e24:	f003 fb9c 	bl	8009560 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f008 fc2e 	bl	800e690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3720      	adds	r7, #32
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	4f54300a 	.word	0x4f54300a
 8005e44:	4f54310a 	.word	0x4f54310a

08005e48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	333c      	adds	r3, #60	; 0x3c
 8005e60:	3304      	adds	r3, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d90e      	bls.n	8005e9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	461a      	mov	r2, r3
 8005e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f008 fbe5 	bl	800e66c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d90c      	bls.n	8005ec4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d108      	bne.n	8005ec4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	f003 fb4e 	bl	8009560 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	4f54300a 	.word	0x4f54300a

08005ed4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ef2:	883b      	ldrh	r3, [r7, #0]
 8005ef4:	0419      	lsls	r1, r3, #16
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	629a      	str	r2, [r3, #40]	; 0x28
 8005f00:	e028      	b.n	8005f54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
 8005f14:	e00d      	b.n	8005f32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	3340      	adds	r3, #64	; 0x40
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	7bfa      	ldrb	r2, [r7, #15]
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3ec      	bcc.n	8005f16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f3c:	883b      	ldrh	r3, [r7, #0]
 8005f3e:	0418      	lsls	r0, r3, #16
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4302      	orrs	r2, r0
 8005f4c:	3340      	adds	r3, #64	; 0x40
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	887a      	ldrh	r2, [r7, #2]
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e267      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d075      	beq.n	80060a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fba:	4b88      	ldr	r3, [pc, #544]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d00c      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc6:	4b85      	ldr	r3, [pc, #532]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d112      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fd2:	4b82      	ldr	r3, [pc, #520]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fde:	d10b      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe0:	4b7e      	ldr	r3, [pc, #504]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d05b      	beq.n	80060a4 <HAL_RCC_OscConfig+0x108>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d157      	bne.n	80060a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e242      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006000:	d106      	bne.n	8006010 <HAL_RCC_OscConfig+0x74>
 8006002:	4b76      	ldr	r3, [pc, #472]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a75      	ldr	r2, [pc, #468]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e01d      	b.n	800604c <HAL_RCC_OscConfig+0xb0>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006018:	d10c      	bne.n	8006034 <HAL_RCC_OscConfig+0x98>
 800601a:	4b70      	ldr	r3, [pc, #448]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a6f      	ldr	r2, [pc, #444]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b6d      	ldr	r3, [pc, #436]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a6c      	ldr	r2, [pc, #432]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 800602c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e00b      	b.n	800604c <HAL_RCC_OscConfig+0xb0>
 8006034:	4b69      	ldr	r3, [pc, #420]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a68      	ldr	r2, [pc, #416]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 800603a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	4b66      	ldr	r3, [pc, #408]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a65      	ldr	r2, [pc, #404]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800604a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d013      	beq.n	800607c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006054:	f7fd f9c4 	bl	80033e0 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800605c:	f7fd f9c0 	bl	80033e0 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	; 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e207      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606e:	4b5b      	ldr	r3, [pc, #364]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0xc0>
 800607a:	e014      	b.n	80060a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607c:	f7fd f9b0 	bl	80033e0 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006084:	f7fd f9ac 	bl	80033e0 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b64      	cmp	r3, #100	; 0x64
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e1f3      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006096:	4b51      	ldr	r3, [pc, #324]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0xe8>
 80060a2:	e000      	b.n	80060a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d063      	beq.n	800617a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060b2:	4b4a      	ldr	r3, [pc, #296]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060be:	4b47      	ldr	r3, [pc, #284]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d11c      	bne.n	8006104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ca:	4b44      	ldr	r3, [pc, #272]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d116      	bne.n	8006104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d6:	4b41      	ldr	r3, [pc, #260]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_RCC_OscConfig+0x152>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d001      	beq.n	80060ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e1c7      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ee:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4937      	ldr	r1, [pc, #220]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006102:	e03a      	b.n	800617a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d020      	beq.n	800614e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800610c:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <HAL_RCC_OscConfig+0x244>)
 800610e:	2201      	movs	r2, #1
 8006110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fd f965 	bl	80033e0 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800611a:	f7fd f961 	bl	80033e0 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e1a8      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800612c:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006138:	4b28      	ldr	r3, [pc, #160]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4925      	ldr	r1, [pc, #148]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006148:	4313      	orrs	r3, r2
 800614a:	600b      	str	r3, [r1, #0]
 800614c:	e015      	b.n	800617a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800614e:	4b24      	ldr	r3, [pc, #144]	; (80061e0 <HAL_RCC_OscConfig+0x244>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006154:	f7fd f944 	bl	80033e0 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800615c:	f7fd f940 	bl	80033e0 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e187      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616e:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d036      	beq.n	80061f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <HAL_RCC_OscConfig+0x248>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006194:	f7fd f924 	bl	80033e0 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619c:	f7fd f920 	bl	80033e0 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e167      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ae:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <HAL_RCC_OscConfig+0x240>)
 80061b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0x200>
 80061ba:	e01b      	b.n	80061f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <HAL_RCC_OscConfig+0x248>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c2:	f7fd f90d 	bl	80033e0 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c8:	e00e      	b.n	80061e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ca:	f7fd f909 	bl	80033e0 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d907      	bls.n	80061e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e150      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
 80061dc:	40023800 	.word	0x40023800
 80061e0:	42470000 	.word	0x42470000
 80061e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e8:	4b88      	ldr	r3, [pc, #544]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80061ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ea      	bne.n	80061ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8097 	beq.w	8006330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006206:	4b81      	ldr	r3, [pc, #516]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10f      	bne.n	8006232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	4b7d      	ldr	r3, [pc, #500]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	4a7c      	ldr	r2, [pc, #496]	; (800640c <HAL_RCC_OscConfig+0x470>)
 800621c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006220:	6413      	str	r3, [r2, #64]	; 0x40
 8006222:	4b7a      	ldr	r3, [pc, #488]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006232:	4b77      	ldr	r3, [pc, #476]	; (8006410 <HAL_RCC_OscConfig+0x474>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d118      	bne.n	8006270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800623e:	4b74      	ldr	r3, [pc, #464]	; (8006410 <HAL_RCC_OscConfig+0x474>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a73      	ldr	r2, [pc, #460]	; (8006410 <HAL_RCC_OscConfig+0x474>)
 8006244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800624a:	f7fd f8c9 	bl	80033e0 <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006252:	f7fd f8c5 	bl	80033e0 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e10c      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006264:	4b6a      	ldr	r3, [pc, #424]	; (8006410 <HAL_RCC_OscConfig+0x474>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0f0      	beq.n	8006252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d106      	bne.n	8006286 <HAL_RCC_OscConfig+0x2ea>
 8006278:	4b64      	ldr	r3, [pc, #400]	; (800640c <HAL_RCC_OscConfig+0x470>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	4a63      	ldr	r2, [pc, #396]	; (800640c <HAL_RCC_OscConfig+0x470>)
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	6713      	str	r3, [r2, #112]	; 0x70
 8006284:	e01c      	b.n	80062c0 <HAL_RCC_OscConfig+0x324>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b05      	cmp	r3, #5
 800628c:	d10c      	bne.n	80062a8 <HAL_RCC_OscConfig+0x30c>
 800628e:	4b5f      	ldr	r3, [pc, #380]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a5e      	ldr	r2, [pc, #376]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	6713      	str	r3, [r2, #112]	; 0x70
 800629a:	4b5c      	ldr	r3, [pc, #368]	; (800640c <HAL_RCC_OscConfig+0x470>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a5b      	ldr	r2, [pc, #364]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
 80062a6:	e00b      	b.n	80062c0 <HAL_RCC_OscConfig+0x324>
 80062a8:	4b58      	ldr	r3, [pc, #352]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	4a57      	ldr	r2, [pc, #348]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	6713      	str	r3, [r2, #112]	; 0x70
 80062b4:	4b55      	ldr	r3, [pc, #340]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	4a54      	ldr	r2, [pc, #336]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80062ba:	f023 0304 	bic.w	r3, r3, #4
 80062be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d015      	beq.n	80062f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c8:	f7fd f88a 	bl	80033e0 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fd f886 	bl	80033e0 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0cb      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e6:	4b49      	ldr	r3, [pc, #292]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0ee      	beq.n	80062d0 <HAL_RCC_OscConfig+0x334>
 80062f2:	e014      	b.n	800631e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f4:	f7fd f874 	bl	80033e0 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062fa:	e00a      	b.n	8006312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062fc:	f7fd f870 	bl	80033e0 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	f241 3288 	movw	r2, #5000	; 0x1388
 800630a:	4293      	cmp	r3, r2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e0b5      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006312:	4b3e      	ldr	r3, [pc, #248]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ee      	bne.n	80062fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d105      	bne.n	8006330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006324:	4b39      	ldr	r3, [pc, #228]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	4a38      	ldr	r2, [pc, #224]	; (800640c <HAL_RCC_OscConfig+0x470>)
 800632a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800632e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80a1 	beq.w	800647c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800633a:	4b34      	ldr	r3, [pc, #208]	; (800640c <HAL_RCC_OscConfig+0x470>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
 8006342:	2b08      	cmp	r3, #8
 8006344:	d05c      	beq.n	8006400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d141      	bne.n	80063d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800634e:	4b31      	ldr	r3, [pc, #196]	; (8006414 <HAL_RCC_OscConfig+0x478>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fd f844 	bl	80033e0 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635c:	f7fd f840 	bl	80033e0 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e087      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636e:	4b27      	ldr	r3, [pc, #156]	; (800640c <HAL_RCC_OscConfig+0x470>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	3b01      	subs	r3, #1
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	061b      	lsls	r3, r3, #24
 800639e:	491b      	ldr	r1, [pc, #108]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a4:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <HAL_RCC_OscConfig+0x478>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063aa:	f7fd f819 	bl	80033e0 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b2:	f7fd f815 	bl	80033e0 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e05c      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c4:	4b11      	ldr	r3, [pc, #68]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f0      	beq.n	80063b2 <HAL_RCC_OscConfig+0x416>
 80063d0:	e054      	b.n	800647c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b10      	ldr	r3, [pc, #64]	; (8006414 <HAL_RCC_OscConfig+0x478>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d8:	f7fd f802 	bl	80033e0 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fc fffe 	bl	80033e0 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e045      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <HAL_RCC_OscConfig+0x470>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x444>
 80063fe:	e03d      	b.n	800647c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d107      	bne.n	8006418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e038      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
 800640c:	40023800 	.word	0x40023800
 8006410:	40007000 	.word	0x40007000
 8006414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006418:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <HAL_RCC_OscConfig+0x4ec>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d028      	beq.n	8006478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006430:	429a      	cmp	r2, r3
 8006432:	d121      	bne.n	8006478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643e:	429a      	cmp	r2, r3
 8006440:	d11a      	bne.n	8006478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006448:	4013      	ands	r3, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800644e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006450:	4293      	cmp	r3, r2
 8006452:	d111      	bne.n	8006478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	085b      	lsrs	r3, r3, #1
 8006460:	3b01      	subs	r3, #1
 8006462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d107      	bne.n	8006478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40023800 	.word	0x40023800

0800648c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0cc      	b.n	800663a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064a0:	4b68      	ldr	r3, [pc, #416]	; (8006644 <HAL_RCC_ClockConfig+0x1b8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d90c      	bls.n	80064c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ae:	4b65      	ldr	r3, [pc, #404]	; (8006644 <HAL_RCC_ClockConfig+0x1b8>)
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b6:	4b63      	ldr	r3, [pc, #396]	; (8006644 <HAL_RCC_ClockConfig+0x1b8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0b8      	b.n	800663a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d020      	beq.n	8006516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064e0:	4b59      	ldr	r3, [pc, #356]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4a58      	ldr	r2, [pc, #352]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064f8:	4b53      	ldr	r3, [pc, #332]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	4a52      	ldr	r2, [pc, #328]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006504:	4b50      	ldr	r3, [pc, #320]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	494d      	ldr	r1, [pc, #308]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	4313      	orrs	r3, r2
 8006514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d044      	beq.n	80065ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d107      	bne.n	800653a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800652a:	4b47      	ldr	r3, [pc, #284]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d119      	bne.n	800656a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e07f      	b.n	800663a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d003      	beq.n	800654a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006546:	2b03      	cmp	r3, #3
 8006548:	d107      	bne.n	800655a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654a:	4b3f      	ldr	r3, [pc, #252]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e06f      	b.n	800663a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655a:	4b3b      	ldr	r3, [pc, #236]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e067      	b.n	800663a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800656a:	4b37      	ldr	r3, [pc, #220]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 0203 	bic.w	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4934      	ldr	r1, [pc, #208]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	4313      	orrs	r3, r2
 800657a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800657c:	f7fc ff30 	bl	80033e0 <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006582:	e00a      	b.n	800659a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006584:	f7fc ff2c 	bl	80033e0 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e04f      	b.n	800663a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659a:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 020c 	and.w	r2, r3, #12
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d1eb      	bne.n	8006584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065ac:	4b25      	ldr	r3, [pc, #148]	; (8006644 <HAL_RCC_ClockConfig+0x1b8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d20c      	bcs.n	80065d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ba:	4b22      	ldr	r3, [pc, #136]	; (8006644 <HAL_RCC_ClockConfig+0x1b8>)
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c2:	4b20      	ldr	r3, [pc, #128]	; (8006644 <HAL_RCC_ClockConfig+0x1b8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e032      	b.n	800663a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d008      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065e0:	4b19      	ldr	r3, [pc, #100]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4916      	ldr	r1, [pc, #88]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	490e      	ldr	r1, [pc, #56]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 800660e:	4313      	orrs	r3, r2
 8006610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006612:	f000 f821 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 8006616:	4602      	mov	r2, r0
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	490a      	ldr	r1, [pc, #40]	; (800664c <HAL_RCC_ClockConfig+0x1c0>)
 8006624:	5ccb      	ldrb	r3, [r1, r3]
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	4a09      	ldr	r2, [pc, #36]	; (8006650 <HAL_RCC_ClockConfig+0x1c4>)
 800662c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <HAL_RCC_ClockConfig+0x1c8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7fc fd68 	bl	8003108 <HAL_InitTick>

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40023c00 	.word	0x40023c00
 8006648:	40023800 	.word	0x40023800
 800664c:	080171e0 	.word	0x080171e0
 8006650:	20000010 	.word	0x20000010
 8006654:	20000014 	.word	0x20000014

08006658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800665c:	b090      	sub	sp, #64	; 0x40
 800665e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
 8006664:	2300      	movs	r3, #0
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	2300      	movs	r3, #0
 800666a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006670:	4b59      	ldr	r3, [pc, #356]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b08      	cmp	r3, #8
 800667a:	d00d      	beq.n	8006698 <HAL_RCC_GetSysClockFreq+0x40>
 800667c:	2b08      	cmp	r3, #8
 800667e:	f200 80a1 	bhi.w	80067c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_RCC_GetSysClockFreq+0x34>
 8006686:	2b04      	cmp	r3, #4
 8006688:	d003      	beq.n	8006692 <HAL_RCC_GetSysClockFreq+0x3a>
 800668a:	e09b      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800668c:	4b53      	ldr	r3, [pc, #332]	; (80067dc <HAL_RCC_GetSysClockFreq+0x184>)
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006690:	e09b      	b.n	80067ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006692:	4b53      	ldr	r3, [pc, #332]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006696:	e098      	b.n	80067ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006698:	4b4f      	ldr	r3, [pc, #316]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066a2:	4b4d      	ldr	r3, [pc, #308]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d028      	beq.n	8006700 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ae:	4b4a      	ldr	r3, [pc, #296]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	099b      	lsrs	r3, r3, #6
 80066b4:	2200      	movs	r2, #0
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	627a      	str	r2, [r7, #36]	; 0x24
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80066c0:	2100      	movs	r1, #0
 80066c2:	4b47      	ldr	r3, [pc, #284]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80066c4:	fb03 f201 	mul.w	r2, r3, r1
 80066c8:	2300      	movs	r3, #0
 80066ca:	fb00 f303 	mul.w	r3, r0, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	4a43      	ldr	r2, [pc, #268]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80066d2:	fba0 1202 	umull	r1, r2, r0, r2
 80066d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066d8:	460a      	mov	r2, r1
 80066da:	62ba      	str	r2, [r7, #40]	; 0x28
 80066dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066de:	4413      	add	r3, r2
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e4:	2200      	movs	r2, #0
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	61fa      	str	r2, [r7, #28]
 80066ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066f2:	f7fa fad1 	bl	8000c98 <__aeabi_uldivmod>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4613      	mov	r3, r2
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fe:	e053      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006700:	4b35      	ldr	r3, [pc, #212]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	099b      	lsrs	r3, r3, #6
 8006706:	2200      	movs	r2, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	617a      	str	r2, [r7, #20]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006712:	f04f 0b00 	mov.w	fp, #0
 8006716:	4652      	mov	r2, sl
 8006718:	465b      	mov	r3, fp
 800671a:	f04f 0000 	mov.w	r0, #0
 800671e:	f04f 0100 	mov.w	r1, #0
 8006722:	0159      	lsls	r1, r3, #5
 8006724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006728:	0150      	lsls	r0, r2, #5
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	ebb2 080a 	subs.w	r8, r2, sl
 8006732:	eb63 090b 	sbc.w	r9, r3, fp
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006742:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006746:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800674a:	ebb2 0408 	subs.w	r4, r2, r8
 800674e:	eb63 0509 	sbc.w	r5, r3, r9
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	00eb      	lsls	r3, r5, #3
 800675c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006760:	00e2      	lsls	r2, r4, #3
 8006762:	4614      	mov	r4, r2
 8006764:	461d      	mov	r5, r3
 8006766:	eb14 030a 	adds.w	r3, r4, sl
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	eb45 030b 	adc.w	r3, r5, fp
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800677e:	4629      	mov	r1, r5
 8006780:	028b      	lsls	r3, r1, #10
 8006782:	4621      	mov	r1, r4
 8006784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006788:	4621      	mov	r1, r4
 800678a:	028a      	lsls	r2, r1, #10
 800678c:	4610      	mov	r0, r2
 800678e:	4619      	mov	r1, r3
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	2200      	movs	r2, #0
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	60fa      	str	r2, [r7, #12]
 8006798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800679c:	f7fa fa7c 	bl	8000c98 <__aeabi_uldivmod>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4613      	mov	r3, r2
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	0c1b      	lsrs	r3, r3, #16
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	3301      	adds	r3, #1
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80067b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067c2:	e002      	b.n	80067ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <HAL_RCC_GetSysClockFreq+0x184>)
 80067c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3740      	adds	r7, #64	; 0x40
 80067d0:	46bd      	mov	sp, r7
 80067d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d6:	bf00      	nop
 80067d8:	40023800 	.word	0x40023800
 80067dc:	00f42400 	.word	0x00f42400
 80067e0:	017d7840 	.word	0x017d7840

080067e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067e8:	4b03      	ldr	r3, [pc, #12]	; (80067f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067ea:	681b      	ldr	r3, [r3, #0]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20000010 	.word	0x20000010

080067fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006800:	f7ff fff0 	bl	80067e4 <HAL_RCC_GetHCLKFreq>
 8006804:	4602      	mov	r2, r0
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	0b5b      	lsrs	r3, r3, #13
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	4903      	ldr	r1, [pc, #12]	; (8006820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006812:	5ccb      	ldrb	r3, [r1, r3]
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006818:	4618      	mov	r0, r3
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40023800 	.word	0x40023800
 8006820:	080171f0 	.word	0x080171f0

08006824 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	220f      	movs	r2, #15
 8006832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006834:	4b12      	ldr	r3, [pc, #72]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0203 	and.w	r2, r3, #3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006840:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006858:	4b09      	ldr	r3, [pc, #36]	; (8006880 <HAL_RCC_GetClockConfig+0x5c>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <HAL_RCC_GetClockConfig+0x60>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0207 	and.w	r2, r3, #7
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	601a      	str	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800
 8006884:	40023c00 	.word	0x40023c00

08006888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e07b      	b.n	8006992 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d108      	bne.n	80068b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068aa:	d009      	beq.n	80068c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	61da      	str	r2, [r3, #28]
 80068b2:	e005      	b.n	80068c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc fad8 	bl	8002e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	ea42 0103 	orr.w	r1, r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	f003 0104 	and.w	r1, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	f003 0210 	and.w	r2, r3, #16
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b088      	sub	sp, #32
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_SPI_Transmit+0x22>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e126      	b.n	8006c0a <HAL_SPI_Transmit+0x270>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c4:	f7fc fd0c 	bl	80033e0 <HAL_GetTick>
 80069c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d002      	beq.n	80069e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069da:	2302      	movs	r3, #2
 80069dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069de:	e10b      	b.n	8006bf8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_SPI_Transmit+0x52>
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069f0:	e102      	b.n	8006bf8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2203      	movs	r2, #3
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a38:	d10f      	bne.n	8006a5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	d007      	beq.n	8006a78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a80:	d14b      	bne.n	8006b1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_SPI_Transmit+0xf6>
 8006a8a:	8afb      	ldrh	r3, [r7, #22]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d13e      	bne.n	8006b0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	881a      	ldrh	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	1c9a      	adds	r2, r3, #2
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ab4:	e02b      	b.n	8006b0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d112      	bne.n	8006aea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	881a      	ldrh	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	1c9a      	adds	r2, r3, #2
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ae8:	e011      	b.n	8006b0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aea:	f7fc fc79 	bl	80033e0 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d803      	bhi.n	8006b02 <HAL_SPI_Transmit+0x168>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d102      	bne.n	8006b08 <HAL_SPI_Transmit+0x16e>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b0c:	e074      	b.n	8006bf8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1ce      	bne.n	8006ab6 <HAL_SPI_Transmit+0x11c>
 8006b18:	e04c      	b.n	8006bb4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_SPI_Transmit+0x18e>
 8006b22:	8afb      	ldrh	r3, [r7, #22]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d140      	bne.n	8006baa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	330c      	adds	r3, #12
 8006b32:	7812      	ldrb	r2, [r2, #0]
 8006b34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b4e:	e02c      	b.n	8006baa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d113      	bne.n	8006b86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	330c      	adds	r3, #12
 8006b68:	7812      	ldrb	r2, [r2, #0]
 8006b6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b84:	e011      	b.n	8006baa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b86:	f7fc fc2b 	bl	80033e0 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d803      	bhi.n	8006b9e <HAL_SPI_Transmit+0x204>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d102      	bne.n	8006ba4 <HAL_SPI_Transmit+0x20a>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ba8:	e026      	b.n	8006bf8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1cd      	bne.n	8006b50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f8c1 	bl	8006d40 <SPI_EndRxTxTransaction>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e000      	b.n	8006bf8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006bf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c20:	b2db      	uxtb	r3, r3
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c40:	f7fc fbce 	bl	80033e0 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c50:	f7fc fbc6 	bl	80033e0 <HAL_GetTick>
 8006c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c56:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	015b      	lsls	r3, r3, #5
 8006c5c:	0d1b      	lsrs	r3, r3, #20
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	fb02 f303 	mul.w	r3, r2, r3
 8006c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c66:	e054      	b.n	8006d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d050      	beq.n	8006d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c70:	f7fc fbb6 	bl	80033e0 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d902      	bls.n	8006c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d13d      	bne.n	8006d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c9e:	d111      	bne.n	8006cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca8:	d004      	beq.n	8006cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb2:	d107      	bne.n	8006cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ccc:	d10f      	bne.n	8006cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e017      	b.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	bf0c      	ite	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	2300      	movne	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d19b      	bne.n	8006c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3720      	adds	r7, #32
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000010 	.word	0x20000010

08006d40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d4c:	4b1b      	ldr	r3, [pc, #108]	; (8006dbc <SPI_EndRxTxTransaction+0x7c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1b      	ldr	r2, [pc, #108]	; (8006dc0 <SPI_EndRxTxTransaction+0x80>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	0d5b      	lsrs	r3, r3, #21
 8006d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d5c:	fb02 f303 	mul.w	r3, r2, r3
 8006d60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d6a:	d112      	bne.n	8006d92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	2180      	movs	r1, #128	; 0x80
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff ff5a 	bl	8006c30 <SPI_WaitFlagStateUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e00f      	b.n	8006db2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da8:	2b80      	cmp	r3, #128	; 0x80
 8006daa:	d0f2      	beq.n	8006d92 <SPI_EndRxTxTransaction+0x52>
 8006dac:	e000      	b.n	8006db0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dae:	bf00      	nop
  }

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000010 	.word	0x20000010
 8006dc0:	165e9f81 	.word	0x165e9f81

08006dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e041      	b.n	8006e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fc f8cc 	bl	8002f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f000 fc36 	bl	8007674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d001      	beq.n	8006e7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e03c      	b.n	8006ef6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <HAL_TIM_Base_Start+0xa0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_TIM_Base_Start+0x5c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d013      	beq.n	8006ec0 <HAL_TIM_Base_Start+0x5c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1a      	ldr	r2, [pc, #104]	; (8006f08 <HAL_TIM_Base_Start+0xa4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_Base_Start+0x5c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <HAL_TIM_Base_Start+0xa8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_Base_Start+0x5c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <HAL_TIM_Base_Start+0xac>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIM_Base_Start+0x5c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <HAL_TIM_Base_Start+0xb0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d111      	bne.n	8006ee4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d010      	beq.n	8006ef4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee2:	e007      	b.n	8006ef4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40014000 	.word	0x40014000

08006f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d001      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e044      	b.n	8006fba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d018      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x6c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d013      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x6c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <HAL_TIM_Base_Start_IT+0xb4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00e      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x6c>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d009      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x6c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d004      	beq.n	8006f84 <HAL_TIM_Base_Start_IT+0x6c>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d111      	bne.n	8006fa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d010      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0201 	orr.w	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa6:	e007      	b.n	8006fb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40014000 	.word	0x40014000

08006fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e041      	b.n	8007072 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fc f824 	bl	8003050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f000 fb2a 	bl	8007674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b02      	cmp	r3, #2
 800708e:	d122      	bne.n	80070d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b02      	cmp	r3, #2
 800709c:	d11b      	bne.n	80070d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f06f 0202 	mvn.w	r2, #2
 80070a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 faba 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 80070c2:	e005      	b.n	80070d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 faac 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fabd 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d122      	bne.n	800712a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d11b      	bne.n	800712a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f06f 0204 	mvn.w	r2, #4
 80070fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa90 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 8007116:	e005      	b.n	8007124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa82 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa93 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b08      	cmp	r3, #8
 8007136:	d122      	bne.n	800717e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b08      	cmp	r3, #8
 8007144:	d11b      	bne.n	800717e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f06f 0208 	mvn.w	r2, #8
 800714e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2204      	movs	r2, #4
 8007154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa66 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 800716a:	e005      	b.n	8007178 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa58 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa69 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b10      	cmp	r3, #16
 800718a:	d122      	bne.n	80071d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	2b10      	cmp	r3, #16
 8007198:	d11b      	bne.n	80071d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f06f 0210 	mvn.w	r2, #16
 80071a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2208      	movs	r2, #8
 80071a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fa3c 	bl	8007636 <HAL_TIM_IC_CaptureCallback>
 80071be:	e005      	b.n	80071cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa2e 	bl	8007622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa3f 	bl	800764a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d10e      	bne.n	80071fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d107      	bne.n	80071fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f06f 0201 	mvn.w	r2, #1
 80071f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fa fc8b 	bl	8001b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007208:	2b80      	cmp	r3, #128	; 0x80
 800720a:	d10e      	bne.n	800722a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d107      	bne.n	800722a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fdd5 	bl	8007dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d10e      	bne.n	8007256 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d107      	bne.n	8007256 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800724e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa04 	bl	800765e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b20      	cmp	r3, #32
 8007262:	d10e      	bne.n	8007282 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b20      	cmp	r3, #32
 8007270:	d107      	bne.n	8007282 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f06f 0220 	mvn.w	r2, #32
 800727a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fd9f 	bl	8007dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e0ae      	b.n	8007408 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b0c      	cmp	r3, #12
 80072b6:	f200 809f 	bhi.w	80073f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072f5 	.word	0x080072f5
 80072c4:	080073f9 	.word	0x080073f9
 80072c8:	080073f9 	.word	0x080073f9
 80072cc:	080073f9 	.word	0x080073f9
 80072d0:	08007335 	.word	0x08007335
 80072d4:	080073f9 	.word	0x080073f9
 80072d8:	080073f9 	.word	0x080073f9
 80072dc:	080073f9 	.word	0x080073f9
 80072e0:	08007377 	.word	0x08007377
 80072e4:	080073f9 	.word	0x080073f9
 80072e8:	080073f9 	.word	0x080073f9
 80072ec:	080073f9 	.word	0x080073f9
 80072f0:	080073b7 	.word	0x080073b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fa3a 	bl	8007774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0208 	orr.w	r2, r2, #8
 800730e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0204 	bic.w	r2, r2, #4
 800731e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6999      	ldr	r1, [r3, #24]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	619a      	str	r2, [r3, #24]
      break;
 8007332:	e064      	b.n	80073fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fa80 	bl	8007840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6999      	ldr	r1, [r3, #24]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	021a      	lsls	r2, r3, #8
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	619a      	str	r2, [r3, #24]
      break;
 8007374:	e043      	b.n	80073fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 facb 	bl	8007918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69da      	ldr	r2, [r3, #28]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0208 	orr.w	r2, r2, #8
 8007390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0204 	bic.w	r2, r2, #4
 80073a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69d9      	ldr	r1, [r3, #28]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	61da      	str	r2, [r3, #28]
      break;
 80073b4:	e023      	b.n	80073fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fb15 	bl	80079ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69d9      	ldr	r1, [r3, #28]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	021a      	lsls	r2, r3, #8
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	61da      	str	r2, [r3, #28]
      break;
 80073f6:	e002      	b.n	80073fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
      break;
 80073fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_TIM_ConfigClockSource+0x1c>
 8007428:	2302      	movs	r3, #2
 800742a:	e0b4      	b.n	8007596 <HAL_TIM_ConfigClockSource+0x186>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800744a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007464:	d03e      	beq.n	80074e4 <HAL_TIM_ConfigClockSource+0xd4>
 8007466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800746a:	f200 8087 	bhi.w	800757c <HAL_TIM_ConfigClockSource+0x16c>
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007472:	f000 8086 	beq.w	8007582 <HAL_TIM_ConfigClockSource+0x172>
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747a:	d87f      	bhi.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
 800747c:	2b70      	cmp	r3, #112	; 0x70
 800747e:	d01a      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0xa6>
 8007480:	2b70      	cmp	r3, #112	; 0x70
 8007482:	d87b      	bhi.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
 8007484:	2b60      	cmp	r3, #96	; 0x60
 8007486:	d050      	beq.n	800752a <HAL_TIM_ConfigClockSource+0x11a>
 8007488:	2b60      	cmp	r3, #96	; 0x60
 800748a:	d877      	bhi.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
 800748c:	2b50      	cmp	r3, #80	; 0x50
 800748e:	d03c      	beq.n	800750a <HAL_TIM_ConfigClockSource+0xfa>
 8007490:	2b50      	cmp	r3, #80	; 0x50
 8007492:	d873      	bhi.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d058      	beq.n	800754a <HAL_TIM_ConfigClockSource+0x13a>
 8007498:	2b40      	cmp	r3, #64	; 0x40
 800749a:	d86f      	bhi.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
 800749c:	2b30      	cmp	r3, #48	; 0x30
 800749e:	d064      	beq.n	800756a <HAL_TIM_ConfigClockSource+0x15a>
 80074a0:	2b30      	cmp	r3, #48	; 0x30
 80074a2:	d86b      	bhi.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d060      	beq.n	800756a <HAL_TIM_ConfigClockSource+0x15a>
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d867      	bhi.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d05c      	beq.n	800756a <HAL_TIM_ConfigClockSource+0x15a>
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d05a      	beq.n	800756a <HAL_TIM_ConfigClockSource+0x15a>
 80074b4:	e062      	b.n	800757c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	6899      	ldr	r1, [r3, #8]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f000 fbec 	bl	8007ca2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	609a      	str	r2, [r3, #8]
      break;
 80074e2:	e04f      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f000 fbd5 	bl	8007ca2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007506:	609a      	str	r2, [r3, #8]
      break;
 8007508:	e03c      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6859      	ldr	r1, [r3, #4]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	461a      	mov	r2, r3
 8007518:	f000 fb49 	bl	8007bae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2150      	movs	r1, #80	; 0x50
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fba2 	bl	8007c6c <TIM_ITRx_SetConfig>
      break;
 8007528:	e02c      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6859      	ldr	r1, [r3, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	461a      	mov	r2, r3
 8007538:	f000 fb68 	bl	8007c0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2160      	movs	r1, #96	; 0x60
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fb92 	bl	8007c6c <TIM_ITRx_SetConfig>
      break;
 8007548:	e01c      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	6859      	ldr	r1, [r3, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	461a      	mov	r2, r3
 8007558:	f000 fb29 	bl	8007bae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2140      	movs	r1, #64	; 0x40
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fb82 	bl	8007c6c <TIM_ITRx_SetConfig>
      break;
 8007568:	e00c      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f000 fb79 	bl	8007c6c <TIM_ITRx_SetConfig>
      break;
 800757a:	e003      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
      break;
 8007580:	e000      	b.n	8007584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e031      	b.n	800761a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fa5f 	bl	8007a8c <TIM_SlaveTimer_SetConfig>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e018      	b.n	800761a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007606:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a34      	ldr	r2, [pc, #208]	; (8007758 <TIM_Base_SetConfig+0xe4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00f      	beq.n	80076ac <TIM_Base_SetConfig+0x38>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007692:	d00b      	beq.n	80076ac <TIM_Base_SetConfig+0x38>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a31      	ldr	r2, [pc, #196]	; (800775c <TIM_Base_SetConfig+0xe8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d007      	beq.n	80076ac <TIM_Base_SetConfig+0x38>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a30      	ldr	r2, [pc, #192]	; (8007760 <TIM_Base_SetConfig+0xec>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d003      	beq.n	80076ac <TIM_Base_SetConfig+0x38>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a2f      	ldr	r2, [pc, #188]	; (8007764 <TIM_Base_SetConfig+0xf0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d108      	bne.n	80076be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a25      	ldr	r2, [pc, #148]	; (8007758 <TIM_Base_SetConfig+0xe4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01b      	beq.n	80076fe <TIM_Base_SetConfig+0x8a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d017      	beq.n	80076fe <TIM_Base_SetConfig+0x8a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a22      	ldr	r2, [pc, #136]	; (800775c <TIM_Base_SetConfig+0xe8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d013      	beq.n	80076fe <TIM_Base_SetConfig+0x8a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a21      	ldr	r2, [pc, #132]	; (8007760 <TIM_Base_SetConfig+0xec>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00f      	beq.n	80076fe <TIM_Base_SetConfig+0x8a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a20      	ldr	r2, [pc, #128]	; (8007764 <TIM_Base_SetConfig+0xf0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00b      	beq.n	80076fe <TIM_Base_SetConfig+0x8a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1f      	ldr	r2, [pc, #124]	; (8007768 <TIM_Base_SetConfig+0xf4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d007      	beq.n	80076fe <TIM_Base_SetConfig+0x8a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1e      	ldr	r2, [pc, #120]	; (800776c <TIM_Base_SetConfig+0xf8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d003      	beq.n	80076fe <TIM_Base_SetConfig+0x8a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1d      	ldr	r2, [pc, #116]	; (8007770 <TIM_Base_SetConfig+0xfc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d108      	bne.n	8007710 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a08      	ldr	r2, [pc, #32]	; (8007758 <TIM_Base_SetConfig+0xe4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d103      	bne.n	8007744 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	691a      	ldr	r2, [r3, #16]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	615a      	str	r2, [r3, #20]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40010000 	.word	0x40010000
 800775c:	40000400 	.word	0x40000400
 8007760:	40000800 	.word	0x40000800
 8007764:	40000c00 	.word	0x40000c00
 8007768:	40014000 	.word	0x40014000
 800776c:	40014400 	.word	0x40014400
 8007770:	40014800 	.word	0x40014800

08007774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f023 0201 	bic.w	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f023 0302 	bic.w	r3, r3, #2
 80077bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a1c      	ldr	r2, [pc, #112]	; (800783c <TIM_OC1_SetConfig+0xc8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10c      	bne.n	80077ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0308 	bic.w	r3, r3, #8
 80077d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f023 0304 	bic.w	r3, r3, #4
 80077e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a13      	ldr	r2, [pc, #76]	; (800783c <TIM_OC1_SetConfig+0xc8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d111      	bne.n	8007816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	621a      	str	r2, [r3, #32]
}
 8007830:	bf00      	nop
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	40010000 	.word	0x40010000

08007840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0210 	bic.w	r2, r3, #16
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f023 0320 	bic.w	r3, r3, #32
 800788a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a1e      	ldr	r2, [pc, #120]	; (8007914 <TIM_OC2_SetConfig+0xd4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10d      	bne.n	80078bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a15      	ldr	r2, [pc, #84]	; (8007914 <TIM_OC2_SetConfig+0xd4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d113      	bne.n	80078ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40010000 	.word	0x40010000

08007918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0303 	bic.w	r3, r3, #3
 800794e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	4313      	orrs	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a1d      	ldr	r2, [pc, #116]	; (80079e8 <TIM_OC3_SetConfig+0xd0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d10d      	bne.n	8007992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800797c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <TIM_OC3_SetConfig+0xd0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d113      	bne.n	80079c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4313      	orrs	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	621a      	str	r2, [r3, #32]
}
 80079dc:	bf00      	nop
 80079de:	371c      	adds	r7, #28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	40010000 	.word	0x40010000

080079ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	031b      	lsls	r3, r3, #12
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a10      	ldr	r2, [pc, #64]	; (8007a88 <TIM_OC4_SetConfig+0x9c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d109      	bne.n	8007a60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	019b      	lsls	r3, r3, #6
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40010000 	.word	0x40010000

08007a8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f023 0307 	bic.w	r3, r3, #7
 8007aba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b70      	cmp	r3, #112	; 0x70
 8007ad4:	d01a      	beq.n	8007b0c <TIM_SlaveTimer_SetConfig+0x80>
 8007ad6:	2b70      	cmp	r3, #112	; 0x70
 8007ad8:	d860      	bhi.n	8007b9c <TIM_SlaveTimer_SetConfig+0x110>
 8007ada:	2b60      	cmp	r3, #96	; 0x60
 8007adc:	d054      	beq.n	8007b88 <TIM_SlaveTimer_SetConfig+0xfc>
 8007ade:	2b60      	cmp	r3, #96	; 0x60
 8007ae0:	d85c      	bhi.n	8007b9c <TIM_SlaveTimer_SetConfig+0x110>
 8007ae2:	2b50      	cmp	r3, #80	; 0x50
 8007ae4:	d046      	beq.n	8007b74 <TIM_SlaveTimer_SetConfig+0xe8>
 8007ae6:	2b50      	cmp	r3, #80	; 0x50
 8007ae8:	d858      	bhi.n	8007b9c <TIM_SlaveTimer_SetConfig+0x110>
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	d019      	beq.n	8007b22 <TIM_SlaveTimer_SetConfig+0x96>
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d854      	bhi.n	8007b9c <TIM_SlaveTimer_SetConfig+0x110>
 8007af2:	2b30      	cmp	r3, #48	; 0x30
 8007af4:	d055      	beq.n	8007ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8007af6:	2b30      	cmp	r3, #48	; 0x30
 8007af8:	d850      	bhi.n	8007b9c <TIM_SlaveTimer_SetConfig+0x110>
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d051      	beq.n	8007ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d84c      	bhi.n	8007b9c <TIM_SlaveTimer_SetConfig+0x110>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d04d      	beq.n	8007ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8007b06:	2b10      	cmp	r3, #16
 8007b08:	d04b      	beq.n	8007ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8007b0a:	e047      	b.n	8007b9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68d9      	ldr	r1, [r3, #12]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f000 f8c1 	bl	8007ca2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007b20:	e040      	b.n	8007ba4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d101      	bne.n	8007b2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e03b      	b.n	8007ba6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6a1a      	ldr	r2, [r3, #32]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]
      break;
 8007b72:	e017      	b.n	8007ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	6899      	ldr	r1, [r3, #8]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	461a      	mov	r2, r3
 8007b82:	f000 f814 	bl	8007bae <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007b86:	e00d      	b.n	8007ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	6899      	ldr	r1, [r3, #8]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f000 f839 	bl	8007c0c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007b9a:	e003      	b.n	8007ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba0:	e000      	b.n	8007ba4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007ba2:	bf00      	nop
  }

  return status;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b087      	sub	sp, #28
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f023 0201 	bic.w	r2, r3, #1
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 030a 	bic.w	r3, r3, #10
 8007bea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	f023 0210 	bic.w	r2, r3, #16
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	031b      	lsls	r3, r3, #12
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	621a      	str	r2, [r3, #32]
}
 8007c60:	bf00      	nop
 8007c62:	371c      	adds	r7, #28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f043 0307 	orr.w	r3, r3, #7
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	609a      	str	r2, [r3, #8]
}
 8007c96:	bf00      	nop
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b087      	sub	sp, #28
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	021a      	lsls	r2, r3, #8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	609a      	str	r2, [r3, #8]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e050      	b.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1c      	ldr	r2, [pc, #112]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d48:	d013      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a18      	ldr	r2, [pc, #96]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a16      	ldr	r2, [pc, #88]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a15      	ldr	r2, [pc, #84]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d10c      	bne.n	8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40000c00 	.word	0x40000c00
 8007dbc:	40014000 	.word	0x40014000

08007dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007de8:	b084      	sub	sp, #16
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	f107 001c 	add.w	r0, r7, #28
 8007df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d122      	bne.n	8007e46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 fbee 	bl	800961c <USB_CoreReset>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
 8007e44:	e01a      	b.n	8007e7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 fbe2 	bl	800961c <USB_CoreReset>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007e6e:	e005      	b.n	8007e7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10b      	bne.n	8007e9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f043 0206 	orr.w	r2, r3, #6
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f043 0220 	orr.w	r2, r3, #32
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ea6:	b004      	add	sp, #16
 8007ea8:	4770      	bx	lr
	...

08007eac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d165      	bne.n	8007f8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4a41      	ldr	r2, [pc, #260]	; (8007fc8 <USB_SetTurnaroundTime+0x11c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d906      	bls.n	8007ed6 <USB_SetTurnaroundTime+0x2a>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4a40      	ldr	r2, [pc, #256]	; (8007fcc <USB_SetTurnaroundTime+0x120>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d202      	bcs.n	8007ed6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ed0:	230f      	movs	r3, #15
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	e062      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4a3c      	ldr	r2, [pc, #240]	; (8007fcc <USB_SetTurnaroundTime+0x120>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d306      	bcc.n	8007eec <USB_SetTurnaroundTime+0x40>
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	4a3b      	ldr	r2, [pc, #236]	; (8007fd0 <USB_SetTurnaroundTime+0x124>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d202      	bcs.n	8007eec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ee6:	230e      	movs	r3, #14
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e057      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4a38      	ldr	r2, [pc, #224]	; (8007fd0 <USB_SetTurnaroundTime+0x124>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d306      	bcc.n	8007f02 <USB_SetTurnaroundTime+0x56>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4a37      	ldr	r2, [pc, #220]	; (8007fd4 <USB_SetTurnaroundTime+0x128>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d202      	bcs.n	8007f02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007efc:	230d      	movs	r3, #13
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	e04c      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4a33      	ldr	r2, [pc, #204]	; (8007fd4 <USB_SetTurnaroundTime+0x128>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d306      	bcc.n	8007f18 <USB_SetTurnaroundTime+0x6c>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4a32      	ldr	r2, [pc, #200]	; (8007fd8 <USB_SetTurnaroundTime+0x12c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d802      	bhi.n	8007f18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f12:	230c      	movs	r3, #12
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	e041      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4a2f      	ldr	r2, [pc, #188]	; (8007fd8 <USB_SetTurnaroundTime+0x12c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d906      	bls.n	8007f2e <USB_SetTurnaroundTime+0x82>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4a2e      	ldr	r2, [pc, #184]	; (8007fdc <USB_SetTurnaroundTime+0x130>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d802      	bhi.n	8007f2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f28:	230b      	movs	r3, #11
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e036      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4a2a      	ldr	r2, [pc, #168]	; (8007fdc <USB_SetTurnaroundTime+0x130>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d906      	bls.n	8007f44 <USB_SetTurnaroundTime+0x98>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4a29      	ldr	r2, [pc, #164]	; (8007fe0 <USB_SetTurnaroundTime+0x134>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d802      	bhi.n	8007f44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f3e:	230a      	movs	r3, #10
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	e02b      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4a26      	ldr	r2, [pc, #152]	; (8007fe0 <USB_SetTurnaroundTime+0x134>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d906      	bls.n	8007f5a <USB_SetTurnaroundTime+0xae>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4a25      	ldr	r2, [pc, #148]	; (8007fe4 <USB_SetTurnaroundTime+0x138>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d202      	bcs.n	8007f5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f54:	2309      	movs	r3, #9
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	e020      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	4a21      	ldr	r2, [pc, #132]	; (8007fe4 <USB_SetTurnaroundTime+0x138>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d306      	bcc.n	8007f70 <USB_SetTurnaroundTime+0xc4>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <USB_SetTurnaroundTime+0x13c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d802      	bhi.n	8007f70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f6a:	2308      	movs	r3, #8
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	e015      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4a1d      	ldr	r2, [pc, #116]	; (8007fe8 <USB_SetTurnaroundTime+0x13c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d906      	bls.n	8007f86 <USB_SetTurnaroundTime+0xda>
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4a1c      	ldr	r2, [pc, #112]	; (8007fec <USB_SetTurnaroundTime+0x140>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d202      	bcs.n	8007f86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f80:	2307      	movs	r3, #7
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e00a      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f86:	2306      	movs	r3, #6
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	e007      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f92:	2309      	movs	r3, #9
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e001      	b.n	8007f9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f98:	2309      	movs	r3, #9
 8007f9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	029b      	lsls	r3, r3, #10
 8007fb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	00d8acbf 	.word	0x00d8acbf
 8007fcc:	00e4e1c0 	.word	0x00e4e1c0
 8007fd0:	00f42400 	.word	0x00f42400
 8007fd4:	01067380 	.word	0x01067380
 8007fd8:	011a499f 	.word	0x011a499f
 8007fdc:	01312cff 	.word	0x01312cff
 8007fe0:	014ca43f 	.word	0x014ca43f
 8007fe4:	016e3600 	.word	0x016e3600
 8007fe8:	01a6ab1f 	.word	0x01a6ab1f
 8007fec:	01e84800 	.word	0x01e84800

08007ff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f043 0201 	orr.w	r2, r3, #1
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d115      	bne.n	8008082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008062:	2001      	movs	r0, #1
 8008064:	f7fb f9c8 	bl	80033f8 <HAL_Delay>
      ms++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fa45 	bl	80094fe <USB_GetMode>
 8008074:	4603      	mov	r3, r0
 8008076:	2b01      	cmp	r3, #1
 8008078:	d01e      	beq.n	80080b8 <USB_SetCurrentMode+0x84>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b31      	cmp	r3, #49	; 0x31
 800807e:	d9f0      	bls.n	8008062 <USB_SetCurrentMode+0x2e>
 8008080:	e01a      	b.n	80080b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d115      	bne.n	80080b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008094:	2001      	movs	r0, #1
 8008096:	f7fb f9af 	bl	80033f8 <HAL_Delay>
      ms++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 fa2c 	bl	80094fe <USB_GetMode>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <USB_SetCurrentMode+0x84>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b31      	cmp	r3, #49	; 0x31
 80080b0:	d9f0      	bls.n	8008094 <USB_SetCurrentMode+0x60>
 80080b2:	e001      	b.n	80080b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e005      	b.n	80080c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b32      	cmp	r3, #50	; 0x32
 80080bc:	d101      	bne.n	80080c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080cc:	b084      	sub	sp, #16
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	e009      	b.n	8008100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3340      	adds	r3, #64	; 0x40
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3301      	adds	r3, #1
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2b0e      	cmp	r3, #14
 8008104:	d9f2      	bls.n	80080ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d11c      	bne.n	8008146 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800811a:	f043 0302 	orr.w	r3, r3, #2
 800811e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	639a      	str	r2, [r3, #56]	; 0x38
 8008144:	e00b      	b.n	800815e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008164:	461a      	mov	r2, r3
 8008166:	2300      	movs	r3, #0
 8008168:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008170:	4619      	mov	r1, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008178:	461a      	mov	r2, r3
 800817a:	680b      	ldr	r3, [r1, #0]
 800817c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	2b01      	cmp	r3, #1
 8008182:	d10c      	bne.n	800819e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800818a:	2100      	movs	r1, #0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f965 	bl	800845c <USB_SetDevSpeed>
 8008192:	e008      	b.n	80081a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008194:	2101      	movs	r1, #1
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f960 	bl	800845c <USB_SetDevSpeed>
 800819c:	e003      	b.n	80081a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800819e:	2103      	movs	r1, #3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f95b 	bl	800845c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081a6:	2110      	movs	r1, #16
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f8f3 	bl	8008394 <USB_FlushTxFifo>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f91f 	bl	80083fc <USB_FlushRxFifo>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ce:	461a      	mov	r2, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081da:	461a      	mov	r2, r3
 80081dc:	2300      	movs	r3, #0
 80081de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e6:	461a      	mov	r2, r3
 80081e8:	2300      	movs	r3, #0
 80081ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e043      	b.n	800827a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008208:	d118      	bne.n	800823c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821c:	461a      	mov	r2, r3
 800821e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	e013      	b.n	800824e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008232:	461a      	mov	r2, r3
 8008234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	e008      	b.n	800824e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008248:	461a      	mov	r2, r3
 800824a:	2300      	movs	r3, #0
 800824c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825a:	461a      	mov	r2, r3
 800825c:	2300      	movs	r3, #0
 800825e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826c:	461a      	mov	r2, r3
 800826e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	3301      	adds	r3, #1
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	429a      	cmp	r2, r3
 8008280:	d3b7      	bcc.n	80081f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	e043      	b.n	8008310 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800829a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800829e:	d118      	bne.n	80082d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	461a      	mov	r2, r3
 80082b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e013      	b.n	80082e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	461a      	mov	r2, r3
 80082ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	e008      	b.n	80082e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	461a      	mov	r2, r3
 80082e0:	2300      	movs	r3, #0
 80082e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f0:	461a      	mov	r2, r3
 80082f2:	2300      	movs	r3, #0
 80082f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008302:	461a      	mov	r2, r3
 8008304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	3301      	adds	r3, #1
 800830e:	613b      	str	r3, [r7, #16]
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	429a      	cmp	r2, r3
 8008316:	d3b7      	bcc.n	8008288 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800832a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008338:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	2b00      	cmp	r3, #0
 800833e:	d105      	bne.n	800834c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f043 0210 	orr.w	r2, r3, #16
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699a      	ldr	r2, [r3, #24]
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <USB_DevInit+0x2c4>)
 8008352:	4313      	orrs	r3, r2
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f043 0208 	orr.w	r2, r3, #8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800836a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800836c:	2b01      	cmp	r3, #1
 800836e:	d107      	bne.n	8008380 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008378:	f043 0304 	orr.w	r3, r3, #4
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800838c:	b004      	add	sp, #16
 800838e:	4770      	bx	lr
 8008390:	803c3800 	.word	0x803c3800

08008394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4a13      	ldr	r2, [pc, #76]	; (80083f8 <USB_FlushTxFifo+0x64>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d901      	bls.n	80083b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e01b      	b.n	80083ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	daf2      	bge.n	80083a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	019b      	lsls	r3, r3, #6
 80083c4:	f043 0220 	orr.w	r2, r3, #32
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4a08      	ldr	r2, [pc, #32]	; (80083f8 <USB_FlushTxFifo+0x64>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d901      	bls.n	80083de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e006      	b.n	80083ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d0f0      	beq.n	80083cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	00030d40 	.word	0x00030d40

080083fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3301      	adds	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4a11      	ldr	r2, [pc, #68]	; (8008458 <USB_FlushRxFifo+0x5c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d901      	bls.n	800841a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e018      	b.n	800844c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	daf2      	bge.n	8008408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2210      	movs	r2, #16
 800842a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4a08      	ldr	r2, [pc, #32]	; (8008458 <USB_FlushRxFifo+0x5c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d901      	bls.n	800843e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e006      	b.n	800844c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	f003 0310 	and.w	r3, r3, #16
 8008446:	2b10      	cmp	r3, #16
 8008448:	d0f0      	beq.n	800842c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	00030d40 	.word	0x00030d40

0800845c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	68f9      	ldr	r1, [r7, #12]
 8008478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800847c:	4313      	orrs	r3, r2
 800847e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800848e:	b480      	push	{r7}
 8008490:	b087      	sub	sp, #28
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 0306 	and.w	r3, r3, #6
 80084a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d102      	bne.n	80084b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75fb      	strb	r3, [r7, #23]
 80084b2:	e00a      	b.n	80084ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d002      	beq.n	80084c0 <USB_GetDevSpeed+0x32>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b06      	cmp	r3, #6
 80084be:	d102      	bne.n	80084c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80084c0:	2302      	movs	r3, #2
 80084c2:	75fb      	strb	r3, [r7, #23]
 80084c4:	e001      	b.n	80084ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80084c6:	230f      	movs	r3, #15
 80084c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d13a      	bne.n	800856a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	2101      	movs	r1, #1
 8008506:	fa01 f303 	lsl.w	r3, r1, r3
 800850a:	b29b      	uxth	r3, r3
 800850c:	68f9      	ldr	r1, [r7, #12]
 800850e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008512:	4313      	orrs	r3, r2
 8008514:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d155      	bne.n	80085d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	791b      	ldrb	r3, [r3, #4]
 8008546:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008548:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	059b      	lsls	r3, r3, #22
 800854e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008550:	4313      	orrs	r3, r2
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	e036      	b.n	80085d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008570:	69da      	ldr	r2, [r3, #28]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	2101      	movs	r1, #1
 800857c:	fa01 f303 	lsl.w	r3, r1, r3
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008588:	4313      	orrs	r3, r2
 800858a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d11a      	bne.n	80085d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085be:	430b      	orrs	r3, r1
 80085c0:	4313      	orrs	r3, r2
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
	...

080085e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d161      	bne.n	80086c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800861a:	d11f      	bne.n	800865c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	440a      	add	r2, r1
 8008632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800863a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	0151      	lsls	r1, r2, #5
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	440a      	add	r2, r1
 8008652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800865a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	2101      	movs	r1, #1
 800866e:	fa01 f303 	lsl.w	r3, r1, r3
 8008672:	b29b      	uxth	r3, r3
 8008674:	43db      	mvns	r3, r3
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800867c:	4013      	ands	r3, r2
 800867e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	2101      	movs	r1, #1
 8008692:	fa01 f303 	lsl.w	r3, r1, r3
 8008696:	b29b      	uxth	r3, r3
 8008698:	43db      	mvns	r3, r3
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086a0:	4013      	ands	r3, r2
 80086a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	0159      	lsls	r1, r3, #5
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	440b      	add	r3, r1
 80086ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086be:	4619      	mov	r1, r3
 80086c0:	4b35      	ldr	r3, [pc, #212]	; (8008798 <USB_DeactivateEndpoint+0x1b0>)
 80086c2:	4013      	ands	r3, r2
 80086c4:	600b      	str	r3, [r1, #0]
 80086c6:	e060      	b.n	800878a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086de:	d11f      	bne.n	8008720 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	0151      	lsls	r1, r2, #5
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	440a      	add	r2, r1
 8008716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800871a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800871e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	2101      	movs	r1, #1
 8008732:	fa01 f303 	lsl.w	r3, r1, r3
 8008736:	041b      	lsls	r3, r3, #16
 8008738:	43db      	mvns	r3, r3
 800873a:	68f9      	ldr	r1, [r7, #12]
 800873c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008740:	4013      	ands	r3, r2
 8008742:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874a:	69da      	ldr	r2, [r3, #28]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	2101      	movs	r1, #1
 8008756:	fa01 f303 	lsl.w	r3, r1, r3
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	43db      	mvns	r3, r3
 800875e:	68f9      	ldr	r1, [r7, #12]
 8008760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008764:	4013      	ands	r3, r2
 8008766:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	0159      	lsls	r1, r3, #5
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	440b      	add	r3, r1
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	4619      	mov	r1, r3
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <USB_DeactivateEndpoint+0x1b4>)
 8008786:	4013      	ands	r3, r2
 8008788:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	ec337800 	.word	0xec337800
 800879c:	eff37800 	.word	0xeff37800

080087a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	4613      	mov	r3, r2
 80087ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	f040 815c 	bne.w	8008a7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d132      	bne.n	8008830 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	69fa      	ldr	r2, [r7, #28]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	440a      	add	r2, r1
 8008804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800880c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	69fa      	ldr	r2, [r7, #28]
 8008822:	440a      	add	r2, r1
 8008824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008828:	0cdb      	lsrs	r3, r3, #19
 800882a:	04db      	lsls	r3, r3, #19
 800882c:	6113      	str	r3, [r2, #16]
 800882e:	e074      	b.n	800891a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	69fa      	ldr	r2, [r7, #28]
 8008844:	440a      	add	r2, r1
 8008846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800884a:	0cdb      	lsrs	r3, r3, #19
 800884c:	04db      	lsls	r3, r3, #19
 800884e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	440a      	add	r2, r1
 8008866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800886a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800886e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008880:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6999      	ldr	r1, [r3, #24]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	440b      	add	r3, r1
 800888c:	1e59      	subs	r1, r3, #1
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	fbb1 f3f3 	udiv	r3, r1, r3
 8008896:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008898:	4b9d      	ldr	r3, [pc, #628]	; (8008b10 <USB_EPStartXfer+0x370>)
 800889a:	400b      	ands	r3, r1
 800889c:	69b9      	ldr	r1, [r7, #24]
 800889e:	0148      	lsls	r0, r1, #5
 80088a0:	69f9      	ldr	r1, [r7, #28]
 80088a2:	4401      	add	r1, r0
 80088a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088a8:	4313      	orrs	r3, r2
 80088aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088c2:	69b9      	ldr	r1, [r7, #24]
 80088c4:	0148      	lsls	r0, r1, #5
 80088c6:	69f9      	ldr	r1, [r7, #28]
 80088c8:	4401      	add	r1, r0
 80088ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088ce:	4313      	orrs	r3, r2
 80088d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	791b      	ldrb	r3, [r3, #4]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d11f      	bne.n	800891a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008918:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d14b      	bne.n	80089b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	461a      	mov	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	791b      	ldrb	r3, [r3, #4]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d128      	bne.n	8008996 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008950:	2b00      	cmp	r3, #0
 8008952:	d110      	bne.n	8008976 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	e00f      	b.n	8008996 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008994:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	e133      	b.n	8008c20 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	791b      	ldrb	r3, [r3, #4]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d015      	beq.n	8008a0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 811b 	beq.w	8008c20 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	2101      	movs	r1, #1
 80089fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008a00:	69f9      	ldr	r1, [r7, #28]
 8008a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a06:	4313      	orrs	r3, r2
 8008a08:	634b      	str	r3, [r1, #52]	; 0x34
 8008a0a:	e109      	b.n	8008c20 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d110      	bne.n	8008a3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	e00f      	b.n	8008a5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6919      	ldr	r1, [r3, #16]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	b298      	uxth	r0, r3
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	4603      	mov	r3, r0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fade 	bl	8009034 <USB_WritePacket>
 8008a78:	e0d2      	b.n	8008c20 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	0151      	lsls	r1, r2, #5
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	440a      	add	r2, r1
 8008a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a94:	0cdb      	lsrs	r3, r3, #19
 8008a96:	04db      	lsls	r3, r3, #19
 8008a98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ab4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ab8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008abc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d126      	bne.n	8008b14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	691a      	ldr	r2, [r3, #16]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008adc:	69b9      	ldr	r1, [r7, #24]
 8008ade:	0148      	lsls	r0, r1, #5
 8008ae0:	69f9      	ldr	r1, [r7, #28]
 8008ae2:	4401      	add	r1, r0
 8008ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b0a:	6113      	str	r3, [r2, #16]
 8008b0c:	e03a      	b.n	8008b84 <USB_EPStartXfer+0x3e4>
 8008b0e:	bf00      	nop
 8008b10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	1e5a      	subs	r2, r3, #1
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b28:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	8afa      	ldrh	r2, [r7, #22]
 8008b30:	fb03 f202 	mul.w	r2, r3, r2
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	8afb      	ldrh	r3, [r7, #22]
 8008b48:	04d9      	lsls	r1, r3, #19
 8008b4a:	4b38      	ldr	r3, [pc, #224]	; (8008c2c <USB_EPStartXfer+0x48c>)
 8008b4c:	400b      	ands	r3, r1
 8008b4e:	69b9      	ldr	r1, [r7, #24]
 8008b50:	0148      	lsls	r0, r1, #5
 8008b52:	69f9      	ldr	r1, [r7, #28]
 8008b54:	4401      	add	r1, r0
 8008b56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b74:	69b9      	ldr	r1, [r7, #24]
 8008b76:	0148      	lsls	r0, r1, #5
 8008b78:	69f9      	ldr	r1, [r7, #28]
 8008b7a:	4401      	add	r1, r0
 8008b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b80:	4313      	orrs	r3, r2
 8008b82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d10d      	bne.n	8008ba6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d009      	beq.n	8008ba6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6919      	ldr	r1, [r3, #16]
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	460a      	mov	r2, r1
 8008ba4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	791b      	ldrb	r3, [r3, #4]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d128      	bne.n	8008c00 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d110      	bne.n	8008be0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	e00f      	b.n	8008c00 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	1ff80000 	.word	0x1ff80000

08008c30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	f040 80ce 	bne.w	8008dee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d132      	bne.n	8008cc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb8:	0cdb      	lsrs	r3, r3, #19
 8008cba:	04db      	lsls	r3, r3, #19
 8008cbc:	6113      	str	r3, [r2, #16]
 8008cbe:	e04e      	b.n	8008d5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cda:	0cdb      	lsrs	r3, r3, #19
 8008cdc:	04db      	lsls	r3, r3, #19
 8008cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	699a      	ldr	r2, [r3, #24]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d903      	bls.n	8008d18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d4e:	6939      	ldr	r1, [r7, #16]
 8008d50:	0148      	lsls	r0, r1, #5
 8008d52:	6979      	ldr	r1, [r7, #20]
 8008d54:	4401      	add	r1, r0
 8008d56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d11e      	bne.n	8008da2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d009      	beq.n	8008d80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	461a      	mov	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d9e:	6013      	str	r3, [r2, #0]
 8008da0:	e097      	b.n	8008ed2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 8083 	beq.w	8008ed2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fa01 f303 	lsl.w	r3, r1, r3
 8008de2:	6979      	ldr	r1, [r7, #20]
 8008de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008de8:	4313      	orrs	r3, r2
 8008dea:	634b      	str	r3, [r1, #52]	; 0x34
 8008dec:	e071      	b.n	8008ed2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	0151      	lsls	r1, r2, #5
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	440a      	add	r2, r1
 8008e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e08:	0cdb      	lsrs	r3, r3, #19
 8008e0a:	04db      	lsls	r3, r3, #19
 8008e0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	0151      	lsls	r1, r2, #5
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	440a      	add	r2, r1
 8008e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e76:	691a      	ldr	r2, [r3, #16]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e80:	6939      	ldr	r1, [r7, #16]
 8008e82:	0148      	lsls	r0, r1, #5
 8008e84:	6979      	ldr	r1, [r7, #20]
 8008e86:	4401      	add	r1, r0
 8008e88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d10d      	bne.n	8008eb2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6919      	ldr	r1, [r3, #16]
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eae:	460a      	mov	r2, r1
 8008eb0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ecc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ed0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	371c      	adds	r7, #28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d14a      	bne.n	8008f94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f16:	f040 8086 	bne.w	8009026 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	7812      	ldrb	r2, [r2, #0]
 8008f2e:	0151      	lsls	r1, r2, #5
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	440a      	add	r2, r1
 8008f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	0151      	lsls	r1, r2, #5
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	440a      	add	r2, r1
 8008f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d902      	bls.n	8008f78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
          break;
 8008f76:	e056      	b.n	8009026 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f90:	d0e7      	beq.n	8008f62 <USB_EPStopXfer+0x82>
 8008f92:	e048      	b.n	8009026 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fac:	d13b      	bne.n	8009026 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	7812      	ldrb	r2, [r2, #0]
 8008fc2:	0151      	lsls	r1, r2, #5
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	440a      	add	r2, r1
 8008fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	7812      	ldrb	r2, [r2, #0]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ff4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f242 7210 	movw	r2, #10000	; 0x2710
 8009002:	4293      	cmp	r3, r2
 8009004:	d902      	bls.n	800900c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]
          break;
 800900a:	e00c      	b.n	8009026 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009024:	d0e7      	beq.n	8008ff6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009026:	7dfb      	ldrb	r3, [r7, #23]
}
 8009028:	4618      	mov	r0, r3
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009034:	b480      	push	{r7}
 8009036:	b089      	sub	sp, #36	; 0x24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4611      	mov	r1, r2
 8009040:	461a      	mov	r2, r3
 8009042:	460b      	mov	r3, r1
 8009044:	71fb      	strb	r3, [r7, #7]
 8009046:	4613      	mov	r3, r2
 8009048:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009052:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009056:	2b00      	cmp	r3, #0
 8009058:	d123      	bne.n	80090a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800905a:	88bb      	ldrh	r3, [r7, #4]
 800905c:	3303      	adds	r3, #3
 800905e:	089b      	lsrs	r3, r3, #2
 8009060:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009062:	2300      	movs	r3, #0
 8009064:	61bb      	str	r3, [r7, #24]
 8009066:	e018      	b.n	800909a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	031a      	lsls	r2, r3, #12
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	4413      	add	r3, r2
 8009070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009074:	461a      	mov	r2, r3
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	3301      	adds	r3, #1
 8009080:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	3301      	adds	r3, #1
 8009086:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	3301      	adds	r3, #1
 800908c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	3301      	adds	r3, #1
 8009092:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	3301      	adds	r3, #1
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d3e2      	bcc.n	8009068 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3724      	adds	r7, #36	; 0x24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b08b      	sub	sp, #44	; 0x2c
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	089b      	lsrs	r3, r3, #2
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090d6:	2300      	movs	r3, #0
 80090d8:	623b      	str	r3, [r7, #32]
 80090da:	e014      	b.n	8009106 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	3301      	adds	r3, #1
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	3301      	adds	r3, #1
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	3301      	adds	r3, #1
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	3301      	adds	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	3301      	adds	r3, #1
 8009104:	623b      	str	r3, [r7, #32]
 8009106:	6a3a      	ldr	r2, [r7, #32]
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	429a      	cmp	r2, r3
 800910c:	d3e6      	bcc.n	80090dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800910e:	8bfb      	ldrh	r3, [r7, #30]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01e      	beq.n	8009152 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911e:	461a      	mov	r2, r3
 8009120:	f107 0310 	add.w	r3, r7, #16
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
 8009134:	b2da      	uxtb	r2, r3
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	701a      	strb	r2, [r3, #0]
      i++;
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	3301      	adds	r3, #1
 800913e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	3301      	adds	r3, #1
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009146:	8bfb      	ldrh	r3, [r7, #30]
 8009148:	3b01      	subs	r3, #1
 800914a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800914c:	8bfb      	ldrh	r3, [r7, #30]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1ea      	bne.n	8009128 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009154:	4618      	mov	r0, r3
 8009156:	372c      	adds	r7, #44	; 0x2c
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d12c      	bne.n	80091d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	db12      	blt.n	80091b4 <USB_EPSetStall+0x54>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00f      	beq.n	80091b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	e02b      	b.n	800922e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	db12      	blt.n	800920e <USB_EPSetStall+0xae>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00f      	beq.n	800920e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	440a      	add	r2, r1
 8009204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800920c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4413      	add	r3, r2
 8009216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	0151      	lsls	r1, r2, #5
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	440a      	add	r2, r1
 8009224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800922c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d128      	bne.n	80092aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	440a      	add	r2, r1
 800926e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009276:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	791b      	ldrb	r3, [r3, #4]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d003      	beq.n	8009288 <USB_EPClearStall+0x4c>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	791b      	ldrb	r3, [r3, #4]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d138      	bne.n	80092fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	e027      	b.n	80092fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	0151      	lsls	r1, r2, #5
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	440a      	add	r2, r1
 80092c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	791b      	ldrb	r3, [r3, #4]
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d003      	beq.n	80092da <USB_EPClearStall+0x9e>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	791b      	ldrb	r3, [r3, #4]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d10f      	bne.n	80092fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009326:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800932a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800933c:	68f9      	ldr	r1, [r7, #12]
 800933e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009342:	4313      	orrs	r3, r2
 8009344:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009382:	f023 0302 	bic.w	r3, r3, #2
 8009386:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093b0:	f023 0303 	bic.w	r3, r3, #3
 80093b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093c4:	f043 0302 	orr.w	r3, r3, #2
 80093c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4013      	ands	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093f0:	68fb      	ldr	r3, [r7, #12]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093fe:	b480      	push	{r7}
 8009400:	b085      	sub	sp, #20
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	4013      	ands	r3, r2
 8009420:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	0c1b      	lsrs	r3, r3, #16
}
 8009426:	4618      	mov	r0, r3
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	4013      	ands	r3, r2
 8009454:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	b29b      	uxth	r3, r3
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009476:	78fb      	ldrb	r3, [r7, #3]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4013      	ands	r3, r2
 8009492:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009494:	68bb      	ldr	r3, [r7, #8]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b087      	sub	sp, #28
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	f003 030f 	and.w	r3, r3, #15
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	fa22 f303 	lsr.w	r3, r2, r3
 80094d2:	01db      	lsls	r3, r3, #7
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4013      	ands	r3, r2
 80094ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094f0:	68bb      	ldr	r3, [r7, #8]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	f003 0301 	and.w	r3, r3, #1
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009534:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009538:	f023 0307 	bic.w	r3, r3, #7
 800953c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800954c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	460b      	mov	r3, r1
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	333c      	adds	r3, #60	; 0x3c
 8009576:	3304      	adds	r3, #4
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	4a26      	ldr	r2, [pc, #152]	; (8009618 <USB_EP0_OutStart+0xb8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d90a      	bls.n	800959a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009594:	d101      	bne.n	800959a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	e037      	b.n	800960a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a0:	461a      	mov	r2, r3
 80095a2:	2300      	movs	r3, #0
 80095a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c8:	f043 0318 	orr.w	r3, r3, #24
 80095cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095e2:	7afb      	ldrb	r3, [r7, #11]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d10f      	bne.n	8009608 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ee:	461a      	mov	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009602:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	371c      	adds	r7, #28
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	4f54300a 	.word	0x4f54300a

0800961c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4a13      	ldr	r2, [pc, #76]	; (8009680 <USB_CoreReset+0x64>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d901      	bls.n	800963a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e01b      	b.n	8009672 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	daf2      	bge.n	8009628 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	f043 0201 	orr.w	r2, r3, #1
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4a09      	ldr	r2, [pc, #36]	; (8009680 <USB_CoreReset+0x64>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d901      	bls.n	8009664 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e006      	b.n	8009672 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b01      	cmp	r3, #1
 800966e:	d0f0      	beq.n	8009652 <USB_CoreReset+0x36>

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	00030d40 	.word	0x00030d40

08009684 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009690:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009694:	f005 fa5c 	bl	800eb50 <USBD_static_malloc>
 8009698:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d109      	bne.n	80096b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	32b0      	adds	r2, #176	; 0xb0
 80096aa:	2100      	movs	r1, #0
 80096ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80096b0:	2302      	movs	r3, #2
 80096b2:	e0d4      	b.n	800985e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80096b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80096b8:	2100      	movs	r1, #0
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f005 fbbd 	bl	800ee3a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	32b0      	adds	r2, #176	; 0xb0
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	32b0      	adds	r2, #176	; 0xb0
 80096da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7c1b      	ldrb	r3, [r3, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d138      	bne.n	800975e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096ec:	4b5e      	ldr	r3, [pc, #376]	; (8009868 <USBD_CDC_Init+0x1e4>)
 80096ee:	7819      	ldrb	r1, [r3, #0]
 80096f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096f4:	2202      	movs	r2, #2
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f005 f907 	bl	800e90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096fc:	4b5a      	ldr	r3, [pc, #360]	; (8009868 <USBD_CDC_Init+0x1e4>)
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	f003 020f 	and.w	r2, r3, #15
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	4613      	mov	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	440b      	add	r3, r1
 8009710:	3324      	adds	r3, #36	; 0x24
 8009712:	2201      	movs	r2, #1
 8009714:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009716:	4b55      	ldr	r3, [pc, #340]	; (800986c <USBD_CDC_Init+0x1e8>)
 8009718:	7819      	ldrb	r1, [r3, #0]
 800971a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800971e:	2202      	movs	r2, #2
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f005 f8f2 	bl	800e90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009726:	4b51      	ldr	r3, [pc, #324]	; (800986c <USBD_CDC_Init+0x1e8>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	f003 020f 	and.w	r2, r3, #15
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	4613      	mov	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	440b      	add	r3, r1
 800973a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800973e:	2201      	movs	r2, #1
 8009740:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009742:	4b4b      	ldr	r3, [pc, #300]	; (8009870 <USBD_CDC_Init+0x1ec>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 020f 	and.w	r2, r3, #15
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	440b      	add	r3, r1
 8009756:	3326      	adds	r3, #38	; 0x26
 8009758:	2210      	movs	r2, #16
 800975a:	801a      	strh	r2, [r3, #0]
 800975c:	e035      	b.n	80097ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800975e:	4b42      	ldr	r3, [pc, #264]	; (8009868 <USBD_CDC_Init+0x1e4>)
 8009760:	7819      	ldrb	r1, [r3, #0]
 8009762:	2340      	movs	r3, #64	; 0x40
 8009764:	2202      	movs	r2, #2
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f005 f8cf 	bl	800e90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800976c:	4b3e      	ldr	r3, [pc, #248]	; (8009868 <USBD_CDC_Init+0x1e4>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 020f 	and.w	r2, r3, #15
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	3324      	adds	r3, #36	; 0x24
 8009782:	2201      	movs	r2, #1
 8009784:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009786:	4b39      	ldr	r3, [pc, #228]	; (800986c <USBD_CDC_Init+0x1e8>)
 8009788:	7819      	ldrb	r1, [r3, #0]
 800978a:	2340      	movs	r3, #64	; 0x40
 800978c:	2202      	movs	r2, #2
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f005 f8bb 	bl	800e90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009794:	4b35      	ldr	r3, [pc, #212]	; (800986c <USBD_CDC_Init+0x1e8>)
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	f003 020f 	and.w	r2, r3, #15
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097ac:	2201      	movs	r2, #1
 80097ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80097b0:	4b2f      	ldr	r3, [pc, #188]	; (8009870 <USBD_CDC_Init+0x1ec>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	440b      	add	r3, r1
 80097c4:	3326      	adds	r3, #38	; 0x26
 80097c6:	2210      	movs	r2, #16
 80097c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097ca:	4b29      	ldr	r3, [pc, #164]	; (8009870 <USBD_CDC_Init+0x1ec>)
 80097cc:	7819      	ldrb	r1, [r3, #0]
 80097ce:	2308      	movs	r3, #8
 80097d0:	2203      	movs	r2, #3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f005 f899 	bl	800e90a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097d8:	4b25      	ldr	r3, [pc, #148]	; (8009870 <USBD_CDC_Init+0x1ec>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	f003 020f 	and.w	r2, r3, #15
 80097e0:	6879      	ldr	r1, [r7, #4]
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	440b      	add	r3, r1
 80097ec:	3324      	adds	r3, #36	; 0x24
 80097ee:	2201      	movs	r2, #1
 80097f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	33b0      	adds	r3, #176	; 0xb0
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009828:	2302      	movs	r3, #2
 800982a:	e018      	b.n	800985e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	7c1b      	ldrb	r3, [r3, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009834:	4b0d      	ldr	r3, [pc, #52]	; (800986c <USBD_CDC_Init+0x1e8>)
 8009836:	7819      	ldrb	r1, [r3, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800983e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f005 f950 	bl	800eae8 <USBD_LL_PrepareReceive>
 8009848:	e008      	b.n	800985c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800984a:	4b08      	ldr	r3, [pc, #32]	; (800986c <USBD_CDC_Init+0x1e8>)
 800984c:	7819      	ldrb	r1, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f005 f946 	bl	800eae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	200000a3 	.word	0x200000a3
 800986c:	200000a4 	.word	0x200000a4
 8009870:	200000a5 	.word	0x200000a5

08009874 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009880:	4b3a      	ldr	r3, [pc, #232]	; (800996c <USBD_CDC_DeInit+0xf8>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f005 f865 	bl	800e956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800988c:	4b37      	ldr	r3, [pc, #220]	; (800996c <USBD_CDC_DeInit+0xf8>)
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	f003 020f 	and.w	r2, r3, #15
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4613      	mov	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	3324      	adds	r3, #36	; 0x24
 80098a2:	2200      	movs	r2, #0
 80098a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80098a6:	4b32      	ldr	r3, [pc, #200]	; (8009970 <USBD_CDC_DeInit+0xfc>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f005 f852 	bl	800e956 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80098b2:	4b2f      	ldr	r3, [pc, #188]	; (8009970 <USBD_CDC_DeInit+0xfc>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098ca:	2200      	movs	r2, #0
 80098cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <USBD_CDC_DeInit+0x100>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f005 f83e 	bl	800e956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80098da:	4b26      	ldr	r3, [pc, #152]	; (8009974 <USBD_CDC_DeInit+0x100>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f003 020f 	and.w	r2, r3, #15
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	3324      	adds	r3, #36	; 0x24
 80098f0:	2200      	movs	r2, #0
 80098f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80098f4:	4b1f      	ldr	r3, [pc, #124]	; (8009974 <USBD_CDC_DeInit+0x100>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	f003 020f 	and.w	r2, r3, #15
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	3326      	adds	r3, #38	; 0x26
 800990a:	2200      	movs	r2, #0
 800990c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	32b0      	adds	r2, #176	; 0xb0
 8009918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01f      	beq.n	8009960 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	33b0      	adds	r3, #176	; 0xb0
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	32b0      	adds	r2, #176	; 0xb0
 800993e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009942:	4618      	mov	r0, r3
 8009944:	f005 f912 	bl	800eb6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	32b0      	adds	r2, #176	; 0xb0
 8009952:	2100      	movs	r1, #0
 8009954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	200000a3 	.word	0x200000a3
 8009970:	200000a4 	.word	0x200000a4
 8009974:	200000a5 	.word	0x200000a5

08009978 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	32b0      	adds	r2, #176	; 0xb0
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e0bf      	b.n	8009b28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d050      	beq.n	8009a56 <USBD_CDC_Setup+0xde>
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	f040 80af 	bne.w	8009b18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	88db      	ldrh	r3, [r3, #6]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d03a      	beq.n	8009a38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	b25b      	sxtb	r3, r3
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	da1b      	bge.n	8009a04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	33b0      	adds	r3, #176	; 0xb0
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80099e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	88d2      	ldrh	r2, [r2, #6]
 80099e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	88db      	ldrh	r3, [r3, #6]
 80099ee:	2b07      	cmp	r3, #7
 80099f0:	bf28      	it	cs
 80099f2:	2307      	movcs	r3, #7
 80099f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	89fa      	ldrh	r2, [r7, #14]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f001 fd89 	bl	800b514 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009a02:	e090      	b.n	8009b26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	785a      	ldrb	r2, [r3, #1]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	88db      	ldrh	r3, [r3, #6]
 8009a12:	2b3f      	cmp	r3, #63	; 0x3f
 8009a14:	d803      	bhi.n	8009a1e <USBD_CDC_Setup+0xa6>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	88db      	ldrh	r3, [r3, #6]
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	e000      	b.n	8009a20 <USBD_CDC_Setup+0xa8>
 8009a1e:	2240      	movs	r2, #64	; 0x40
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a26:	6939      	ldr	r1, [r7, #16]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 fd9b 	bl	800b56c <USBD_CtlPrepareRx>
      break;
 8009a36:	e076      	b.n	8009b26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	33b0      	adds	r3, #176	; 0xb0
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	7850      	ldrb	r0, [r2, #1]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	4798      	blx	r3
      break;
 8009a54:	e067      	b.n	8009b26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	2b0b      	cmp	r3, #11
 8009a5c:	d851      	bhi.n	8009b02 <USBD_CDC_Setup+0x18a>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <USBD_CDC_Setup+0xec>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a95 	.word	0x08009a95
 8009a68:	08009b11 	.word	0x08009b11
 8009a6c:	08009b03 	.word	0x08009b03
 8009a70:	08009b03 	.word	0x08009b03
 8009a74:	08009b03 	.word	0x08009b03
 8009a78:	08009b03 	.word	0x08009b03
 8009a7c:	08009b03 	.word	0x08009b03
 8009a80:	08009b03 	.word	0x08009b03
 8009a84:	08009b03 	.word	0x08009b03
 8009a88:	08009b03 	.word	0x08009b03
 8009a8c:	08009abf 	.word	0x08009abf
 8009a90:	08009ae9 	.word	0x08009ae9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	d107      	bne.n	8009ab0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009aa0:	f107 030a 	add.w	r3, r7, #10
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 fd33 	bl	800b514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009aae:	e032      	b.n	8009b16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fcbd 	bl	800b432 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	75fb      	strb	r3, [r7, #23]
          break;
 8009abc:	e02b      	b.n	8009b16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d107      	bne.n	8009ada <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009aca:	f107 030d 	add.w	r3, r7, #13
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f001 fd1e 	bl	800b514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ad8:	e01d      	b.n	8009b16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 fca8 	bl	800b432 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae6:	e016      	b.n	8009b16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d00f      	beq.n	8009b14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fc9b 	bl	800b432 <USBD_CtlError>
            ret = USBD_FAIL;
 8009afc:	2303      	movs	r3, #3
 8009afe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b00:	e008      	b.n	8009b14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 fc94 	bl	800b432 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b0e:	e002      	b.n	8009b16 <USBD_CDC_Setup+0x19e>
          break;
 8009b10:	bf00      	nop
 8009b12:	e008      	b.n	8009b26 <USBD_CDC_Setup+0x1ae>
          break;
 8009b14:	bf00      	nop
      }
      break;
 8009b16:	e006      	b.n	8009b26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 fc89 	bl	800b432 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b20:	2303      	movs	r3, #3
 8009b22:	75fb      	strb	r3, [r7, #23]
      break;
 8009b24:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32b0      	adds	r2, #176	; 0xb0
 8009b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e065      	b.n	8009c26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	32b0      	adds	r2, #176	; 0xb0
 8009b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	f003 020f 	and.w	r2, r3, #15
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	440b      	add	r3, r1
 8009b7c:	3318      	adds	r3, #24
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d02f      	beq.n	8009be4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	f003 020f 	and.w	r2, r3, #15
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	440b      	add	r3, r1
 8009b96:	3318      	adds	r3, #24
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	f003 010f 	and.w	r1, r3, #15
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	440b      	add	r3, r1
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4403      	add	r3, r0
 8009bac:	3348      	adds	r3, #72	; 0x48
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d112      	bne.n	8009be4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009bbe:	78fb      	ldrb	r3, [r7, #3]
 8009bc0:	f003 020f 	and.w	r2, r3, #15
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	440b      	add	r3, r1
 8009bd0:	3318      	adds	r3, #24
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bd6:	78f9      	ldrb	r1, [r7, #3]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2200      	movs	r2, #0
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f004 ff62 	bl	800eaa6 <USBD_LL_Transmit>
 8009be2:	e01f      	b.n	8009c24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	33b0      	adds	r3, #176	; 0xb0
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d010      	beq.n	8009c24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	33b0      	adds	r3, #176	; 0xb0
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	32b0      	adds	r2, #176	; 0xb0
 8009c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	32b0      	adds	r2, #176	; 0xb0
 8009c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e01a      	b.n	8009c96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f004 ff60 	bl	800eb2a <USBD_LL_GetRxDataSize>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	33b0      	adds	r3, #176	; 0xb0
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c90:	4611      	mov	r1, r2
 8009c92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	32b0      	adds	r2, #176	; 0xb0
 8009cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e025      	b.n	8009d0c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	33b0      	adds	r3, #176	; 0xb0
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01a      	beq.n	8009d0a <USBD_CDC_EP0_RxReady+0x6c>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009cda:	2bff      	cmp	r3, #255	; 0xff
 8009cdc:	d015      	beq.n	8009d0a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	33b0      	adds	r3, #176	; 0xb0
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009cf6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cfe:	b292      	uxth	r2, r2
 8009d00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	22ff      	movs	r2, #255	; 0xff
 8009d06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d1c:	2182      	movs	r1, #130	; 0x82
 8009d1e:	4818      	ldr	r0, [pc, #96]	; (8009d80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d20:	f000 fd4f 	bl	800a7c2 <USBD_GetEpDesc>
 8009d24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d26:	2101      	movs	r1, #1
 8009d28:	4815      	ldr	r0, [pc, #84]	; (8009d80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d2a:	f000 fd4a 	bl	800a7c2 <USBD_GetEpDesc>
 8009d2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d30:	2181      	movs	r1, #129	; 0x81
 8009d32:	4813      	ldr	r0, [pc, #76]	; (8009d80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d34:	f000 fd45 	bl	800a7c2 <USBD_GetEpDesc>
 8009d38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2210      	movs	r2, #16
 8009d44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d54:	711a      	strb	r2, [r3, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d006      	beq.n	8009d6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d68:	711a      	strb	r2, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2243      	movs	r2, #67	; 0x43
 8009d72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d74:	4b02      	ldr	r3, [pc, #8]	; (8009d80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000060 	.word	0x20000060

08009d84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d8c:	2182      	movs	r1, #130	; 0x82
 8009d8e:	4818      	ldr	r0, [pc, #96]	; (8009df0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d90:	f000 fd17 	bl	800a7c2 <USBD_GetEpDesc>
 8009d94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d96:	2101      	movs	r1, #1
 8009d98:	4815      	ldr	r0, [pc, #84]	; (8009df0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d9a:	f000 fd12 	bl	800a7c2 <USBD_GetEpDesc>
 8009d9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009da0:	2181      	movs	r1, #129	; 0x81
 8009da2:	4813      	ldr	r0, [pc, #76]	; (8009df0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009da4:	f000 fd0d 	bl	800a7c2 <USBD_GetEpDesc>
 8009da8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2210      	movs	r2, #16
 8009db4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d006      	beq.n	8009dca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	711a      	strb	r2, [r3, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f042 0202 	orr.w	r2, r2, #2
 8009dc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d006      	beq.n	8009dde <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	711a      	strb	r2, [r3, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f042 0202 	orr.w	r2, r2, #2
 8009ddc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2243      	movs	r2, #67	; 0x43
 8009de2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009de4:	4b02      	ldr	r3, [pc, #8]	; (8009df0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20000060 	.word	0x20000060

08009df4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009dfc:	2182      	movs	r1, #130	; 0x82
 8009dfe:	4818      	ldr	r0, [pc, #96]	; (8009e60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e00:	f000 fcdf 	bl	800a7c2 <USBD_GetEpDesc>
 8009e04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e06:	2101      	movs	r1, #1
 8009e08:	4815      	ldr	r0, [pc, #84]	; (8009e60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e0a:	f000 fcda 	bl	800a7c2 <USBD_GetEpDesc>
 8009e0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e10:	2181      	movs	r1, #129	; 0x81
 8009e12:	4813      	ldr	r0, [pc, #76]	; (8009e60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e14:	f000 fcd5 	bl	800a7c2 <USBD_GetEpDesc>
 8009e18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2210      	movs	r2, #16
 8009e24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d006      	beq.n	8009e3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e34:	711a      	strb	r2, [r3, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d006      	beq.n	8009e4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e48:	711a      	strb	r2, [r3, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2243      	movs	r2, #67	; 0x43
 8009e52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e54:	4b02      	ldr	r3, [pc, #8]	; (8009e60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000060 	.word	0x20000060

08009e64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	220a      	movs	r2, #10
 8009e70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e72:	4b03      	ldr	r3, [pc, #12]	; (8009e80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	2000001c 	.word	0x2000001c

08009e84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e009      	b.n	8009eac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	33b0      	adds	r3, #176	; 0xb0
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	32b0      	adds	r2, #176	; 0xb0
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e008      	b.n	8009ef0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	32b0      	adds	r2, #176	; 0xb0
 8009f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e004      	b.n	8009f2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
	...

08009f38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	32b0      	adds	r2, #176	; 0xb0
 8009f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f50:	2301      	movs	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32b0      	adds	r2, #176	; 0xb0
 8009f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e025      	b.n	8009fb6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d11f      	bne.n	8009fb4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009f7c:	4b10      	ldr	r3, [pc, #64]	; (8009fc0 <USBD_CDC_TransmitPacket+0x88>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 020f 	and.w	r2, r3, #15
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4403      	add	r3, r0
 8009f96:	3318      	adds	r3, #24
 8009f98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <USBD_CDC_TransmitPacket+0x88>)
 8009f9c:	7819      	ldrb	r1, [r3, #0]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f004 fd7b 	bl	800eaa6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	200000a3 	.word	0x200000a3

08009fc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32b0      	adds	r2, #176	; 0xb0
 8009fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	32b0      	adds	r2, #176	; 0xb0
 8009fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e018      	b.n	800a024 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	7c1b      	ldrb	r3, [r3, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ffa:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <USBD_CDC_ReceivePacket+0x68>)
 8009ffc:	7819      	ldrb	r1, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a004:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f004 fd6d 	bl	800eae8 <USBD_LL_PrepareReceive>
 800a00e:	e008      	b.n	800a022 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <USBD_CDC_ReceivePacket+0x68>)
 800a012:	7819      	ldrb	r1, [r3, #0]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a01a:	2340      	movs	r3, #64	; 0x40
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f004 fd63 	bl	800eae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	200000a4 	.word	0x200000a4

0800a030 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a044:	2303      	movs	r3, #3
 800a046:	e01f      	b.n	800a088 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	79fa      	ldrb	r2, [r7, #7]
 800a07a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f004 fbdd 	bl	800e83c <USBD_LL_Init>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e025      	b.n	800a0f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	32ae      	adds	r2, #174	; 0xae
 800a0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00f      	beq.n	800a0e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	32ae      	adds	r2, #174	; 0xae
 800a0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	f107 020e 	add.w	r2, r7, #14
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4798      	blx	r3
 800a0dc:	4602      	mov	r2, r0
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f004 fbe5 	bl	800e8d4 <USBD_LL_Start>
 800a10a:	4603      	mov	r3, r0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a11c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a11e:	4618      	mov	r0, r3
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a140:	2b00      	cmp	r3, #0
 800a142:	d009      	beq.n	800a158 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	78fa      	ldrb	r2, [r7, #3]
 800a14e:	4611      	mov	r1, r2
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	4798      	blx	r3
 800a154:	4603      	mov	r3, r0
 800a156:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	4611      	mov	r1, r2
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a188:	2303      	movs	r3, #3
 800a18a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 f908 	bl	800b3be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a1bc:	461a      	mov	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1ca:	f003 031f 	and.w	r3, r3, #31
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d01a      	beq.n	800a208 <USBD_LL_SetupStage+0x72>
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d822      	bhi.n	800a21c <USBD_LL_SetupStage+0x86>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <USBD_LL_SetupStage+0x4a>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d00a      	beq.n	800a1f4 <USBD_LL_SetupStage+0x5e>
 800a1de:	e01d      	b.n	800a21c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fb5f 	bl	800a8ac <USBD_StdDevReq>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f2:	e020      	b.n	800a236 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fbc7 	bl	800a990 <USBD_StdItfReq>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]
      break;
 800a206:	e016      	b.n	800a236 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fc29 	bl	800aa68 <USBD_StdEPReq>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]
      break;
 800a21a:	e00c      	b.n	800a236 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a222:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a226:	b2db      	uxtb	r3, r3
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f004 fbb2 	bl	800e994 <USBD_LL_StallEP>
 800a230:	4603      	mov	r3, r0
 800a232:	73fb      	strb	r3, [r7, #15]
      break;
 800a234:	bf00      	nop
  }

  return ret;
 800a236:	7bfb      	ldrb	r3, [r7, #15]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	460b      	mov	r3, r1
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a252:	7afb      	ldrb	r3, [r7, #11]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d16e      	bne.n	800a336 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a25e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a266:	2b03      	cmp	r3, #3
 800a268:	f040 8098 	bne.w	800a39c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	429a      	cmp	r2, r3
 800a276:	d913      	bls.n	800a2a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	1ad2      	subs	r2, r2, r3
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	4293      	cmp	r3, r2
 800a290:	bf28      	it	cs
 800a292:	4613      	movcs	r3, r2
 800a294:	461a      	mov	r2, r3
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f001 f984 	bl	800b5a6 <USBD_CtlContinueRx>
 800a29e:	e07d      	b.n	800a39c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2a6:	f003 031f 	and.w	r3, r3, #31
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d014      	beq.n	800a2d8 <USBD_LL_DataOutStage+0x98>
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d81d      	bhi.n	800a2ee <USBD_LL_DataOutStage+0xae>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <USBD_LL_DataOutStage+0x7c>
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d003      	beq.n	800a2c2 <USBD_LL_DataOutStage+0x82>
 800a2ba:	e018      	b.n	800a2ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75bb      	strb	r3, [r7, #22]
            break;
 800a2c0:	e018      	b.n	800a2f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 fa5e 	bl	800a78e <USBD_CoreFindIF>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75bb      	strb	r3, [r7, #22]
            break;
 800a2d6:	e00d      	b.n	800a2f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fa60 	bl	800a7a8 <USBD_CoreFindEP>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	75bb      	strb	r3, [r7, #22]
            break;
 800a2ec:	e002      	b.n	800a2f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	75bb      	strb	r3, [r7, #22]
            break;
 800a2f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2f4:	7dbb      	ldrb	r3, [r7, #22]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d119      	bne.n	800a32e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b03      	cmp	r3, #3
 800a304:	d113      	bne.n	800a32e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a306:	7dba      	ldrb	r2, [r7, #22]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	32ae      	adds	r2, #174	; 0xae
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00b      	beq.n	800a32e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a316:	7dba      	ldrb	r2, [r7, #22]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a31e:	7dba      	ldrb	r2, [r7, #22]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	32ae      	adds	r2, #174	; 0xae
 800a324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f001 f94a 	bl	800b5c8 <USBD_CtlSendStatus>
 800a334:	e032      	b.n	800a39c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 fa31 	bl	800a7a8 <USBD_CoreFindEP>
 800a346:	4603      	mov	r3, r0
 800a348:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a34a:	7dbb      	ldrb	r3, [r7, #22]
 800a34c:	2bff      	cmp	r3, #255	; 0xff
 800a34e:	d025      	beq.n	800a39c <USBD_LL_DataOutStage+0x15c>
 800a350:	7dbb      	ldrb	r3, [r7, #22]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d122      	bne.n	800a39c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d117      	bne.n	800a392 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a362:	7dba      	ldrb	r2, [r7, #22]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	32ae      	adds	r2, #174	; 0xae
 800a368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00f      	beq.n	800a392 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a372:	7dba      	ldrb	r2, [r7, #22]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a37a:	7dba      	ldrb	r2, [r7, #22]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	32ae      	adds	r2, #174	; 0xae
 800a380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	7afa      	ldrb	r2, [r7, #11]
 800a388:	4611      	mov	r1, r2
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	4798      	blx	r3
 800a38e:	4603      	mov	r3, r0
 800a390:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a392:	7dfb      	ldrb	r3, [r7, #23]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	e000      	b.n	800a39e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d16f      	bne.n	800a49a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3314      	adds	r3, #20
 800a3be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d15a      	bne.n	800a480 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d914      	bls.n	800a400 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f001 f8ac 	bl	800b54a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f004 fb75 	bl	800eae8 <USBD_LL_PrepareReceive>
 800a3fe:	e03f      	b.n	800a480 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d11c      	bne.n	800a446 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a414:	429a      	cmp	r2, r3
 800a416:	d316      	bcc.n	800a446 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a422:	429a      	cmp	r2, r3
 800a424:	d20f      	bcs.n	800a446 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a426:	2200      	movs	r2, #0
 800a428:	2100      	movs	r1, #0
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f001 f88d 	bl	800b54a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a438:	2300      	movs	r3, #0
 800a43a:	2200      	movs	r2, #0
 800a43c:	2100      	movs	r1, #0
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f004 fb52 	bl	800eae8 <USBD_LL_PrepareReceive>
 800a444:	e01c      	b.n	800a480 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d10f      	bne.n	800a472 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d009      	beq.n	800a472 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a472:	2180      	movs	r1, #128	; 0x80
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f004 fa8d 	bl	800e994 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f001 f8b7 	bl	800b5ee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d03a      	beq.n	800a500 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fe42 	bl	800a114 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a498:	e032      	b.n	800a500 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a49a:	7afb      	ldrb	r3, [r7, #11]
 800a49c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f97f 	bl	800a7a8 <USBD_CoreFindEP>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	2bff      	cmp	r3, #255	; 0xff
 800a4b2:	d025      	beq.n	800a500 <USBD_LL_DataInStage+0x15a>
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d122      	bne.n	800a500 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d11c      	bne.n	800a500 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a4c6:	7dfa      	ldrb	r2, [r7, #23]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	32ae      	adds	r2, #174	; 0xae
 800a4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d014      	beq.n	800a500 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4d6:	7dfa      	ldrb	r2, [r7, #23]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4de:	7dfa      	ldrb	r2, [r7, #23]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	32ae      	adds	r2, #174	; 0xae
 800a4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	7afa      	ldrb	r2, [r7, #11]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	4798      	blx	r3
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4f6:	7dbb      	ldrb	r3, [r7, #22]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a4fc:	7dbb      	ldrb	r3, [r7, #22]
 800a4fe:	e000      	b.n	800a502 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a542:	2b00      	cmp	r3, #0
 800a544:	d014      	beq.n	800a570 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00e      	beq.n	800a570 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6852      	ldr	r2, [r2, #4]
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	4611      	mov	r1, r2
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a56c:	2303      	movs	r3, #3
 800a56e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a570:	2340      	movs	r3, #64	; 0x40
 800a572:	2200      	movs	r2, #0
 800a574:	2100      	movs	r1, #0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f004 f9c7 	bl	800e90a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2240      	movs	r2, #64	; 0x40
 800a588:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a58c:	2340      	movs	r3, #64	; 0x40
 800a58e:	2200      	movs	r2, #0
 800a590:	2180      	movs	r1, #128	; 0x80
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f004 f9b9 	bl	800e90a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2240      	movs	r2, #64	; 0x40
 800a5a2:	621a      	str	r2, [r3, #32]

  return ret;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	78fa      	ldrb	r2, [r7, #3]
 800a5be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2204      	movs	r2, #4
 800a5e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d106      	bne.n	800a61c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a614:	b2da      	uxtb	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d110      	bne.n	800a660 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	460b      	mov	r3, r1
 800a674:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	32ae      	adds	r2, #174	; 0xae
 800a680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d101      	bne.n	800a68c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a688:	2303      	movs	r3, #3
 800a68a:	e01c      	b.n	800a6c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b03      	cmp	r3, #3
 800a696:	d115      	bne.n	800a6c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	32ae      	adds	r2, #174	; 0xae
 800a6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00b      	beq.n	800a6c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	32ae      	adds	r2, #174	; 0xae
 800a6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	78fa      	ldrb	r2, [r7, #3]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	32ae      	adds	r2, #174	; 0xae
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e01c      	b.n	800a72a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d115      	bne.n	800a728 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	32ae      	adds	r2, #174	; 0xae
 800a706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	32ae      	adds	r2, #174	; 0xae
 800a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	78fa      	ldrb	r2, [r7, #3]
 800a722:	4611      	mov	r1, r2
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00e      	beq.n	800a784 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6852      	ldr	r2, [r2, #4]
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	4611      	mov	r1, r2
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	4798      	blx	r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a780:	2303      	movs	r3, #3
 800a782:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a784:	7bfb      	ldrb	r3, [r7, #15]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a79a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a7b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b086      	sub	sp, #24
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	885b      	ldrh	r3, [r3, #2]
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d920      	bls.n	800a82c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a7f2:	e013      	b.n	800a81c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a7f4:	f107 030a 	add.w	r3, r7, #10
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6978      	ldr	r0, [r7, #20]
 800a7fc:	f000 f81b 	bl	800a836 <USBD_GetNextDesc>
 800a800:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b05      	cmp	r3, #5
 800a808:	d108      	bne.n	800a81c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	789b      	ldrb	r3, [r3, #2]
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	429a      	cmp	r2, r3
 800a816:	d008      	beq.n	800a82a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a818:	2300      	movs	r3, #0
 800a81a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	885b      	ldrh	r3, [r3, #2]
 800a820:	b29a      	uxth	r2, r3
 800a822:	897b      	ldrh	r3, [r7, #10]
 800a824:	429a      	cmp	r2, r3
 800a826:	d8e5      	bhi.n	800a7f4 <USBD_GetEpDesc+0x32>
 800a828:	e000      	b.n	800a82c <USBD_GetEpDesc+0x6a>
          break;
 800a82a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a82c:	693b      	ldr	r3, [r7, #16]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	881a      	ldrh	r2, [r3, #0]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	4413      	add	r3, r2
 800a850:	b29a      	uxth	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4413      	add	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a862:	68fb      	ldr	r3, [r7, #12]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	3301      	adds	r3, #1
 800a886:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a88e:	8a3b      	ldrh	r3, [r7, #16]
 800a890:	021b      	lsls	r3, r3, #8
 800a892:	b21a      	sxth	r2, r3
 800a894:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a898:	4313      	orrs	r3, r2
 800a89a:	b21b      	sxth	r3, r3
 800a89c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a89e:	89fb      	ldrh	r3, [r7, #14]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	371c      	adds	r7, #28
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8c2:	2b40      	cmp	r3, #64	; 0x40
 800a8c4:	d005      	beq.n	800a8d2 <USBD_StdDevReq+0x26>
 800a8c6:	2b40      	cmp	r3, #64	; 0x40
 800a8c8:	d857      	bhi.n	800a97a <USBD_StdDevReq+0xce>
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00f      	beq.n	800a8ee <USBD_StdDevReq+0x42>
 800a8ce:	2b20      	cmp	r3, #32
 800a8d0:	d153      	bne.n	800a97a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	32ae      	adds	r2, #174	; 0xae
 800a8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	4798      	blx	r3
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ec:	e04a      	b.n	800a984 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	2b09      	cmp	r3, #9
 800a8f4:	d83b      	bhi.n	800a96e <USBD_StdDevReq+0xc2>
 800a8f6:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <USBD_StdDevReq+0x50>)
 800a8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fc:	0800a951 	.word	0x0800a951
 800a900:	0800a965 	.word	0x0800a965
 800a904:	0800a96f 	.word	0x0800a96f
 800a908:	0800a95b 	.word	0x0800a95b
 800a90c:	0800a96f 	.word	0x0800a96f
 800a910:	0800a92f 	.word	0x0800a92f
 800a914:	0800a925 	.word	0x0800a925
 800a918:	0800a96f 	.word	0x0800a96f
 800a91c:	0800a947 	.word	0x0800a947
 800a920:	0800a939 	.word	0x0800a939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fa3c 	bl	800ada4 <USBD_GetDescriptor>
          break;
 800a92c:	e024      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fba1 	bl	800b078 <USBD_SetAddress>
          break;
 800a936:	e01f      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fbe0 	bl	800b100 <USBD_SetConfig>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]
          break;
 800a944:	e018      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fc83 	bl	800b254 <USBD_GetConfig>
          break;
 800a94e:	e013      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fcb4 	bl	800b2c0 <USBD_GetStatus>
          break;
 800a958:	e00e      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fce3 	bl	800b328 <USBD_SetFeature>
          break;
 800a962:	e009      	b.n	800a978 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fd07 	bl	800b37a <USBD_ClrFeature>
          break;
 800a96c:	e004      	b.n	800a978 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fd5e 	bl	800b432 <USBD_CtlError>
          break;
 800a976:	bf00      	nop
      }
      break;
 800a978:	e004      	b.n	800a984 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fd58 	bl	800b432 <USBD_CtlError>
      break;
 800a982:	bf00      	nop
  }

  return ret;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop

0800a990 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9a6:	2b40      	cmp	r3, #64	; 0x40
 800a9a8:	d005      	beq.n	800a9b6 <USBD_StdItfReq+0x26>
 800a9aa:	2b40      	cmp	r3, #64	; 0x40
 800a9ac:	d852      	bhi.n	800aa54 <USBD_StdItfReq+0xc4>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <USBD_StdItfReq+0x26>
 800a9b2:	2b20      	cmp	r3, #32
 800a9b4:	d14e      	bne.n	800aa54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d840      	bhi.n	800aa46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	889b      	ldrh	r3, [r3, #4]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d836      	bhi.n	800aa3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	889b      	ldrh	r3, [r3, #4]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff fed9 	bl	800a78e <USBD_CoreFindIF>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2bff      	cmp	r3, #255	; 0xff
 800a9e4:	d01d      	beq.n	800aa22 <USBD_StdItfReq+0x92>
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d11a      	bne.n	800aa22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a9ec:	7bba      	ldrb	r2, [r7, #14]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	32ae      	adds	r2, #174	; 0xae
 800a9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00f      	beq.n	800aa1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a9fc:	7bba      	ldrb	r2, [r7, #14]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa04:	7bba      	ldrb	r2, [r7, #14]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	32ae      	adds	r2, #174	; 0xae
 800aa0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa1a:	e004      	b.n	800aa26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa20:	e001      	b.n	800aa26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa22:	2303      	movs	r3, #3
 800aa24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	88db      	ldrh	r3, [r3, #6]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d110      	bne.n	800aa50 <USBD_StdItfReq+0xc0>
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10d      	bne.n	800aa50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fdc7 	bl	800b5c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa3a:	e009      	b.n	800aa50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fcf7 	bl	800b432 <USBD_CtlError>
          break;
 800aa44:	e004      	b.n	800aa50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fcf2 	bl	800b432 <USBD_CtlError>
          break;
 800aa4e:	e000      	b.n	800aa52 <USBD_StdItfReq+0xc2>
          break;
 800aa50:	bf00      	nop
      }
      break;
 800aa52:	e004      	b.n	800aa5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fceb 	bl	800b432 <USBD_CtlError>
      break;
 800aa5c:	bf00      	nop
  }

  return ret;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	889b      	ldrh	r3, [r3, #4]
 800aa7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa84:	2b40      	cmp	r3, #64	; 0x40
 800aa86:	d007      	beq.n	800aa98 <USBD_StdEPReq+0x30>
 800aa88:	2b40      	cmp	r3, #64	; 0x40
 800aa8a:	f200 817f 	bhi.w	800ad8c <USBD_StdEPReq+0x324>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d02a      	beq.n	800aae8 <USBD_StdEPReq+0x80>
 800aa92:	2b20      	cmp	r3, #32
 800aa94:	f040 817a 	bne.w	800ad8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fe83 	bl	800a7a8 <USBD_CoreFindEP>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaa6:	7b7b      	ldrb	r3, [r7, #13]
 800aaa8:	2bff      	cmp	r3, #255	; 0xff
 800aaaa:	f000 8174 	beq.w	800ad96 <USBD_StdEPReq+0x32e>
 800aaae:	7b7b      	ldrb	r3, [r7, #13]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f040 8170 	bne.w	800ad96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aab6:	7b7a      	ldrb	r2, [r7, #13]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aabe:	7b7a      	ldrb	r2, [r7, #13]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	32ae      	adds	r2, #174	; 0xae
 800aac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8163 	beq.w	800ad96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aad0:	7b7a      	ldrb	r2, [r7, #13]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32ae      	adds	r2, #174	; 0xae
 800aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	4798      	blx	r3
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aae6:	e156      	b.n	800ad96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	785b      	ldrb	r3, [r3, #1]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d008      	beq.n	800ab02 <USBD_StdEPReq+0x9a>
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	f300 8145 	bgt.w	800ad80 <USBD_StdEPReq+0x318>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 809b 	beq.w	800ac32 <USBD_StdEPReq+0x1ca>
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d03c      	beq.n	800ab7a <USBD_StdEPReq+0x112>
 800ab00:	e13e      	b.n	800ad80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d002      	beq.n	800ab14 <USBD_StdEPReq+0xac>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d016      	beq.n	800ab40 <USBD_StdEPReq+0xd8>
 800ab12:	e02c      	b.n	800ab6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00d      	beq.n	800ab36 <USBD_StdEPReq+0xce>
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b80      	cmp	r3, #128	; 0x80
 800ab1e:	d00a      	beq.n	800ab36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f003 ff35 	bl	800e994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab2a:	2180      	movs	r1, #128	; 0x80
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f003 ff31 	bl	800e994 <USBD_LL_StallEP>
 800ab32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab34:	e020      	b.n	800ab78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fc7a 	bl	800b432 <USBD_CtlError>
              break;
 800ab3e:	e01b      	b.n	800ab78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	885b      	ldrh	r3, [r3, #2]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10e      	bne.n	800ab66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00b      	beq.n	800ab66 <USBD_StdEPReq+0xfe>
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b80      	cmp	r3, #128	; 0x80
 800ab52:	d008      	beq.n	800ab66 <USBD_StdEPReq+0xfe>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	88db      	ldrh	r3, [r3, #6]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f003 ff17 	bl	800e994 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fd2e 	bl	800b5c8 <USBD_CtlSendStatus>

              break;
 800ab6c:	e004      	b.n	800ab78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fc5e 	bl	800b432 <USBD_CtlError>
              break;
 800ab76:	bf00      	nop
          }
          break;
 800ab78:	e107      	b.n	800ad8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d002      	beq.n	800ab8c <USBD_StdEPReq+0x124>
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d016      	beq.n	800abb8 <USBD_StdEPReq+0x150>
 800ab8a:	e04b      	b.n	800ac24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <USBD_StdEPReq+0x146>
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b80      	cmp	r3, #128	; 0x80
 800ab96:	d00a      	beq.n	800abae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f003 fef9 	bl	800e994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aba2:	2180      	movs	r1, #128	; 0x80
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f003 fef5 	bl	800e994 <USBD_LL_StallEP>
 800abaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abac:	e040      	b.n	800ac30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fc3e 	bl	800b432 <USBD_CtlError>
              break;
 800abb6:	e03b      	b.n	800ac30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	885b      	ldrh	r3, [r3, #2]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d136      	bne.n	800ac2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f003 feff 	bl	800e9d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fcf7 	bl	800b5c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff fde2 	bl	800a7a8 <USBD_CoreFindEP>
 800abe4:	4603      	mov	r3, r0
 800abe6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abe8:	7b7b      	ldrb	r3, [r7, #13]
 800abea:	2bff      	cmp	r3, #255	; 0xff
 800abec:	d01f      	beq.n	800ac2e <USBD_StdEPReq+0x1c6>
 800abee:	7b7b      	ldrb	r3, [r7, #13]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11c      	bne.n	800ac2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800abf4:	7b7a      	ldrb	r2, [r7, #13]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800abfc:	7b7a      	ldrb	r2, [r7, #13]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	32ae      	adds	r2, #174	; 0xae
 800ac02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d010      	beq.n	800ac2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac0c:	7b7a      	ldrb	r2, [r7, #13]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	32ae      	adds	r2, #174	; 0xae
 800ac12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac22:	e004      	b.n	800ac2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc03 	bl	800b432 <USBD_CtlError>
              break;
 800ac2c:	e000      	b.n	800ac30 <USBD_StdEPReq+0x1c8>
              break;
 800ac2e:	bf00      	nop
          }
          break;
 800ac30:	e0ab      	b.n	800ad8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d002      	beq.n	800ac44 <USBD_StdEPReq+0x1dc>
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d032      	beq.n	800aca8 <USBD_StdEPReq+0x240>
 800ac42:	e097      	b.n	800ad74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <USBD_StdEPReq+0x1f2>
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b80      	cmp	r3, #128	; 0x80
 800ac4e:	d004      	beq.n	800ac5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fbed 	bl	800b432 <USBD_CtlError>
                break;
 800ac58:	e091      	b.n	800ad7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	da0b      	bge.n	800ac7a <USBD_StdEPReq+0x212>
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	3310      	adds	r3, #16
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	4413      	add	r3, r2
 800ac76:	3304      	adds	r3, #4
 800ac78:	e00b      	b.n	800ac92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac7a:	7bbb      	ldrb	r3, [r7, #14]
 800ac7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4413      	add	r3, r2
 800ac90:	3304      	adds	r3, #4
 800ac92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fc37 	bl	800b514 <USBD_CtlSendData>
              break;
 800aca6:	e06a      	b.n	800ad7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da11      	bge.n	800acd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	f003 020f 	and.w	r2, r3, #15
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	3324      	adds	r3, #36	; 0x24
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d117      	bne.n	800acfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fbb0 	bl	800b432 <USBD_CtlError>
                  break;
 800acd2:	e054      	b.n	800ad7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	f003 020f 	and.w	r2, r3, #15
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fb9d 	bl	800b432 <USBD_CtlError>
                  break;
 800acf8:	e041      	b.n	800ad7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	da0b      	bge.n	800ad1a <USBD_StdEPReq+0x2b2>
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	3310      	adds	r3, #16
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	4413      	add	r3, r2
 800ad16:	3304      	adds	r3, #4
 800ad18:	e00b      	b.n	800ad32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	3304      	adds	r3, #4
 800ad32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <USBD_StdEPReq+0x2d8>
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	2b80      	cmp	r3, #128	; 0x80
 800ad3e:	d103      	bne.n	800ad48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	e00e      	b.n	800ad66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f003 fe5f 	bl	800ea10 <USBD_LL_IsStallEP>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	e002      	b.n	800ad66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fbd1 	bl	800b514 <USBD_CtlSendData>
              break;
 800ad72:	e004      	b.n	800ad7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fb5b 	bl	800b432 <USBD_CtlError>
              break;
 800ad7c:	bf00      	nop
          }
          break;
 800ad7e:	e004      	b.n	800ad8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fb55 	bl	800b432 <USBD_CtlError>
          break;
 800ad88:	bf00      	nop
      }
      break;
 800ad8a:	e005      	b.n	800ad98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fb4f 	bl	800b432 <USBD_CtlError>
      break;
 800ad94:	e000      	b.n	800ad98 <USBD_StdEPReq+0x330>
      break;
 800ad96:	bf00      	nop
  }

  return ret;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
	...

0800ada4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adae:	2300      	movs	r3, #0
 800adb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	885b      	ldrh	r3, [r3, #2]
 800adbe:	0a1b      	lsrs	r3, r3, #8
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	3b01      	subs	r3, #1
 800adc4:	2b06      	cmp	r3, #6
 800adc6:	f200 8128 	bhi.w	800b01a <USBD_GetDescriptor+0x276>
 800adca:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <USBD_GetDescriptor+0x2c>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800aded 	.word	0x0800aded
 800add4:	0800ae05 	.word	0x0800ae05
 800add8:	0800ae45 	.word	0x0800ae45
 800addc:	0800b01b 	.word	0x0800b01b
 800ade0:	0800b01b 	.word	0x0800b01b
 800ade4:	0800afbb 	.word	0x0800afbb
 800ade8:	0800afe7 	.word	0x0800afe7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7c12      	ldrb	r2, [r2, #16]
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3
 800ae00:	60f8      	str	r0, [r7, #12]
      break;
 800ae02:	e112      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	7c1b      	ldrb	r3, [r3, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10d      	bne.n	800ae28 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae14:	f107 0208 	add.w	r2, r7, #8
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4798      	blx	r3
 800ae1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3301      	adds	r3, #1
 800ae22:	2202      	movs	r2, #2
 800ae24:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae26:	e100      	b.n	800b02a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	f107 0208 	add.w	r2, r7, #8
 800ae34:	4610      	mov	r0, r2
 800ae36:	4798      	blx	r3
 800ae38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	2202      	movs	r2, #2
 800ae40:	701a      	strb	r2, [r3, #0]
      break;
 800ae42:	e0f2      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	885b      	ldrh	r3, [r3, #2]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b05      	cmp	r3, #5
 800ae4c:	f200 80ac 	bhi.w	800afa8 <USBD_GetDescriptor+0x204>
 800ae50:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <USBD_GetDescriptor+0xb4>)
 800ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae56:	bf00      	nop
 800ae58:	0800ae71 	.word	0x0800ae71
 800ae5c:	0800aea5 	.word	0x0800aea5
 800ae60:	0800aed9 	.word	0x0800aed9
 800ae64:	0800af0d 	.word	0x0800af0d
 800ae68:	0800af41 	.word	0x0800af41
 800ae6c:	0800af75 	.word	0x0800af75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	7c12      	ldrb	r2, [r2, #16]
 800ae88:	f107 0108 	add.w	r1, r7, #8
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4798      	blx	r3
 800ae90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae92:	e091      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 facb 	bl	800b432 <USBD_CtlError>
            err++;
 800ae9c:	7afb      	ldrb	r3, [r7, #11]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	72fb      	strb	r3, [r7, #11]
          break;
 800aea2:	e089      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	7c12      	ldrb	r2, [r2, #16]
 800aebc:	f107 0108 	add.w	r1, r7, #8
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
 800aec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aec6:	e077      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fab1 	bl	800b432 <USBD_CtlError>
            err++;
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	3301      	adds	r3, #1
 800aed4:	72fb      	strb	r3, [r7, #11]
          break;
 800aed6:	e06f      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	7c12      	ldrb	r2, [r2, #16]
 800aef0:	f107 0108 	add.w	r1, r7, #8
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
 800aef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aefa:	e05d      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fa97 	bl	800b432 <USBD_CtlError>
            err++;
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	3301      	adds	r3, #1
 800af08:	72fb      	strb	r3, [r7, #11]
          break;
 800af0a:	e055      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00b      	beq.n	800af30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	7c12      	ldrb	r2, [r2, #16]
 800af24:	f107 0108 	add.w	r1, r7, #8
 800af28:	4610      	mov	r0, r2
 800af2a:	4798      	blx	r3
 800af2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af2e:	e043      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fa7d 	bl	800b432 <USBD_CtlError>
            err++;
 800af38:	7afb      	ldrb	r3, [r7, #11]
 800af3a:	3301      	adds	r3, #1
 800af3c:	72fb      	strb	r3, [r7, #11]
          break;
 800af3e:	e03b      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	7c12      	ldrb	r2, [r2, #16]
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af62:	e029      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fa63 	bl	800b432 <USBD_CtlError>
            err++;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	3301      	adds	r3, #1
 800af70:	72fb      	strb	r3, [r7, #11]
          break;
 800af72:	e021      	b.n	800afb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af96:	e00f      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa49 	bl	800b432 <USBD_CtlError>
            err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
          break;
 800afa6:	e007      	b.n	800afb8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fa41 	bl	800b432 <USBD_CtlError>
          err++;
 800afb0:	7afb      	ldrb	r3, [r7, #11]
 800afb2:	3301      	adds	r3, #1
 800afb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800afb6:	bf00      	nop
      }
      break;
 800afb8:	e037      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	7c1b      	ldrb	r3, [r3, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afca:	f107 0208 	add.w	r2, r7, #8
 800afce:	4610      	mov	r0, r2
 800afd0:	4798      	blx	r3
 800afd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afd4:	e029      	b.n	800b02a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fa2a 	bl	800b432 <USBD_CtlError>
        err++;
 800afde:	7afb      	ldrb	r3, [r7, #11]
 800afe0:	3301      	adds	r3, #1
 800afe2:	72fb      	strb	r3, [r7, #11]
      break;
 800afe4:	e021      	b.n	800b02a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7c1b      	ldrb	r3, [r3, #16]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10d      	bne.n	800b00a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff6:	f107 0208 	add.w	r2, r7, #8
 800affa:	4610      	mov	r0, r2
 800affc:	4798      	blx	r3
 800affe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3301      	adds	r3, #1
 800b004:	2207      	movs	r2, #7
 800b006:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b008:	e00f      	b.n	800b02a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fa10 	bl	800b432 <USBD_CtlError>
        err++;
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	3301      	adds	r3, #1
 800b016:	72fb      	strb	r3, [r7, #11]
      break;
 800b018:	e007      	b.n	800b02a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fa08 	bl	800b432 <USBD_CtlError>
      err++;
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	3301      	adds	r3, #1
 800b026:	72fb      	strb	r3, [r7, #11]
      break;
 800b028:	bf00      	nop
  }

  if (err != 0U)
 800b02a:	7afb      	ldrb	r3, [r7, #11]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d11e      	bne.n	800b06e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	88db      	ldrh	r3, [r3, #6]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d016      	beq.n	800b066 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b038:	893b      	ldrh	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00e      	beq.n	800b05c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	88da      	ldrh	r2, [r3, #6]
 800b042:	893b      	ldrh	r3, [r7, #8]
 800b044:	4293      	cmp	r3, r2
 800b046:	bf28      	it	cs
 800b048:	4613      	movcs	r3, r2
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b04e:	893b      	ldrh	r3, [r7, #8]
 800b050:	461a      	mov	r2, r3
 800b052:	68f9      	ldr	r1, [r7, #12]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fa5d 	bl	800b514 <USBD_CtlSendData>
 800b05a:	e009      	b.n	800b070 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f9e7 	bl	800b432 <USBD_CtlError>
 800b064:	e004      	b.n	800b070 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 faae 	bl	800b5c8 <USBD_CtlSendStatus>
 800b06c:	e000      	b.n	800b070 <USBD_GetDescriptor+0x2cc>
    return;
 800b06e:	bf00      	nop
  }
}
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop

0800b078 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	889b      	ldrh	r3, [r3, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d131      	bne.n	800b0ee <USBD_SetAddress+0x76>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	88db      	ldrh	r3, [r3, #6]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d12d      	bne.n	800b0ee <USBD_SetAddress+0x76>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	885b      	ldrh	r3, [r3, #2]
 800b096:	2b7f      	cmp	r3, #127	; 0x7f
 800b098:	d829      	bhi.n	800b0ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	885b      	ldrh	r3, [r3, #2]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d104      	bne.n	800b0bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f9bc 	bl	800b432 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	e01d      	b.n	800b0f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	7bfa      	ldrb	r2, [r7, #15]
 800b0c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f003 fccd 	bl	800ea68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fa7a 	bl	800b5c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d004      	beq.n	800b0e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2202      	movs	r2, #2
 800b0de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e2:	e009      	b.n	800b0f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ec:	e004      	b.n	800b0f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f99e 	bl	800b432 <USBD_CtlError>
  }
}
 800b0f6:	bf00      	nop
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	b2da      	uxtb	r2, r3
 800b114:	4b4e      	ldr	r3, [pc, #312]	; (800b250 <USBD_SetConfig+0x150>)
 800b116:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b118:	4b4d      	ldr	r3, [pc, #308]	; (800b250 <USBD_SetConfig+0x150>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d905      	bls.n	800b12c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f985 	bl	800b432 <USBD_CtlError>
    return USBD_FAIL;
 800b128:	2303      	movs	r3, #3
 800b12a:	e08c      	b.n	800b246 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b02      	cmp	r3, #2
 800b136:	d002      	beq.n	800b13e <USBD_SetConfig+0x3e>
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d029      	beq.n	800b190 <USBD_SetConfig+0x90>
 800b13c:	e075      	b.n	800b22a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b13e:	4b44      	ldr	r3, [pc, #272]	; (800b250 <USBD_SetConfig+0x150>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d020      	beq.n	800b188 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b146:	4b42      	ldr	r3, [pc, #264]	; (800b250 <USBD_SetConfig+0x150>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b150:	4b3f      	ldr	r3, [pc, #252]	; (800b250 <USBD_SetConfig+0x150>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7fe ffe7 	bl	800a12a <USBD_SetClassConfig>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d008      	beq.n	800b178 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f962 	bl	800b432 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2202      	movs	r2, #2
 800b172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b176:	e065      	b.n	800b244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fa25 	bl	800b5c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2203      	movs	r2, #3
 800b182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b186:	e05d      	b.n	800b244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fa1d 	bl	800b5c8 <USBD_CtlSendStatus>
      break;
 800b18e:	e059      	b.n	800b244 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b190:	4b2f      	ldr	r3, [pc, #188]	; (800b250 <USBD_SetConfig+0x150>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d112      	bne.n	800b1be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2202      	movs	r2, #2
 800b19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b1a0:	4b2b      	ldr	r3, [pc, #172]	; (800b250 <USBD_SetConfig+0x150>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1aa:	4b29      	ldr	r3, [pc, #164]	; (800b250 <USBD_SetConfig+0x150>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7fe ffd6 	bl	800a162 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa06 	bl	800b5c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1bc:	e042      	b.n	800b244 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b1be:	4b24      	ldr	r3, [pc, #144]	; (800b250 <USBD_SetConfig+0x150>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d02a      	beq.n	800b222 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7fe ffc4 	bl	800a162 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1da:	4b1d      	ldr	r3, [pc, #116]	; (800b250 <USBD_SetConfig+0x150>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1e4:	4b1a      	ldr	r3, [pc, #104]	; (800b250 <USBD_SetConfig+0x150>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7fe ff9d 	bl	800a12a <USBD_SetClassConfig>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00f      	beq.n	800b21a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f918 	bl	800b432 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7fe ffa9 	bl	800a162 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b218:	e014      	b.n	800b244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f9d4 	bl	800b5c8 <USBD_CtlSendStatus>
      break;
 800b220:	e010      	b.n	800b244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f9d0 	bl	800b5c8 <USBD_CtlSendStatus>
      break;
 800b228:	e00c      	b.n	800b244 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f900 	bl	800b432 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b232:	4b07      	ldr	r3, [pc, #28]	; (800b250 <USBD_SetConfig+0x150>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7fe ff92 	bl	800a162 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b23e:	2303      	movs	r3, #3
 800b240:	73fb      	strb	r3, [r7, #15]
      break;
 800b242:	bf00      	nop
  }

  return ret;
 800b244:	7bfb      	ldrb	r3, [r7, #15]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20000654 	.word	0x20000654

0800b254 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	88db      	ldrh	r3, [r3, #6]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d004      	beq.n	800b270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f8e2 	bl	800b432 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b26e:	e023      	b.n	800b2b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b02      	cmp	r3, #2
 800b27a:	dc02      	bgt.n	800b282 <USBD_GetConfig+0x2e>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dc03      	bgt.n	800b288 <USBD_GetConfig+0x34>
 800b280:	e015      	b.n	800b2ae <USBD_GetConfig+0x5a>
 800b282:	2b03      	cmp	r3, #3
 800b284:	d00b      	beq.n	800b29e <USBD_GetConfig+0x4a>
 800b286:	e012      	b.n	800b2ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3308      	adds	r3, #8
 800b292:	2201      	movs	r2, #1
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f93c 	bl	800b514 <USBD_CtlSendData>
        break;
 800b29c:	e00c      	b.n	800b2b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f934 	bl	800b514 <USBD_CtlSendData>
        break;
 800b2ac:	e004      	b.n	800b2b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f8be 	bl	800b432 <USBD_CtlError>
        break;
 800b2b6:	bf00      	nop
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d81e      	bhi.n	800b316 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	88db      	ldrh	r3, [r3, #6]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d004      	beq.n	800b2ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f8a5 	bl	800b432 <USBD_CtlError>
        break;
 800b2e8:	e01a      	b.n	800b320 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f043 0202 	orr.w	r2, r3, #2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	330c      	adds	r3, #12
 800b30a:	2202      	movs	r2, #2
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f900 	bl	800b514 <USBD_CtlSendData>
      break;
 800b314:	e004      	b.n	800b320 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f88a 	bl	800b432 <USBD_CtlError>
      break;
 800b31e:	bf00      	nop
  }
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	885b      	ldrh	r3, [r3, #2]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d107      	bne.n	800b34a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f940 	bl	800b5c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b348:	e013      	b.n	800b372 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	885b      	ldrh	r3, [r3, #2]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d10b      	bne.n	800b36a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	889b      	ldrh	r3, [r3, #4]
 800b356:	0a1b      	lsrs	r3, r3, #8
 800b358:	b29b      	uxth	r3, r3
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f930 	bl	800b5c8 <USBD_CtlSendStatus>
}
 800b368:	e003      	b.n	800b372 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f860 	bl	800b432 <USBD_CtlError>
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	3b01      	subs	r3, #1
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d80b      	bhi.n	800b3aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	885b      	ldrh	r3, [r3, #2]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d10c      	bne.n	800b3b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f910 	bl	800b5c8 <USBD_CtlSendStatus>
      }
      break;
 800b3a8:	e004      	b.n	800b3b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f840 	bl	800b432 <USBD_CtlError>
      break;
 800b3b2:	e000      	b.n	800b3b6 <USBD_ClrFeature+0x3c>
      break;
 800b3b4:	bf00      	nop
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b084      	sub	sp, #16
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	781a      	ldrb	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	781a      	ldrb	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff fa41 	bl	800a870 <SWAPBYTE>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f7ff fa34 	bl	800a870 <SWAPBYTE>
 800b408:	4603      	mov	r3, r0
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3301      	adds	r3, #1
 800b414:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff fa27 	bl	800a870 <SWAPBYTE>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	80da      	strh	r2, [r3, #6]
}
 800b42a:	bf00      	nop
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b43c:	2180      	movs	r1, #128	; 0x80
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f003 faa8 	bl	800e994 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b444:	2100      	movs	r1, #0
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f003 faa4 	bl	800e994 <USBD_LL_StallEP>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d036      	beq.n	800b4d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b46e:	6938      	ldr	r0, [r7, #16]
 800b470:	f000 f836 	bl	800b4e0 <USBD_GetLen>
 800b474:	4603      	mov	r3, r0
 800b476:	3301      	adds	r3, #1
 800b478:	b29b      	uxth	r3, r3
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	4413      	add	r3, r2
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	7812      	ldrb	r2, [r2, #0]
 800b48c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	3301      	adds	r3, #1
 800b492:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	4413      	add	r3, r2
 800b49a:	2203      	movs	r2, #3
 800b49c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b4a4:	e013      	b.n	800b4ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	7812      	ldrb	r2, [r2, #0]
 800b4b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	613b      	str	r3, [r7, #16]
    idx++;
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4c8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e7      	bne.n	800b4a6 <USBD_GetString+0x52>
 800b4d6:	e000      	b.n	800b4da <USBD_GetString+0x86>
    return;
 800b4d8:	bf00      	nop
  }
}
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4f0:	e005      	b.n	800b4fe <USBD_GetLen+0x1e>
  {
    len++;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1f5      	bne.n	800b4f2 <USBD_GetLen+0x12>
  }

  return len;
 800b506:	7bfb      	ldrb	r3, [r7, #15]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2202      	movs	r2, #2
 800b524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	2100      	movs	r1, #0
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f003 fab3 	bl	800eaa6 <USBD_LL_Transmit>

  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	2100      	movs	r1, #0
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f003 faa2 	bl	800eaa6 <USBD_LL_Transmit>

  return USBD_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2203      	movs	r2, #3
 800b57c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	2100      	movs	r1, #0
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f003 faa6 	bl	800eae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f003 fa95 	bl	800eae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5d8:	2300      	movs	r3, #0
 800b5da:	2200      	movs	r2, #0
 800b5dc:	2100      	movs	r1, #0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f003 fa61 	bl	800eaa6 <USBD_LL_Transmit>

  return USBD_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b082      	sub	sp, #8
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2205      	movs	r2, #5
 800b5fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5fe:	2300      	movs	r3, #0
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f003 fa6f 	bl	800eae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <__NVIC_SetPriority>:
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	6039      	str	r1, [r7, #0]
 800b61e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b624:	2b00      	cmp	r3, #0
 800b626:	db0a      	blt.n	800b63e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	490c      	ldr	r1, [pc, #48]	; (800b660 <__NVIC_SetPriority+0x4c>)
 800b62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b632:	0112      	lsls	r2, r2, #4
 800b634:	b2d2      	uxtb	r2, r2
 800b636:	440b      	add	r3, r1
 800b638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b63c:	e00a      	b.n	800b654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	b2da      	uxtb	r2, r3
 800b642:	4908      	ldr	r1, [pc, #32]	; (800b664 <__NVIC_SetPriority+0x50>)
 800b644:	79fb      	ldrb	r3, [r7, #7]
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	3b04      	subs	r3, #4
 800b64c:	0112      	lsls	r2, r2, #4
 800b64e:	b2d2      	uxtb	r2, r2
 800b650:	440b      	add	r3, r1
 800b652:	761a      	strb	r2, [r3, #24]
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	e000e100 	.word	0xe000e100
 800b664:	e000ed00 	.word	0xe000ed00

0800b668 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <SysTick_Handler+0x1c>)
 800b66e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b670:	f001 fd28 	bl	800d0c4 <xTaskGetSchedulerState>
 800b674:	4603      	mov	r3, r0
 800b676:	2b01      	cmp	r3, #1
 800b678:	d001      	beq.n	800b67e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b67a:	f002 fb0d 	bl	800dc98 <xPortSysTickHandler>
  }
}
 800b67e:	bf00      	nop
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	e000e010 	.word	0xe000e010

0800b688 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b688:	b580      	push	{r7, lr}
 800b68a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b68c:	2100      	movs	r1, #0
 800b68e:	f06f 0004 	mvn.w	r0, #4
 800b692:	f7ff ffbf 	bl	800b614 <__NVIC_SetPriority>
#endif
}
 800b696:	bf00      	nop
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6a2:	f3ef 8305 	mrs	r3, IPSR
 800b6a6:	603b      	str	r3, [r7, #0]
  return(result);
 800b6a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b6ae:	f06f 0305 	mvn.w	r3, #5
 800b6b2:	607b      	str	r3, [r7, #4]
 800b6b4:	e00c      	b.n	800b6d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b6b6:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <osKernelInitialize+0x44>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d105      	bne.n	800b6ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b6be:	4b08      	ldr	r3, [pc, #32]	; (800b6e0 <osKernelInitialize+0x44>)
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	607b      	str	r3, [r7, #4]
 800b6c8:	e002      	b.n	800b6d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b6d0:	687b      	ldr	r3, [r7, #4]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20000658 	.word	0x20000658

0800b6e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ea:	f3ef 8305 	mrs	r3, IPSR
 800b6ee:	603b      	str	r3, [r7, #0]
  return(result);
 800b6f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <osKernelStart+0x1a>
    stat = osErrorISR;
 800b6f6:	f06f 0305 	mvn.w	r3, #5
 800b6fa:	607b      	str	r3, [r7, #4]
 800b6fc:	e010      	b.n	800b720 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b6fe:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <osKernelStart+0x48>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d109      	bne.n	800b71a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b706:	f7ff ffbf 	bl	800b688 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <osKernelStart+0x48>)
 800b70c:	2202      	movs	r2, #2
 800b70e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b710:	f001 f87c 	bl	800c80c <vTaskStartScheduler>
      stat = osOK;
 800b714:	2300      	movs	r3, #0
 800b716:	607b      	str	r3, [r7, #4]
 800b718:	e002      	b.n	800b720 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b71a:	f04f 33ff 	mov.w	r3, #4294967295
 800b71e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b720:	687b      	ldr	r3, [r7, #4]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20000658 	.word	0x20000658

0800b730 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b730:	b580      	push	{r7, lr}
 800b732:	b08e      	sub	sp, #56	; 0x38
 800b734:	af04      	add	r7, sp, #16
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b740:	f3ef 8305 	mrs	r3, IPSR
 800b744:	617b      	str	r3, [r7, #20]
  return(result);
 800b746:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d17e      	bne.n	800b84a <osThreadNew+0x11a>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d07b      	beq.n	800b84a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b752:	2380      	movs	r3, #128	; 0x80
 800b754:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b756:	2318      	movs	r3, #24
 800b758:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295
 800b762:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d045      	beq.n	800b7f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d002      	beq.n	800b778 <osThreadNew+0x48>
        name = attr->name;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d008      	beq.n	800b79e <osThreadNew+0x6e>
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	2b38      	cmp	r3, #56	; 0x38
 800b790:	d805      	bhi.n	800b79e <osThreadNew+0x6e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	f003 0301 	and.w	r3, r3, #1
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <osThreadNew+0x72>
        return (NULL);
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e054      	b.n	800b84c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	089b      	lsrs	r3, r3, #2
 800b7b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00e      	beq.n	800b7d8 <osThreadNew+0xa8>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	2bbb      	cmp	r3, #187	; 0xbb
 800b7c0:	d90a      	bls.n	800b7d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d006      	beq.n	800b7d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <osThreadNew+0xa8>
        mem = 1;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	61bb      	str	r3, [r7, #24]
 800b7d6:	e010      	b.n	800b7fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10c      	bne.n	800b7fa <osThreadNew+0xca>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d108      	bne.n	800b7fa <osThreadNew+0xca>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d104      	bne.n	800b7fa <osThreadNew+0xca>
          mem = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	61bb      	str	r3, [r7, #24]
 800b7f4:	e001      	b.n	800b7fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d110      	bne.n	800b822 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b808:	9202      	str	r2, [sp, #8]
 800b80a:	9301      	str	r3, [sp, #4]
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	6a3a      	ldr	r2, [r7, #32]
 800b814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 fe0c 	bl	800c434 <xTaskCreateStatic>
 800b81c:	4603      	mov	r3, r0
 800b81e:	613b      	str	r3, [r7, #16]
 800b820:	e013      	b.n	800b84a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d110      	bne.n	800b84a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	f107 0310 	add.w	r3, r7, #16
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 fe57 	bl	800c4ee <xTaskCreate>
 800b840:	4603      	mov	r3, r0
 800b842:	2b01      	cmp	r3, #1
 800b844:	d001      	beq.n	800b84a <osThreadNew+0x11a>
            hTask = NULL;
 800b846:	2300      	movs	r3, #0
 800b848:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b84a:	693b      	ldr	r3, [r7, #16]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3728      	adds	r7, #40	; 0x28
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b85c:	f3ef 8305 	mrs	r3, IPSR
 800b860:	60bb      	str	r3, [r7, #8]
  return(result);
 800b862:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b864:	2b00      	cmp	r3, #0
 800b866:	d003      	beq.n	800b870 <osDelay+0x1c>
    stat = osErrorISR;
 800b868:	f06f 0305 	mvn.w	r3, #5
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	e007      	b.n	800b880 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b870:	2300      	movs	r3, #0
 800b872:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 ff92 	bl	800c7a4 <vTaskDelay>
    }
  }

  return (stat);
 800b880:	68fb      	ldr	r3, [r7, #12]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4a07      	ldr	r2, [pc, #28]	; (800b8b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b89c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	4a06      	ldr	r2, [pc, #24]	; (800b8bc <vApplicationGetIdleTaskMemory+0x30>)
 800b8a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2280      	movs	r2, #128	; 0x80
 800b8a8:	601a      	str	r2, [r3, #0]
}
 800b8aa:	bf00      	nop
 800b8ac:	3714      	adds	r7, #20
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	2000065c 	.word	0x2000065c
 800b8bc:	20000718 	.word	0x20000718

0800b8c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4a07      	ldr	r2, [pc, #28]	; (800b8ec <vApplicationGetTimerTaskMemory+0x2c>)
 800b8d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	4a06      	ldr	r2, [pc, #24]	; (800b8f0 <vApplicationGetTimerTaskMemory+0x30>)
 800b8d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8de:	601a      	str	r2, [r3, #0]
}
 800b8e0:	bf00      	nop
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	20000918 	.word	0x20000918
 800b8f0:	200009d4 	.word	0x200009d4

0800b8f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f103 0208 	add.w	r2, r3, #8
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f04f 32ff 	mov.w	r2, #4294967295
 800b90c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f103 0208 	add.w	r2, r3, #8
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f103 0208 	add.w	r2, r3, #8
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b94e:	b480      	push	{r7}
 800b950:	b085      	sub	sp, #20
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	689a      	ldr	r2, [r3, #8]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	601a      	str	r2, [r3, #0]
}
 800b98a:	bf00      	nop
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b996:	b480      	push	{r7}
 800b998:	b085      	sub	sp, #20
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ac:	d103      	bne.n	800b9b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	e00c      	b.n	800b9d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	3308      	adds	r3, #8
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	e002      	b.n	800b9c4 <vListInsert+0x2e>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d2f6      	bcs.n	800b9be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	1c5a      	adds	r2, r3, #1
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	601a      	str	r2, [r3, #0]
}
 800b9fc:	bf00      	nop
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	6892      	ldr	r2, [r2, #8]
 800ba1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	6852      	ldr	r2, [r2, #4]
 800ba28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d103      	bne.n	800ba3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	1e5a      	subs	r2, r3, #1
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba86:	f002 f875 	bl	800db74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba92:	68f9      	ldr	r1, [r7, #12]
 800ba94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba96:	fb01 f303 	mul.w	r3, r1, r3
 800ba9a:	441a      	add	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab6:	3b01      	subs	r3, #1
 800bab8:	68f9      	ldr	r1, [r7, #12]
 800baba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800babc:	fb01 f303 	mul.w	r3, r1, r3
 800bac0:	441a      	add	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	22ff      	movs	r2, #255	; 0xff
 800baca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	22ff      	movs	r2, #255	; 0xff
 800bad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d114      	bne.n	800bb06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d01a      	beq.n	800bb1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3310      	adds	r3, #16
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 f929 	bl	800cd40 <xTaskRemoveFromEventList>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d012      	beq.n	800bb1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800baf4:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <xQueueGenericReset+0xcc>)
 800baf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	e009      	b.n	800bb1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3310      	adds	r3, #16
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fef2 	bl	800b8f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	3324      	adds	r3, #36	; 0x24
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff feed 	bl	800b8f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb1a:	f002 f85b 	bl	800dbd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb1e:	2301      	movs	r3, #1
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	e000ed04 	.word	0xe000ed04

0800bb2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08e      	sub	sp, #56	; 0x38
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <xQueueGenericCreateStatic+0x52>
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <xQueueGenericCreateStatic+0x56>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <xQueueGenericCreateStatic+0x58>
 800bb82:	2300      	movs	r3, #0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10a      	bne.n	800bb9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	623b      	str	r3, [r7, #32]
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <xQueueGenericCreateStatic+0x7e>
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <xQueueGenericCreateStatic+0x82>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e000      	b.n	800bbb0 <xQueueGenericCreateStatic+0x84>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	61fb      	str	r3, [r7, #28]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbca:	2350      	movs	r3, #80	; 0x50
 800bbcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b50      	cmp	r3, #80	; 0x50
 800bbd2:	d00a      	beq.n	800bbea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	61bb      	str	r3, [r7, #24]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00d      	beq.n	800bc12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	4613      	mov	r3, r2
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	68b9      	ldr	r1, [r7, #8]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f805 	bl	800bc1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3730      	adds	r7, #48	; 0x30
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d103      	bne.n	800bc38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	69ba      	ldr	r2, [r7, #24]
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	e002      	b.n	800bc3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	69b8      	ldr	r0, [r7, #24]
 800bc4e:	f7ff ff05 	bl	800ba5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	78fa      	ldrb	r2, [r7, #3]
 800bc56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc5a:	bf00      	nop
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b08e      	sub	sp, #56	; 0x38
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc72:	2300      	movs	r3, #0
 800bc74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10a      	bne.n	800bc96 <xQueueGenericSend+0x32>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc92:	bf00      	nop
 800bc94:	e7fe      	b.n	800bc94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d103      	bne.n	800bca4 <xQueueGenericSend+0x40>
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <xQueueGenericSend+0x44>
 800bca4:	2301      	movs	r3, #1
 800bca6:	e000      	b.n	800bcaa <xQueueGenericSend+0x46>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <xQueueGenericSend+0x60>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcc0:	bf00      	nop
 800bcc2:	e7fe      	b.n	800bcc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d103      	bne.n	800bcd2 <xQueueGenericSend+0x6e>
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d101      	bne.n	800bcd6 <xQueueGenericSend+0x72>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e000      	b.n	800bcd8 <xQueueGenericSend+0x74>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10a      	bne.n	800bcf2 <xQueueGenericSend+0x8e>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	623b      	str	r3, [r7, #32]
}
 800bcee:	bf00      	nop
 800bcf0:	e7fe      	b.n	800bcf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcf2:	f001 f9e7 	bl	800d0c4 <xTaskGetSchedulerState>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <xQueueGenericSend+0x9e>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <xQueueGenericSend+0xa2>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e000      	b.n	800bd08 <xQueueGenericSend+0xa4>
 800bd06:	2300      	movs	r3, #0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d10a      	bne.n	800bd22 <xQueueGenericSend+0xbe>
	__asm volatile
 800bd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	61fb      	str	r3, [r7, #28]
}
 800bd1e:	bf00      	nop
 800bd20:	e7fe      	b.n	800bd20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd22:	f001 ff27 	bl	800db74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d302      	bcc.n	800bd38 <xQueueGenericSend+0xd4>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d129      	bne.n	800bd8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	68b9      	ldr	r1, [r7, #8]
 800bd3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3e:	f000 fa0b 	bl	800c158 <prvCopyDataToQueue>
 800bd42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d010      	beq.n	800bd6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	3324      	adds	r3, #36	; 0x24
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 fff5 	bl	800cd40 <xTaskRemoveFromEventList>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d013      	beq.n	800bd84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd5c:	4b3f      	ldr	r3, [pc, #252]	; (800be5c <xQueueGenericSend+0x1f8>)
 800bd5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	e00a      	b.n	800bd84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d007      	beq.n	800bd84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd74:	4b39      	ldr	r3, [pc, #228]	; (800be5c <xQueueGenericSend+0x1f8>)
 800bd76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd84:	f001 ff26 	bl	800dbd4 <vPortExitCritical>
				return pdPASS;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e063      	b.n	800be54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd92:	f001 ff1f 	bl	800dbd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd96:	2300      	movs	r3, #0
 800bd98:	e05c      	b.n	800be54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bda0:	f107 0314 	add.w	r3, r7, #20
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 f82f 	bl	800ce08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdae:	f001 ff11 	bl	800dbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdb2:	f000 fd9b 	bl	800c8ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdb6:	f001 fedd 	bl	800db74 <vPortEnterCritical>
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdc0:	b25b      	sxtb	r3, r3
 800bdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc6:	d103      	bne.n	800bdd0 <xQueueGenericSend+0x16c>
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdd6:	b25b      	sxtb	r3, r3
 800bdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bddc:	d103      	bne.n	800bde6 <xQueueGenericSend+0x182>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bde6:	f001 fef5 	bl	800dbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdea:	1d3a      	adds	r2, r7, #4
 800bdec:	f107 0314 	add.w	r3, r7, #20
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 f81e 	bl	800ce34 <xTaskCheckForTimeOut>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d124      	bne.n	800be48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be00:	f000 faa2 	bl	800c348 <prvIsQueueFull>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d018      	beq.n	800be3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	3310      	adds	r3, #16
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f000 ff44 	bl	800cca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be1a:	f000 fa2d 	bl	800c278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be1e:	f000 fd73 	bl	800c908 <xTaskResumeAll>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	f47f af7c 	bne.w	800bd22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be2a:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <xQueueGenericSend+0x1f8>)
 800be2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	e772      	b.n	800bd22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be3e:	f000 fa1b 	bl	800c278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be42:	f000 fd61 	bl	800c908 <xTaskResumeAll>
 800be46:	e76c      	b.n	800bd22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be4a:	f000 fa15 	bl	800c278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be4e:	f000 fd5b 	bl	800c908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be54:	4618      	mov	r0, r3
 800be56:	3738      	adds	r7, #56	; 0x38
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b090      	sub	sp, #64	; 0x40
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10a      	bne.n	800be8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d103      	bne.n	800be9c <xQueueGenericSendFromISR+0x3c>
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <xQueueGenericSendFromISR+0x40>
 800be9c:	2301      	movs	r3, #1
 800be9e:	e000      	b.n	800bea2 <xQueueGenericSendFromISR+0x42>
 800bea0:	2300      	movs	r3, #0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10a      	bne.n	800bebc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beb8:	bf00      	nop
 800beba:	e7fe      	b.n	800beba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d103      	bne.n	800beca <xQueueGenericSendFromISR+0x6a>
 800bec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d101      	bne.n	800bece <xQueueGenericSendFromISR+0x6e>
 800beca:	2301      	movs	r3, #1
 800becc:	e000      	b.n	800bed0 <xQueueGenericSendFromISR+0x70>
 800bece:	2300      	movs	r3, #0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	623b      	str	r3, [r7, #32]
}
 800bee6:	bf00      	nop
 800bee8:	e7fe      	b.n	800bee8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800beea:	f001 ff25 	bl	800dd38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800beee:	f3ef 8211 	mrs	r2, BASEPRI
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	61fa      	str	r2, [r7, #28]
 800bf04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d302      	bcc.n	800bf1c <xQueueGenericSendFromISR+0xbc>
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d12f      	bne.n	800bf7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	68b9      	ldr	r1, [r7, #8]
 800bf30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf32:	f000 f911 	bl	800c158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3e:	d112      	bne.n	800bf66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d016      	beq.n	800bf76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	3324      	adds	r3, #36	; 0x24
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 fef7 	bl	800cd40 <xTaskRemoveFromEventList>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00e      	beq.n	800bf76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00b      	beq.n	800bf76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	e007      	b.n	800bf76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	b25a      	sxtb	r2, r3
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf76:	2301      	movs	r3, #1
 800bf78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bf7a:	e001      	b.n	800bf80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3740      	adds	r7, #64	; 0x40
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b08c      	sub	sp, #48	; 0x30
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10a      	bne.n	800bfc8 <xQueueReceive+0x30>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	623b      	str	r3, [r7, #32]
}
 800bfc4:	bf00      	nop
 800bfc6:	e7fe      	b.n	800bfc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d103      	bne.n	800bfd6 <xQueueReceive+0x3e>
 800bfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <xQueueReceive+0x42>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e000      	b.n	800bfdc <xQueueReceive+0x44>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10a      	bne.n	800bff6 <xQueueReceive+0x5e>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	61fb      	str	r3, [r7, #28]
}
 800bff2:	bf00      	nop
 800bff4:	e7fe      	b.n	800bff4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bff6:	f001 f865 	bl	800d0c4 <xTaskGetSchedulerState>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <xQueueReceive+0x6e>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <xQueueReceive+0x72>
 800c006:	2301      	movs	r3, #1
 800c008:	e000      	b.n	800c00c <xQueueReceive+0x74>
 800c00a:	2300      	movs	r3, #0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10a      	bne.n	800c026 <xQueueReceive+0x8e>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	61bb      	str	r3, [r7, #24]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c026:	f001 fda5 	bl	800db74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	2b00      	cmp	r3, #0
 800c034:	d01f      	beq.n	800c076 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c036:	68b9      	ldr	r1, [r7, #8]
 800c038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03a:	f000 f8f7 	bl	800c22c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	1e5a      	subs	r2, r3, #1
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00f      	beq.n	800c06e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	3310      	adds	r3, #16
 800c052:	4618      	mov	r0, r3
 800c054:	f000 fe74 	bl	800cd40 <xTaskRemoveFromEventList>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d007      	beq.n	800c06e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c05e:	4b3d      	ldr	r3, [pc, #244]	; (800c154 <xQueueReceive+0x1bc>)
 800c060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c064:	601a      	str	r2, [r3, #0]
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c06e:	f001 fdb1 	bl	800dbd4 <vPortExitCritical>
				return pdPASS;
 800c072:	2301      	movs	r3, #1
 800c074:	e069      	b.n	800c14a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d103      	bne.n	800c084 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c07c:	f001 fdaa 	bl	800dbd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c080:	2300      	movs	r3, #0
 800c082:	e062      	b.n	800c14a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	2b00      	cmp	r3, #0
 800c088:	d106      	bne.n	800c098 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c08a:	f107 0310 	add.w	r3, r7, #16
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 feba 	bl	800ce08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c098:	f001 fd9c 	bl	800dbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c09c:	f000 fc26 	bl	800c8ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0a0:	f001 fd68 	bl	800db74 <vPortEnterCritical>
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0aa:	b25b      	sxtb	r3, r3
 800c0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b0:	d103      	bne.n	800c0ba <xQueueReceive+0x122>
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0c0:	b25b      	sxtb	r3, r3
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d103      	bne.n	800c0d0 <xQueueReceive+0x138>
 800c0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0d0:	f001 fd80 	bl	800dbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0d4:	1d3a      	adds	r2, r7, #4
 800c0d6:	f107 0310 	add.w	r3, r7, #16
 800c0da:	4611      	mov	r1, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 fea9 	bl	800ce34 <xTaskCheckForTimeOut>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d123      	bne.n	800c130 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ea:	f000 f917 	bl	800c31c <prvIsQueueEmpty>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d017      	beq.n	800c124 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	3324      	adds	r3, #36	; 0x24
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fdcf 	bl	800cca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c104:	f000 f8b8 	bl	800c278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c108:	f000 fbfe 	bl	800c908 <xTaskResumeAll>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d189      	bne.n	800c026 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c112:	4b10      	ldr	r3, [pc, #64]	; (800c154 <xQueueReceive+0x1bc>)
 800c114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	e780      	b.n	800c026 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c126:	f000 f8a7 	bl	800c278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c12a:	f000 fbed 	bl	800c908 <xTaskResumeAll>
 800c12e:	e77a      	b.n	800c026 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c132:	f000 f8a1 	bl	800c278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c136:	f000 fbe7 	bl	800c908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13c:	f000 f8ee 	bl	800c31c <prvIsQueueEmpty>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	f43f af6f 	beq.w	800c026 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3730      	adds	r7, #48	; 0x30
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	e000ed04 	.word	0xe000ed04

0800c158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10d      	bne.n	800c192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d14d      	bne.n	800c21a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	4618      	mov	r0, r3
 800c184:	f000 ffbc 	bl	800d100 <xTaskPriorityDisinherit>
 800c188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	609a      	str	r2, [r3, #8]
 800c190:	e043      	b.n	800c21a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d119      	bne.n	800c1cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6858      	ldr	r0, [r3, #4]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	f002 fe3b 	bl	800ee1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b0:	441a      	add	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	685a      	ldr	r2, [r3, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d32b      	bcc.n	800c21a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	605a      	str	r2, [r3, #4]
 800c1ca:	e026      	b.n	800c21a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	68d8      	ldr	r0, [r3, #12]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	f002 fe21 	bl	800ee1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	68da      	ldr	r2, [r3, #12]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e4:	425b      	negs	r3, r3
 800c1e6:	441a      	add	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	68da      	ldr	r2, [r3, #12]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d207      	bcs.n	800c208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	689a      	ldr	r2, [r3, #8]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c200:	425b      	negs	r3, r3
 800c202:	441a      	add	r2, r3
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d105      	bne.n	800c21a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	3b01      	subs	r3, #1
 800c218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	1c5a      	adds	r2, r3, #1
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c222:	697b      	ldr	r3, [r7, #20]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d018      	beq.n	800c270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c246:	441a      	add	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	68da      	ldr	r2, [r3, #12]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	429a      	cmp	r2, r3
 800c256:	d303      	bcc.n	800c260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68d9      	ldr	r1, [r3, #12]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c268:	461a      	mov	r2, r3
 800c26a:	6838      	ldr	r0, [r7, #0]
 800c26c:	f002 fdd7 	bl	800ee1e <memcpy>
	}
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c280:	f001 fc78 	bl	800db74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c28a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c28c:	e011      	b.n	800c2b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c292:	2b00      	cmp	r3, #0
 800c294:	d012      	beq.n	800c2bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3324      	adds	r3, #36	; 0x24
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fd50 	bl	800cd40 <xTaskRemoveFromEventList>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2a6:	f000 fe27 	bl	800cef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	dce9      	bgt.n	800c28e <prvUnlockQueue+0x16>
 800c2ba:	e000      	b.n	800c2be <prvUnlockQueue+0x46>
					break;
 800c2bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	22ff      	movs	r2, #255	; 0xff
 800c2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c2c6:	f001 fc85 	bl	800dbd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2ca:	f001 fc53 	bl	800db74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2d6:	e011      	b.n	800c2fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d012      	beq.n	800c306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3310      	adds	r3, #16
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fd2b 	bl	800cd40 <xTaskRemoveFromEventList>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2f0:	f000 fe02 	bl	800cef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c300:	2b00      	cmp	r3, #0
 800c302:	dce9      	bgt.n	800c2d8 <prvUnlockQueue+0x60>
 800c304:	e000      	b.n	800c308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	22ff      	movs	r2, #255	; 0xff
 800c30c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c310:	f001 fc60 	bl	800dbd4 <vPortExitCritical>
}
 800c314:	bf00      	nop
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c324:	f001 fc26 	bl	800db74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d102      	bne.n	800c336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c330:	2301      	movs	r3, #1
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	e001      	b.n	800c33a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c336:	2300      	movs	r3, #0
 800c338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c33a:	f001 fc4b 	bl	800dbd4 <vPortExitCritical>

	return xReturn;
 800c33e:	68fb      	ldr	r3, [r7, #12]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c350:	f001 fc10 	bl	800db74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d102      	bne.n	800c366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c360:	2301      	movs	r3, #1
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e001      	b.n	800c36a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c36a:	f001 fc33 	bl	800dbd4 <vPortExitCritical>

	return xReturn;
 800c36e:	68fb      	ldr	r3, [r7, #12]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	e014      	b.n	800c3b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c388:	4a0f      	ldr	r2, [pc, #60]	; (800c3c8 <vQueueAddToRegistry+0x50>)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10b      	bne.n	800c3ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c394:	490c      	ldr	r1, [pc, #48]	; (800c3c8 <vQueueAddToRegistry+0x50>)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c39e:	4a0a      	ldr	r2, [pc, #40]	; (800c3c8 <vQueueAddToRegistry+0x50>)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	00db      	lsls	r3, r3, #3
 800c3a4:	4413      	add	r3, r2
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3aa:	e006      	b.n	800c3ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	60fb      	str	r3, [r7, #12]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b07      	cmp	r3, #7
 800c3b6:	d9e7      	bls.n	800c388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20000dd4 	.word	0x20000dd4

0800c3cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c3dc:	f001 fbca 	bl	800db74 <vPortEnterCritical>
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ec:	d103      	bne.n	800c3f6 <vQueueWaitForMessageRestricted+0x2a>
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3fc:	b25b      	sxtb	r3, r3
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d103      	bne.n	800c40c <vQueueWaitForMessageRestricted+0x40>
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c40c:	f001 fbe2 	bl	800dbd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	2b00      	cmp	r3, #0
 800c416:	d106      	bne.n	800c426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	3324      	adds	r3, #36	; 0x24
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fc61 	bl	800cce8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c426:	6978      	ldr	r0, [r7, #20]
 800c428:	f7ff ff26 	bl	800c278 <prvUnlockQueue>
	}
 800c42c:	bf00      	nop
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08e      	sub	sp, #56	; 0x38
 800c438:	af04      	add	r7, sp, #16
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10a      	bne.n	800c45e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	623b      	str	r3, [r7, #32]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10a      	bne.n	800c47a <xTaskCreateStatic+0x46>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	61fb      	str	r3, [r7, #28]
}
 800c476:	bf00      	nop
 800c478:	e7fe      	b.n	800c478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c47a:	23bc      	movs	r3, #188	; 0xbc
 800c47c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	2bbc      	cmp	r3, #188	; 0xbc
 800c482:	d00a      	beq.n	800c49a <xTaskCreateStatic+0x66>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	61bb      	str	r3, [r7, #24]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c49a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d01e      	beq.n	800c4e0 <xTaskCreateStatic+0xac>
 800c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d01b      	beq.n	800c4e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9303      	str	r3, [sp, #12]
 800c4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c0:	9302      	str	r3, [sp, #8]
 800c4c2:	f107 0314 	add.w	r3, r7, #20
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	68b9      	ldr	r1, [r7, #8]
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f000 f850 	bl	800c578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4da:	f000 f8f3 	bl	800c6c4 <prvAddNewTaskToReadyList>
 800c4de:	e001      	b.n	800c4e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c4e4:	697b      	ldr	r3, [r7, #20]
	}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3728      	adds	r7, #40	; 0x28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b08c      	sub	sp, #48	; 0x30
 800c4f2:	af04      	add	r7, sp, #16
 800c4f4:	60f8      	str	r0, [r7, #12]
 800c4f6:	60b9      	str	r1, [r7, #8]
 800c4f8:	603b      	str	r3, [r7, #0]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4fe:	88fb      	ldrh	r3, [r7, #6]
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4618      	mov	r0, r3
 800c504:	f001 fc58 	bl	800ddb8 <pvPortMalloc>
 800c508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00e      	beq.n	800c52e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c510:	20bc      	movs	r0, #188	; 0xbc
 800c512:	f001 fc51 	bl	800ddb8 <pvPortMalloc>
 800c516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	631a      	str	r2, [r3, #48]	; 0x30
 800c524:	e005      	b.n	800c532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c526:	6978      	ldr	r0, [r7, #20]
 800c528:	f001 fd12 	bl	800df50 <vPortFree>
 800c52c:	e001      	b.n	800c532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d017      	beq.n	800c568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c540:	88fa      	ldrh	r2, [r7, #6]
 800c542:	2300      	movs	r3, #0
 800c544:	9303      	str	r3, [sp, #12]
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	9302      	str	r3, [sp, #8]
 800c54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 f80e 	bl	800c578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c55c:	69f8      	ldr	r0, [r7, #28]
 800c55e:	f000 f8b1 	bl	800c6c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c562:	2301      	movs	r3, #1
 800c564:	61bb      	str	r3, [r7, #24]
 800c566:	e002      	b.n	800c56e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c568:	f04f 33ff 	mov.w	r3, #4294967295
 800c56c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c56e:	69bb      	ldr	r3, [r7, #24]
	}
 800c570:	4618      	mov	r0, r3
 800c572:	3720      	adds	r7, #32
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	461a      	mov	r2, r3
 800c590:	21a5      	movs	r1, #165	; 0xa5
 800c592:	f002 fc52 	bl	800ee3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	f023 0307 	bic.w	r3, r3, #7
 800c5ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	f003 0307 	and.w	r3, r3, #7
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	617b      	str	r3, [r7, #20]
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01f      	beq.n	800c616 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	61fb      	str	r3, [r7, #28]
 800c5da:	e012      	b.n	800c602 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	7819      	ldrb	r1, [r3, #0]
 800c5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	3334      	adds	r3, #52	; 0x34
 800c5ec:	460a      	mov	r2, r1
 800c5ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d006      	beq.n	800c60a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	3301      	adds	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	2b0f      	cmp	r3, #15
 800c606:	d9e9      	bls.n	800c5dc <prvInitialiseNewTask+0x64>
 800c608:	e000      	b.n	800c60c <prvInitialiseNewTask+0x94>
			{
				break;
 800c60a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c614:	e003      	b.n	800c61e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	2b37      	cmp	r3, #55	; 0x37
 800c622:	d901      	bls.n	800c628 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c624:	2337      	movs	r3, #55	; 0x37
 800c626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c62c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c632:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	2200      	movs	r2, #0
 800c638:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	3304      	adds	r3, #4
 800c63e:	4618      	mov	r0, r3
 800c640:	f7ff f978 	bl	800b934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	3318      	adds	r3, #24
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff f973 	bl	800b934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	2200      	movs	r2, #0
 800c668:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c676:	3354      	adds	r3, #84	; 0x54
 800c678:	2260      	movs	r2, #96	; 0x60
 800c67a:	2100      	movs	r1, #0
 800c67c:	4618      	mov	r0, r3
 800c67e:	f002 fbdc 	bl	800ee3a <memset>
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	4a0c      	ldr	r2, [pc, #48]	; (800c6b8 <prvInitialiseNewTask+0x140>)
 800c686:	659a      	str	r2, [r3, #88]	; 0x58
 800c688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68a:	4a0c      	ldr	r2, [pc, #48]	; (800c6bc <prvInitialiseNewTask+0x144>)
 800c68c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c690:	4a0b      	ldr	r2, [pc, #44]	; (800c6c0 <prvInitialiseNewTask+0x148>)
 800c692:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c694:	683a      	ldr	r2, [r7, #0]
 800c696:	68f9      	ldr	r1, [r7, #12]
 800c698:	69b8      	ldr	r0, [r7, #24]
 800c69a:	f001 f941 	bl	800d920 <pxPortInitialiseStack>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d002      	beq.n	800c6b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6b0:	bf00      	nop
 800c6b2:	3720      	adds	r7, #32
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	08017220 	.word	0x08017220
 800c6bc:	08017240 	.word	0x08017240
 800c6c0:	08017200 	.word	0x08017200

0800c6c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c6cc:	f001 fa52 	bl	800db74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c6d0:	4b2d      	ldr	r3, [pc, #180]	; (800c788 <prvAddNewTaskToReadyList+0xc4>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	4a2c      	ldr	r2, [pc, #176]	; (800c788 <prvAddNewTaskToReadyList+0xc4>)
 800c6d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c6da:	4b2c      	ldr	r3, [pc, #176]	; (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6e2:	4a2a      	ldr	r2, [pc, #168]	; (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6e8:	4b27      	ldr	r3, [pc, #156]	; (800c788 <prvAddNewTaskToReadyList+0xc4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d110      	bne.n	800c712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c6f0:	f000 fc26 	bl	800cf40 <prvInitialiseTaskLists>
 800c6f4:	e00d      	b.n	800c712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6f6:	4b26      	ldr	r3, [pc, #152]	; (800c790 <prvAddNewTaskToReadyList+0xcc>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d109      	bne.n	800c712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6fe:	4b23      	ldr	r3, [pc, #140]	; (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c708:	429a      	cmp	r2, r3
 800c70a:	d802      	bhi.n	800c712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c70c:	4a1f      	ldr	r2, [pc, #124]	; (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c712:	4b20      	ldr	r3, [pc, #128]	; (800c794 <prvAddNewTaskToReadyList+0xd0>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3301      	adds	r3, #1
 800c718:	4a1e      	ldr	r2, [pc, #120]	; (800c794 <prvAddNewTaskToReadyList+0xd0>)
 800c71a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c71c:	4b1d      	ldr	r3, [pc, #116]	; (800c794 <prvAddNewTaskToReadyList+0xd0>)
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c728:	4b1b      	ldr	r3, [pc, #108]	; (800c798 <prvAddNewTaskToReadyList+0xd4>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d903      	bls.n	800c738 <prvAddNewTaskToReadyList+0x74>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	4a18      	ldr	r2, [pc, #96]	; (800c798 <prvAddNewTaskToReadyList+0xd4>)
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73c:	4613      	mov	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4a15      	ldr	r2, [pc, #84]	; (800c79c <prvAddNewTaskToReadyList+0xd8>)
 800c746:	441a      	add	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7ff f8fd 	bl	800b94e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c754:	f001 fa3e 	bl	800dbd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c758:	4b0d      	ldr	r3, [pc, #52]	; (800c790 <prvAddNewTaskToReadyList+0xcc>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00e      	beq.n	800c77e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <prvAddNewTaskToReadyList+0xc8>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d207      	bcs.n	800c77e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c76e:	4b0c      	ldr	r3, [pc, #48]	; (800c7a0 <prvAddNewTaskToReadyList+0xdc>)
 800c770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c77e:	bf00      	nop
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200012e8 	.word	0x200012e8
 800c78c:	20000e14 	.word	0x20000e14
 800c790:	200012f4 	.word	0x200012f4
 800c794:	20001304 	.word	0x20001304
 800c798:	200012f0 	.word	0x200012f0
 800c79c:	20000e18 	.word	0x20000e18
 800c7a0:	e000ed04 	.word	0xe000ed04

0800c7a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d017      	beq.n	800c7e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7b6:	4b13      	ldr	r3, [pc, #76]	; (800c804 <vTaskDelay+0x60>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <vTaskDelay+0x30>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	60bb      	str	r3, [r7, #8]
}
 800c7d0:	bf00      	nop
 800c7d2:	e7fe      	b.n	800c7d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c7d4:	f000 f88a 	bl	800c8ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c7d8:	2100      	movs	r1, #0
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fcfe 	bl	800d1dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c7e0:	f000 f892 	bl	800c908 <xTaskResumeAll>
 800c7e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d107      	bne.n	800c7fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c7ec:	4b06      	ldr	r3, [pc, #24]	; (800c808 <vTaskDelay+0x64>)
 800c7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	20001310 	.word	0x20001310
 800c808:	e000ed04 	.word	0xe000ed04

0800c80c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b08a      	sub	sp, #40	; 0x28
 800c810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c812:	2300      	movs	r3, #0
 800c814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c81a:	463a      	mov	r2, r7
 800c81c:	1d39      	adds	r1, r7, #4
 800c81e:	f107 0308 	add.w	r3, r7, #8
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff f832 	bl	800b88c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	9202      	str	r2, [sp, #8]
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	2300      	movs	r3, #0
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	2300      	movs	r3, #0
 800c838:	460a      	mov	r2, r1
 800c83a:	4924      	ldr	r1, [pc, #144]	; (800c8cc <vTaskStartScheduler+0xc0>)
 800c83c:	4824      	ldr	r0, [pc, #144]	; (800c8d0 <vTaskStartScheduler+0xc4>)
 800c83e:	f7ff fdf9 	bl	800c434 <xTaskCreateStatic>
 800c842:	4603      	mov	r3, r0
 800c844:	4a23      	ldr	r2, [pc, #140]	; (800c8d4 <vTaskStartScheduler+0xc8>)
 800c846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c848:	4b22      	ldr	r3, [pc, #136]	; (800c8d4 <vTaskStartScheduler+0xc8>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c850:	2301      	movs	r3, #1
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	e001      	b.n	800c85a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c856:	2300      	movs	r3, #0
 800c858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d102      	bne.n	800c866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c860:	f000 fd10 	bl	800d284 <xTimerCreateTimerTask>
 800c864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d11b      	bne.n	800c8a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	613b      	str	r3, [r7, #16]
}
 800c87e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c880:	4b15      	ldr	r3, [pc, #84]	; (800c8d8 <vTaskStartScheduler+0xcc>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3354      	adds	r3, #84	; 0x54
 800c886:	4a15      	ldr	r2, [pc, #84]	; (800c8dc <vTaskStartScheduler+0xd0>)
 800c888:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c88a:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <vTaskStartScheduler+0xd4>)
 800c88c:	f04f 32ff 	mov.w	r2, #4294967295
 800c890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c892:	4b14      	ldr	r3, [pc, #80]	; (800c8e4 <vTaskStartScheduler+0xd8>)
 800c894:	2201      	movs	r2, #1
 800c896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c898:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <vTaskStartScheduler+0xdc>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c89e:	f001 f8c7 	bl	800da30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8a2:	e00e      	b.n	800c8c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8aa:	d10a      	bne.n	800c8c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	60fb      	str	r3, [r7, #12]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <vTaskStartScheduler+0xb4>
}
 800c8c2:	bf00      	nop
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	080136f4 	.word	0x080136f4
 800c8d0:	0800cf11 	.word	0x0800cf11
 800c8d4:	2000130c 	.word	0x2000130c
 800c8d8:	20000e14 	.word	0x20000e14
 800c8dc:	20000110 	.word	0x20000110
 800c8e0:	20001308 	.word	0x20001308
 800c8e4:	200012f4 	.word	0x200012f4
 800c8e8:	200012ec 	.word	0x200012ec

0800c8ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c8f0:	4b04      	ldr	r3, [pc, #16]	; (800c904 <vTaskSuspendAll+0x18>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	4a03      	ldr	r2, [pc, #12]	; (800c904 <vTaskSuspendAll+0x18>)
 800c8f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c8fa:	bf00      	nop
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	20001310 	.word	0x20001310

0800c908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c912:	2300      	movs	r3, #0
 800c914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c916:	4b42      	ldr	r3, [pc, #264]	; (800ca20 <xTaskResumeAll+0x118>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10a      	bne.n	800c934 <xTaskResumeAll+0x2c>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	603b      	str	r3, [r7, #0]
}
 800c930:	bf00      	nop
 800c932:	e7fe      	b.n	800c932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c934:	f001 f91e 	bl	800db74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c938:	4b39      	ldr	r3, [pc, #228]	; (800ca20 <xTaskResumeAll+0x118>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	4a38      	ldr	r2, [pc, #224]	; (800ca20 <xTaskResumeAll+0x118>)
 800c940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c942:	4b37      	ldr	r3, [pc, #220]	; (800ca20 <xTaskResumeAll+0x118>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d162      	bne.n	800ca10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c94a:	4b36      	ldr	r3, [pc, #216]	; (800ca24 <xTaskResumeAll+0x11c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d05e      	beq.n	800ca10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c952:	e02f      	b.n	800c9b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c954:	4b34      	ldr	r3, [pc, #208]	; (800ca28 <xTaskResumeAll+0x120>)
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3318      	adds	r3, #24
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff f851 	bl	800ba08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3304      	adds	r3, #4
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff f84c 	bl	800ba08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c974:	4b2d      	ldr	r3, [pc, #180]	; (800ca2c <xTaskResumeAll+0x124>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d903      	bls.n	800c984 <xTaskResumeAll+0x7c>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c980:	4a2a      	ldr	r2, [pc, #168]	; (800ca2c <xTaskResumeAll+0x124>)
 800c982:	6013      	str	r3, [r2, #0]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4a27      	ldr	r2, [pc, #156]	; (800ca30 <xTaskResumeAll+0x128>)
 800c992:	441a      	add	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3304      	adds	r3, #4
 800c998:	4619      	mov	r1, r3
 800c99a:	4610      	mov	r0, r2
 800c99c:	f7fe ffd7 	bl	800b94e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a4:	4b23      	ldr	r3, [pc, #140]	; (800ca34 <xTaskResumeAll+0x12c>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d302      	bcc.n	800c9b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c9ae:	4b22      	ldr	r3, [pc, #136]	; (800ca38 <xTaskResumeAll+0x130>)
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9b4:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <xTaskResumeAll+0x120>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1cb      	bne.n	800c954 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c9c2:	f000 fb5f 	bl	800d084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c9c6:	4b1d      	ldr	r3, [pc, #116]	; (800ca3c <xTaskResumeAll+0x134>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d010      	beq.n	800c9f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c9d2:	f000 f847 	bl	800ca64 <xTaskIncrementTick>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c9dc:	4b16      	ldr	r3, [pc, #88]	; (800ca38 <xTaskResumeAll+0x130>)
 800c9de:	2201      	movs	r2, #1
 800c9e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1f1      	bne.n	800c9d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c9ee:	4b13      	ldr	r3, [pc, #76]	; (800ca3c <xTaskResumeAll+0x134>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c9f4:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <xTaskResumeAll+0x130>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d009      	beq.n	800ca10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca00:	4b0f      	ldr	r3, [pc, #60]	; (800ca40 <xTaskResumeAll+0x138>)
 800ca02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca06:	601a      	str	r2, [r3, #0]
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca10:	f001 f8e0 	bl	800dbd4 <vPortExitCritical>

	return xAlreadyYielded;
 800ca14:	68bb      	ldr	r3, [r7, #8]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20001310 	.word	0x20001310
 800ca24:	200012e8 	.word	0x200012e8
 800ca28:	200012a8 	.word	0x200012a8
 800ca2c:	200012f0 	.word	0x200012f0
 800ca30:	20000e18 	.word	0x20000e18
 800ca34:	20000e14 	.word	0x20000e14
 800ca38:	200012fc 	.word	0x200012fc
 800ca3c:	200012f8 	.word	0x200012f8
 800ca40:	e000ed04 	.word	0xe000ed04

0800ca44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca4a:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <xTaskGetTickCount+0x1c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca50:	687b      	ldr	r3, [r7, #4]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	200012ec 	.word	0x200012ec

0800ca64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca6e:	4b4f      	ldr	r3, [pc, #316]	; (800cbac <xTaskIncrementTick+0x148>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f040 808f 	bne.w	800cb96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca78:	4b4d      	ldr	r3, [pc, #308]	; (800cbb0 <xTaskIncrementTick+0x14c>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca80:	4a4b      	ldr	r2, [pc, #300]	; (800cbb0 <xTaskIncrementTick+0x14c>)
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d120      	bne.n	800cace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca8c:	4b49      	ldr	r3, [pc, #292]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00a      	beq.n	800caac <xTaskIncrementTick+0x48>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	603b      	str	r3, [r7, #0]
}
 800caa8:	bf00      	nop
 800caaa:	e7fe      	b.n	800caaa <xTaskIncrementTick+0x46>
 800caac:	4b41      	ldr	r3, [pc, #260]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	4b41      	ldr	r3, [pc, #260]	; (800cbb8 <xTaskIncrementTick+0x154>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a3f      	ldr	r2, [pc, #252]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800cab8:	6013      	str	r3, [r2, #0]
 800caba:	4a3f      	ldr	r2, [pc, #252]	; (800cbb8 <xTaskIncrementTick+0x154>)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	4b3e      	ldr	r3, [pc, #248]	; (800cbbc <xTaskIncrementTick+0x158>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3301      	adds	r3, #1
 800cac6:	4a3d      	ldr	r2, [pc, #244]	; (800cbbc <xTaskIncrementTick+0x158>)
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	f000 fadb 	bl	800d084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cace:	4b3c      	ldr	r3, [pc, #240]	; (800cbc0 <xTaskIncrementTick+0x15c>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d349      	bcc.n	800cb6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cad8:	4b36      	ldr	r3, [pc, #216]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d104      	bne.n	800caec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cae2:	4b37      	ldr	r3, [pc, #220]	; (800cbc0 <xTaskIncrementTick+0x15c>)
 800cae4:	f04f 32ff 	mov.w	r2, #4294967295
 800cae8:	601a      	str	r2, [r3, #0]
					break;
 800caea:	e03f      	b.n	800cb6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caec:	4b31      	ldr	r3, [pc, #196]	; (800cbb4 <xTaskIncrementTick+0x150>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d203      	bcs.n	800cb0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb04:	4a2e      	ldr	r2, [pc, #184]	; (800cbc0 <xTaskIncrementTick+0x15c>)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb0a:	e02f      	b.n	800cb6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe ff79 	bl	800ba08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d004      	beq.n	800cb28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	3318      	adds	r3, #24
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe ff70 	bl	800ba08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2c:	4b25      	ldr	r3, [pc, #148]	; (800cbc4 <xTaskIncrementTick+0x160>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d903      	bls.n	800cb3c <xTaskIncrementTick+0xd8>
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	4a22      	ldr	r2, [pc, #136]	; (800cbc4 <xTaskIncrementTick+0x160>)
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4a1f      	ldr	r2, [pc, #124]	; (800cbc8 <xTaskIncrementTick+0x164>)
 800cb4a:	441a      	add	r2, r3
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fe fefb 	bl	800b94e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5c:	4b1b      	ldr	r3, [pc, #108]	; (800cbcc <xTaskIncrementTick+0x168>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d3b8      	bcc.n	800cad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cb66:	2301      	movs	r3, #1
 800cb68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb6a:	e7b5      	b.n	800cad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb6c:	4b17      	ldr	r3, [pc, #92]	; (800cbcc <xTaskIncrementTick+0x168>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb72:	4915      	ldr	r1, [pc, #84]	; (800cbc8 <xTaskIncrementTick+0x164>)
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d901      	bls.n	800cb88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cb84:	2301      	movs	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb88:	4b11      	ldr	r3, [pc, #68]	; (800cbd0 <xTaskIncrementTick+0x16c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d007      	beq.n	800cba0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cb90:	2301      	movs	r3, #1
 800cb92:	617b      	str	r3, [r7, #20]
 800cb94:	e004      	b.n	800cba0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb96:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <xTaskIncrementTick+0x170>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	4a0d      	ldr	r2, [pc, #52]	; (800cbd4 <xTaskIncrementTick+0x170>)
 800cb9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cba0:	697b      	ldr	r3, [r7, #20]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20001310 	.word	0x20001310
 800cbb0:	200012ec 	.word	0x200012ec
 800cbb4:	200012a0 	.word	0x200012a0
 800cbb8:	200012a4 	.word	0x200012a4
 800cbbc:	20001300 	.word	0x20001300
 800cbc0:	20001308 	.word	0x20001308
 800cbc4:	200012f0 	.word	0x200012f0
 800cbc8:	20000e18 	.word	0x20000e18
 800cbcc:	20000e14 	.word	0x20000e14
 800cbd0:	200012fc 	.word	0x200012fc
 800cbd4:	200012f8 	.word	0x200012f8

0800cbd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cbde:	4b2a      	ldr	r3, [pc, #168]	; (800cc88 <vTaskSwitchContext+0xb0>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cbe6:	4b29      	ldr	r3, [pc, #164]	; (800cc8c <vTaskSwitchContext+0xb4>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cbec:	e046      	b.n	800cc7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cbee:	4b27      	ldr	r3, [pc, #156]	; (800cc8c <vTaskSwitchContext+0xb4>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbf4:	4b26      	ldr	r3, [pc, #152]	; (800cc90 <vTaskSwitchContext+0xb8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	e010      	b.n	800cc1e <vTaskSwitchContext+0x46>
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10a      	bne.n	800cc18 <vTaskSwitchContext+0x40>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	607b      	str	r3, [r7, #4]
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <vTaskSwitchContext+0x3e>
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	60fb      	str	r3, [r7, #12]
 800cc1e:	491d      	ldr	r1, [pc, #116]	; (800cc94 <vTaskSwitchContext+0xbc>)
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	4613      	mov	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	440b      	add	r3, r1
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0e4      	beq.n	800cbfc <vTaskSwitchContext+0x24>
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	4613      	mov	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4a15      	ldr	r2, [pc, #84]	; (800cc94 <vTaskSwitchContext+0xbc>)
 800cc3e:	4413      	add	r3, r2
 800cc40:	60bb      	str	r3, [r7, #8]
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	605a      	str	r2, [r3, #4]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	3308      	adds	r3, #8
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d104      	bne.n	800cc62 <vTaskSwitchContext+0x8a>
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	605a      	str	r2, [r3, #4]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	4a0b      	ldr	r2, [pc, #44]	; (800cc98 <vTaskSwitchContext+0xc0>)
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	4a08      	ldr	r2, [pc, #32]	; (800cc90 <vTaskSwitchContext+0xb8>)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc72:	4b09      	ldr	r3, [pc, #36]	; (800cc98 <vTaskSwitchContext+0xc0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3354      	adds	r3, #84	; 0x54
 800cc78:	4a08      	ldr	r2, [pc, #32]	; (800cc9c <vTaskSwitchContext+0xc4>)
 800cc7a:	6013      	str	r3, [r2, #0]
}
 800cc7c:	bf00      	nop
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr
 800cc88:	20001310 	.word	0x20001310
 800cc8c:	200012fc 	.word	0x200012fc
 800cc90:	200012f0 	.word	0x200012f0
 800cc94:	20000e18 	.word	0x20000e18
 800cc98:	20000e14 	.word	0x20000e14
 800cc9c:	20000110 	.word	0x20000110

0800cca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	60fb      	str	r3, [r7, #12]
}
 800ccc2:	bf00      	nop
 800ccc4:	e7fe      	b.n	800ccc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccc6:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <vTaskPlaceOnEventList+0x44>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3318      	adds	r3, #24
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7fe fe61 	bl	800b996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	6838      	ldr	r0, [r7, #0]
 800ccd8:	f000 fa80 	bl	800d1dc <prvAddCurrentTaskToDelayedList>
}
 800ccdc:	bf00      	nop
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	20000e14 	.word	0x20000e14

0800cce8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10a      	bne.n	800cd10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	617b      	str	r3, [r7, #20]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd10:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <vTaskPlaceOnEventListRestricted+0x54>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3318      	adds	r3, #24
 800cd16:	4619      	mov	r1, r3
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f7fe fe18 	bl	800b94e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cd24:	f04f 33ff 	mov.w	r3, #4294967295
 800cd28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	68b8      	ldr	r0, [r7, #8]
 800cd2e:	f000 fa55 	bl	800d1dc <prvAddCurrentTaskToDelayedList>
	}
 800cd32:	bf00      	nop
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20000e14 	.word	0x20000e14

0800cd40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	60fb      	str	r3, [r7, #12]
}
 800cd68:	bf00      	nop
 800cd6a:	e7fe      	b.n	800cd6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	3318      	adds	r3, #24
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe fe49 	bl	800ba08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <xTaskRemoveFromEventList+0xb0>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d11d      	bne.n	800cdba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	3304      	adds	r3, #4
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fe40 	bl	800ba08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8c:	4b19      	ldr	r3, [pc, #100]	; (800cdf4 <xTaskRemoveFromEventList+0xb4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d903      	bls.n	800cd9c <xTaskRemoveFromEventList+0x5c>
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd98:	4a16      	ldr	r2, [pc, #88]	; (800cdf4 <xTaskRemoveFromEventList+0xb4>)
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4a13      	ldr	r2, [pc, #76]	; (800cdf8 <xTaskRemoveFromEventList+0xb8>)
 800cdaa:	441a      	add	r2, r3
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	3304      	adds	r3, #4
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	f7fe fdcb 	bl	800b94e <vListInsertEnd>
 800cdb8:	e005      	b.n	800cdc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	3318      	adds	r3, #24
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	480e      	ldr	r0, [pc, #56]	; (800cdfc <xTaskRemoveFromEventList+0xbc>)
 800cdc2:	f7fe fdc4 	bl	800b94e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdca:	4b0d      	ldr	r3, [pc, #52]	; (800ce00 <xTaskRemoveFromEventList+0xc0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d905      	bls.n	800cde0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <xTaskRemoveFromEventList+0xc4>)
 800cdda:	2201      	movs	r2, #1
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	e001      	b.n	800cde4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cde0:	2300      	movs	r3, #0
 800cde2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cde4:	697b      	ldr	r3, [r7, #20]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3718      	adds	r7, #24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	20001310 	.word	0x20001310
 800cdf4:	200012f0 	.word	0x200012f0
 800cdf8:	20000e18 	.word	0x20000e18
 800cdfc:	200012a8 	.word	0x200012a8
 800ce00:	20000e14 	.word	0x20000e14
 800ce04:	200012fc 	.word	0x200012fc

0800ce08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce10:	4b06      	ldr	r3, [pc, #24]	; (800ce2c <vTaskInternalSetTimeOutState+0x24>)
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce18:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <vTaskInternalSetTimeOutState+0x28>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	605a      	str	r2, [r3, #4]
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	20001300 	.word	0x20001300
 800ce30:	200012ec 	.word	0x200012ec

0800ce34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10a      	bne.n	800ce5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ce44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce48:	f383 8811 	msr	BASEPRI, r3
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	613b      	str	r3, [r7, #16]
}
 800ce56:	bf00      	nop
 800ce58:	e7fe      	b.n	800ce58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10a      	bne.n	800ce76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	60fb      	str	r3, [r7, #12]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ce76:	f000 fe7d 	bl	800db74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce7a:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <xTaskCheckForTimeOut+0xbc>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d102      	bne.n	800ce9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61fb      	str	r3, [r7, #28]
 800ce98:	e023      	b.n	800cee2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	4b15      	ldr	r3, [pc, #84]	; (800cef4 <xTaskCheckForTimeOut+0xc0>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d007      	beq.n	800ceb6 <xTaskCheckForTimeOut+0x82>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d302      	bcc.n	800ceb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	61fb      	str	r3, [r7, #28]
 800ceb4:	e015      	b.n	800cee2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d20b      	bcs.n	800ced8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	1ad2      	subs	r2, r2, r3
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff ff9b 	bl	800ce08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61fb      	str	r3, [r7, #28]
 800ced6:	e004      	b.n	800cee2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cede:	2301      	movs	r3, #1
 800cee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cee2:	f000 fe77 	bl	800dbd4 <vPortExitCritical>

	return xReturn;
 800cee6:	69fb      	ldr	r3, [r7, #28]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3720      	adds	r7, #32
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	200012ec 	.word	0x200012ec
 800cef4:	20001300 	.word	0x20001300

0800cef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cef8:	b480      	push	{r7}
 800cefa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cefc:	4b03      	ldr	r3, [pc, #12]	; (800cf0c <vTaskMissedYield+0x14>)
 800cefe:	2201      	movs	r2, #1
 800cf00:	601a      	str	r2, [r3, #0]
}
 800cf02:	bf00      	nop
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	200012fc 	.word	0x200012fc

0800cf10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf18:	f000 f852 	bl	800cfc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <prvIdleTask+0x28>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d9f9      	bls.n	800cf18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf24:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <prvIdleTask+0x2c>)
 800cf26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf2a:	601a      	str	r2, [r3, #0]
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf34:	e7f0      	b.n	800cf18 <prvIdleTask+0x8>
 800cf36:	bf00      	nop
 800cf38:	20000e18 	.word	0x20000e18
 800cf3c:	e000ed04 	.word	0xe000ed04

0800cf40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf46:	2300      	movs	r3, #0
 800cf48:	607b      	str	r3, [r7, #4]
 800cf4a:	e00c      	b.n	800cf66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4a12      	ldr	r2, [pc, #72]	; (800cfa0 <prvInitialiseTaskLists+0x60>)
 800cf58:	4413      	add	r3, r2
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fcca 	bl	800b8f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3301      	adds	r3, #1
 800cf64:	607b      	str	r3, [r7, #4]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2b37      	cmp	r3, #55	; 0x37
 800cf6a:	d9ef      	bls.n	800cf4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf6c:	480d      	ldr	r0, [pc, #52]	; (800cfa4 <prvInitialiseTaskLists+0x64>)
 800cf6e:	f7fe fcc1 	bl	800b8f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf72:	480d      	ldr	r0, [pc, #52]	; (800cfa8 <prvInitialiseTaskLists+0x68>)
 800cf74:	f7fe fcbe 	bl	800b8f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf78:	480c      	ldr	r0, [pc, #48]	; (800cfac <prvInitialiseTaskLists+0x6c>)
 800cf7a:	f7fe fcbb 	bl	800b8f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf7e:	480c      	ldr	r0, [pc, #48]	; (800cfb0 <prvInitialiseTaskLists+0x70>)
 800cf80:	f7fe fcb8 	bl	800b8f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf84:	480b      	ldr	r0, [pc, #44]	; (800cfb4 <prvInitialiseTaskLists+0x74>)
 800cf86:	f7fe fcb5 	bl	800b8f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf8a:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <prvInitialiseTaskLists+0x78>)
 800cf8c:	4a05      	ldr	r2, [pc, #20]	; (800cfa4 <prvInitialiseTaskLists+0x64>)
 800cf8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf90:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <prvInitialiseTaskLists+0x7c>)
 800cf92:	4a05      	ldr	r2, [pc, #20]	; (800cfa8 <prvInitialiseTaskLists+0x68>)
 800cf94:	601a      	str	r2, [r3, #0]
}
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20000e18 	.word	0x20000e18
 800cfa4:	20001278 	.word	0x20001278
 800cfa8:	2000128c 	.word	0x2000128c
 800cfac:	200012a8 	.word	0x200012a8
 800cfb0:	200012bc 	.word	0x200012bc
 800cfb4:	200012d4 	.word	0x200012d4
 800cfb8:	200012a0 	.word	0x200012a0
 800cfbc:	200012a4 	.word	0x200012a4

0800cfc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfc6:	e019      	b.n	800cffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cfc8:	f000 fdd4 	bl	800db74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfcc:	4b10      	ldr	r3, [pc, #64]	; (800d010 <prvCheckTasksWaitingTermination+0x50>)
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fe fd15 	bl	800ba08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cfde:	4b0d      	ldr	r3, [pc, #52]	; (800d014 <prvCheckTasksWaitingTermination+0x54>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	4a0b      	ldr	r2, [pc, #44]	; (800d014 <prvCheckTasksWaitingTermination+0x54>)
 800cfe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cfe8:	4b0b      	ldr	r3, [pc, #44]	; (800d018 <prvCheckTasksWaitingTermination+0x58>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	4a0a      	ldr	r2, [pc, #40]	; (800d018 <prvCheckTasksWaitingTermination+0x58>)
 800cff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cff2:	f000 fdef 	bl	800dbd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f810 	bl	800d01c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cffc:	4b06      	ldr	r3, [pc, #24]	; (800d018 <prvCheckTasksWaitingTermination+0x58>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e1      	bne.n	800cfc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d004:	bf00      	nop
 800d006:	bf00      	nop
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	200012bc 	.word	0x200012bc
 800d014:	200012e8 	.word	0x200012e8
 800d018:	200012d0 	.word	0x200012d0

0800d01c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	3354      	adds	r3, #84	; 0x54
 800d028:	4618      	mov	r0, r3
 800d02a:	f002 fe2b 	bl	800fc84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d034:	2b00      	cmp	r3, #0
 800d036:	d108      	bne.n	800d04a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 ff87 	bl	800df50 <vPortFree>
				vPortFree( pxTCB );
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 ff84 	bl	800df50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d048:	e018      	b.n	800d07c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d050:	2b01      	cmp	r3, #1
 800d052:	d103      	bne.n	800d05c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 ff7b 	bl	800df50 <vPortFree>
	}
 800d05a:	e00f      	b.n	800d07c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d062:	2b02      	cmp	r3, #2
 800d064:	d00a      	beq.n	800d07c <prvDeleteTCB+0x60>
	__asm volatile
 800d066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	60fb      	str	r3, [r7, #12]
}
 800d078:	bf00      	nop
 800d07a:	e7fe      	b.n	800d07a <prvDeleteTCB+0x5e>
	}
 800d07c:	bf00      	nop
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d08a:	4b0c      	ldr	r3, [pc, #48]	; (800d0bc <prvResetNextTaskUnblockTime+0x38>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d104      	bne.n	800d09e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d094:	4b0a      	ldr	r3, [pc, #40]	; (800d0c0 <prvResetNextTaskUnblockTime+0x3c>)
 800d096:	f04f 32ff 	mov.w	r2, #4294967295
 800d09a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d09c:	e008      	b.n	800d0b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d09e:	4b07      	ldr	r3, [pc, #28]	; (800d0bc <prvResetNextTaskUnblockTime+0x38>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	4a04      	ldr	r2, [pc, #16]	; (800d0c0 <prvResetNextTaskUnblockTime+0x3c>)
 800d0ae:	6013      	str	r3, [r2, #0]
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	200012a0 	.word	0x200012a0
 800d0c0:	20001308 	.word	0x20001308

0800d0c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d0ca:	4b0b      	ldr	r3, [pc, #44]	; (800d0f8 <xTaskGetSchedulerState+0x34>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d102      	bne.n	800d0d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	607b      	str	r3, [r7, #4]
 800d0d6:	e008      	b.n	800d0ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0d8:	4b08      	ldr	r3, [pc, #32]	; (800d0fc <xTaskGetSchedulerState+0x38>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	607b      	str	r3, [r7, #4]
 800d0e4:	e001      	b.n	800d0ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d0ea:	687b      	ldr	r3, [r7, #4]
	}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	200012f4 	.word	0x200012f4
 800d0fc:	20001310 	.word	0x20001310

0800d100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d056      	beq.n	800d1c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d116:	4b2e      	ldr	r3, [pc, #184]	; (800d1d0 <xTaskPriorityDisinherit+0xd0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d00a      	beq.n	800d136 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	60fb      	str	r3, [r7, #12]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10a      	bne.n	800d154 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	60bb      	str	r3, [r7, #8]
}
 800d150:	bf00      	nop
 800d152:	e7fe      	b.n	800d152 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d158:	1e5a      	subs	r2, r3, #1
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d166:	429a      	cmp	r2, r3
 800d168:	d02c      	beq.n	800d1c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d128      	bne.n	800d1c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	3304      	adds	r3, #4
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe fc46 	bl	800ba08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d188:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d194:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <xTaskPriorityDisinherit+0xd4>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d903      	bls.n	800d1a4 <xTaskPriorityDisinherit+0xa4>
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a0:	4a0c      	ldr	r2, [pc, #48]	; (800d1d4 <xTaskPriorityDisinherit+0xd4>)
 800d1a2:	6013      	str	r3, [r2, #0]
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	4a09      	ldr	r2, [pc, #36]	; (800d1d8 <xTaskPriorityDisinherit+0xd8>)
 800d1b2:	441a      	add	r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	f7fe fbc7 	bl	800b94e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1c4:	697b      	ldr	r3, [r7, #20]
	}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20000e14 	.word	0x20000e14
 800d1d4:	200012f0 	.word	0x200012f0
 800d1d8:	20000e18 	.word	0x20000e18

0800d1dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1e6:	4b21      	ldr	r3, [pc, #132]	; (800d26c <prvAddCurrentTaskToDelayedList+0x90>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1ec:	4b20      	ldr	r3, [pc, #128]	; (800d270 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fe fc08 	bl	800ba08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1fe:	d10a      	bne.n	800d216 <prvAddCurrentTaskToDelayedList+0x3a>
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d007      	beq.n	800d216 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d206:	4b1a      	ldr	r3, [pc, #104]	; (800d270 <prvAddCurrentTaskToDelayedList+0x94>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3304      	adds	r3, #4
 800d20c:	4619      	mov	r1, r3
 800d20e:	4819      	ldr	r0, [pc, #100]	; (800d274 <prvAddCurrentTaskToDelayedList+0x98>)
 800d210:	f7fe fb9d 	bl	800b94e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d214:	e026      	b.n	800d264 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4413      	add	r3, r2
 800d21c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d21e:	4b14      	ldr	r3, [pc, #80]	; (800d270 <prvAddCurrentTaskToDelayedList+0x94>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d209      	bcs.n	800d242 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d22e:	4b12      	ldr	r3, [pc, #72]	; (800d278 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <prvAddCurrentTaskToDelayedList+0x94>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3304      	adds	r3, #4
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f7fe fbab 	bl	800b996 <vListInsert>
}
 800d240:	e010      	b.n	800d264 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d242:	4b0e      	ldr	r3, [pc, #56]	; (800d27c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <prvAddCurrentTaskToDelayedList+0x94>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3304      	adds	r3, #4
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f7fe fba1 	bl	800b996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d254:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d202      	bcs.n	800d264 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d25e:	4a08      	ldr	r2, [pc, #32]	; (800d280 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	6013      	str	r3, [r2, #0]
}
 800d264:	bf00      	nop
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	200012ec 	.word	0x200012ec
 800d270:	20000e14 	.word	0x20000e14
 800d274:	200012d4 	.word	0x200012d4
 800d278:	200012a4 	.word	0x200012a4
 800d27c:	200012a0 	.word	0x200012a0
 800d280:	20001308 	.word	0x20001308

0800d284 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b08a      	sub	sp, #40	; 0x28
 800d288:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d28e:	f000 fb07 	bl	800d8a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d292:	4b1c      	ldr	r3, [pc, #112]	; (800d304 <xTimerCreateTimerTask+0x80>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d021      	beq.n	800d2de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d29a:	2300      	movs	r3, #0
 800d29c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d2a2:	1d3a      	adds	r2, r7, #4
 800d2a4:	f107 0108 	add.w	r1, r7, #8
 800d2a8:	f107 030c 	add.w	r3, r7, #12
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fb07 	bl	800b8c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	9202      	str	r2, [sp, #8]
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	2302      	movs	r3, #2
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	460a      	mov	r2, r1
 800d2c4:	4910      	ldr	r1, [pc, #64]	; (800d308 <xTimerCreateTimerTask+0x84>)
 800d2c6:	4811      	ldr	r0, [pc, #68]	; (800d30c <xTimerCreateTimerTask+0x88>)
 800d2c8:	f7ff f8b4 	bl	800c434 <xTaskCreateStatic>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	4a10      	ldr	r2, [pc, #64]	; (800d310 <xTimerCreateTimerTask+0x8c>)
 800d2d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d2d2:	4b0f      	ldr	r3, [pc, #60]	; (800d310 <xTimerCreateTimerTask+0x8c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10a      	bne.n	800d2fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e8:	f383 8811 	msr	BASEPRI, r3
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	613b      	str	r3, [r7, #16]
}
 800d2f6:	bf00      	nop
 800d2f8:	e7fe      	b.n	800d2f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d2fa:	697b      	ldr	r3, [r7, #20]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20001344 	.word	0x20001344
 800d308:	080136fc 	.word	0x080136fc
 800d30c:	0800d449 	.word	0x0800d449
 800d310:	20001348 	.word	0x20001348

0800d314 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	; 0x28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d322:	2300      	movs	r3, #0
 800d324:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	623b      	str	r3, [r7, #32]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d342:	4b1a      	ldr	r3, [pc, #104]	; (800d3ac <xTimerGenericCommand+0x98>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d02a      	beq.n	800d3a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2b05      	cmp	r3, #5
 800d35a:	dc18      	bgt.n	800d38e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d35c:	f7ff feb2 	bl	800d0c4 <xTaskGetSchedulerState>
 800d360:	4603      	mov	r3, r0
 800d362:	2b02      	cmp	r3, #2
 800d364:	d109      	bne.n	800d37a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d366:	4b11      	ldr	r3, [pc, #68]	; (800d3ac <xTimerGenericCommand+0x98>)
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	f107 0110 	add.w	r1, r7, #16
 800d36e:	2300      	movs	r3, #0
 800d370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d372:	f7fe fc77 	bl	800bc64 <xQueueGenericSend>
 800d376:	6278      	str	r0, [r7, #36]	; 0x24
 800d378:	e012      	b.n	800d3a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d37a:	4b0c      	ldr	r3, [pc, #48]	; (800d3ac <xTimerGenericCommand+0x98>)
 800d37c:	6818      	ldr	r0, [r3, #0]
 800d37e:	f107 0110 	add.w	r1, r7, #16
 800d382:	2300      	movs	r3, #0
 800d384:	2200      	movs	r2, #0
 800d386:	f7fe fc6d 	bl	800bc64 <xQueueGenericSend>
 800d38a:	6278      	str	r0, [r7, #36]	; 0x24
 800d38c:	e008      	b.n	800d3a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d38e:	4b07      	ldr	r3, [pc, #28]	; (800d3ac <xTimerGenericCommand+0x98>)
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	f107 0110 	add.w	r1, r7, #16
 800d396:	2300      	movs	r3, #0
 800d398:	683a      	ldr	r2, [r7, #0]
 800d39a:	f7fe fd61 	bl	800be60 <xQueueGenericSendFromISR>
 800d39e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3728      	adds	r7, #40	; 0x28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	20001344 	.word	0x20001344

0800d3b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b088      	sub	sp, #32
 800d3b4:	af02      	add	r7, sp, #8
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ba:	4b22      	ldr	r3, [pc, #136]	; (800d444 <prvProcessExpiredTimer+0x94>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fb1d 	bl	800ba08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3d4:	f003 0304 	and.w	r3, r3, #4
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d022      	beq.n	800d422 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	699a      	ldr	r2, [r3, #24]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	18d1      	adds	r1, r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	6978      	ldr	r0, [r7, #20]
 800d3ea:	f000 f8d1 	bl	800d590 <prvInsertTimerInActiveList>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d01f      	beq.n	800d434 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	6978      	ldr	r0, [r7, #20]
 800d400:	f7ff ff88 	bl	800d314 <xTimerGenericCommand>
 800d404:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d113      	bne.n	800d434 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	60fb      	str	r3, [r7, #12]
}
 800d41e:	bf00      	nop
 800d420:	e7fe      	b.n	800d420 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d428:	f023 0301 	bic.w	r3, r3, #1
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	6978      	ldr	r0, [r7, #20]
 800d43a:	4798      	blx	r3
}
 800d43c:	bf00      	nop
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	2000133c 	.word	0x2000133c

0800d448 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d450:	f107 0308 	add.w	r3, r7, #8
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f857 	bl	800d508 <prvGetNextExpireTime>
 800d45a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	4619      	mov	r1, r3
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f000 f803 	bl	800d46c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d466:	f000 f8d5 	bl	800d614 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d46a:	e7f1      	b.n	800d450 <prvTimerTask+0x8>

0800d46c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d476:	f7ff fa39 	bl	800c8ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d47a:	f107 0308 	add.w	r3, r7, #8
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 f866 	bl	800d550 <prvSampleTimeNow>
 800d484:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d130      	bne.n	800d4ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10a      	bne.n	800d4a8 <prvProcessTimerOrBlockTask+0x3c>
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	429a      	cmp	r2, r3
 800d498:	d806      	bhi.n	800d4a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d49a:	f7ff fa35 	bl	800c908 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d49e:	68f9      	ldr	r1, [r7, #12]
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff ff85 	bl	800d3b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d4a6:	e024      	b.n	800d4f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d008      	beq.n	800d4c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4ae:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <prvProcessTimerOrBlockTask+0x90>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d101      	bne.n	800d4bc <prvProcessTimerOrBlockTask+0x50>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e000      	b.n	800d4be <prvProcessTimerOrBlockTask+0x52>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4c0:	4b0f      	ldr	r3, [pc, #60]	; (800d500 <prvProcessTimerOrBlockTask+0x94>)
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	f7fe ff7d 	bl	800c3cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d4d2:	f7ff fa19 	bl	800c908 <xTaskResumeAll>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d10a      	bne.n	800d4f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d4dc:	4b09      	ldr	r3, [pc, #36]	; (800d504 <prvProcessTimerOrBlockTask+0x98>)
 800d4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	f3bf 8f6f 	isb	sy
}
 800d4ec:	e001      	b.n	800d4f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d4ee:	f7ff fa0b 	bl	800c908 <xTaskResumeAll>
}
 800d4f2:	bf00      	nop
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20001340 	.word	0x20001340
 800d500:	20001344 	.word	0x20001344
 800d504:	e000ed04 	.word	0xe000ed04

0800d508 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d510:	4b0e      	ldr	r3, [pc, #56]	; (800d54c <prvGetNextExpireTime+0x44>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d101      	bne.n	800d51e <prvGetNextExpireTime+0x16>
 800d51a:	2201      	movs	r2, #1
 800d51c:	e000      	b.n	800d520 <prvGetNextExpireTime+0x18>
 800d51e:	2200      	movs	r2, #0
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d105      	bne.n	800d538 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d52c:	4b07      	ldr	r3, [pc, #28]	; (800d54c <prvGetNextExpireTime+0x44>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	e001      	b.n	800d53c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d538:	2300      	movs	r3, #0
 800d53a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d53c:	68fb      	ldr	r3, [r7, #12]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	2000133c 	.word	0x2000133c

0800d550 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d558:	f7ff fa74 	bl	800ca44 <xTaskGetTickCount>
 800d55c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d55e:	4b0b      	ldr	r3, [pc, #44]	; (800d58c <prvSampleTimeNow+0x3c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	429a      	cmp	r2, r3
 800d566:	d205      	bcs.n	800d574 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d568:	f000 f936 	bl	800d7d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	601a      	str	r2, [r3, #0]
 800d572:	e002      	b.n	800d57a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d57a:	4a04      	ldr	r2, [pc, #16]	; (800d58c <prvSampleTimeNow+0x3c>)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d580:	68fb      	ldr	r3, [r7, #12]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	2000134c 	.word	0x2000134c

0800d590 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
 800d59c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d812      	bhi.n	800d5dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	1ad2      	subs	r2, r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	699b      	ldr	r3, [r3, #24]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d302      	bcc.n	800d5ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	617b      	str	r3, [r7, #20]
 800d5c8:	e01b      	b.n	800d602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5ca:	4b10      	ldr	r3, [pc, #64]	; (800d60c <prvInsertTimerInActiveList+0x7c>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	f7fe f9de 	bl	800b996 <vListInsert>
 800d5da:	e012      	b.n	800d602 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d206      	bcs.n	800d5f2 <prvInsertTimerInActiveList+0x62>
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d302      	bcc.n	800d5f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	617b      	str	r3, [r7, #20]
 800d5f0:	e007      	b.n	800d602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5f2:	4b07      	ldr	r3, [pc, #28]	; (800d610 <prvInsertTimerInActiveList+0x80>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	f7fe f9ca 	bl	800b996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d602:	697b      	ldr	r3, [r7, #20]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20001340 	.word	0x20001340
 800d610:	2000133c 	.word	0x2000133c

0800d614 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08e      	sub	sp, #56	; 0x38
 800d618:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d61a:	e0ca      	b.n	800d7b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	da18      	bge.n	800d654 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d622:	1d3b      	adds	r3, r7, #4
 800d624:	3304      	adds	r3, #4
 800d626:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10a      	bne.n	800d644 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	61fb      	str	r3, [r7, #28]
}
 800d640:	bf00      	nop
 800d642:	e7fe      	b.n	800d642 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d64a:	6850      	ldr	r0, [r2, #4]
 800d64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d64e:	6892      	ldr	r2, [r2, #8]
 800d650:	4611      	mov	r1, r2
 800d652:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	f2c0 80aa 	blt.w	800d7b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d004      	beq.n	800d672 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66a:	3304      	adds	r3, #4
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fe f9cb 	bl	800ba08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d672:	463b      	mov	r3, r7
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff ff6b 	bl	800d550 <prvSampleTimeNow>
 800d67a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b09      	cmp	r3, #9
 800d680:	f200 8097 	bhi.w	800d7b2 <prvProcessReceivedCommands+0x19e>
 800d684:	a201      	add	r2, pc, #4	; (adr r2, 800d68c <prvProcessReceivedCommands+0x78>)
 800d686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68a:	bf00      	nop
 800d68c:	0800d6b5 	.word	0x0800d6b5
 800d690:	0800d6b5 	.word	0x0800d6b5
 800d694:	0800d6b5 	.word	0x0800d6b5
 800d698:	0800d729 	.word	0x0800d729
 800d69c:	0800d73d 	.word	0x0800d73d
 800d6a0:	0800d787 	.word	0x0800d787
 800d6a4:	0800d6b5 	.word	0x0800d6b5
 800d6a8:	0800d6b5 	.word	0x0800d6b5
 800d6ac:	0800d729 	.word	0x0800d729
 800d6b0:	0800d73d 	.word	0x0800d73d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6ba:	f043 0301 	orr.w	r3, r3, #1
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	18d1      	adds	r1, r2, r3
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d4:	f7ff ff5c 	bl	800d590 <prvInsertTimerInActiveList>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d069      	beq.n	800d7b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6ec:	f003 0304 	and.w	r3, r3, #4
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d05e      	beq.n	800d7b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	441a      	add	r2, r3
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	2300      	movs	r3, #0
 800d702:	2100      	movs	r1, #0
 800d704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d706:	f7ff fe05 	bl	800d314 <xTimerGenericCommand>
 800d70a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d70c:	6a3b      	ldr	r3, [r7, #32]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d14f      	bne.n	800d7b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	61bb      	str	r3, [r7, #24]
}
 800d724:	bf00      	nop
 800d726:	e7fe      	b.n	800d726 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d72e:	f023 0301 	bic.w	r3, r3, #1
 800d732:	b2da      	uxtb	r2, r3
 800d734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d73a:	e03a      	b.n	800d7b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d742:	f043 0301 	orr.w	r3, r3, #1
 800d746:	b2da      	uxtb	r2, r3
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10a      	bne.n	800d772 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d760:	f383 8811 	msr	BASEPRI, r3
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	617b      	str	r3, [r7, #20]
}
 800d76e:	bf00      	nop
 800d770:	e7fe      	b.n	800d770 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	699a      	ldr	r2, [r3, #24]
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	18d1      	adds	r1, r2, r3
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d780:	f7ff ff06 	bl	800d590 <prvInsertTimerInActiveList>
					break;
 800d784:	e015      	b.n	800d7b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78c:	f003 0302 	and.w	r3, r3, #2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d103      	bne.n	800d79c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d796:	f000 fbdb 	bl	800df50 <vPortFree>
 800d79a:	e00a      	b.n	800d7b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a2:	f023 0301 	bic.w	r3, r3, #1
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d7ae:	e000      	b.n	800d7b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d7b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7b2:	4b08      	ldr	r3, [pc, #32]	; (800d7d4 <prvProcessReceivedCommands+0x1c0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	1d39      	adds	r1, r7, #4
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fe fbec 	bl	800bf98 <xQueueReceive>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f47f af2a 	bne.w	800d61c <prvProcessReceivedCommands+0x8>
	}
}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	3730      	adds	r7, #48	; 0x30
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20001344 	.word	0x20001344

0800d7d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7de:	e048      	b.n	800d872 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7e0:	4b2d      	ldr	r3, [pc, #180]	; (800d898 <prvSwitchTimerLists+0xc0>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ea:	4b2b      	ldr	r3, [pc, #172]	; (800d898 <prvSwitchTimerLists+0xc0>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe f905 	bl	800ba08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d80c:	f003 0304 	and.w	r3, r3, #4
 800d810:	2b00      	cmp	r3, #0
 800d812:	d02e      	beq.n	800d872 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	4413      	add	r3, r2
 800d81c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	429a      	cmp	r2, r3
 800d824:	d90e      	bls.n	800d844 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d832:	4b19      	ldr	r3, [pc, #100]	; (800d898 <prvSwitchTimerLists+0xc0>)
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3304      	adds	r3, #4
 800d83a:	4619      	mov	r1, r3
 800d83c:	4610      	mov	r0, r2
 800d83e:	f7fe f8aa 	bl	800b996 <vListInsert>
 800d842:	e016      	b.n	800d872 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d844:	2300      	movs	r3, #0
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	2300      	movs	r3, #0
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	2100      	movs	r1, #0
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fd60 	bl	800d314 <xTimerGenericCommand>
 800d854:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10a      	bne.n	800d872 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	603b      	str	r3, [r7, #0]
}
 800d86e:	bf00      	nop
 800d870:	e7fe      	b.n	800d870 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d872:	4b09      	ldr	r3, [pc, #36]	; (800d898 <prvSwitchTimerLists+0xc0>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1b1      	bne.n	800d7e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d87c:	4b06      	ldr	r3, [pc, #24]	; (800d898 <prvSwitchTimerLists+0xc0>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d882:	4b06      	ldr	r3, [pc, #24]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a04      	ldr	r2, [pc, #16]	; (800d898 <prvSwitchTimerLists+0xc0>)
 800d888:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d88a:	4a04      	ldr	r2, [pc, #16]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	6013      	str	r3, [r2, #0]
}
 800d890:	bf00      	nop
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	2000133c 	.word	0x2000133c
 800d89c:	20001340 	.word	0x20001340

0800d8a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8a6:	f000 f965 	bl	800db74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8aa:	4b15      	ldr	r3, [pc, #84]	; (800d900 <prvCheckForValidListAndQueue+0x60>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d120      	bne.n	800d8f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8b2:	4814      	ldr	r0, [pc, #80]	; (800d904 <prvCheckForValidListAndQueue+0x64>)
 800d8b4:	f7fe f81e 	bl	800b8f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8b8:	4813      	ldr	r0, [pc, #76]	; (800d908 <prvCheckForValidListAndQueue+0x68>)
 800d8ba:	f7fe f81b 	bl	800b8f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8be:	4b13      	ldr	r3, [pc, #76]	; (800d90c <prvCheckForValidListAndQueue+0x6c>)
 800d8c0:	4a10      	ldr	r2, [pc, #64]	; (800d904 <prvCheckForValidListAndQueue+0x64>)
 800d8c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8c4:	4b12      	ldr	r3, [pc, #72]	; (800d910 <prvCheckForValidListAndQueue+0x70>)
 800d8c6:	4a10      	ldr	r2, [pc, #64]	; (800d908 <prvCheckForValidListAndQueue+0x68>)
 800d8c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	4b11      	ldr	r3, [pc, #68]	; (800d914 <prvCheckForValidListAndQueue+0x74>)
 800d8d0:	4a11      	ldr	r2, [pc, #68]	; (800d918 <prvCheckForValidListAndQueue+0x78>)
 800d8d2:	2110      	movs	r1, #16
 800d8d4:	200a      	movs	r0, #10
 800d8d6:	f7fe f929 	bl	800bb2c <xQueueGenericCreateStatic>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	4a08      	ldr	r2, [pc, #32]	; (800d900 <prvCheckForValidListAndQueue+0x60>)
 800d8de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <prvCheckForValidListAndQueue+0x60>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d005      	beq.n	800d8f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d8e8:	4b05      	ldr	r3, [pc, #20]	; (800d900 <prvCheckForValidListAndQueue+0x60>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	490b      	ldr	r1, [pc, #44]	; (800d91c <prvCheckForValidListAndQueue+0x7c>)
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fe fd42 	bl	800c378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8f4:	f000 f96e 	bl	800dbd4 <vPortExitCritical>
}
 800d8f8:	bf00      	nop
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20001344 	.word	0x20001344
 800d904:	20001314 	.word	0x20001314
 800d908:	20001328 	.word	0x20001328
 800d90c:	2000133c 	.word	0x2000133c
 800d910:	20001340 	.word	0x20001340
 800d914:	200013f0 	.word	0x200013f0
 800d918:	20001350 	.word	0x20001350
 800d91c:	08013704 	.word	0x08013704

0800d920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	3b04      	subs	r3, #4
 800d930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	3b04      	subs	r3, #4
 800d93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	f023 0201 	bic.w	r2, r3, #1
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3b04      	subs	r3, #4
 800d94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d950:	4a0c      	ldr	r2, [pc, #48]	; (800d984 <pxPortInitialiseStack+0x64>)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	3b14      	subs	r3, #20
 800d95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3b04      	subs	r3, #4
 800d966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f06f 0202 	mvn.w	r2, #2
 800d96e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	3b20      	subs	r3, #32
 800d974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d976:	68fb      	ldr	r3, [r7, #12]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	0800d989 	.word	0x0800d989

0800d988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d992:	4b12      	ldr	r3, [pc, #72]	; (800d9dc <prvTaskExitError+0x54>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d99a:	d00a      	beq.n	800d9b2 <prvTaskExitError+0x2a>
	__asm volatile
 800d99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	60fb      	str	r3, [r7, #12]
}
 800d9ae:	bf00      	nop
 800d9b0:	e7fe      	b.n	800d9b0 <prvTaskExitError+0x28>
	__asm volatile
 800d9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b6:	f383 8811 	msr	BASEPRI, r3
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	60bb      	str	r3, [r7, #8]
}
 800d9c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9c6:	bf00      	nop
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d0fc      	beq.n	800d9c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9ce:	bf00      	nop
 800d9d0:	bf00      	nop
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	200000a8 	.word	0x200000a8

0800d9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9e0:	4b07      	ldr	r3, [pc, #28]	; (800da00 <pxCurrentTCBConst2>)
 800d9e2:	6819      	ldr	r1, [r3, #0]
 800d9e4:	6808      	ldr	r0, [r1, #0]
 800d9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ea:	f380 8809 	msr	PSP, r0
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f04f 0000 	mov.w	r0, #0
 800d9f6:	f380 8811 	msr	BASEPRI, r0
 800d9fa:	4770      	bx	lr
 800d9fc:	f3af 8000 	nop.w

0800da00 <pxCurrentTCBConst2>:
 800da00:	20000e14 	.word	0x20000e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop

0800da08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da08:	4808      	ldr	r0, [pc, #32]	; (800da2c <prvPortStartFirstTask+0x24>)
 800da0a:	6800      	ldr	r0, [r0, #0]
 800da0c:	6800      	ldr	r0, [r0, #0]
 800da0e:	f380 8808 	msr	MSP, r0
 800da12:	f04f 0000 	mov.w	r0, #0
 800da16:	f380 8814 	msr	CONTROL, r0
 800da1a:	b662      	cpsie	i
 800da1c:	b661      	cpsie	f
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	df00      	svc	0
 800da28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da2a:	bf00      	nop
 800da2c:	e000ed08 	.word	0xe000ed08

0800da30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da36:	4b46      	ldr	r3, [pc, #280]	; (800db50 <xPortStartScheduler+0x120>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a46      	ldr	r2, [pc, #280]	; (800db54 <xPortStartScheduler+0x124>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d10a      	bne.n	800da56 <xPortStartScheduler+0x26>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	613b      	str	r3, [r7, #16]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da56:	4b3e      	ldr	r3, [pc, #248]	; (800db50 <xPortStartScheduler+0x120>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a3f      	ldr	r2, [pc, #252]	; (800db58 <xPortStartScheduler+0x128>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d10a      	bne.n	800da76 <xPortStartScheduler+0x46>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	60fb      	str	r3, [r7, #12]
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da76:	4b39      	ldr	r3, [pc, #228]	; (800db5c <xPortStartScheduler+0x12c>)
 800da78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	22ff      	movs	r2, #255	; 0xff
 800da86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	b2db      	uxtb	r3, r3
 800da94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	4b31      	ldr	r3, [pc, #196]	; (800db60 <xPortStartScheduler+0x130>)
 800da9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da9e:	4b31      	ldr	r3, [pc, #196]	; (800db64 <xPortStartScheduler+0x134>)
 800daa0:	2207      	movs	r2, #7
 800daa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daa4:	e009      	b.n	800daba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800daa6:	4b2f      	ldr	r3, [pc, #188]	; (800db64 <xPortStartScheduler+0x134>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3b01      	subs	r3, #1
 800daac:	4a2d      	ldr	r2, [pc, #180]	; (800db64 <xPortStartScheduler+0x134>)
 800daae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	005b      	lsls	r3, r3, #1
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daba:	78fb      	ldrb	r3, [r7, #3]
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dac2:	2b80      	cmp	r3, #128	; 0x80
 800dac4:	d0ef      	beq.n	800daa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dac6:	4b27      	ldr	r3, [pc, #156]	; (800db64 <xPortStartScheduler+0x134>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f1c3 0307 	rsb	r3, r3, #7
 800dace:	2b04      	cmp	r3, #4
 800dad0:	d00a      	beq.n	800dae8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	60bb      	str	r3, [r7, #8]
}
 800dae4:	bf00      	nop
 800dae6:	e7fe      	b.n	800dae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dae8:	4b1e      	ldr	r3, [pc, #120]	; (800db64 <xPortStartScheduler+0x134>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	021b      	lsls	r3, r3, #8
 800daee:	4a1d      	ldr	r2, [pc, #116]	; (800db64 <xPortStartScheduler+0x134>)
 800daf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800daf2:	4b1c      	ldr	r3, [pc, #112]	; (800db64 <xPortStartScheduler+0x134>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dafa:	4a1a      	ldr	r2, [pc, #104]	; (800db64 <xPortStartScheduler+0x134>)
 800dafc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	b2da      	uxtb	r2, r3
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db06:	4b18      	ldr	r3, [pc, #96]	; (800db68 <xPortStartScheduler+0x138>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a17      	ldr	r2, [pc, #92]	; (800db68 <xPortStartScheduler+0x138>)
 800db0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db12:	4b15      	ldr	r3, [pc, #84]	; (800db68 <xPortStartScheduler+0x138>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a14      	ldr	r2, [pc, #80]	; (800db68 <xPortStartScheduler+0x138>)
 800db18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db1e:	f000 f8dd 	bl	800dcdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db22:	4b12      	ldr	r3, [pc, #72]	; (800db6c <xPortStartScheduler+0x13c>)
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db28:	f000 f8fc 	bl	800dd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db2c:	4b10      	ldr	r3, [pc, #64]	; (800db70 <xPortStartScheduler+0x140>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a0f      	ldr	r2, [pc, #60]	; (800db70 <xPortStartScheduler+0x140>)
 800db32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db38:	f7ff ff66 	bl	800da08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db3c:	f7ff f84c 	bl	800cbd8 <vTaskSwitchContext>
	prvTaskExitError();
 800db40:	f7ff ff22 	bl	800d988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	e000ed00 	.word	0xe000ed00
 800db54:	410fc271 	.word	0x410fc271
 800db58:	410fc270 	.word	0x410fc270
 800db5c:	e000e400 	.word	0xe000e400
 800db60:	20001440 	.word	0x20001440
 800db64:	20001444 	.word	0x20001444
 800db68:	e000ed20 	.word	0xe000ed20
 800db6c:	200000a8 	.word	0x200000a8
 800db70:	e000ef34 	.word	0xe000ef34

0800db74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	607b      	str	r3, [r7, #4]
}
 800db8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db8e:	4b0f      	ldr	r3, [pc, #60]	; (800dbcc <vPortEnterCritical+0x58>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3301      	adds	r3, #1
 800db94:	4a0d      	ldr	r2, [pc, #52]	; (800dbcc <vPortEnterCritical+0x58>)
 800db96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db98:	4b0c      	ldr	r3, [pc, #48]	; (800dbcc <vPortEnterCritical+0x58>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d10f      	bne.n	800dbc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dba0:	4b0b      	ldr	r3, [pc, #44]	; (800dbd0 <vPortEnterCritical+0x5c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00a      	beq.n	800dbc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	603b      	str	r3, [r7, #0]
}
 800dbbc:	bf00      	nop
 800dbbe:	e7fe      	b.n	800dbbe <vPortEnterCritical+0x4a>
	}
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr
 800dbcc:	200000a8 	.word	0x200000a8
 800dbd0:	e000ed04 	.word	0xe000ed04

0800dbd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbda:	4b12      	ldr	r3, [pc, #72]	; (800dc24 <vPortExitCritical+0x50>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10a      	bne.n	800dbf8 <vPortExitCritical+0x24>
	__asm volatile
 800dbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	607b      	str	r3, [r7, #4]
}
 800dbf4:	bf00      	nop
 800dbf6:	e7fe      	b.n	800dbf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dbf8:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <vPortExitCritical+0x50>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	4a09      	ldr	r2, [pc, #36]	; (800dc24 <vPortExitCritical+0x50>)
 800dc00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc02:	4b08      	ldr	r3, [pc, #32]	; (800dc24 <vPortExitCritical+0x50>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d105      	bne.n	800dc16 <vPortExitCritical+0x42>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	f383 8811 	msr	BASEPRI, r3
}
 800dc14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	200000a8 	.word	0x200000a8
	...

0800dc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc30:	f3ef 8009 	mrs	r0, PSP
 800dc34:	f3bf 8f6f 	isb	sy
 800dc38:	4b15      	ldr	r3, [pc, #84]	; (800dc90 <pxCurrentTCBConst>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	f01e 0f10 	tst.w	lr, #16
 800dc40:	bf08      	it	eq
 800dc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4a:	6010      	str	r0, [r2, #0]
 800dc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc54:	f380 8811 	msr	BASEPRI, r0
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f7fe ffba 	bl	800cbd8 <vTaskSwitchContext>
 800dc64:	f04f 0000 	mov.w	r0, #0
 800dc68:	f380 8811 	msr	BASEPRI, r0
 800dc6c:	bc09      	pop	{r0, r3}
 800dc6e:	6819      	ldr	r1, [r3, #0]
 800dc70:	6808      	ldr	r0, [r1, #0]
 800dc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc76:	f01e 0f10 	tst.w	lr, #16
 800dc7a:	bf08      	it	eq
 800dc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc80:	f380 8809 	msr	PSP, r0
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	f3af 8000 	nop.w

0800dc90 <pxCurrentTCBConst>:
 800dc90:	20000e14 	.word	0x20000e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc94:	bf00      	nop
 800dc96:	bf00      	nop

0800dc98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	607b      	str	r3, [r7, #4]
}
 800dcb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcb2:	f7fe fed7 	bl	800ca64 <xTaskIncrementTick>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcbc:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <xPortSysTickHandler+0x40>)
 800dcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	f383 8811 	msr	BASEPRI, r3
}
 800dcce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	e000ed04 	.word	0xe000ed04

0800dcdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcdc:	b480      	push	{r7}
 800dcde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dce0:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <vPortSetupTimerInterrupt+0x34>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dce6:	4b0b      	ldr	r3, [pc, #44]	; (800dd14 <vPortSetupTimerInterrupt+0x38>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcec:	4b0a      	ldr	r3, [pc, #40]	; (800dd18 <vPortSetupTimerInterrupt+0x3c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a0a      	ldr	r2, [pc, #40]	; (800dd1c <vPortSetupTimerInterrupt+0x40>)
 800dcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf6:	099b      	lsrs	r3, r3, #6
 800dcf8:	4a09      	ldr	r2, [pc, #36]	; (800dd20 <vPortSetupTimerInterrupt+0x44>)
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dcfe:	4b04      	ldr	r3, [pc, #16]	; (800dd10 <vPortSetupTimerInterrupt+0x34>)
 800dd00:	2207      	movs	r2, #7
 800dd02:	601a      	str	r2, [r3, #0]
}
 800dd04:	bf00      	nop
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	e000e010 	.word	0xe000e010
 800dd14:	e000e018 	.word	0xe000e018
 800dd18:	20000010 	.word	0x20000010
 800dd1c:	10624dd3 	.word	0x10624dd3
 800dd20:	e000e014 	.word	0xe000e014

0800dd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd34 <vPortEnableVFP+0x10>
 800dd28:	6801      	ldr	r1, [r0, #0]
 800dd2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd2e:	6001      	str	r1, [r0, #0]
 800dd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd32:	bf00      	nop
 800dd34:	e000ed88 	.word	0xe000ed88

0800dd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd3e:	f3ef 8305 	mrs	r3, IPSR
 800dd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b0f      	cmp	r3, #15
 800dd48:	d914      	bls.n	800dd74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd4a:	4a17      	ldr	r2, [pc, #92]	; (800dda8 <vPortValidateInterruptPriority+0x70>)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4413      	add	r3, r2
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd54:	4b15      	ldr	r3, [pc, #84]	; (800ddac <vPortValidateInterruptPriority+0x74>)
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	7afa      	ldrb	r2, [r7, #11]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d20a      	bcs.n	800dd74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	607b      	str	r3, [r7, #4]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd74:	4b0e      	ldr	r3, [pc, #56]	; (800ddb0 <vPortValidateInterruptPriority+0x78>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd7c:	4b0d      	ldr	r3, [pc, #52]	; (800ddb4 <vPortValidateInterruptPriority+0x7c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d90a      	bls.n	800dd9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd88:	f383 8811 	msr	BASEPRI, r3
 800dd8c:	f3bf 8f6f 	isb	sy
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	603b      	str	r3, [r7, #0]
}
 800dd96:	bf00      	nop
 800dd98:	e7fe      	b.n	800dd98 <vPortValidateInterruptPriority+0x60>
	}
 800dd9a:	bf00      	nop
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	e000e3f0 	.word	0xe000e3f0
 800ddac:	20001440 	.word	0x20001440
 800ddb0:	e000ed0c 	.word	0xe000ed0c
 800ddb4:	20001444 	.word	0x20001444

0800ddb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ddc4:	f7fe fd92 	bl	800c8ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ddc8:	4b5b      	ldr	r3, [pc, #364]	; (800df38 <pvPortMalloc+0x180>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ddd0:	f000 f920 	bl	800e014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ddd4:	4b59      	ldr	r3, [pc, #356]	; (800df3c <pvPortMalloc+0x184>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4013      	ands	r3, r2
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f040 8093 	bne.w	800df08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d01d      	beq.n	800de24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dde8:	2208      	movs	r2, #8
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4413      	add	r3, r2
 800ddee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f003 0307 	and.w	r3, r3, #7
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d014      	beq.n	800de24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f023 0307 	bic.w	r3, r3, #7
 800de00:	3308      	adds	r3, #8
 800de02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f003 0307 	and.w	r3, r3, #7
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <pvPortMalloc+0x6c>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	617b      	str	r3, [r7, #20]
}
 800de20:	bf00      	nop
 800de22:	e7fe      	b.n	800de22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d06e      	beq.n	800df08 <pvPortMalloc+0x150>
 800de2a:	4b45      	ldr	r3, [pc, #276]	; (800df40 <pvPortMalloc+0x188>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	429a      	cmp	r2, r3
 800de32:	d869      	bhi.n	800df08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de34:	4b43      	ldr	r3, [pc, #268]	; (800df44 <pvPortMalloc+0x18c>)
 800de36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de38:	4b42      	ldr	r3, [pc, #264]	; (800df44 <pvPortMalloc+0x18c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de3e:	e004      	b.n	800de4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	429a      	cmp	r2, r3
 800de52:	d903      	bls.n	800de5c <pvPortMalloc+0xa4>
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1f1      	bne.n	800de40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de5c:	4b36      	ldr	r3, [pc, #216]	; (800df38 <pvPortMalloc+0x180>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de62:	429a      	cmp	r2, r3
 800de64:	d050      	beq.n	800df08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2208      	movs	r2, #8
 800de6c:	4413      	add	r3, r2
 800de6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	685a      	ldr	r2, [r3, #4]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	1ad2      	subs	r2, r2, r3
 800de80:	2308      	movs	r3, #8
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	429a      	cmp	r2, r3
 800de86:	d91f      	bls.n	800dec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4413      	add	r3, r2
 800de8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	f003 0307 	and.w	r3, r3, #7
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00a      	beq.n	800deb0 <pvPortMalloc+0xf8>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	613b      	str	r3, [r7, #16]
}
 800deac:	bf00      	nop
 800deae:	e7fe      	b.n	800deae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	1ad2      	subs	r2, r2, r3
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dec2:	69b8      	ldr	r0, [r7, #24]
 800dec4:	f000 f908 	bl	800e0d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dec8:	4b1d      	ldr	r3, [pc, #116]	; (800df40 <pvPortMalloc+0x188>)
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	4a1b      	ldr	r2, [pc, #108]	; (800df40 <pvPortMalloc+0x188>)
 800ded4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ded6:	4b1a      	ldr	r3, [pc, #104]	; (800df40 <pvPortMalloc+0x188>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	4b1b      	ldr	r3, [pc, #108]	; (800df48 <pvPortMalloc+0x190>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d203      	bcs.n	800deea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dee2:	4b17      	ldr	r3, [pc, #92]	; (800df40 <pvPortMalloc+0x188>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a18      	ldr	r2, [pc, #96]	; (800df48 <pvPortMalloc+0x190>)
 800dee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	685a      	ldr	r2, [r3, #4]
 800deee:	4b13      	ldr	r3, [pc, #76]	; (800df3c <pvPortMalloc+0x184>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	431a      	orrs	r2, r3
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defa:	2200      	movs	r2, #0
 800defc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800defe:	4b13      	ldr	r3, [pc, #76]	; (800df4c <pvPortMalloc+0x194>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	3301      	adds	r3, #1
 800df04:	4a11      	ldr	r2, [pc, #68]	; (800df4c <pvPortMalloc+0x194>)
 800df06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df08:	f7fe fcfe 	bl	800c908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	f003 0307 	and.w	r3, r3, #7
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00a      	beq.n	800df2c <pvPortMalloc+0x174>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	60fb      	str	r3, [r7, #12]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <pvPortMalloc+0x172>
	return pvReturn;
 800df2c:	69fb      	ldr	r3, [r7, #28]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3728      	adds	r7, #40	; 0x28
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	20005050 	.word	0x20005050
 800df3c:	20005064 	.word	0x20005064
 800df40:	20005054 	.word	0x20005054
 800df44:	20005048 	.word	0x20005048
 800df48:	20005058 	.word	0x20005058
 800df4c:	2000505c 	.word	0x2000505c

0800df50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d04d      	beq.n	800dffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df62:	2308      	movs	r3, #8
 800df64:	425b      	negs	r3, r3
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	4413      	add	r3, r2
 800df6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	685a      	ldr	r2, [r3, #4]
 800df74:	4b24      	ldr	r3, [pc, #144]	; (800e008 <vPortFree+0xb8>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4013      	ands	r3, r2
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10a      	bne.n	800df94 <vPortFree+0x44>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	60fb      	str	r3, [r7, #12]
}
 800df90:	bf00      	nop
 800df92:	e7fe      	b.n	800df92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00a      	beq.n	800dfb2 <vPortFree+0x62>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	60bb      	str	r3, [r7, #8]
}
 800dfae:	bf00      	nop
 800dfb0:	e7fe      	b.n	800dfb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	4b14      	ldr	r3, [pc, #80]	; (800e008 <vPortFree+0xb8>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4013      	ands	r3, r2
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01e      	beq.n	800dffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d11a      	bne.n	800dffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	4b0e      	ldr	r3, [pc, #56]	; (800e008 <vPortFree+0xb8>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	43db      	mvns	r3, r3
 800dfd2:	401a      	ands	r2, r3
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dfd8:	f7fe fc88 	bl	800c8ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	4b0a      	ldr	r3, [pc, #40]	; (800e00c <vPortFree+0xbc>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	4a09      	ldr	r2, [pc, #36]	; (800e00c <vPortFree+0xbc>)
 800dfe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dfea:	6938      	ldr	r0, [r7, #16]
 800dfec:	f000 f874 	bl	800e0d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dff0:	4b07      	ldr	r3, [pc, #28]	; (800e010 <vPortFree+0xc0>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	4a06      	ldr	r2, [pc, #24]	; (800e010 <vPortFree+0xc0>)
 800dff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dffa:	f7fe fc85 	bl	800c908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dffe:	bf00      	nop
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20005064 	.word	0x20005064
 800e00c:	20005054 	.word	0x20005054
 800e010:	20005060 	.word	0x20005060

0800e014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e01a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e01e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e020:	4b27      	ldr	r3, [pc, #156]	; (800e0c0 <prvHeapInit+0xac>)
 800e022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f003 0307 	and.w	r3, r3, #7
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00c      	beq.n	800e048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3307      	adds	r3, #7
 800e032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f023 0307 	bic.w	r3, r3, #7
 800e03a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	4a1f      	ldr	r2, [pc, #124]	; (800e0c0 <prvHeapInit+0xac>)
 800e044:	4413      	add	r3, r2
 800e046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e04c:	4a1d      	ldr	r2, [pc, #116]	; (800e0c4 <prvHeapInit+0xb0>)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e052:	4b1c      	ldr	r3, [pc, #112]	; (800e0c4 <prvHeapInit+0xb0>)
 800e054:	2200      	movs	r2, #0
 800e056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	4413      	add	r3, r2
 800e05e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e060:	2208      	movs	r2, #8
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	1a9b      	subs	r3, r3, r2
 800e066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f023 0307 	bic.w	r3, r3, #7
 800e06e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	4a15      	ldr	r2, [pc, #84]	; (800e0c8 <prvHeapInit+0xb4>)
 800e074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e076:	4b14      	ldr	r3, [pc, #80]	; (800e0c8 <prvHeapInit+0xb4>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2200      	movs	r2, #0
 800e07c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e07e:	4b12      	ldr	r3, [pc, #72]	; (800e0c8 <prvHeapInit+0xb4>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	1ad2      	subs	r2, r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e094:	4b0c      	ldr	r3, [pc, #48]	; (800e0c8 <prvHeapInit+0xb4>)
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	4a0a      	ldr	r2, [pc, #40]	; (800e0cc <prvHeapInit+0xb8>)
 800e0a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	4a09      	ldr	r2, [pc, #36]	; (800e0d0 <prvHeapInit+0xbc>)
 800e0aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <prvHeapInit+0xc0>)
 800e0ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0b2:	601a      	str	r2, [r3, #0]
}
 800e0b4:	bf00      	nop
 800e0b6:	3714      	adds	r7, #20
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr
 800e0c0:	20001448 	.word	0x20001448
 800e0c4:	20005048 	.word	0x20005048
 800e0c8:	20005050 	.word	0x20005050
 800e0cc:	20005058 	.word	0x20005058
 800e0d0:	20005054 	.word	0x20005054
 800e0d4:	20005064 	.word	0x20005064

0800e0d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e0e0:	4b28      	ldr	r3, [pc, #160]	; (800e184 <prvInsertBlockIntoFreeList+0xac>)
 800e0e2:	60fb      	str	r3, [r7, #12]
 800e0e4:	e002      	b.n	800e0ec <prvInsertBlockIntoFreeList+0x14>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d8f7      	bhi.n	800e0e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	4413      	add	r3, r2
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	429a      	cmp	r2, r3
 800e106:	d108      	bne.n	800e11a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	685a      	ldr	r2, [r3, #4]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	441a      	add	r2, r3
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	441a      	add	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d118      	bne.n	800e160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	4b15      	ldr	r3, [pc, #84]	; (800e188 <prvInsertBlockIntoFreeList+0xb0>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	429a      	cmp	r2, r3
 800e138:	d00d      	beq.n	800e156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	441a      	add	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	e008      	b.n	800e168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e156:	4b0c      	ldr	r3, [pc, #48]	; (800e188 <prvInsertBlockIntoFreeList+0xb0>)
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e003      	b.n	800e168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d002      	beq.n	800e176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e176:	bf00      	nop
 800e178:	3714      	adds	r7, #20
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	20005048 	.word	0x20005048
 800e188:	20005050 	.word	0x20005050

0800e18c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e190:	2200      	movs	r2, #0
 800e192:	4912      	ldr	r1, [pc, #72]	; (800e1dc <MX_USB_DEVICE_Init+0x50>)
 800e194:	4812      	ldr	r0, [pc, #72]	; (800e1e0 <MX_USB_DEVICE_Init+0x54>)
 800e196:	f7fb ff4b 	bl	800a030 <USBD_Init>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e1a0:	f7f3 fcca 	bl	8001b38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e1a4:	490f      	ldr	r1, [pc, #60]	; (800e1e4 <MX_USB_DEVICE_Init+0x58>)
 800e1a6:	480e      	ldr	r0, [pc, #56]	; (800e1e0 <MX_USB_DEVICE_Init+0x54>)
 800e1a8:	f7fb ff72 	bl	800a090 <USBD_RegisterClass>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e1b2:	f7f3 fcc1 	bl	8001b38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e1b6:	490c      	ldr	r1, [pc, #48]	; (800e1e8 <MX_USB_DEVICE_Init+0x5c>)
 800e1b8:	4809      	ldr	r0, [pc, #36]	; (800e1e0 <MX_USB_DEVICE_Init+0x54>)
 800e1ba:	f7fb fe63 	bl	8009e84 <USBD_CDC_RegisterInterface>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d001      	beq.n	800e1c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e1c4:	f7f3 fcb8 	bl	8001b38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e1c8:	4805      	ldr	r0, [pc, #20]	; (800e1e0 <MX_USB_DEVICE_Init+0x54>)
 800e1ca:	f7fb ff97 	bl	800a0fc <USBD_Start>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e1d4:	f7f3 fcb0 	bl	8001b38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e1d8:	bf00      	nop
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	200000c0 	.word	0x200000c0
 800e1e0:	20005068 	.word	0x20005068
 800e1e4:	20000028 	.word	0x20000028
 800e1e8:	200000ac 	.word	0x200000ac

0800e1ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	4905      	ldr	r1, [pc, #20]	; (800e208 <CDC_Init_FS+0x1c>)
 800e1f4:	4805      	ldr	r0, [pc, #20]	; (800e20c <CDC_Init_FS+0x20>)
 800e1f6:	f7fb fe5f 	bl	8009eb8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e1fa:	4905      	ldr	r1, [pc, #20]	; (800e210 <CDC_Init_FS+0x24>)
 800e1fc:	4803      	ldr	r0, [pc, #12]	; (800e20c <CDC_Init_FS+0x20>)
 800e1fe:	f7fb fe7d 	bl	8009efc <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800e202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e204:	4618      	mov	r0, r3
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20005b44 	.word	0x20005b44
 800e20c:	20005068 	.word	0x20005068
 800e210:	20005344 	.word	0x20005344

0800e214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e214:	b480      	push	{r7}
 800e216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800e218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	4603      	mov	r3, r0
 800e22c:	6039      	str	r1, [r7, #0]
 800e22e:	71fb      	strb	r3, [r7, #7]
 800e230:	4613      	mov	r3, r2
 800e232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800e234:	79fb      	ldrb	r3, [r7, #7]
 800e236:	2b23      	cmp	r3, #35	; 0x23
 800e238:	d84a      	bhi.n	800e2d0 <CDC_Control_FS+0xac>
 800e23a:	a201      	add	r2, pc, #4	; (adr r2, 800e240 <CDC_Control_FS+0x1c>)
 800e23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e240:	0800e2d1 	.word	0x0800e2d1
 800e244:	0800e2d1 	.word	0x0800e2d1
 800e248:	0800e2d1 	.word	0x0800e2d1
 800e24c:	0800e2d1 	.word	0x0800e2d1
 800e250:	0800e2d1 	.word	0x0800e2d1
 800e254:	0800e2d1 	.word	0x0800e2d1
 800e258:	0800e2d1 	.word	0x0800e2d1
 800e25c:	0800e2d1 	.word	0x0800e2d1
 800e260:	0800e2d1 	.word	0x0800e2d1
 800e264:	0800e2d1 	.word	0x0800e2d1
 800e268:	0800e2d1 	.word	0x0800e2d1
 800e26c:	0800e2d1 	.word	0x0800e2d1
 800e270:	0800e2d1 	.word	0x0800e2d1
 800e274:	0800e2d1 	.word	0x0800e2d1
 800e278:	0800e2d1 	.word	0x0800e2d1
 800e27c:	0800e2d1 	.word	0x0800e2d1
 800e280:	0800e2d1 	.word	0x0800e2d1
 800e284:	0800e2d1 	.word	0x0800e2d1
 800e288:	0800e2d1 	.word	0x0800e2d1
 800e28c:	0800e2d1 	.word	0x0800e2d1
 800e290:	0800e2d1 	.word	0x0800e2d1
 800e294:	0800e2d1 	.word	0x0800e2d1
 800e298:	0800e2d1 	.word	0x0800e2d1
 800e29c:	0800e2d1 	.word	0x0800e2d1
 800e2a0:	0800e2d1 	.word	0x0800e2d1
 800e2a4:	0800e2d1 	.word	0x0800e2d1
 800e2a8:	0800e2d1 	.word	0x0800e2d1
 800e2ac:	0800e2d1 	.word	0x0800e2d1
 800e2b0:	0800e2d1 	.word	0x0800e2d1
 800e2b4:	0800e2d1 	.word	0x0800e2d1
 800e2b8:	0800e2d1 	.word	0x0800e2d1
 800e2bc:	0800e2d1 	.word	0x0800e2d1
 800e2c0:	0800e2d1 	.word	0x0800e2d1
 800e2c4:	0800e2d1 	.word	0x0800e2d1
 800e2c8:	0800e2d1 	.word	0x0800e2d1
 800e2cc:	0800e2d1 	.word	0x0800e2d1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800e2d0:	bf00      	nop
	}

	return (USBD_OK);
 800e2d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e2ea:	6879      	ldr	r1, [r7, #4]
 800e2ec:	480f      	ldr	r0, [pc, #60]	; (800e32c <CDC_Receive_FS+0x4c>)
 800e2ee:	f7fb fe05 	bl	8009efc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e2f2:	480e      	ldr	r0, [pc, #56]	; (800e32c <CDC_Receive_FS+0x4c>)
 800e2f4:	f7fb fe66 	bl	8009fc4 <USBD_CDC_ReceivePacket>

	memset(USB_Buff, '\0', 64);  // clear the buffer
 800e2f8:	2240      	movs	r2, #64	; 0x40
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	480c      	ldr	r0, [pc, #48]	; (800e330 <CDC_Receive_FS+0x50>)
 800e2fe:	f000 fd9c 	bl	800ee3a <memset>
	uint8_t len = (uint8_t) *Len;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	73fb      	strb	r3, [r7, #15]
	memcpy(USB_Buff, Buf, len);  // copy the data to the buffer
 800e308:	7bfb      	ldrb	r3, [r7, #15]
 800e30a:	461a      	mov	r2, r3
 800e30c:	6879      	ldr	r1, [r7, #4]
 800e30e:	4808      	ldr	r0, [pc, #32]	; (800e330 <CDC_Receive_FS+0x50>)
 800e310:	f000 fd85 	bl	800ee1e <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800e314:	7bfb      	ldrb	r3, [r7, #15]
 800e316:	461a      	mov	r2, r3
 800e318:	2100      	movs	r1, #0
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 fd8d 	bl	800ee3a <memset>

	return (USBD_OK);
 800e320:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	20005068 	.word	0x20005068
 800e330:	200005b8 	.word	0x200005b8

0800e334 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 800e344:	4b0d      	ldr	r3, [pc, #52]	; (800e37c <CDC_Transmit_FS+0x48>)
 800e346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e34a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800e356:	2301      	movs	r3, #1
 800e358:	e00b      	b.n	800e372 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e35a:	887b      	ldrh	r3, [r7, #2]
 800e35c:	461a      	mov	r2, r3
 800e35e:	6879      	ldr	r1, [r7, #4]
 800e360:	4806      	ldr	r0, [pc, #24]	; (800e37c <CDC_Transmit_FS+0x48>)
 800e362:	f7fb fda9 	bl	8009eb8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e366:	4805      	ldr	r0, [pc, #20]	; (800e37c <CDC_Transmit_FS+0x48>)
 800e368:	f7fb fde6 	bl	8009f38 <USBD_CDC_TransmitPacket>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e370:	7bfb      	ldrb	r3, [r7, #15]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	20005068 	.word	0x20005068

0800e380 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e380:	b480      	push	{r7}
 800e382:	b087      	sub	sp, #28
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	4613      	mov	r3, r2
 800e38c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e396:	4618      	mov	r0, r3
 800e398:	371c      	adds	r7, #28
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
	...

0800e3a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	6039      	str	r1, [r7, #0]
 800e3ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	2212      	movs	r2, #18
 800e3b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e3b6:	4b03      	ldr	r3, [pc, #12]	; (800e3c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr
 800e3c4:	200000dc 	.word	0x200000dc

0800e3c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	6039      	str	r1, [r7, #0]
 800e3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	2204      	movs	r2, #4
 800e3d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e3da:	4b03      	ldr	r3, [pc, #12]	; (800e3e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr
 800e3e8:	200000f0 	.word	0x200000f0

0800e3ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	6039      	str	r1, [r7, #0]
 800e3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3f8:	79fb      	ldrb	r3, [r7, #7]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d105      	bne.n	800e40a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	4907      	ldr	r1, [pc, #28]	; (800e420 <USBD_FS_ProductStrDescriptor+0x34>)
 800e402:	4808      	ldr	r0, [pc, #32]	; (800e424 <USBD_FS_ProductStrDescriptor+0x38>)
 800e404:	f7fd f826 	bl	800b454 <USBD_GetString>
 800e408:	e004      	b.n	800e414 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e40a:	683a      	ldr	r2, [r7, #0]
 800e40c:	4904      	ldr	r1, [pc, #16]	; (800e420 <USBD_FS_ProductStrDescriptor+0x34>)
 800e40e:	4805      	ldr	r0, [pc, #20]	; (800e424 <USBD_FS_ProductStrDescriptor+0x38>)
 800e410:	f7fd f820 	bl	800b454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e414:	4b02      	ldr	r3, [pc, #8]	; (800e420 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e416:	4618      	mov	r0, r3
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	20006344 	.word	0x20006344
 800e424:	0801370c 	.word	0x0801370c

0800e428 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	4603      	mov	r3, r0
 800e430:	6039      	str	r1, [r7, #0]
 800e432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e434:	683a      	ldr	r2, [r7, #0]
 800e436:	4904      	ldr	r1, [pc, #16]	; (800e448 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e438:	4804      	ldr	r0, [pc, #16]	; (800e44c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e43a:	f7fd f80b 	bl	800b454 <USBD_GetString>
  return USBD_StrDesc;
 800e43e:	4b02      	ldr	r3, [pc, #8]	; (800e448 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	20006344 	.word	0x20006344
 800e44c:	08013718 	.word	0x08013718

0800e450 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	4603      	mov	r3, r0
 800e458:	6039      	str	r1, [r7, #0]
 800e45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	221a      	movs	r2, #26
 800e460:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e462:	f000 f843 	bl	800e4ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e466:	4b02      	ldr	r3, [pc, #8]	; (800e470 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	200000f4 	.word	0x200000f4

0800e474 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	4603      	mov	r3, r0
 800e47c:	6039      	str	r1, [r7, #0]
 800e47e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e480:	79fb      	ldrb	r3, [r7, #7]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d105      	bne.n	800e492 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	4907      	ldr	r1, [pc, #28]	; (800e4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e48a:	4808      	ldr	r0, [pc, #32]	; (800e4ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e48c:	f7fc ffe2 	bl	800b454 <USBD_GetString>
 800e490:	e004      	b.n	800e49c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	4904      	ldr	r1, [pc, #16]	; (800e4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e496:	4805      	ldr	r0, [pc, #20]	; (800e4ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e498:	f7fc ffdc 	bl	800b454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e49c:	4b02      	ldr	r3, [pc, #8]	; (800e4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20006344 	.word	0x20006344
 800e4ac:	0801372c 	.word	0x0801372c

0800e4b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	6039      	str	r1, [r7, #0]
 800e4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d105      	bne.n	800e4ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4c2:	683a      	ldr	r2, [r7, #0]
 800e4c4:	4907      	ldr	r1, [pc, #28]	; (800e4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4c6:	4808      	ldr	r0, [pc, #32]	; (800e4e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4c8:	f7fc ffc4 	bl	800b454 <USBD_GetString>
 800e4cc:	e004      	b.n	800e4d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4ce:	683a      	ldr	r2, [r7, #0]
 800e4d0:	4904      	ldr	r1, [pc, #16]	; (800e4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4d2:	4805      	ldr	r0, [pc, #20]	; (800e4e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4d4:	f7fc ffbe 	bl	800b454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4d8:	4b02      	ldr	r3, [pc, #8]	; (800e4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20006344 	.word	0x20006344
 800e4e8:	08013738 	.word	0x08013738

0800e4ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4f2:	4b0f      	ldr	r3, [pc, #60]	; (800e530 <Get_SerialNum+0x44>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e4f8:	4b0e      	ldr	r3, [pc, #56]	; (800e534 <Get_SerialNum+0x48>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e4fe:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <Get_SerialNum+0x4c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4413      	add	r3, r2
 800e50a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d009      	beq.n	800e526 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e512:	2208      	movs	r2, #8
 800e514:	4909      	ldr	r1, [pc, #36]	; (800e53c <Get_SerialNum+0x50>)
 800e516:	68f8      	ldr	r0, [r7, #12]
 800e518:	f000 f814 	bl	800e544 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e51c:	2204      	movs	r2, #4
 800e51e:	4908      	ldr	r1, [pc, #32]	; (800e540 <Get_SerialNum+0x54>)
 800e520:	68b8      	ldr	r0, [r7, #8]
 800e522:	f000 f80f 	bl	800e544 <IntToUnicode>
  }
}
 800e526:	bf00      	nop
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	1fff7a10 	.word	0x1fff7a10
 800e534:	1fff7a14 	.word	0x1fff7a14
 800e538:	1fff7a18 	.word	0x1fff7a18
 800e53c:	200000f6 	.word	0x200000f6
 800e540:	20000106 	.word	0x20000106

0800e544 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e544:	b480      	push	{r7}
 800e546:	b087      	sub	sp, #28
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	4613      	mov	r3, r2
 800e550:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e556:	2300      	movs	r3, #0
 800e558:	75fb      	strb	r3, [r7, #23]
 800e55a:	e027      	b.n	800e5ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	0f1b      	lsrs	r3, r3, #28
 800e560:	2b09      	cmp	r3, #9
 800e562:	d80b      	bhi.n	800e57c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	0f1b      	lsrs	r3, r3, #28
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	005b      	lsls	r3, r3, #1
 800e56e:	4619      	mov	r1, r3
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	440b      	add	r3, r1
 800e574:	3230      	adds	r2, #48	; 0x30
 800e576:	b2d2      	uxtb	r2, r2
 800e578:	701a      	strb	r2, [r3, #0]
 800e57a:	e00a      	b.n	800e592 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	0f1b      	lsrs	r3, r3, #28
 800e580:	b2da      	uxtb	r2, r3
 800e582:	7dfb      	ldrb	r3, [r7, #23]
 800e584:	005b      	lsls	r3, r3, #1
 800e586:	4619      	mov	r1, r3
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	440b      	add	r3, r1
 800e58c:	3237      	adds	r2, #55	; 0x37
 800e58e:	b2d2      	uxtb	r2, r2
 800e590:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	011b      	lsls	r3, r3, #4
 800e596:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e598:	7dfb      	ldrb	r3, [r7, #23]
 800e59a:	005b      	lsls	r3, r3, #1
 800e59c:	3301      	adds	r3, #1
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e5a6:	7dfb      	ldrb	r3, [r7, #23]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	75fb      	strb	r3, [r7, #23]
 800e5ac:	7dfa      	ldrb	r2, [r7, #23]
 800e5ae:	79fb      	ldrb	r3, [r7, #7]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d3d3      	bcc.n	800e55c <IntToUnicode+0x18>
  }
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop
 800e5b8:	371c      	adds	r7, #28
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr
	...

0800e5c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b08a      	sub	sp, #40	; 0x28
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5cc:	f107 0314 	add.w	r3, r7, #20
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	605a      	str	r2, [r3, #4]
 800e5d6:	609a      	str	r2, [r3, #8]
 800e5d8:	60da      	str	r2, [r3, #12]
 800e5da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e5e4:	d13a      	bne.n	800e65c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	613b      	str	r3, [r7, #16]
 800e5ea:	4b1e      	ldr	r3, [pc, #120]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ee:	4a1d      	ldr	r2, [pc, #116]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e5f0:	f043 0301 	orr.w	r3, r3, #1
 800e5f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e5f6:	4b1b      	ldr	r3, [pc, #108]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	613b      	str	r3, [r7, #16]
 800e600:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e602:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e608:	2302      	movs	r3, #2
 800e60a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e60c:	2300      	movs	r3, #0
 800e60e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e610:	2303      	movs	r3, #3
 800e612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e614:	230a      	movs	r3, #10
 800e616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e618:	f107 0314 	add.w	r3, r7, #20
 800e61c:	4619      	mov	r1, r3
 800e61e:	4812      	ldr	r0, [pc, #72]	; (800e668 <HAL_PCD_MspInit+0xa4>)
 800e620:	f7f6 f8a2 	bl	8004768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e624:	4b0f      	ldr	r3, [pc, #60]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e628:	4a0e      	ldr	r2, [pc, #56]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e62e:	6353      	str	r3, [r2, #52]	; 0x34
 800e630:	2300      	movs	r3, #0
 800e632:	60fb      	str	r3, [r7, #12]
 800e634:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e638:	4a0a      	ldr	r2, [pc, #40]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e63a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e63e:	6453      	str	r3, [r2, #68]	; 0x44
 800e640:	4b08      	ldr	r3, [pc, #32]	; (800e664 <HAL_PCD_MspInit+0xa0>)
 800e642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e648:	60fb      	str	r3, [r7, #12]
 800e64a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e64c:	2200      	movs	r2, #0
 800e64e:	2105      	movs	r1, #5
 800e650:	2043      	movs	r0, #67	; 0x43
 800e652:	f7f5 fcd3 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e656:	2043      	movs	r0, #67	; 0x43
 800e658:	f7f5 fcec 	bl	8004034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e65c:	bf00      	nop
 800e65e:	3728      	adds	r7, #40	; 0x28
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	40023800 	.word	0x40023800
 800e668:	40020000 	.word	0x40020000

0800e66c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e680:	4619      	mov	r1, r3
 800e682:	4610      	mov	r0, r2
 800e684:	f7fb fd87 	bl	800a196 <USBD_LL_SetupStage>
}
 800e688:	bf00      	nop
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e6a2:	78fa      	ldrb	r2, [r7, #3]
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	00db      	lsls	r3, r3, #3
 800e6aa:	4413      	add	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	78fb      	ldrb	r3, [r7, #3]
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	f7fb fdc1 	bl	800a240 <USBD_LL_DataOutStage>
}
 800e6be:	bf00      	nop
 800e6c0:	3708      	adds	r7, #8
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b082      	sub	sp, #8
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e6d8:	78fa      	ldrb	r2, [r7, #3]
 800e6da:	6879      	ldr	r1, [r7, #4]
 800e6dc:	4613      	mov	r3, r2
 800e6de:	00db      	lsls	r3, r3, #3
 800e6e0:	4413      	add	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	440b      	add	r3, r1
 800e6e6:	334c      	adds	r3, #76	; 0x4c
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	78fb      	ldrb	r3, [r7, #3]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	f7fb fe5a 	bl	800a3a6 <USBD_LL_DataInStage>
}
 800e6f2:	bf00      	nop
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b082      	sub	sp, #8
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fb ff8e 	bl	800a62a <USBD_LL_SOF>
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b084      	sub	sp, #16
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e71e:	2301      	movs	r3, #1
 800e720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	2b02      	cmp	r3, #2
 800e728:	d001      	beq.n	800e72e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e72a:	f7f3 fa05 	bl	8001b38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e734:	7bfa      	ldrb	r2, [r7, #15]
 800e736:	4611      	mov	r1, r2
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fb ff38 	bl	800a5ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e744:	4618      	mov	r0, r3
 800e746:	f7fb fee0 	bl	800a50a <USBD_LL_Reset>
}
 800e74a:	bf00      	nop
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
	...

0800e754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e762:	4618      	mov	r0, r3
 800e764:	f7fb ff33 	bl	800a5ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	6812      	ldr	r2, [r2, #0]
 800e776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e77a:	f043 0301 	orr.w	r3, r3, #1
 800e77e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a1b      	ldr	r3, [r3, #32]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d005      	beq.n	800e794 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e788:	4b04      	ldr	r3, [pc, #16]	; (800e79c <HAL_PCD_SuspendCallback+0x48>)
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	4a03      	ldr	r2, [pc, #12]	; (800e79c <HAL_PCD_SuspendCallback+0x48>)
 800e78e:	f043 0306 	orr.w	r3, r3, #6
 800e792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e794:	bf00      	nop
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	e000ed00 	.word	0xe000ed00

0800e7a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fb ff23 	bl	800a5fa <USBD_LL_Resume>
}
 800e7b4:	bf00      	nop
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7ce:	78fa      	ldrb	r2, [r7, #3]
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fb ff7b 	bl	800a6ce <USBD_LL_IsoOUTIncomplete>
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7f2:	78fa      	ldrb	r2, [r7, #3]
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fb ff37 	bl	800a66a <USBD_LL_IsoINIncomplete>
}
 800e7fc:	bf00      	nop
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e812:	4618      	mov	r0, r3
 800e814:	f7fb ff8d 	bl	800a732 <USBD_LL_DevConnected>
}
 800e818:	bf00      	nop
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e82e:	4618      	mov	r0, r3
 800e830:	f7fb ff8a 	bl	800a748 <USBD_LL_DevDisconnected>
}
 800e834:	bf00      	nop
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d13c      	bne.n	800e8c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e84c:	4a20      	ldr	r2, [pc, #128]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a1e      	ldr	r2, [pc, #120]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e858:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e85c:	4b1c      	ldr	r3, [pc, #112]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e85e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e862:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e864:	4b1a      	ldr	r3, [pc, #104]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e866:	2204      	movs	r2, #4
 800e868:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e86a:	4b19      	ldr	r3, [pc, #100]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e86c:	2202      	movs	r2, #2
 800e86e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e870:	4b17      	ldr	r3, [pc, #92]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e872:	2200      	movs	r2, #0
 800e874:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e876:	4b16      	ldr	r3, [pc, #88]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e878:	2202      	movs	r2, #2
 800e87a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e87c:	4b14      	ldr	r3, [pc, #80]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e87e:	2200      	movs	r2, #0
 800e880:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e882:	4b13      	ldr	r3, [pc, #76]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e884:	2200      	movs	r2, #0
 800e886:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e888:	4b11      	ldr	r3, [pc, #68]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e88e:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e890:	2200      	movs	r2, #0
 800e892:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e894:	4b0e      	ldr	r3, [pc, #56]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e896:	2200      	movs	r2, #0
 800e898:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e89a:	480d      	ldr	r0, [pc, #52]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e89c:	f7f6 f901 	bl	8004aa2 <HAL_PCD_Init>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d001      	beq.n	800e8aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e8a6:	f7f3 f947 	bl	8001b38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e8aa:	2180      	movs	r1, #128	; 0x80
 800e8ac:	4808      	ldr	r0, [pc, #32]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e8ae:	f7f7 fb58 	bl	8005f62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e8b2:	2240      	movs	r2, #64	; 0x40
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	4806      	ldr	r0, [pc, #24]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e8b8:	f7f7 fb0c 	bl	8005ed4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e8bc:	2280      	movs	r2, #128	; 0x80
 800e8be:	2101      	movs	r1, #1
 800e8c0:	4803      	ldr	r0, [pc, #12]	; (800e8d0 <USBD_LL_Init+0x94>)
 800e8c2:	f7f7 fb07 	bl	8005ed4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	20006544 	.word	0x20006544

0800e8d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7f6 f9f6 	bl	8004cdc <HAL_PCD_Start>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f000 f942 	bl	800eb80 <USBD_Get_USB_Status>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e900:	7bbb      	ldrb	r3, [r7, #14]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	4608      	mov	r0, r1
 800e914:	4611      	mov	r1, r2
 800e916:	461a      	mov	r2, r3
 800e918:	4603      	mov	r3, r0
 800e91a:	70fb      	strb	r3, [r7, #3]
 800e91c:	460b      	mov	r3, r1
 800e91e:	70bb      	strb	r3, [r7, #2]
 800e920:	4613      	mov	r3, r2
 800e922:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e924:	2300      	movs	r3, #0
 800e926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e928:	2300      	movs	r3, #0
 800e92a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e932:	78bb      	ldrb	r3, [r7, #2]
 800e934:	883a      	ldrh	r2, [r7, #0]
 800e936:	78f9      	ldrb	r1, [r7, #3]
 800e938:	f7f6 fec7 	bl	80056ca <HAL_PCD_EP_Open>
 800e93c:	4603      	mov	r3, r0
 800e93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	4618      	mov	r0, r3
 800e944:	f000 f91c 	bl	800eb80 <USBD_Get_USB_Status>
 800e948:	4603      	mov	r3, r0
 800e94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b084      	sub	sp, #16
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	460b      	mov	r3, r1
 800e960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e962:	2300      	movs	r3, #0
 800e964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e966:	2300      	movs	r3, #0
 800e968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e970:	78fa      	ldrb	r2, [r7, #3]
 800e972:	4611      	mov	r1, r2
 800e974:	4618      	mov	r0, r3
 800e976:	f7f6 ff10 	bl	800579a <HAL_PCD_EP_Close>
 800e97a:	4603      	mov	r3, r0
 800e97c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e97e:	7bfb      	ldrb	r3, [r7, #15]
 800e980:	4618      	mov	r0, r3
 800e982:	f000 f8fd 	bl	800eb80 <USBD_Get_USB_Status>
 800e986:	4603      	mov	r3, r0
 800e988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e98a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	460b      	mov	r3, r1
 800e99e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9ae:	78fa      	ldrb	r2, [r7, #3]
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7f6 ffe8 	bl	8005988 <HAL_PCD_EP_SetStall>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f000 f8de 	bl	800eb80 <USBD_Get_USB_Status>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b084      	sub	sp, #16
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
 800e9da:	460b      	mov	r3, r1
 800e9dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9ec:	78fa      	ldrb	r2, [r7, #3]
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7f7 f82d 	bl	8005a50 <HAL_PCD_EP_ClrStall>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9fa:	7bfb      	ldrb	r3, [r7, #15]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 f8bf 	bl	800eb80 <USBD_Get_USB_Status>
 800ea02:	4603      	mov	r3, r0
 800ea04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ea24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	da0b      	bge.n	800ea44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ea2c:	78fb      	ldrb	r3, [r7, #3]
 800ea2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea32:	68f9      	ldr	r1, [r7, #12]
 800ea34:	4613      	mov	r3, r2
 800ea36:	00db      	lsls	r3, r3, #3
 800ea38:	4413      	add	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	440b      	add	r3, r1
 800ea3e:	333e      	adds	r3, #62	; 0x3e
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	e00b      	b.n	800ea5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ea44:	78fb      	ldrb	r3, [r7, #3]
 800ea46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea4a:	68f9      	ldr	r1, [r7, #12]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	00db      	lsls	r3, r3, #3
 800ea50:	4413      	add	r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	440b      	add	r3, r1
 800ea56:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ea5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	460b      	mov	r3, r1
 800ea72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea74:	2300      	movs	r3, #0
 800ea76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea82:	78fa      	ldrb	r2, [r7, #3]
 800ea84:	4611      	mov	r1, r2
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7f6 fdfa 	bl	8005680 <HAL_PCD_SetAddress>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea90:	7bfb      	ldrb	r3, [r7, #15]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f000 f874 	bl	800eb80 <USBD_Get_USB_Status>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b086      	sub	sp, #24
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	60f8      	str	r0, [r7, #12]
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	603b      	str	r3, [r7, #0]
 800eab2:	460b      	mov	r3, r1
 800eab4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eab6:	2300      	movs	r3, #0
 800eab8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaba:	2300      	movs	r3, #0
 800eabc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eac4:	7af9      	ldrb	r1, [r7, #11]
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	f7f6 ff13 	bl	80058f4 <HAL_PCD_EP_Transmit>
 800eace:	4603      	mov	r3, r0
 800ead0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f000 f853 	bl	800eb80 <USBD_Get_USB_Status>
 800eada:	4603      	mov	r3, r0
 800eadc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eade:	7dbb      	ldrb	r3, [r7, #22]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3718      	adds	r7, #24
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b086      	sub	sp, #24
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	607a      	str	r2, [r7, #4]
 800eaf2:	603b      	str	r3, [r7, #0]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb06:	7af9      	ldrb	r1, [r7, #11]
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	f7f6 fe8f 	bl	800582e <HAL_PCD_EP_Receive>
 800eb10:	4603      	mov	r3, r0
 800eb12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 f832 	bl	800eb80 <USBD_Get_USB_Status>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb20:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3718      	adds	r7, #24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b082      	sub	sp, #8
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	460b      	mov	r3, r1
 800eb34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb3c:	78fa      	ldrb	r2, [r7, #3]
 800eb3e:	4611      	mov	r1, r2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7f6 febf 	bl	80058c4 <HAL_PCD_EP_GetRxCount>
 800eb46:	4603      	mov	r3, r0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eb58:	4b03      	ldr	r3, [pc, #12]	; (800eb68 <USBD_static_malloc+0x18>)
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	20006a50 	.word	0x20006a50

0800eb6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]

}
 800eb74:	bf00      	nop
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b085      	sub	sp, #20
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	4603      	mov	r3, r0
 800eb88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	2b03      	cmp	r3, #3
 800eb92:	d817      	bhi.n	800ebc4 <USBD_Get_USB_Status+0x44>
 800eb94:	a201      	add	r2, pc, #4	; (adr r2, 800eb9c <USBD_Get_USB_Status+0x1c>)
 800eb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9a:	bf00      	nop
 800eb9c:	0800ebad 	.word	0x0800ebad
 800eba0:	0800ebb3 	.word	0x0800ebb3
 800eba4:	0800ebb9 	.word	0x0800ebb9
 800eba8:	0800ebbf 	.word	0x0800ebbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb0:	e00b      	b.n	800ebca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb6:	e008      	b.n	800ebca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	73fb      	strb	r3, [r7, #15]
    break;
 800ebbc:	e005      	b.n	800ebca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc2:	e002      	b.n	800ebca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ebc4:	2303      	movs	r3, #3
 800ebc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc8:	bf00      	nop
  }
  return usb_status;
 800ebca:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3714      	adds	r7, #20
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <__errno>:
 800ebd8:	4b01      	ldr	r3, [pc, #4]	; (800ebe0 <__errno+0x8>)
 800ebda:	6818      	ldr	r0, [r3, #0]
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop
 800ebe0:	20000110 	.word	0x20000110

0800ebe4 <std>:
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	b510      	push	{r4, lr}
 800ebe8:	4604      	mov	r4, r0
 800ebea:	e9c0 3300 	strd	r3, r3, [r0]
 800ebee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebf2:	6083      	str	r3, [r0, #8]
 800ebf4:	8181      	strh	r1, [r0, #12]
 800ebf6:	6643      	str	r3, [r0, #100]	; 0x64
 800ebf8:	81c2      	strh	r2, [r0, #14]
 800ebfa:	6183      	str	r3, [r0, #24]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	2208      	movs	r2, #8
 800ec00:	305c      	adds	r0, #92	; 0x5c
 800ec02:	f000 f91a 	bl	800ee3a <memset>
 800ec06:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <std+0x38>)
 800ec08:	6263      	str	r3, [r4, #36]	; 0x24
 800ec0a:	4b05      	ldr	r3, [pc, #20]	; (800ec20 <std+0x3c>)
 800ec0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec0e:	4b05      	ldr	r3, [pc, #20]	; (800ec24 <std+0x40>)
 800ec10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec12:	4b05      	ldr	r3, [pc, #20]	; (800ec28 <std+0x44>)
 800ec14:	6224      	str	r4, [r4, #32]
 800ec16:	6323      	str	r3, [r4, #48]	; 0x30
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0800fda9 	.word	0x0800fda9
 800ec20:	0800fdcb 	.word	0x0800fdcb
 800ec24:	0800fe03 	.word	0x0800fe03
 800ec28:	0800fe27 	.word	0x0800fe27

0800ec2c <_cleanup_r>:
 800ec2c:	4901      	ldr	r1, [pc, #4]	; (800ec34 <_cleanup_r+0x8>)
 800ec2e:	f000 b8af 	b.w	800ed90 <_fwalk_reent>
 800ec32:	bf00      	nop
 800ec34:	080119d1 	.word	0x080119d1

0800ec38 <__sfmoreglue>:
 800ec38:	b570      	push	{r4, r5, r6, lr}
 800ec3a:	2268      	movs	r2, #104	; 0x68
 800ec3c:	1e4d      	subs	r5, r1, #1
 800ec3e:	4355      	muls	r5, r2
 800ec40:	460e      	mov	r6, r1
 800ec42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec46:	f000 f921 	bl	800ee8c <_malloc_r>
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	b140      	cbz	r0, 800ec60 <__sfmoreglue+0x28>
 800ec4e:	2100      	movs	r1, #0
 800ec50:	e9c0 1600 	strd	r1, r6, [r0]
 800ec54:	300c      	adds	r0, #12
 800ec56:	60a0      	str	r0, [r4, #8]
 800ec58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec5c:	f000 f8ed 	bl	800ee3a <memset>
 800ec60:	4620      	mov	r0, r4
 800ec62:	bd70      	pop	{r4, r5, r6, pc}

0800ec64 <__sfp_lock_acquire>:
 800ec64:	4801      	ldr	r0, [pc, #4]	; (800ec6c <__sfp_lock_acquire+0x8>)
 800ec66:	f000 b8d8 	b.w	800ee1a <__retarget_lock_acquire_recursive>
 800ec6a:	bf00      	nop
 800ec6c:	20006c71 	.word	0x20006c71

0800ec70 <__sfp_lock_release>:
 800ec70:	4801      	ldr	r0, [pc, #4]	; (800ec78 <__sfp_lock_release+0x8>)
 800ec72:	f000 b8d3 	b.w	800ee1c <__retarget_lock_release_recursive>
 800ec76:	bf00      	nop
 800ec78:	20006c71 	.word	0x20006c71

0800ec7c <__sinit_lock_acquire>:
 800ec7c:	4801      	ldr	r0, [pc, #4]	; (800ec84 <__sinit_lock_acquire+0x8>)
 800ec7e:	f000 b8cc 	b.w	800ee1a <__retarget_lock_acquire_recursive>
 800ec82:	bf00      	nop
 800ec84:	20006c72 	.word	0x20006c72

0800ec88 <__sinit_lock_release>:
 800ec88:	4801      	ldr	r0, [pc, #4]	; (800ec90 <__sinit_lock_release+0x8>)
 800ec8a:	f000 b8c7 	b.w	800ee1c <__retarget_lock_release_recursive>
 800ec8e:	bf00      	nop
 800ec90:	20006c72 	.word	0x20006c72

0800ec94 <__sinit>:
 800ec94:	b510      	push	{r4, lr}
 800ec96:	4604      	mov	r4, r0
 800ec98:	f7ff fff0 	bl	800ec7c <__sinit_lock_acquire>
 800ec9c:	69a3      	ldr	r3, [r4, #24]
 800ec9e:	b11b      	cbz	r3, 800eca8 <__sinit+0x14>
 800eca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca4:	f7ff bff0 	b.w	800ec88 <__sinit_lock_release>
 800eca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ecac:	6523      	str	r3, [r4, #80]	; 0x50
 800ecae:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <__sinit+0x68>)
 800ecb0:	4a13      	ldr	r2, [pc, #76]	; (800ed00 <__sinit+0x6c>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecb6:	42a3      	cmp	r3, r4
 800ecb8:	bf04      	itt	eq
 800ecba:	2301      	moveq	r3, #1
 800ecbc:	61a3      	streq	r3, [r4, #24]
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 f820 	bl	800ed04 <__sfp>
 800ecc4:	6060      	str	r0, [r4, #4]
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 f81c 	bl	800ed04 <__sfp>
 800eccc:	60a0      	str	r0, [r4, #8]
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f000 f818 	bl	800ed04 <__sfp>
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	60e0      	str	r0, [r4, #12]
 800ecd8:	2104      	movs	r1, #4
 800ecda:	6860      	ldr	r0, [r4, #4]
 800ecdc:	f7ff ff82 	bl	800ebe4 <std>
 800ece0:	68a0      	ldr	r0, [r4, #8]
 800ece2:	2201      	movs	r2, #1
 800ece4:	2109      	movs	r1, #9
 800ece6:	f7ff ff7d 	bl	800ebe4 <std>
 800ecea:	68e0      	ldr	r0, [r4, #12]
 800ecec:	2202      	movs	r2, #2
 800ecee:	2112      	movs	r1, #18
 800ecf0:	f7ff ff78 	bl	800ebe4 <std>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	61a3      	str	r3, [r4, #24]
 800ecf8:	e7d2      	b.n	800eca0 <__sinit+0xc>
 800ecfa:	bf00      	nop
 800ecfc:	08017260 	.word	0x08017260
 800ed00:	0800ec2d 	.word	0x0800ec2d

0800ed04 <__sfp>:
 800ed04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed06:	4607      	mov	r7, r0
 800ed08:	f7ff ffac 	bl	800ec64 <__sfp_lock_acquire>
 800ed0c:	4b1e      	ldr	r3, [pc, #120]	; (800ed88 <__sfp+0x84>)
 800ed0e:	681e      	ldr	r6, [r3, #0]
 800ed10:	69b3      	ldr	r3, [r6, #24]
 800ed12:	b913      	cbnz	r3, 800ed1a <__sfp+0x16>
 800ed14:	4630      	mov	r0, r6
 800ed16:	f7ff ffbd 	bl	800ec94 <__sinit>
 800ed1a:	3648      	adds	r6, #72	; 0x48
 800ed1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed20:	3b01      	subs	r3, #1
 800ed22:	d503      	bpl.n	800ed2c <__sfp+0x28>
 800ed24:	6833      	ldr	r3, [r6, #0]
 800ed26:	b30b      	cbz	r3, 800ed6c <__sfp+0x68>
 800ed28:	6836      	ldr	r6, [r6, #0]
 800ed2a:	e7f7      	b.n	800ed1c <__sfp+0x18>
 800ed2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed30:	b9d5      	cbnz	r5, 800ed68 <__sfp+0x64>
 800ed32:	4b16      	ldr	r3, [pc, #88]	; (800ed8c <__sfp+0x88>)
 800ed34:	60e3      	str	r3, [r4, #12]
 800ed36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed3a:	6665      	str	r5, [r4, #100]	; 0x64
 800ed3c:	f000 f86c 	bl	800ee18 <__retarget_lock_init_recursive>
 800ed40:	f7ff ff96 	bl	800ec70 <__sfp_lock_release>
 800ed44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed4c:	6025      	str	r5, [r4, #0]
 800ed4e:	61a5      	str	r5, [r4, #24]
 800ed50:	2208      	movs	r2, #8
 800ed52:	4629      	mov	r1, r5
 800ed54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed58:	f000 f86f 	bl	800ee3a <memset>
 800ed5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed64:	4620      	mov	r0, r4
 800ed66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed68:	3468      	adds	r4, #104	; 0x68
 800ed6a:	e7d9      	b.n	800ed20 <__sfp+0x1c>
 800ed6c:	2104      	movs	r1, #4
 800ed6e:	4638      	mov	r0, r7
 800ed70:	f7ff ff62 	bl	800ec38 <__sfmoreglue>
 800ed74:	4604      	mov	r4, r0
 800ed76:	6030      	str	r0, [r6, #0]
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d1d5      	bne.n	800ed28 <__sfp+0x24>
 800ed7c:	f7ff ff78 	bl	800ec70 <__sfp_lock_release>
 800ed80:	230c      	movs	r3, #12
 800ed82:	603b      	str	r3, [r7, #0]
 800ed84:	e7ee      	b.n	800ed64 <__sfp+0x60>
 800ed86:	bf00      	nop
 800ed88:	08017260 	.word	0x08017260
 800ed8c:	ffff0001 	.word	0xffff0001

0800ed90 <_fwalk_reent>:
 800ed90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed94:	4606      	mov	r6, r0
 800ed96:	4688      	mov	r8, r1
 800ed98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed9c:	2700      	movs	r7, #0
 800ed9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eda2:	f1b9 0901 	subs.w	r9, r9, #1
 800eda6:	d505      	bpl.n	800edb4 <_fwalk_reent+0x24>
 800eda8:	6824      	ldr	r4, [r4, #0]
 800edaa:	2c00      	cmp	r4, #0
 800edac:	d1f7      	bne.n	800ed9e <_fwalk_reent+0xe>
 800edae:	4638      	mov	r0, r7
 800edb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb4:	89ab      	ldrh	r3, [r5, #12]
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d907      	bls.n	800edca <_fwalk_reent+0x3a>
 800edba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edbe:	3301      	adds	r3, #1
 800edc0:	d003      	beq.n	800edca <_fwalk_reent+0x3a>
 800edc2:	4629      	mov	r1, r5
 800edc4:	4630      	mov	r0, r6
 800edc6:	47c0      	blx	r8
 800edc8:	4307      	orrs	r7, r0
 800edca:	3568      	adds	r5, #104	; 0x68
 800edcc:	e7e9      	b.n	800eda2 <_fwalk_reent+0x12>
	...

0800edd0 <__libc_init_array>:
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	4d0d      	ldr	r5, [pc, #52]	; (800ee08 <__libc_init_array+0x38>)
 800edd4:	4c0d      	ldr	r4, [pc, #52]	; (800ee0c <__libc_init_array+0x3c>)
 800edd6:	1b64      	subs	r4, r4, r5
 800edd8:	10a4      	asrs	r4, r4, #2
 800edda:	2600      	movs	r6, #0
 800eddc:	42a6      	cmp	r6, r4
 800edde:	d109      	bne.n	800edf4 <__libc_init_array+0x24>
 800ede0:	4d0b      	ldr	r5, [pc, #44]	; (800ee10 <__libc_init_array+0x40>)
 800ede2:	4c0c      	ldr	r4, [pc, #48]	; (800ee14 <__libc_init_array+0x44>)
 800ede4:	f004 fc48 	bl	8013678 <_init>
 800ede8:	1b64      	subs	r4, r4, r5
 800edea:	10a4      	asrs	r4, r4, #2
 800edec:	2600      	movs	r6, #0
 800edee:	42a6      	cmp	r6, r4
 800edf0:	d105      	bne.n	800edfe <__libc_init_array+0x2e>
 800edf2:	bd70      	pop	{r4, r5, r6, pc}
 800edf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800edf8:	4798      	blx	r3
 800edfa:	3601      	adds	r6, #1
 800edfc:	e7ee      	b.n	800eddc <__libc_init_array+0xc>
 800edfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee02:	4798      	blx	r3
 800ee04:	3601      	adds	r6, #1
 800ee06:	e7f2      	b.n	800edee <__libc_init_array+0x1e>
 800ee08:	080176ac 	.word	0x080176ac
 800ee0c:	080176ac 	.word	0x080176ac
 800ee10:	080176ac 	.word	0x080176ac
 800ee14:	080176b0 	.word	0x080176b0

0800ee18 <__retarget_lock_init_recursive>:
 800ee18:	4770      	bx	lr

0800ee1a <__retarget_lock_acquire_recursive>:
 800ee1a:	4770      	bx	lr

0800ee1c <__retarget_lock_release_recursive>:
 800ee1c:	4770      	bx	lr

0800ee1e <memcpy>:
 800ee1e:	440a      	add	r2, r1
 800ee20:	4291      	cmp	r1, r2
 800ee22:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee26:	d100      	bne.n	800ee2a <memcpy+0xc>
 800ee28:	4770      	bx	lr
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee34:	4291      	cmp	r1, r2
 800ee36:	d1f9      	bne.n	800ee2c <memcpy+0xe>
 800ee38:	bd10      	pop	{r4, pc}

0800ee3a <memset>:
 800ee3a:	4402      	add	r2, r0
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d100      	bne.n	800ee44 <memset+0xa>
 800ee42:	4770      	bx	lr
 800ee44:	f803 1b01 	strb.w	r1, [r3], #1
 800ee48:	e7f9      	b.n	800ee3e <memset+0x4>
	...

0800ee4c <sbrk_aligned>:
 800ee4c:	b570      	push	{r4, r5, r6, lr}
 800ee4e:	4e0e      	ldr	r6, [pc, #56]	; (800ee88 <sbrk_aligned+0x3c>)
 800ee50:	460c      	mov	r4, r1
 800ee52:	6831      	ldr	r1, [r6, #0]
 800ee54:	4605      	mov	r5, r0
 800ee56:	b911      	cbnz	r1, 800ee5e <sbrk_aligned+0x12>
 800ee58:	f000 ff70 	bl	800fd3c <_sbrk_r>
 800ee5c:	6030      	str	r0, [r6, #0]
 800ee5e:	4621      	mov	r1, r4
 800ee60:	4628      	mov	r0, r5
 800ee62:	f000 ff6b 	bl	800fd3c <_sbrk_r>
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	d00a      	beq.n	800ee80 <sbrk_aligned+0x34>
 800ee6a:	1cc4      	adds	r4, r0, #3
 800ee6c:	f024 0403 	bic.w	r4, r4, #3
 800ee70:	42a0      	cmp	r0, r4
 800ee72:	d007      	beq.n	800ee84 <sbrk_aligned+0x38>
 800ee74:	1a21      	subs	r1, r4, r0
 800ee76:	4628      	mov	r0, r5
 800ee78:	f000 ff60 	bl	800fd3c <_sbrk_r>
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	d101      	bne.n	800ee84 <sbrk_aligned+0x38>
 800ee80:	f04f 34ff 	mov.w	r4, #4294967295
 800ee84:	4620      	mov	r0, r4
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
 800ee88:	20006c78 	.word	0x20006c78

0800ee8c <_malloc_r>:
 800ee8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee90:	1ccd      	adds	r5, r1, #3
 800ee92:	f025 0503 	bic.w	r5, r5, #3
 800ee96:	3508      	adds	r5, #8
 800ee98:	2d0c      	cmp	r5, #12
 800ee9a:	bf38      	it	cc
 800ee9c:	250c      	movcc	r5, #12
 800ee9e:	2d00      	cmp	r5, #0
 800eea0:	4607      	mov	r7, r0
 800eea2:	db01      	blt.n	800eea8 <_malloc_r+0x1c>
 800eea4:	42a9      	cmp	r1, r5
 800eea6:	d905      	bls.n	800eeb4 <_malloc_r+0x28>
 800eea8:	230c      	movs	r3, #12
 800eeaa:	603b      	str	r3, [r7, #0]
 800eeac:	2600      	movs	r6, #0
 800eeae:	4630      	mov	r0, r6
 800eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb4:	4e2e      	ldr	r6, [pc, #184]	; (800ef70 <_malloc_r+0xe4>)
 800eeb6:	f003 f967 	bl	8012188 <__malloc_lock>
 800eeba:	6833      	ldr	r3, [r6, #0]
 800eebc:	461c      	mov	r4, r3
 800eebe:	bb34      	cbnz	r4, 800ef0e <_malloc_r+0x82>
 800eec0:	4629      	mov	r1, r5
 800eec2:	4638      	mov	r0, r7
 800eec4:	f7ff ffc2 	bl	800ee4c <sbrk_aligned>
 800eec8:	1c43      	adds	r3, r0, #1
 800eeca:	4604      	mov	r4, r0
 800eecc:	d14d      	bne.n	800ef6a <_malloc_r+0xde>
 800eece:	6834      	ldr	r4, [r6, #0]
 800eed0:	4626      	mov	r6, r4
 800eed2:	2e00      	cmp	r6, #0
 800eed4:	d140      	bne.n	800ef58 <_malloc_r+0xcc>
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	4631      	mov	r1, r6
 800eeda:	4638      	mov	r0, r7
 800eedc:	eb04 0803 	add.w	r8, r4, r3
 800eee0:	f000 ff2c 	bl	800fd3c <_sbrk_r>
 800eee4:	4580      	cmp	r8, r0
 800eee6:	d13a      	bne.n	800ef5e <_malloc_r+0xd2>
 800eee8:	6821      	ldr	r1, [r4, #0]
 800eeea:	3503      	adds	r5, #3
 800eeec:	1a6d      	subs	r5, r5, r1
 800eeee:	f025 0503 	bic.w	r5, r5, #3
 800eef2:	3508      	adds	r5, #8
 800eef4:	2d0c      	cmp	r5, #12
 800eef6:	bf38      	it	cc
 800eef8:	250c      	movcc	r5, #12
 800eefa:	4629      	mov	r1, r5
 800eefc:	4638      	mov	r0, r7
 800eefe:	f7ff ffa5 	bl	800ee4c <sbrk_aligned>
 800ef02:	3001      	adds	r0, #1
 800ef04:	d02b      	beq.n	800ef5e <_malloc_r+0xd2>
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	442b      	add	r3, r5
 800ef0a:	6023      	str	r3, [r4, #0]
 800ef0c:	e00e      	b.n	800ef2c <_malloc_r+0xa0>
 800ef0e:	6822      	ldr	r2, [r4, #0]
 800ef10:	1b52      	subs	r2, r2, r5
 800ef12:	d41e      	bmi.n	800ef52 <_malloc_r+0xc6>
 800ef14:	2a0b      	cmp	r2, #11
 800ef16:	d916      	bls.n	800ef46 <_malloc_r+0xba>
 800ef18:	1961      	adds	r1, r4, r5
 800ef1a:	42a3      	cmp	r3, r4
 800ef1c:	6025      	str	r5, [r4, #0]
 800ef1e:	bf18      	it	ne
 800ef20:	6059      	strne	r1, [r3, #4]
 800ef22:	6863      	ldr	r3, [r4, #4]
 800ef24:	bf08      	it	eq
 800ef26:	6031      	streq	r1, [r6, #0]
 800ef28:	5162      	str	r2, [r4, r5]
 800ef2a:	604b      	str	r3, [r1, #4]
 800ef2c:	4638      	mov	r0, r7
 800ef2e:	f104 060b 	add.w	r6, r4, #11
 800ef32:	f003 f92f 	bl	8012194 <__malloc_unlock>
 800ef36:	f026 0607 	bic.w	r6, r6, #7
 800ef3a:	1d23      	adds	r3, r4, #4
 800ef3c:	1af2      	subs	r2, r6, r3
 800ef3e:	d0b6      	beq.n	800eeae <_malloc_r+0x22>
 800ef40:	1b9b      	subs	r3, r3, r6
 800ef42:	50a3      	str	r3, [r4, r2]
 800ef44:	e7b3      	b.n	800eeae <_malloc_r+0x22>
 800ef46:	6862      	ldr	r2, [r4, #4]
 800ef48:	42a3      	cmp	r3, r4
 800ef4a:	bf0c      	ite	eq
 800ef4c:	6032      	streq	r2, [r6, #0]
 800ef4e:	605a      	strne	r2, [r3, #4]
 800ef50:	e7ec      	b.n	800ef2c <_malloc_r+0xa0>
 800ef52:	4623      	mov	r3, r4
 800ef54:	6864      	ldr	r4, [r4, #4]
 800ef56:	e7b2      	b.n	800eebe <_malloc_r+0x32>
 800ef58:	4634      	mov	r4, r6
 800ef5a:	6876      	ldr	r6, [r6, #4]
 800ef5c:	e7b9      	b.n	800eed2 <_malloc_r+0x46>
 800ef5e:	230c      	movs	r3, #12
 800ef60:	603b      	str	r3, [r7, #0]
 800ef62:	4638      	mov	r0, r7
 800ef64:	f003 f916 	bl	8012194 <__malloc_unlock>
 800ef68:	e7a1      	b.n	800eeae <_malloc_r+0x22>
 800ef6a:	6025      	str	r5, [r4, #0]
 800ef6c:	e7de      	b.n	800ef2c <_malloc_r+0xa0>
 800ef6e:	bf00      	nop
 800ef70:	20006c74 	.word	0x20006c74

0800ef74 <__cvt>:
 800ef74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef78:	ec55 4b10 	vmov	r4, r5, d0
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	460e      	mov	r6, r1
 800ef80:	4619      	mov	r1, r3
 800ef82:	462b      	mov	r3, r5
 800ef84:	bfbb      	ittet	lt
 800ef86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ef8a:	461d      	movlt	r5, r3
 800ef8c:	2300      	movge	r3, #0
 800ef8e:	232d      	movlt	r3, #45	; 0x2d
 800ef90:	700b      	strb	r3, [r1, #0]
 800ef92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef98:	4691      	mov	r9, r2
 800ef9a:	f023 0820 	bic.w	r8, r3, #32
 800ef9e:	bfbc      	itt	lt
 800efa0:	4622      	movlt	r2, r4
 800efa2:	4614      	movlt	r4, r2
 800efa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800efa8:	d005      	beq.n	800efb6 <__cvt+0x42>
 800efaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800efae:	d100      	bne.n	800efb2 <__cvt+0x3e>
 800efb0:	3601      	adds	r6, #1
 800efb2:	2102      	movs	r1, #2
 800efb4:	e000      	b.n	800efb8 <__cvt+0x44>
 800efb6:	2103      	movs	r1, #3
 800efb8:	ab03      	add	r3, sp, #12
 800efba:	9301      	str	r3, [sp, #4]
 800efbc:	ab02      	add	r3, sp, #8
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	ec45 4b10 	vmov	d0, r4, r5
 800efc4:	4653      	mov	r3, sl
 800efc6:	4632      	mov	r2, r6
 800efc8:	f001 fe8e 	bl	8010ce8 <_dtoa_r>
 800efcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800efd0:	4607      	mov	r7, r0
 800efd2:	d102      	bne.n	800efda <__cvt+0x66>
 800efd4:	f019 0f01 	tst.w	r9, #1
 800efd8:	d022      	beq.n	800f020 <__cvt+0xac>
 800efda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800efde:	eb07 0906 	add.w	r9, r7, r6
 800efe2:	d110      	bne.n	800f006 <__cvt+0x92>
 800efe4:	783b      	ldrb	r3, [r7, #0]
 800efe6:	2b30      	cmp	r3, #48	; 0x30
 800efe8:	d10a      	bne.n	800f000 <__cvt+0x8c>
 800efea:	2200      	movs	r2, #0
 800efec:	2300      	movs	r3, #0
 800efee:	4620      	mov	r0, r4
 800eff0:	4629      	mov	r1, r5
 800eff2:	f7f1 fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 800eff6:	b918      	cbnz	r0, 800f000 <__cvt+0x8c>
 800eff8:	f1c6 0601 	rsb	r6, r6, #1
 800effc:	f8ca 6000 	str.w	r6, [sl]
 800f000:	f8da 3000 	ldr.w	r3, [sl]
 800f004:	4499      	add	r9, r3
 800f006:	2200      	movs	r2, #0
 800f008:	2300      	movs	r3, #0
 800f00a:	4620      	mov	r0, r4
 800f00c:	4629      	mov	r1, r5
 800f00e:	f7f1 fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 800f012:	b108      	cbz	r0, 800f018 <__cvt+0xa4>
 800f014:	f8cd 900c 	str.w	r9, [sp, #12]
 800f018:	2230      	movs	r2, #48	; 0x30
 800f01a:	9b03      	ldr	r3, [sp, #12]
 800f01c:	454b      	cmp	r3, r9
 800f01e:	d307      	bcc.n	800f030 <__cvt+0xbc>
 800f020:	9b03      	ldr	r3, [sp, #12]
 800f022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f024:	1bdb      	subs	r3, r3, r7
 800f026:	4638      	mov	r0, r7
 800f028:	6013      	str	r3, [r2, #0]
 800f02a:	b004      	add	sp, #16
 800f02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f030:	1c59      	adds	r1, r3, #1
 800f032:	9103      	str	r1, [sp, #12]
 800f034:	701a      	strb	r2, [r3, #0]
 800f036:	e7f0      	b.n	800f01a <__cvt+0xa6>

0800f038 <__exponent>:
 800f038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f03a:	4603      	mov	r3, r0
 800f03c:	2900      	cmp	r1, #0
 800f03e:	bfb8      	it	lt
 800f040:	4249      	neglt	r1, r1
 800f042:	f803 2b02 	strb.w	r2, [r3], #2
 800f046:	bfb4      	ite	lt
 800f048:	222d      	movlt	r2, #45	; 0x2d
 800f04a:	222b      	movge	r2, #43	; 0x2b
 800f04c:	2909      	cmp	r1, #9
 800f04e:	7042      	strb	r2, [r0, #1]
 800f050:	dd2a      	ble.n	800f0a8 <__exponent+0x70>
 800f052:	f10d 0407 	add.w	r4, sp, #7
 800f056:	46a4      	mov	ip, r4
 800f058:	270a      	movs	r7, #10
 800f05a:	46a6      	mov	lr, r4
 800f05c:	460a      	mov	r2, r1
 800f05e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f062:	fb07 1516 	mls	r5, r7, r6, r1
 800f066:	3530      	adds	r5, #48	; 0x30
 800f068:	2a63      	cmp	r2, #99	; 0x63
 800f06a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f06e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f072:	4631      	mov	r1, r6
 800f074:	dcf1      	bgt.n	800f05a <__exponent+0x22>
 800f076:	3130      	adds	r1, #48	; 0x30
 800f078:	f1ae 0502 	sub.w	r5, lr, #2
 800f07c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f080:	1c44      	adds	r4, r0, #1
 800f082:	4629      	mov	r1, r5
 800f084:	4561      	cmp	r1, ip
 800f086:	d30a      	bcc.n	800f09e <__exponent+0x66>
 800f088:	f10d 0209 	add.w	r2, sp, #9
 800f08c:	eba2 020e 	sub.w	r2, r2, lr
 800f090:	4565      	cmp	r5, ip
 800f092:	bf88      	it	hi
 800f094:	2200      	movhi	r2, #0
 800f096:	4413      	add	r3, r2
 800f098:	1a18      	subs	r0, r3, r0
 800f09a:	b003      	add	sp, #12
 800f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f09e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f0a6:	e7ed      	b.n	800f084 <__exponent+0x4c>
 800f0a8:	2330      	movs	r3, #48	; 0x30
 800f0aa:	3130      	adds	r1, #48	; 0x30
 800f0ac:	7083      	strb	r3, [r0, #2]
 800f0ae:	70c1      	strb	r1, [r0, #3]
 800f0b0:	1d03      	adds	r3, r0, #4
 800f0b2:	e7f1      	b.n	800f098 <__exponent+0x60>

0800f0b4 <_printf_float>:
 800f0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b8:	ed2d 8b02 	vpush	{d8}
 800f0bc:	b08d      	sub	sp, #52	; 0x34
 800f0be:	460c      	mov	r4, r1
 800f0c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f0c4:	4616      	mov	r6, r2
 800f0c6:	461f      	mov	r7, r3
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	f003 f82d 	bl	8012128 <_localeconv_r>
 800f0ce:	f8d0 a000 	ldr.w	sl, [r0]
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	f7f1 f884 	bl	80001e0 <strlen>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	930a      	str	r3, [sp, #40]	; 0x28
 800f0dc:	6823      	ldr	r3, [r4, #0]
 800f0de:	9305      	str	r3, [sp, #20]
 800f0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800f0e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f0e8:	3307      	adds	r3, #7
 800f0ea:	f023 0307 	bic.w	r3, r3, #7
 800f0ee:	f103 0208 	add.w	r2, r3, #8
 800f0f2:	f8c8 2000 	str.w	r2, [r8]
 800f0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f0fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f102:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f106:	9307      	str	r3, [sp, #28]
 800f108:	f8cd 8018 	str.w	r8, [sp, #24]
 800f10c:	ee08 0a10 	vmov	s16, r0
 800f110:	4b9f      	ldr	r3, [pc, #636]	; (800f390 <_printf_float+0x2dc>)
 800f112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f116:	f04f 32ff 	mov.w	r2, #4294967295
 800f11a:	f7f1 fd0f 	bl	8000b3c <__aeabi_dcmpun>
 800f11e:	bb88      	cbnz	r0, 800f184 <_printf_float+0xd0>
 800f120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f124:	4b9a      	ldr	r3, [pc, #616]	; (800f390 <_printf_float+0x2dc>)
 800f126:	f04f 32ff 	mov.w	r2, #4294967295
 800f12a:	f7f1 fce9 	bl	8000b00 <__aeabi_dcmple>
 800f12e:	bb48      	cbnz	r0, 800f184 <_printf_float+0xd0>
 800f130:	2200      	movs	r2, #0
 800f132:	2300      	movs	r3, #0
 800f134:	4640      	mov	r0, r8
 800f136:	4649      	mov	r1, r9
 800f138:	f7f1 fcd8 	bl	8000aec <__aeabi_dcmplt>
 800f13c:	b110      	cbz	r0, 800f144 <_printf_float+0x90>
 800f13e:	232d      	movs	r3, #45	; 0x2d
 800f140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f144:	4b93      	ldr	r3, [pc, #588]	; (800f394 <_printf_float+0x2e0>)
 800f146:	4894      	ldr	r0, [pc, #592]	; (800f398 <_printf_float+0x2e4>)
 800f148:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f14c:	bf94      	ite	ls
 800f14e:	4698      	movls	r8, r3
 800f150:	4680      	movhi	r8, r0
 800f152:	2303      	movs	r3, #3
 800f154:	6123      	str	r3, [r4, #16]
 800f156:	9b05      	ldr	r3, [sp, #20]
 800f158:	f023 0204 	bic.w	r2, r3, #4
 800f15c:	6022      	str	r2, [r4, #0]
 800f15e:	f04f 0900 	mov.w	r9, #0
 800f162:	9700      	str	r7, [sp, #0]
 800f164:	4633      	mov	r3, r6
 800f166:	aa0b      	add	r2, sp, #44	; 0x2c
 800f168:	4621      	mov	r1, r4
 800f16a:	4628      	mov	r0, r5
 800f16c:	f000 f9d8 	bl	800f520 <_printf_common>
 800f170:	3001      	adds	r0, #1
 800f172:	f040 8090 	bne.w	800f296 <_printf_float+0x1e2>
 800f176:	f04f 30ff 	mov.w	r0, #4294967295
 800f17a:	b00d      	add	sp, #52	; 0x34
 800f17c:	ecbd 8b02 	vpop	{d8}
 800f180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f184:	4642      	mov	r2, r8
 800f186:	464b      	mov	r3, r9
 800f188:	4640      	mov	r0, r8
 800f18a:	4649      	mov	r1, r9
 800f18c:	f7f1 fcd6 	bl	8000b3c <__aeabi_dcmpun>
 800f190:	b140      	cbz	r0, 800f1a4 <_printf_float+0xf0>
 800f192:	464b      	mov	r3, r9
 800f194:	2b00      	cmp	r3, #0
 800f196:	bfbc      	itt	lt
 800f198:	232d      	movlt	r3, #45	; 0x2d
 800f19a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f19e:	487f      	ldr	r0, [pc, #508]	; (800f39c <_printf_float+0x2e8>)
 800f1a0:	4b7f      	ldr	r3, [pc, #508]	; (800f3a0 <_printf_float+0x2ec>)
 800f1a2:	e7d1      	b.n	800f148 <_printf_float+0x94>
 800f1a4:	6863      	ldr	r3, [r4, #4]
 800f1a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f1aa:	9206      	str	r2, [sp, #24]
 800f1ac:	1c5a      	adds	r2, r3, #1
 800f1ae:	d13f      	bne.n	800f230 <_printf_float+0x17c>
 800f1b0:	2306      	movs	r3, #6
 800f1b2:	6063      	str	r3, [r4, #4]
 800f1b4:	9b05      	ldr	r3, [sp, #20]
 800f1b6:	6861      	ldr	r1, [r4, #4]
 800f1b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f1bc:	2300      	movs	r3, #0
 800f1be:	9303      	str	r3, [sp, #12]
 800f1c0:	ab0a      	add	r3, sp, #40	; 0x28
 800f1c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f1c6:	ab09      	add	r3, sp, #36	; 0x24
 800f1c8:	ec49 8b10 	vmov	d0, r8, r9
 800f1cc:	9300      	str	r3, [sp, #0]
 800f1ce:	6022      	str	r2, [r4, #0]
 800f1d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	f7ff fecd 	bl	800ef74 <__cvt>
 800f1da:	9b06      	ldr	r3, [sp, #24]
 800f1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1de:	2b47      	cmp	r3, #71	; 0x47
 800f1e0:	4680      	mov	r8, r0
 800f1e2:	d108      	bne.n	800f1f6 <_printf_float+0x142>
 800f1e4:	1cc8      	adds	r0, r1, #3
 800f1e6:	db02      	blt.n	800f1ee <_printf_float+0x13a>
 800f1e8:	6863      	ldr	r3, [r4, #4]
 800f1ea:	4299      	cmp	r1, r3
 800f1ec:	dd41      	ble.n	800f272 <_printf_float+0x1be>
 800f1ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800f1f2:	fa5f fb8b 	uxtb.w	fp, fp
 800f1f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f1fa:	d820      	bhi.n	800f23e <_printf_float+0x18a>
 800f1fc:	3901      	subs	r1, #1
 800f1fe:	465a      	mov	r2, fp
 800f200:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f204:	9109      	str	r1, [sp, #36]	; 0x24
 800f206:	f7ff ff17 	bl	800f038 <__exponent>
 800f20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f20c:	1813      	adds	r3, r2, r0
 800f20e:	2a01      	cmp	r2, #1
 800f210:	4681      	mov	r9, r0
 800f212:	6123      	str	r3, [r4, #16]
 800f214:	dc02      	bgt.n	800f21c <_printf_float+0x168>
 800f216:	6822      	ldr	r2, [r4, #0]
 800f218:	07d2      	lsls	r2, r2, #31
 800f21a:	d501      	bpl.n	800f220 <_printf_float+0x16c>
 800f21c:	3301      	adds	r3, #1
 800f21e:	6123      	str	r3, [r4, #16]
 800f220:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f224:	2b00      	cmp	r3, #0
 800f226:	d09c      	beq.n	800f162 <_printf_float+0xae>
 800f228:	232d      	movs	r3, #45	; 0x2d
 800f22a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f22e:	e798      	b.n	800f162 <_printf_float+0xae>
 800f230:	9a06      	ldr	r2, [sp, #24]
 800f232:	2a47      	cmp	r2, #71	; 0x47
 800f234:	d1be      	bne.n	800f1b4 <_printf_float+0x100>
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1bc      	bne.n	800f1b4 <_printf_float+0x100>
 800f23a:	2301      	movs	r3, #1
 800f23c:	e7b9      	b.n	800f1b2 <_printf_float+0xfe>
 800f23e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f242:	d118      	bne.n	800f276 <_printf_float+0x1c2>
 800f244:	2900      	cmp	r1, #0
 800f246:	6863      	ldr	r3, [r4, #4]
 800f248:	dd0b      	ble.n	800f262 <_printf_float+0x1ae>
 800f24a:	6121      	str	r1, [r4, #16]
 800f24c:	b913      	cbnz	r3, 800f254 <_printf_float+0x1a0>
 800f24e:	6822      	ldr	r2, [r4, #0]
 800f250:	07d0      	lsls	r0, r2, #31
 800f252:	d502      	bpl.n	800f25a <_printf_float+0x1a6>
 800f254:	3301      	adds	r3, #1
 800f256:	440b      	add	r3, r1
 800f258:	6123      	str	r3, [r4, #16]
 800f25a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f25c:	f04f 0900 	mov.w	r9, #0
 800f260:	e7de      	b.n	800f220 <_printf_float+0x16c>
 800f262:	b913      	cbnz	r3, 800f26a <_printf_float+0x1b6>
 800f264:	6822      	ldr	r2, [r4, #0]
 800f266:	07d2      	lsls	r2, r2, #31
 800f268:	d501      	bpl.n	800f26e <_printf_float+0x1ba>
 800f26a:	3302      	adds	r3, #2
 800f26c:	e7f4      	b.n	800f258 <_printf_float+0x1a4>
 800f26e:	2301      	movs	r3, #1
 800f270:	e7f2      	b.n	800f258 <_printf_float+0x1a4>
 800f272:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f278:	4299      	cmp	r1, r3
 800f27a:	db05      	blt.n	800f288 <_printf_float+0x1d4>
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	6121      	str	r1, [r4, #16]
 800f280:	07d8      	lsls	r0, r3, #31
 800f282:	d5ea      	bpl.n	800f25a <_printf_float+0x1a6>
 800f284:	1c4b      	adds	r3, r1, #1
 800f286:	e7e7      	b.n	800f258 <_printf_float+0x1a4>
 800f288:	2900      	cmp	r1, #0
 800f28a:	bfd4      	ite	le
 800f28c:	f1c1 0202 	rsble	r2, r1, #2
 800f290:	2201      	movgt	r2, #1
 800f292:	4413      	add	r3, r2
 800f294:	e7e0      	b.n	800f258 <_printf_float+0x1a4>
 800f296:	6823      	ldr	r3, [r4, #0]
 800f298:	055a      	lsls	r2, r3, #21
 800f29a:	d407      	bmi.n	800f2ac <_printf_float+0x1f8>
 800f29c:	6923      	ldr	r3, [r4, #16]
 800f29e:	4642      	mov	r2, r8
 800f2a0:	4631      	mov	r1, r6
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b8      	blx	r7
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	d12c      	bne.n	800f304 <_printf_float+0x250>
 800f2aa:	e764      	b.n	800f176 <_printf_float+0xc2>
 800f2ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2b0:	f240 80e0 	bls.w	800f474 <_printf_float+0x3c0>
 800f2b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	f7f1 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d034      	beq.n	800f32e <_printf_float+0x27a>
 800f2c4:	4a37      	ldr	r2, [pc, #220]	; (800f3a4 <_printf_float+0x2f0>)
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	47b8      	blx	r7
 800f2ce:	3001      	adds	r0, #1
 800f2d0:	f43f af51 	beq.w	800f176 <_printf_float+0xc2>
 800f2d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	db02      	blt.n	800f2e2 <_printf_float+0x22e>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	07d8      	lsls	r0, r3, #31
 800f2e0:	d510      	bpl.n	800f304 <_printf_float+0x250>
 800f2e2:	ee18 3a10 	vmov	r3, s16
 800f2e6:	4652      	mov	r2, sl
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	47b8      	blx	r7
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	f43f af41 	beq.w	800f176 <_printf_float+0xc2>
 800f2f4:	f04f 0800 	mov.w	r8, #0
 800f2f8:	f104 091a 	add.w	r9, r4, #26
 800f2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fe:	3b01      	subs	r3, #1
 800f300:	4543      	cmp	r3, r8
 800f302:	dc09      	bgt.n	800f318 <_printf_float+0x264>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	079b      	lsls	r3, r3, #30
 800f308:	f100 8105 	bmi.w	800f516 <_printf_float+0x462>
 800f30c:	68e0      	ldr	r0, [r4, #12]
 800f30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f310:	4298      	cmp	r0, r3
 800f312:	bfb8      	it	lt
 800f314:	4618      	movlt	r0, r3
 800f316:	e730      	b.n	800f17a <_printf_float+0xc6>
 800f318:	2301      	movs	r3, #1
 800f31a:	464a      	mov	r2, r9
 800f31c:	4631      	mov	r1, r6
 800f31e:	4628      	mov	r0, r5
 800f320:	47b8      	blx	r7
 800f322:	3001      	adds	r0, #1
 800f324:	f43f af27 	beq.w	800f176 <_printf_float+0xc2>
 800f328:	f108 0801 	add.w	r8, r8, #1
 800f32c:	e7e6      	b.n	800f2fc <_printf_float+0x248>
 800f32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f330:	2b00      	cmp	r3, #0
 800f332:	dc39      	bgt.n	800f3a8 <_printf_float+0x2f4>
 800f334:	4a1b      	ldr	r2, [pc, #108]	; (800f3a4 <_printf_float+0x2f0>)
 800f336:	2301      	movs	r3, #1
 800f338:	4631      	mov	r1, r6
 800f33a:	4628      	mov	r0, r5
 800f33c:	47b8      	blx	r7
 800f33e:	3001      	adds	r0, #1
 800f340:	f43f af19 	beq.w	800f176 <_printf_float+0xc2>
 800f344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f348:	4313      	orrs	r3, r2
 800f34a:	d102      	bne.n	800f352 <_printf_float+0x29e>
 800f34c:	6823      	ldr	r3, [r4, #0]
 800f34e:	07d9      	lsls	r1, r3, #31
 800f350:	d5d8      	bpl.n	800f304 <_printf_float+0x250>
 800f352:	ee18 3a10 	vmov	r3, s16
 800f356:	4652      	mov	r2, sl
 800f358:	4631      	mov	r1, r6
 800f35a:	4628      	mov	r0, r5
 800f35c:	47b8      	blx	r7
 800f35e:	3001      	adds	r0, #1
 800f360:	f43f af09 	beq.w	800f176 <_printf_float+0xc2>
 800f364:	f04f 0900 	mov.w	r9, #0
 800f368:	f104 0a1a 	add.w	sl, r4, #26
 800f36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f36e:	425b      	negs	r3, r3
 800f370:	454b      	cmp	r3, r9
 800f372:	dc01      	bgt.n	800f378 <_printf_float+0x2c4>
 800f374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f376:	e792      	b.n	800f29e <_printf_float+0x1ea>
 800f378:	2301      	movs	r3, #1
 800f37a:	4652      	mov	r2, sl
 800f37c:	4631      	mov	r1, r6
 800f37e:	4628      	mov	r0, r5
 800f380:	47b8      	blx	r7
 800f382:	3001      	adds	r0, #1
 800f384:	f43f aef7 	beq.w	800f176 <_printf_float+0xc2>
 800f388:	f109 0901 	add.w	r9, r9, #1
 800f38c:	e7ee      	b.n	800f36c <_printf_float+0x2b8>
 800f38e:	bf00      	nop
 800f390:	7fefffff 	.word	0x7fefffff
 800f394:	08017264 	.word	0x08017264
 800f398:	08017268 	.word	0x08017268
 800f39c:	08017270 	.word	0x08017270
 800f3a0:	0801726c 	.word	0x0801726c
 800f3a4:	08017274 	.word	0x08017274
 800f3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	bfa8      	it	ge
 800f3b0:	461a      	movge	r2, r3
 800f3b2:	2a00      	cmp	r2, #0
 800f3b4:	4691      	mov	r9, r2
 800f3b6:	dc37      	bgt.n	800f428 <_printf_float+0x374>
 800f3b8:	f04f 0b00 	mov.w	fp, #0
 800f3bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3c0:	f104 021a 	add.w	r2, r4, #26
 800f3c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3c6:	9305      	str	r3, [sp, #20]
 800f3c8:	eba3 0309 	sub.w	r3, r3, r9
 800f3cc:	455b      	cmp	r3, fp
 800f3ce:	dc33      	bgt.n	800f438 <_printf_float+0x384>
 800f3d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	db3b      	blt.n	800f450 <_printf_float+0x39c>
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	07da      	lsls	r2, r3, #31
 800f3dc:	d438      	bmi.n	800f450 <_printf_float+0x39c>
 800f3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3e0:	9a05      	ldr	r2, [sp, #20]
 800f3e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3e4:	1a9a      	subs	r2, r3, r2
 800f3e6:	eba3 0901 	sub.w	r9, r3, r1
 800f3ea:	4591      	cmp	r9, r2
 800f3ec:	bfa8      	it	ge
 800f3ee:	4691      	movge	r9, r2
 800f3f0:	f1b9 0f00 	cmp.w	r9, #0
 800f3f4:	dc35      	bgt.n	800f462 <_printf_float+0x3ae>
 800f3f6:	f04f 0800 	mov.w	r8, #0
 800f3fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3fe:	f104 0a1a 	add.w	sl, r4, #26
 800f402:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f406:	1a9b      	subs	r3, r3, r2
 800f408:	eba3 0309 	sub.w	r3, r3, r9
 800f40c:	4543      	cmp	r3, r8
 800f40e:	f77f af79 	ble.w	800f304 <_printf_float+0x250>
 800f412:	2301      	movs	r3, #1
 800f414:	4652      	mov	r2, sl
 800f416:	4631      	mov	r1, r6
 800f418:	4628      	mov	r0, r5
 800f41a:	47b8      	blx	r7
 800f41c:	3001      	adds	r0, #1
 800f41e:	f43f aeaa 	beq.w	800f176 <_printf_float+0xc2>
 800f422:	f108 0801 	add.w	r8, r8, #1
 800f426:	e7ec      	b.n	800f402 <_printf_float+0x34e>
 800f428:	4613      	mov	r3, r2
 800f42a:	4631      	mov	r1, r6
 800f42c:	4642      	mov	r2, r8
 800f42e:	4628      	mov	r0, r5
 800f430:	47b8      	blx	r7
 800f432:	3001      	adds	r0, #1
 800f434:	d1c0      	bne.n	800f3b8 <_printf_float+0x304>
 800f436:	e69e      	b.n	800f176 <_printf_float+0xc2>
 800f438:	2301      	movs	r3, #1
 800f43a:	4631      	mov	r1, r6
 800f43c:	4628      	mov	r0, r5
 800f43e:	9205      	str	r2, [sp, #20]
 800f440:	47b8      	blx	r7
 800f442:	3001      	adds	r0, #1
 800f444:	f43f ae97 	beq.w	800f176 <_printf_float+0xc2>
 800f448:	9a05      	ldr	r2, [sp, #20]
 800f44a:	f10b 0b01 	add.w	fp, fp, #1
 800f44e:	e7b9      	b.n	800f3c4 <_printf_float+0x310>
 800f450:	ee18 3a10 	vmov	r3, s16
 800f454:	4652      	mov	r2, sl
 800f456:	4631      	mov	r1, r6
 800f458:	4628      	mov	r0, r5
 800f45a:	47b8      	blx	r7
 800f45c:	3001      	adds	r0, #1
 800f45e:	d1be      	bne.n	800f3de <_printf_float+0x32a>
 800f460:	e689      	b.n	800f176 <_printf_float+0xc2>
 800f462:	9a05      	ldr	r2, [sp, #20]
 800f464:	464b      	mov	r3, r9
 800f466:	4442      	add	r2, r8
 800f468:	4631      	mov	r1, r6
 800f46a:	4628      	mov	r0, r5
 800f46c:	47b8      	blx	r7
 800f46e:	3001      	adds	r0, #1
 800f470:	d1c1      	bne.n	800f3f6 <_printf_float+0x342>
 800f472:	e680      	b.n	800f176 <_printf_float+0xc2>
 800f474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f476:	2a01      	cmp	r2, #1
 800f478:	dc01      	bgt.n	800f47e <_printf_float+0x3ca>
 800f47a:	07db      	lsls	r3, r3, #31
 800f47c:	d538      	bpl.n	800f4f0 <_printf_float+0x43c>
 800f47e:	2301      	movs	r3, #1
 800f480:	4642      	mov	r2, r8
 800f482:	4631      	mov	r1, r6
 800f484:	4628      	mov	r0, r5
 800f486:	47b8      	blx	r7
 800f488:	3001      	adds	r0, #1
 800f48a:	f43f ae74 	beq.w	800f176 <_printf_float+0xc2>
 800f48e:	ee18 3a10 	vmov	r3, s16
 800f492:	4652      	mov	r2, sl
 800f494:	4631      	mov	r1, r6
 800f496:	4628      	mov	r0, r5
 800f498:	47b8      	blx	r7
 800f49a:	3001      	adds	r0, #1
 800f49c:	f43f ae6b 	beq.w	800f176 <_printf_float+0xc2>
 800f4a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f7f1 fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4ac:	b9d8      	cbnz	r0, 800f4e6 <_printf_float+0x432>
 800f4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4b0:	f108 0201 	add.w	r2, r8, #1
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	4631      	mov	r1, r6
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	47b8      	blx	r7
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d10e      	bne.n	800f4de <_printf_float+0x42a>
 800f4c0:	e659      	b.n	800f176 <_printf_float+0xc2>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	4652      	mov	r2, sl
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	f43f ae52 	beq.w	800f176 <_printf_float+0xc2>
 800f4d2:	f108 0801 	add.w	r8, r8, #1
 800f4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	4543      	cmp	r3, r8
 800f4dc:	dcf1      	bgt.n	800f4c2 <_printf_float+0x40e>
 800f4de:	464b      	mov	r3, r9
 800f4e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f4e4:	e6dc      	b.n	800f2a0 <_printf_float+0x1ec>
 800f4e6:	f04f 0800 	mov.w	r8, #0
 800f4ea:	f104 0a1a 	add.w	sl, r4, #26
 800f4ee:	e7f2      	b.n	800f4d6 <_printf_float+0x422>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4642      	mov	r2, r8
 800f4f4:	e7df      	b.n	800f4b6 <_printf_float+0x402>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	464a      	mov	r2, r9
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b8      	blx	r7
 800f500:	3001      	adds	r0, #1
 800f502:	f43f ae38 	beq.w	800f176 <_printf_float+0xc2>
 800f506:	f108 0801 	add.w	r8, r8, #1
 800f50a:	68e3      	ldr	r3, [r4, #12]
 800f50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f50e:	1a5b      	subs	r3, r3, r1
 800f510:	4543      	cmp	r3, r8
 800f512:	dcf0      	bgt.n	800f4f6 <_printf_float+0x442>
 800f514:	e6fa      	b.n	800f30c <_printf_float+0x258>
 800f516:	f04f 0800 	mov.w	r8, #0
 800f51a:	f104 0919 	add.w	r9, r4, #25
 800f51e:	e7f4      	b.n	800f50a <_printf_float+0x456>

0800f520 <_printf_common>:
 800f520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f524:	4616      	mov	r6, r2
 800f526:	4699      	mov	r9, r3
 800f528:	688a      	ldr	r2, [r1, #8]
 800f52a:	690b      	ldr	r3, [r1, #16]
 800f52c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f530:	4293      	cmp	r3, r2
 800f532:	bfb8      	it	lt
 800f534:	4613      	movlt	r3, r2
 800f536:	6033      	str	r3, [r6, #0]
 800f538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f53c:	4607      	mov	r7, r0
 800f53e:	460c      	mov	r4, r1
 800f540:	b10a      	cbz	r2, 800f546 <_printf_common+0x26>
 800f542:	3301      	adds	r3, #1
 800f544:	6033      	str	r3, [r6, #0]
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	0699      	lsls	r1, r3, #26
 800f54a:	bf42      	ittt	mi
 800f54c:	6833      	ldrmi	r3, [r6, #0]
 800f54e:	3302      	addmi	r3, #2
 800f550:	6033      	strmi	r3, [r6, #0]
 800f552:	6825      	ldr	r5, [r4, #0]
 800f554:	f015 0506 	ands.w	r5, r5, #6
 800f558:	d106      	bne.n	800f568 <_printf_common+0x48>
 800f55a:	f104 0a19 	add.w	sl, r4, #25
 800f55e:	68e3      	ldr	r3, [r4, #12]
 800f560:	6832      	ldr	r2, [r6, #0]
 800f562:	1a9b      	subs	r3, r3, r2
 800f564:	42ab      	cmp	r3, r5
 800f566:	dc26      	bgt.n	800f5b6 <_printf_common+0x96>
 800f568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f56c:	1e13      	subs	r3, r2, #0
 800f56e:	6822      	ldr	r2, [r4, #0]
 800f570:	bf18      	it	ne
 800f572:	2301      	movne	r3, #1
 800f574:	0692      	lsls	r2, r2, #26
 800f576:	d42b      	bmi.n	800f5d0 <_printf_common+0xb0>
 800f578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f57c:	4649      	mov	r1, r9
 800f57e:	4638      	mov	r0, r7
 800f580:	47c0      	blx	r8
 800f582:	3001      	adds	r0, #1
 800f584:	d01e      	beq.n	800f5c4 <_printf_common+0xa4>
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	68e5      	ldr	r5, [r4, #12]
 800f58a:	6832      	ldr	r2, [r6, #0]
 800f58c:	f003 0306 	and.w	r3, r3, #6
 800f590:	2b04      	cmp	r3, #4
 800f592:	bf08      	it	eq
 800f594:	1aad      	subeq	r5, r5, r2
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	6922      	ldr	r2, [r4, #16]
 800f59a:	bf0c      	ite	eq
 800f59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5a0:	2500      	movne	r5, #0
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	bfc4      	itt	gt
 800f5a6:	1a9b      	subgt	r3, r3, r2
 800f5a8:	18ed      	addgt	r5, r5, r3
 800f5aa:	2600      	movs	r6, #0
 800f5ac:	341a      	adds	r4, #26
 800f5ae:	42b5      	cmp	r5, r6
 800f5b0:	d11a      	bne.n	800f5e8 <_printf_common+0xc8>
 800f5b2:	2000      	movs	r0, #0
 800f5b4:	e008      	b.n	800f5c8 <_printf_common+0xa8>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	4652      	mov	r2, sl
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	4638      	mov	r0, r7
 800f5be:	47c0      	blx	r8
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d103      	bne.n	800f5cc <_printf_common+0xac>
 800f5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5cc:	3501      	adds	r5, #1
 800f5ce:	e7c6      	b.n	800f55e <_printf_common+0x3e>
 800f5d0:	18e1      	adds	r1, r4, r3
 800f5d2:	1c5a      	adds	r2, r3, #1
 800f5d4:	2030      	movs	r0, #48	; 0x30
 800f5d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5da:	4422      	add	r2, r4
 800f5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5e4:	3302      	adds	r3, #2
 800f5e6:	e7c7      	b.n	800f578 <_printf_common+0x58>
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	4622      	mov	r2, r4
 800f5ec:	4649      	mov	r1, r9
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	47c0      	blx	r8
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	d0e6      	beq.n	800f5c4 <_printf_common+0xa4>
 800f5f6:	3601      	adds	r6, #1
 800f5f8:	e7d9      	b.n	800f5ae <_printf_common+0x8e>
	...

0800f5fc <_printf_i>:
 800f5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f600:	7e0f      	ldrb	r7, [r1, #24]
 800f602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f604:	2f78      	cmp	r7, #120	; 0x78
 800f606:	4691      	mov	r9, r2
 800f608:	4680      	mov	r8, r0
 800f60a:	460c      	mov	r4, r1
 800f60c:	469a      	mov	sl, r3
 800f60e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f612:	d807      	bhi.n	800f624 <_printf_i+0x28>
 800f614:	2f62      	cmp	r7, #98	; 0x62
 800f616:	d80a      	bhi.n	800f62e <_printf_i+0x32>
 800f618:	2f00      	cmp	r7, #0
 800f61a:	f000 80d8 	beq.w	800f7ce <_printf_i+0x1d2>
 800f61e:	2f58      	cmp	r7, #88	; 0x58
 800f620:	f000 80a3 	beq.w	800f76a <_printf_i+0x16e>
 800f624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f62c:	e03a      	b.n	800f6a4 <_printf_i+0xa8>
 800f62e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f632:	2b15      	cmp	r3, #21
 800f634:	d8f6      	bhi.n	800f624 <_printf_i+0x28>
 800f636:	a101      	add	r1, pc, #4	; (adr r1, 800f63c <_printf_i+0x40>)
 800f638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f63c:	0800f695 	.word	0x0800f695
 800f640:	0800f6a9 	.word	0x0800f6a9
 800f644:	0800f625 	.word	0x0800f625
 800f648:	0800f625 	.word	0x0800f625
 800f64c:	0800f625 	.word	0x0800f625
 800f650:	0800f625 	.word	0x0800f625
 800f654:	0800f6a9 	.word	0x0800f6a9
 800f658:	0800f625 	.word	0x0800f625
 800f65c:	0800f625 	.word	0x0800f625
 800f660:	0800f625 	.word	0x0800f625
 800f664:	0800f625 	.word	0x0800f625
 800f668:	0800f7b5 	.word	0x0800f7b5
 800f66c:	0800f6d9 	.word	0x0800f6d9
 800f670:	0800f797 	.word	0x0800f797
 800f674:	0800f625 	.word	0x0800f625
 800f678:	0800f625 	.word	0x0800f625
 800f67c:	0800f7d7 	.word	0x0800f7d7
 800f680:	0800f625 	.word	0x0800f625
 800f684:	0800f6d9 	.word	0x0800f6d9
 800f688:	0800f625 	.word	0x0800f625
 800f68c:	0800f625 	.word	0x0800f625
 800f690:	0800f79f 	.word	0x0800f79f
 800f694:	682b      	ldr	r3, [r5, #0]
 800f696:	1d1a      	adds	r2, r3, #4
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	602a      	str	r2, [r5, #0]
 800f69c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	e0a3      	b.n	800f7f0 <_printf_i+0x1f4>
 800f6a8:	6820      	ldr	r0, [r4, #0]
 800f6aa:	6829      	ldr	r1, [r5, #0]
 800f6ac:	0606      	lsls	r6, r0, #24
 800f6ae:	f101 0304 	add.w	r3, r1, #4
 800f6b2:	d50a      	bpl.n	800f6ca <_printf_i+0xce>
 800f6b4:	680e      	ldr	r6, [r1, #0]
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	2e00      	cmp	r6, #0
 800f6ba:	da03      	bge.n	800f6c4 <_printf_i+0xc8>
 800f6bc:	232d      	movs	r3, #45	; 0x2d
 800f6be:	4276      	negs	r6, r6
 800f6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6c4:	485e      	ldr	r0, [pc, #376]	; (800f840 <_printf_i+0x244>)
 800f6c6:	230a      	movs	r3, #10
 800f6c8:	e019      	b.n	800f6fe <_printf_i+0x102>
 800f6ca:	680e      	ldr	r6, [r1, #0]
 800f6cc:	602b      	str	r3, [r5, #0]
 800f6ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6d2:	bf18      	it	ne
 800f6d4:	b236      	sxthne	r6, r6
 800f6d6:	e7ef      	b.n	800f6b8 <_printf_i+0xbc>
 800f6d8:	682b      	ldr	r3, [r5, #0]
 800f6da:	6820      	ldr	r0, [r4, #0]
 800f6dc:	1d19      	adds	r1, r3, #4
 800f6de:	6029      	str	r1, [r5, #0]
 800f6e0:	0601      	lsls	r1, r0, #24
 800f6e2:	d501      	bpl.n	800f6e8 <_printf_i+0xec>
 800f6e4:	681e      	ldr	r6, [r3, #0]
 800f6e6:	e002      	b.n	800f6ee <_printf_i+0xf2>
 800f6e8:	0646      	lsls	r6, r0, #25
 800f6ea:	d5fb      	bpl.n	800f6e4 <_printf_i+0xe8>
 800f6ec:	881e      	ldrh	r6, [r3, #0]
 800f6ee:	4854      	ldr	r0, [pc, #336]	; (800f840 <_printf_i+0x244>)
 800f6f0:	2f6f      	cmp	r7, #111	; 0x6f
 800f6f2:	bf0c      	ite	eq
 800f6f4:	2308      	moveq	r3, #8
 800f6f6:	230a      	movne	r3, #10
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6fe:	6865      	ldr	r5, [r4, #4]
 800f700:	60a5      	str	r5, [r4, #8]
 800f702:	2d00      	cmp	r5, #0
 800f704:	bfa2      	ittt	ge
 800f706:	6821      	ldrge	r1, [r4, #0]
 800f708:	f021 0104 	bicge.w	r1, r1, #4
 800f70c:	6021      	strge	r1, [r4, #0]
 800f70e:	b90e      	cbnz	r6, 800f714 <_printf_i+0x118>
 800f710:	2d00      	cmp	r5, #0
 800f712:	d04d      	beq.n	800f7b0 <_printf_i+0x1b4>
 800f714:	4615      	mov	r5, r2
 800f716:	fbb6 f1f3 	udiv	r1, r6, r3
 800f71a:	fb03 6711 	mls	r7, r3, r1, r6
 800f71e:	5dc7      	ldrb	r7, [r0, r7]
 800f720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f724:	4637      	mov	r7, r6
 800f726:	42bb      	cmp	r3, r7
 800f728:	460e      	mov	r6, r1
 800f72a:	d9f4      	bls.n	800f716 <_printf_i+0x11a>
 800f72c:	2b08      	cmp	r3, #8
 800f72e:	d10b      	bne.n	800f748 <_printf_i+0x14c>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	07de      	lsls	r6, r3, #31
 800f734:	d508      	bpl.n	800f748 <_printf_i+0x14c>
 800f736:	6923      	ldr	r3, [r4, #16]
 800f738:	6861      	ldr	r1, [r4, #4]
 800f73a:	4299      	cmp	r1, r3
 800f73c:	bfde      	ittt	le
 800f73e:	2330      	movle	r3, #48	; 0x30
 800f740:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f744:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f748:	1b52      	subs	r2, r2, r5
 800f74a:	6122      	str	r2, [r4, #16]
 800f74c:	f8cd a000 	str.w	sl, [sp]
 800f750:	464b      	mov	r3, r9
 800f752:	aa03      	add	r2, sp, #12
 800f754:	4621      	mov	r1, r4
 800f756:	4640      	mov	r0, r8
 800f758:	f7ff fee2 	bl	800f520 <_printf_common>
 800f75c:	3001      	adds	r0, #1
 800f75e:	d14c      	bne.n	800f7fa <_printf_i+0x1fe>
 800f760:	f04f 30ff 	mov.w	r0, #4294967295
 800f764:	b004      	add	sp, #16
 800f766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f76a:	4835      	ldr	r0, [pc, #212]	; (800f840 <_printf_i+0x244>)
 800f76c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f770:	6829      	ldr	r1, [r5, #0]
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	f851 6b04 	ldr.w	r6, [r1], #4
 800f778:	6029      	str	r1, [r5, #0]
 800f77a:	061d      	lsls	r5, r3, #24
 800f77c:	d514      	bpl.n	800f7a8 <_printf_i+0x1ac>
 800f77e:	07df      	lsls	r7, r3, #31
 800f780:	bf44      	itt	mi
 800f782:	f043 0320 	orrmi.w	r3, r3, #32
 800f786:	6023      	strmi	r3, [r4, #0]
 800f788:	b91e      	cbnz	r6, 800f792 <_printf_i+0x196>
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	f023 0320 	bic.w	r3, r3, #32
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	2310      	movs	r3, #16
 800f794:	e7b0      	b.n	800f6f8 <_printf_i+0xfc>
 800f796:	6823      	ldr	r3, [r4, #0]
 800f798:	f043 0320 	orr.w	r3, r3, #32
 800f79c:	6023      	str	r3, [r4, #0]
 800f79e:	2378      	movs	r3, #120	; 0x78
 800f7a0:	4828      	ldr	r0, [pc, #160]	; (800f844 <_printf_i+0x248>)
 800f7a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7a6:	e7e3      	b.n	800f770 <_printf_i+0x174>
 800f7a8:	0659      	lsls	r1, r3, #25
 800f7aa:	bf48      	it	mi
 800f7ac:	b2b6      	uxthmi	r6, r6
 800f7ae:	e7e6      	b.n	800f77e <_printf_i+0x182>
 800f7b0:	4615      	mov	r5, r2
 800f7b2:	e7bb      	b.n	800f72c <_printf_i+0x130>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	6826      	ldr	r6, [r4, #0]
 800f7b8:	6961      	ldr	r1, [r4, #20]
 800f7ba:	1d18      	adds	r0, r3, #4
 800f7bc:	6028      	str	r0, [r5, #0]
 800f7be:	0635      	lsls	r5, r6, #24
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	d501      	bpl.n	800f7c8 <_printf_i+0x1cc>
 800f7c4:	6019      	str	r1, [r3, #0]
 800f7c6:	e002      	b.n	800f7ce <_printf_i+0x1d2>
 800f7c8:	0670      	lsls	r0, r6, #25
 800f7ca:	d5fb      	bpl.n	800f7c4 <_printf_i+0x1c8>
 800f7cc:	8019      	strh	r1, [r3, #0]
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	6123      	str	r3, [r4, #16]
 800f7d2:	4615      	mov	r5, r2
 800f7d4:	e7ba      	b.n	800f74c <_printf_i+0x150>
 800f7d6:	682b      	ldr	r3, [r5, #0]
 800f7d8:	1d1a      	adds	r2, r3, #4
 800f7da:	602a      	str	r2, [r5, #0]
 800f7dc:	681d      	ldr	r5, [r3, #0]
 800f7de:	6862      	ldr	r2, [r4, #4]
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	f7f0 fd04 	bl	80001f0 <memchr>
 800f7e8:	b108      	cbz	r0, 800f7ee <_printf_i+0x1f2>
 800f7ea:	1b40      	subs	r0, r0, r5
 800f7ec:	6060      	str	r0, [r4, #4]
 800f7ee:	6863      	ldr	r3, [r4, #4]
 800f7f0:	6123      	str	r3, [r4, #16]
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7f8:	e7a8      	b.n	800f74c <_printf_i+0x150>
 800f7fa:	6923      	ldr	r3, [r4, #16]
 800f7fc:	462a      	mov	r2, r5
 800f7fe:	4649      	mov	r1, r9
 800f800:	4640      	mov	r0, r8
 800f802:	47d0      	blx	sl
 800f804:	3001      	adds	r0, #1
 800f806:	d0ab      	beq.n	800f760 <_printf_i+0x164>
 800f808:	6823      	ldr	r3, [r4, #0]
 800f80a:	079b      	lsls	r3, r3, #30
 800f80c:	d413      	bmi.n	800f836 <_printf_i+0x23a>
 800f80e:	68e0      	ldr	r0, [r4, #12]
 800f810:	9b03      	ldr	r3, [sp, #12]
 800f812:	4298      	cmp	r0, r3
 800f814:	bfb8      	it	lt
 800f816:	4618      	movlt	r0, r3
 800f818:	e7a4      	b.n	800f764 <_printf_i+0x168>
 800f81a:	2301      	movs	r3, #1
 800f81c:	4632      	mov	r2, r6
 800f81e:	4649      	mov	r1, r9
 800f820:	4640      	mov	r0, r8
 800f822:	47d0      	blx	sl
 800f824:	3001      	adds	r0, #1
 800f826:	d09b      	beq.n	800f760 <_printf_i+0x164>
 800f828:	3501      	adds	r5, #1
 800f82a:	68e3      	ldr	r3, [r4, #12]
 800f82c:	9903      	ldr	r1, [sp, #12]
 800f82e:	1a5b      	subs	r3, r3, r1
 800f830:	42ab      	cmp	r3, r5
 800f832:	dcf2      	bgt.n	800f81a <_printf_i+0x21e>
 800f834:	e7eb      	b.n	800f80e <_printf_i+0x212>
 800f836:	2500      	movs	r5, #0
 800f838:	f104 0619 	add.w	r6, r4, #25
 800f83c:	e7f5      	b.n	800f82a <_printf_i+0x22e>
 800f83e:	bf00      	nop
 800f840:	08017276 	.word	0x08017276
 800f844:	08017287 	.word	0x08017287

0800f848 <_scanf_float>:
 800f848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84c:	b087      	sub	sp, #28
 800f84e:	4617      	mov	r7, r2
 800f850:	9303      	str	r3, [sp, #12]
 800f852:	688b      	ldr	r3, [r1, #8]
 800f854:	1e5a      	subs	r2, r3, #1
 800f856:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f85a:	bf83      	ittte	hi
 800f85c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f860:	195b      	addhi	r3, r3, r5
 800f862:	9302      	strhi	r3, [sp, #8]
 800f864:	2300      	movls	r3, #0
 800f866:	bf86      	itte	hi
 800f868:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f86c:	608b      	strhi	r3, [r1, #8]
 800f86e:	9302      	strls	r3, [sp, #8]
 800f870:	680b      	ldr	r3, [r1, #0]
 800f872:	468b      	mov	fp, r1
 800f874:	2500      	movs	r5, #0
 800f876:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f87a:	f84b 3b1c 	str.w	r3, [fp], #28
 800f87e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f882:	4680      	mov	r8, r0
 800f884:	460c      	mov	r4, r1
 800f886:	465e      	mov	r6, fp
 800f888:	46aa      	mov	sl, r5
 800f88a:	46a9      	mov	r9, r5
 800f88c:	9501      	str	r5, [sp, #4]
 800f88e:	68a2      	ldr	r2, [r4, #8]
 800f890:	b152      	cbz	r2, 800f8a8 <_scanf_float+0x60>
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	2b4e      	cmp	r3, #78	; 0x4e
 800f898:	d864      	bhi.n	800f964 <_scanf_float+0x11c>
 800f89a:	2b40      	cmp	r3, #64	; 0x40
 800f89c:	d83c      	bhi.n	800f918 <_scanf_float+0xd0>
 800f89e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f8a2:	b2c8      	uxtb	r0, r1
 800f8a4:	280e      	cmp	r0, #14
 800f8a6:	d93a      	bls.n	800f91e <_scanf_float+0xd6>
 800f8a8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ac:	d003      	beq.n	800f8b6 <_scanf_float+0x6e>
 800f8ae:	6823      	ldr	r3, [r4, #0]
 800f8b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8ba:	f1ba 0f01 	cmp.w	sl, #1
 800f8be:	f200 8113 	bhi.w	800fae8 <_scanf_float+0x2a0>
 800f8c2:	455e      	cmp	r6, fp
 800f8c4:	f200 8105 	bhi.w	800fad2 <_scanf_float+0x28a>
 800f8c8:	2501      	movs	r5, #1
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	b007      	add	sp, #28
 800f8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f8d6:	2a0d      	cmp	r2, #13
 800f8d8:	d8e6      	bhi.n	800f8a8 <_scanf_float+0x60>
 800f8da:	a101      	add	r1, pc, #4	; (adr r1, 800f8e0 <_scanf_float+0x98>)
 800f8dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f8e0:	0800fa1f 	.word	0x0800fa1f
 800f8e4:	0800f8a9 	.word	0x0800f8a9
 800f8e8:	0800f8a9 	.word	0x0800f8a9
 800f8ec:	0800f8a9 	.word	0x0800f8a9
 800f8f0:	0800fa7f 	.word	0x0800fa7f
 800f8f4:	0800fa57 	.word	0x0800fa57
 800f8f8:	0800f8a9 	.word	0x0800f8a9
 800f8fc:	0800f8a9 	.word	0x0800f8a9
 800f900:	0800fa2d 	.word	0x0800fa2d
 800f904:	0800f8a9 	.word	0x0800f8a9
 800f908:	0800f8a9 	.word	0x0800f8a9
 800f90c:	0800f8a9 	.word	0x0800f8a9
 800f910:	0800f8a9 	.word	0x0800f8a9
 800f914:	0800f9e5 	.word	0x0800f9e5
 800f918:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f91c:	e7db      	b.n	800f8d6 <_scanf_float+0x8e>
 800f91e:	290e      	cmp	r1, #14
 800f920:	d8c2      	bhi.n	800f8a8 <_scanf_float+0x60>
 800f922:	a001      	add	r0, pc, #4	; (adr r0, 800f928 <_scanf_float+0xe0>)
 800f924:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f928:	0800f9d7 	.word	0x0800f9d7
 800f92c:	0800f8a9 	.word	0x0800f8a9
 800f930:	0800f9d7 	.word	0x0800f9d7
 800f934:	0800fa6b 	.word	0x0800fa6b
 800f938:	0800f8a9 	.word	0x0800f8a9
 800f93c:	0800f985 	.word	0x0800f985
 800f940:	0800f9c1 	.word	0x0800f9c1
 800f944:	0800f9c1 	.word	0x0800f9c1
 800f948:	0800f9c1 	.word	0x0800f9c1
 800f94c:	0800f9c1 	.word	0x0800f9c1
 800f950:	0800f9c1 	.word	0x0800f9c1
 800f954:	0800f9c1 	.word	0x0800f9c1
 800f958:	0800f9c1 	.word	0x0800f9c1
 800f95c:	0800f9c1 	.word	0x0800f9c1
 800f960:	0800f9c1 	.word	0x0800f9c1
 800f964:	2b6e      	cmp	r3, #110	; 0x6e
 800f966:	d809      	bhi.n	800f97c <_scanf_float+0x134>
 800f968:	2b60      	cmp	r3, #96	; 0x60
 800f96a:	d8b2      	bhi.n	800f8d2 <_scanf_float+0x8a>
 800f96c:	2b54      	cmp	r3, #84	; 0x54
 800f96e:	d077      	beq.n	800fa60 <_scanf_float+0x218>
 800f970:	2b59      	cmp	r3, #89	; 0x59
 800f972:	d199      	bne.n	800f8a8 <_scanf_float+0x60>
 800f974:	2d07      	cmp	r5, #7
 800f976:	d197      	bne.n	800f8a8 <_scanf_float+0x60>
 800f978:	2508      	movs	r5, #8
 800f97a:	e029      	b.n	800f9d0 <_scanf_float+0x188>
 800f97c:	2b74      	cmp	r3, #116	; 0x74
 800f97e:	d06f      	beq.n	800fa60 <_scanf_float+0x218>
 800f980:	2b79      	cmp	r3, #121	; 0x79
 800f982:	e7f6      	b.n	800f972 <_scanf_float+0x12a>
 800f984:	6821      	ldr	r1, [r4, #0]
 800f986:	05c8      	lsls	r0, r1, #23
 800f988:	d51a      	bpl.n	800f9c0 <_scanf_float+0x178>
 800f98a:	9b02      	ldr	r3, [sp, #8]
 800f98c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f990:	6021      	str	r1, [r4, #0]
 800f992:	f109 0901 	add.w	r9, r9, #1
 800f996:	b11b      	cbz	r3, 800f9a0 <_scanf_float+0x158>
 800f998:	3b01      	subs	r3, #1
 800f99a:	3201      	adds	r2, #1
 800f99c:	9302      	str	r3, [sp, #8]
 800f99e:	60a2      	str	r2, [r4, #8]
 800f9a0:	68a3      	ldr	r3, [r4, #8]
 800f9a2:	3b01      	subs	r3, #1
 800f9a4:	60a3      	str	r3, [r4, #8]
 800f9a6:	6923      	ldr	r3, [r4, #16]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	6123      	str	r3, [r4, #16]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	607b      	str	r3, [r7, #4]
 800f9b4:	f340 8084 	ble.w	800fac0 <_scanf_float+0x278>
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	603b      	str	r3, [r7, #0]
 800f9be:	e766      	b.n	800f88e <_scanf_float+0x46>
 800f9c0:	eb1a 0f05 	cmn.w	sl, r5
 800f9c4:	f47f af70 	bne.w	800f8a8 <_scanf_float+0x60>
 800f9c8:	6822      	ldr	r2, [r4, #0]
 800f9ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f9ce:	6022      	str	r2, [r4, #0]
 800f9d0:	f806 3b01 	strb.w	r3, [r6], #1
 800f9d4:	e7e4      	b.n	800f9a0 <_scanf_float+0x158>
 800f9d6:	6822      	ldr	r2, [r4, #0]
 800f9d8:	0610      	lsls	r0, r2, #24
 800f9da:	f57f af65 	bpl.w	800f8a8 <_scanf_float+0x60>
 800f9de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9e2:	e7f4      	b.n	800f9ce <_scanf_float+0x186>
 800f9e4:	f1ba 0f00 	cmp.w	sl, #0
 800f9e8:	d10e      	bne.n	800fa08 <_scanf_float+0x1c0>
 800f9ea:	f1b9 0f00 	cmp.w	r9, #0
 800f9ee:	d10e      	bne.n	800fa0e <_scanf_float+0x1c6>
 800f9f0:	6822      	ldr	r2, [r4, #0]
 800f9f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f9f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f9fa:	d108      	bne.n	800fa0e <_scanf_float+0x1c6>
 800f9fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa00:	6022      	str	r2, [r4, #0]
 800fa02:	f04f 0a01 	mov.w	sl, #1
 800fa06:	e7e3      	b.n	800f9d0 <_scanf_float+0x188>
 800fa08:	f1ba 0f02 	cmp.w	sl, #2
 800fa0c:	d055      	beq.n	800faba <_scanf_float+0x272>
 800fa0e:	2d01      	cmp	r5, #1
 800fa10:	d002      	beq.n	800fa18 <_scanf_float+0x1d0>
 800fa12:	2d04      	cmp	r5, #4
 800fa14:	f47f af48 	bne.w	800f8a8 <_scanf_float+0x60>
 800fa18:	3501      	adds	r5, #1
 800fa1a:	b2ed      	uxtb	r5, r5
 800fa1c:	e7d8      	b.n	800f9d0 <_scanf_float+0x188>
 800fa1e:	f1ba 0f01 	cmp.w	sl, #1
 800fa22:	f47f af41 	bne.w	800f8a8 <_scanf_float+0x60>
 800fa26:	f04f 0a02 	mov.w	sl, #2
 800fa2a:	e7d1      	b.n	800f9d0 <_scanf_float+0x188>
 800fa2c:	b97d      	cbnz	r5, 800fa4e <_scanf_float+0x206>
 800fa2e:	f1b9 0f00 	cmp.w	r9, #0
 800fa32:	f47f af3c 	bne.w	800f8ae <_scanf_float+0x66>
 800fa36:	6822      	ldr	r2, [r4, #0]
 800fa38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fa40:	f47f af39 	bne.w	800f8b6 <_scanf_float+0x6e>
 800fa44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa48:	6022      	str	r2, [r4, #0]
 800fa4a:	2501      	movs	r5, #1
 800fa4c:	e7c0      	b.n	800f9d0 <_scanf_float+0x188>
 800fa4e:	2d03      	cmp	r5, #3
 800fa50:	d0e2      	beq.n	800fa18 <_scanf_float+0x1d0>
 800fa52:	2d05      	cmp	r5, #5
 800fa54:	e7de      	b.n	800fa14 <_scanf_float+0x1cc>
 800fa56:	2d02      	cmp	r5, #2
 800fa58:	f47f af26 	bne.w	800f8a8 <_scanf_float+0x60>
 800fa5c:	2503      	movs	r5, #3
 800fa5e:	e7b7      	b.n	800f9d0 <_scanf_float+0x188>
 800fa60:	2d06      	cmp	r5, #6
 800fa62:	f47f af21 	bne.w	800f8a8 <_scanf_float+0x60>
 800fa66:	2507      	movs	r5, #7
 800fa68:	e7b2      	b.n	800f9d0 <_scanf_float+0x188>
 800fa6a:	6822      	ldr	r2, [r4, #0]
 800fa6c:	0591      	lsls	r1, r2, #22
 800fa6e:	f57f af1b 	bpl.w	800f8a8 <_scanf_float+0x60>
 800fa72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fa76:	6022      	str	r2, [r4, #0]
 800fa78:	f8cd 9004 	str.w	r9, [sp, #4]
 800fa7c:	e7a8      	b.n	800f9d0 <_scanf_float+0x188>
 800fa7e:	6822      	ldr	r2, [r4, #0]
 800fa80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fa84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fa88:	d006      	beq.n	800fa98 <_scanf_float+0x250>
 800fa8a:	0550      	lsls	r0, r2, #21
 800fa8c:	f57f af0c 	bpl.w	800f8a8 <_scanf_float+0x60>
 800fa90:	f1b9 0f00 	cmp.w	r9, #0
 800fa94:	f43f af0f 	beq.w	800f8b6 <_scanf_float+0x6e>
 800fa98:	0591      	lsls	r1, r2, #22
 800fa9a:	bf58      	it	pl
 800fa9c:	9901      	ldrpl	r1, [sp, #4]
 800fa9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800faa2:	bf58      	it	pl
 800faa4:	eba9 0101 	subpl.w	r1, r9, r1
 800faa8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800faac:	bf58      	it	pl
 800faae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fab2:	6022      	str	r2, [r4, #0]
 800fab4:	f04f 0900 	mov.w	r9, #0
 800fab8:	e78a      	b.n	800f9d0 <_scanf_float+0x188>
 800faba:	f04f 0a03 	mov.w	sl, #3
 800fabe:	e787      	b.n	800f9d0 <_scanf_float+0x188>
 800fac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fac4:	4639      	mov	r1, r7
 800fac6:	4640      	mov	r0, r8
 800fac8:	4798      	blx	r3
 800faca:	2800      	cmp	r0, #0
 800facc:	f43f aedf 	beq.w	800f88e <_scanf_float+0x46>
 800fad0:	e6ea      	b.n	800f8a8 <_scanf_float+0x60>
 800fad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fada:	463a      	mov	r2, r7
 800fadc:	4640      	mov	r0, r8
 800fade:	4798      	blx	r3
 800fae0:	6923      	ldr	r3, [r4, #16]
 800fae2:	3b01      	subs	r3, #1
 800fae4:	6123      	str	r3, [r4, #16]
 800fae6:	e6ec      	b.n	800f8c2 <_scanf_float+0x7a>
 800fae8:	1e6b      	subs	r3, r5, #1
 800faea:	2b06      	cmp	r3, #6
 800faec:	d825      	bhi.n	800fb3a <_scanf_float+0x2f2>
 800faee:	2d02      	cmp	r5, #2
 800faf0:	d836      	bhi.n	800fb60 <_scanf_float+0x318>
 800faf2:	455e      	cmp	r6, fp
 800faf4:	f67f aee8 	bls.w	800f8c8 <_scanf_float+0x80>
 800faf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fafc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb00:	463a      	mov	r2, r7
 800fb02:	4640      	mov	r0, r8
 800fb04:	4798      	blx	r3
 800fb06:	6923      	ldr	r3, [r4, #16]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	6123      	str	r3, [r4, #16]
 800fb0c:	e7f1      	b.n	800faf2 <_scanf_float+0x2aa>
 800fb0e:	9802      	ldr	r0, [sp, #8]
 800fb10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fb18:	9002      	str	r0, [sp, #8]
 800fb1a:	463a      	mov	r2, r7
 800fb1c:	4640      	mov	r0, r8
 800fb1e:	4798      	blx	r3
 800fb20:	6923      	ldr	r3, [r4, #16]
 800fb22:	3b01      	subs	r3, #1
 800fb24:	6123      	str	r3, [r4, #16]
 800fb26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb2a:	fa5f fa8a 	uxtb.w	sl, sl
 800fb2e:	f1ba 0f02 	cmp.w	sl, #2
 800fb32:	d1ec      	bne.n	800fb0e <_scanf_float+0x2c6>
 800fb34:	3d03      	subs	r5, #3
 800fb36:	b2ed      	uxtb	r5, r5
 800fb38:	1b76      	subs	r6, r6, r5
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	05da      	lsls	r2, r3, #23
 800fb3e:	d52f      	bpl.n	800fba0 <_scanf_float+0x358>
 800fb40:	055b      	lsls	r3, r3, #21
 800fb42:	d510      	bpl.n	800fb66 <_scanf_float+0x31e>
 800fb44:	455e      	cmp	r6, fp
 800fb46:	f67f aebf 	bls.w	800f8c8 <_scanf_float+0x80>
 800fb4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb52:	463a      	mov	r2, r7
 800fb54:	4640      	mov	r0, r8
 800fb56:	4798      	blx	r3
 800fb58:	6923      	ldr	r3, [r4, #16]
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	6123      	str	r3, [r4, #16]
 800fb5e:	e7f1      	b.n	800fb44 <_scanf_float+0x2fc>
 800fb60:	46aa      	mov	sl, r5
 800fb62:	9602      	str	r6, [sp, #8]
 800fb64:	e7df      	b.n	800fb26 <_scanf_float+0x2de>
 800fb66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fb6a:	6923      	ldr	r3, [r4, #16]
 800fb6c:	2965      	cmp	r1, #101	; 0x65
 800fb6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb72:	f106 35ff 	add.w	r5, r6, #4294967295
 800fb76:	6123      	str	r3, [r4, #16]
 800fb78:	d00c      	beq.n	800fb94 <_scanf_float+0x34c>
 800fb7a:	2945      	cmp	r1, #69	; 0x45
 800fb7c:	d00a      	beq.n	800fb94 <_scanf_float+0x34c>
 800fb7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb82:	463a      	mov	r2, r7
 800fb84:	4640      	mov	r0, r8
 800fb86:	4798      	blx	r3
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fb8e:	3b01      	subs	r3, #1
 800fb90:	1eb5      	subs	r5, r6, #2
 800fb92:	6123      	str	r3, [r4, #16]
 800fb94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb98:	463a      	mov	r2, r7
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	4798      	blx	r3
 800fb9e:	462e      	mov	r6, r5
 800fba0:	6825      	ldr	r5, [r4, #0]
 800fba2:	f015 0510 	ands.w	r5, r5, #16
 800fba6:	d159      	bne.n	800fc5c <_scanf_float+0x414>
 800fba8:	7035      	strb	r5, [r6, #0]
 800fbaa:	6823      	ldr	r3, [r4, #0]
 800fbac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fbb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbb4:	d11b      	bne.n	800fbee <_scanf_float+0x3a6>
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	454b      	cmp	r3, r9
 800fbba:	eba3 0209 	sub.w	r2, r3, r9
 800fbbe:	d123      	bne.n	800fc08 <_scanf_float+0x3c0>
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	4659      	mov	r1, fp
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	f000 ff55 	bl	8010a74 <_strtod_r>
 800fbca:	6822      	ldr	r2, [r4, #0]
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	f012 0f02 	tst.w	r2, #2
 800fbd2:	ec57 6b10 	vmov	r6, r7, d0
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	d021      	beq.n	800fc1e <_scanf_float+0x3d6>
 800fbda:	9903      	ldr	r1, [sp, #12]
 800fbdc:	1d1a      	adds	r2, r3, #4
 800fbde:	600a      	str	r2, [r1, #0]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	e9c3 6700 	strd	r6, r7, [r3]
 800fbe6:	68e3      	ldr	r3, [r4, #12]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	60e3      	str	r3, [r4, #12]
 800fbec:	e66d      	b.n	800f8ca <_scanf_float+0x82>
 800fbee:	9b04      	ldr	r3, [sp, #16]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d0e5      	beq.n	800fbc0 <_scanf_float+0x378>
 800fbf4:	9905      	ldr	r1, [sp, #20]
 800fbf6:	230a      	movs	r3, #10
 800fbf8:	462a      	mov	r2, r5
 800fbfa:	3101      	adds	r1, #1
 800fbfc:	4640      	mov	r0, r8
 800fbfe:	f000 ffc1 	bl	8010b84 <_strtol_r>
 800fc02:	9b04      	ldr	r3, [sp, #16]
 800fc04:	9e05      	ldr	r6, [sp, #20]
 800fc06:	1ac2      	subs	r2, r0, r3
 800fc08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fc0c:	429e      	cmp	r6, r3
 800fc0e:	bf28      	it	cs
 800fc10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fc14:	4912      	ldr	r1, [pc, #72]	; (800fc60 <_scanf_float+0x418>)
 800fc16:	4630      	mov	r0, r6
 800fc18:	f000 f8a6 	bl	800fd68 <siprintf>
 800fc1c:	e7d0      	b.n	800fbc0 <_scanf_float+0x378>
 800fc1e:	9903      	ldr	r1, [sp, #12]
 800fc20:	f012 0f04 	tst.w	r2, #4
 800fc24:	f103 0204 	add.w	r2, r3, #4
 800fc28:	600a      	str	r2, [r1, #0]
 800fc2a:	d1d9      	bne.n	800fbe0 <_scanf_float+0x398>
 800fc2c:	f8d3 8000 	ldr.w	r8, [r3]
 800fc30:	ee10 2a10 	vmov	r2, s0
 800fc34:	ee10 0a10 	vmov	r0, s0
 800fc38:	463b      	mov	r3, r7
 800fc3a:	4639      	mov	r1, r7
 800fc3c:	f7f0 ff7e 	bl	8000b3c <__aeabi_dcmpun>
 800fc40:	b128      	cbz	r0, 800fc4e <_scanf_float+0x406>
 800fc42:	4808      	ldr	r0, [pc, #32]	; (800fc64 <_scanf_float+0x41c>)
 800fc44:	f000 f88a 	bl	800fd5c <nanf>
 800fc48:	ed88 0a00 	vstr	s0, [r8]
 800fc4c:	e7cb      	b.n	800fbe6 <_scanf_float+0x39e>
 800fc4e:	4630      	mov	r0, r6
 800fc50:	4639      	mov	r1, r7
 800fc52:	f7f0 ffd1 	bl	8000bf8 <__aeabi_d2f>
 800fc56:	f8c8 0000 	str.w	r0, [r8]
 800fc5a:	e7c4      	b.n	800fbe6 <_scanf_float+0x39e>
 800fc5c:	2500      	movs	r5, #0
 800fc5e:	e634      	b.n	800f8ca <_scanf_float+0x82>
 800fc60:	08017298 	.word	0x08017298
 800fc64:	080176a0 	.word	0x080176a0

0800fc68 <cleanup_glue>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	6809      	ldr	r1, [r1, #0]
 800fc6e:	4605      	mov	r5, r0
 800fc70:	b109      	cbz	r1, 800fc76 <cleanup_glue+0xe>
 800fc72:	f7ff fff9 	bl	800fc68 <cleanup_glue>
 800fc76:	4621      	mov	r1, r4
 800fc78:	4628      	mov	r0, r5
 800fc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc7e:	f002 bf67 	b.w	8012b50 <_free_r>
	...

0800fc84 <_reclaim_reent>:
 800fc84:	4b2c      	ldr	r3, [pc, #176]	; (800fd38 <_reclaim_reent+0xb4>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4283      	cmp	r3, r0
 800fc8a:	b570      	push	{r4, r5, r6, lr}
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	d051      	beq.n	800fd34 <_reclaim_reent+0xb0>
 800fc90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fc92:	b143      	cbz	r3, 800fca6 <_reclaim_reent+0x22>
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d14a      	bne.n	800fd30 <_reclaim_reent+0xac>
 800fc9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc9c:	6819      	ldr	r1, [r3, #0]
 800fc9e:	b111      	cbz	r1, 800fca6 <_reclaim_reent+0x22>
 800fca0:	4620      	mov	r0, r4
 800fca2:	f002 ff55 	bl	8012b50 <_free_r>
 800fca6:	6961      	ldr	r1, [r4, #20]
 800fca8:	b111      	cbz	r1, 800fcb0 <_reclaim_reent+0x2c>
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f002 ff50 	bl	8012b50 <_free_r>
 800fcb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fcb2:	b111      	cbz	r1, 800fcba <_reclaim_reent+0x36>
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f002 ff4b 	bl	8012b50 <_free_r>
 800fcba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fcbc:	b111      	cbz	r1, 800fcc4 <_reclaim_reent+0x40>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f002 ff46 	bl	8012b50 <_free_r>
 800fcc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fcc6:	b111      	cbz	r1, 800fcce <_reclaim_reent+0x4a>
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f002 ff41 	bl	8012b50 <_free_r>
 800fcce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fcd0:	b111      	cbz	r1, 800fcd8 <_reclaim_reent+0x54>
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f002 ff3c 	bl	8012b50 <_free_r>
 800fcd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fcda:	b111      	cbz	r1, 800fce2 <_reclaim_reent+0x5e>
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f002 ff37 	bl	8012b50 <_free_r>
 800fce2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fce4:	b111      	cbz	r1, 800fcec <_reclaim_reent+0x68>
 800fce6:	4620      	mov	r0, r4
 800fce8:	f002 ff32 	bl	8012b50 <_free_r>
 800fcec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcee:	b111      	cbz	r1, 800fcf6 <_reclaim_reent+0x72>
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f002 ff2d 	bl	8012b50 <_free_r>
 800fcf6:	69a3      	ldr	r3, [r4, #24]
 800fcf8:	b1e3      	cbz	r3, 800fd34 <_reclaim_reent+0xb0>
 800fcfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	4798      	blx	r3
 800fd00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fd02:	b1b9      	cbz	r1, 800fd34 <_reclaim_reent+0xb0>
 800fd04:	4620      	mov	r0, r4
 800fd06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd0a:	f7ff bfad 	b.w	800fc68 <cleanup_glue>
 800fd0e:	5949      	ldr	r1, [r1, r5]
 800fd10:	b941      	cbnz	r1, 800fd24 <_reclaim_reent+0xa0>
 800fd12:	3504      	adds	r5, #4
 800fd14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd16:	2d80      	cmp	r5, #128	; 0x80
 800fd18:	68d9      	ldr	r1, [r3, #12]
 800fd1a:	d1f8      	bne.n	800fd0e <_reclaim_reent+0x8a>
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f002 ff17 	bl	8012b50 <_free_r>
 800fd22:	e7ba      	b.n	800fc9a <_reclaim_reent+0x16>
 800fd24:	680e      	ldr	r6, [r1, #0]
 800fd26:	4620      	mov	r0, r4
 800fd28:	f002 ff12 	bl	8012b50 <_free_r>
 800fd2c:	4631      	mov	r1, r6
 800fd2e:	e7ef      	b.n	800fd10 <_reclaim_reent+0x8c>
 800fd30:	2500      	movs	r5, #0
 800fd32:	e7ef      	b.n	800fd14 <_reclaim_reent+0x90>
 800fd34:	bd70      	pop	{r4, r5, r6, pc}
 800fd36:	bf00      	nop
 800fd38:	20000110 	.word	0x20000110

0800fd3c <_sbrk_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4d06      	ldr	r5, [pc, #24]	; (800fd58 <_sbrk_r+0x1c>)
 800fd40:	2300      	movs	r3, #0
 800fd42:	4604      	mov	r4, r0
 800fd44:	4608      	mov	r0, r1
 800fd46:	602b      	str	r3, [r5, #0]
 800fd48:	f7f3 faa2 	bl	8003290 <_sbrk>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	d102      	bne.n	800fd56 <_sbrk_r+0x1a>
 800fd50:	682b      	ldr	r3, [r5, #0]
 800fd52:	b103      	cbz	r3, 800fd56 <_sbrk_r+0x1a>
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	bd38      	pop	{r3, r4, r5, pc}
 800fd58:	20006c7c 	.word	0x20006c7c

0800fd5c <nanf>:
 800fd5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fd64 <nanf+0x8>
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	7fc00000 	.word	0x7fc00000

0800fd68 <siprintf>:
 800fd68:	b40e      	push	{r1, r2, r3}
 800fd6a:	b500      	push	{lr}
 800fd6c:	b09c      	sub	sp, #112	; 0x70
 800fd6e:	ab1d      	add	r3, sp, #116	; 0x74
 800fd70:	9002      	str	r0, [sp, #8]
 800fd72:	9006      	str	r0, [sp, #24]
 800fd74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd78:	4809      	ldr	r0, [pc, #36]	; (800fda0 <siprintf+0x38>)
 800fd7a:	9107      	str	r1, [sp, #28]
 800fd7c:	9104      	str	r1, [sp, #16]
 800fd7e:	4909      	ldr	r1, [pc, #36]	; (800fda4 <siprintf+0x3c>)
 800fd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd84:	9105      	str	r1, [sp, #20]
 800fd86:	6800      	ldr	r0, [r0, #0]
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	a902      	add	r1, sp, #8
 800fd8c:	f002 ff88 	bl	8012ca0 <_svfiprintf_r>
 800fd90:	9b02      	ldr	r3, [sp, #8]
 800fd92:	2200      	movs	r2, #0
 800fd94:	701a      	strb	r2, [r3, #0]
 800fd96:	b01c      	add	sp, #112	; 0x70
 800fd98:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd9c:	b003      	add	sp, #12
 800fd9e:	4770      	bx	lr
 800fda0:	20000110 	.word	0x20000110
 800fda4:	ffff0208 	.word	0xffff0208

0800fda8 <__sread>:
 800fda8:	b510      	push	{r4, lr}
 800fdaa:	460c      	mov	r4, r1
 800fdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdb0:	f003 f876 	bl	8012ea0 <_read_r>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	bfab      	itete	ge
 800fdb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fdba:	89a3      	ldrhlt	r3, [r4, #12]
 800fdbc:	181b      	addge	r3, r3, r0
 800fdbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fdc2:	bfac      	ite	ge
 800fdc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fdc6:	81a3      	strhlt	r3, [r4, #12]
 800fdc8:	bd10      	pop	{r4, pc}

0800fdca <__swrite>:
 800fdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdce:	461f      	mov	r7, r3
 800fdd0:	898b      	ldrh	r3, [r1, #12]
 800fdd2:	05db      	lsls	r3, r3, #23
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	460c      	mov	r4, r1
 800fdd8:	4616      	mov	r6, r2
 800fdda:	d505      	bpl.n	800fde8 <__swrite+0x1e>
 800fddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fde0:	2302      	movs	r3, #2
 800fde2:	2200      	movs	r2, #0
 800fde4:	f002 f9a4 	bl	8012130 <_lseek_r>
 800fde8:	89a3      	ldrh	r3, [r4, #12]
 800fdea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fdf2:	81a3      	strh	r3, [r4, #12]
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	463b      	mov	r3, r7
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfe:	f000 bec3 	b.w	8010b88 <_write_r>

0800fe02 <__sseek>:
 800fe02:	b510      	push	{r4, lr}
 800fe04:	460c      	mov	r4, r1
 800fe06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe0a:	f002 f991 	bl	8012130 <_lseek_r>
 800fe0e:	1c43      	adds	r3, r0, #1
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	bf15      	itete	ne
 800fe14:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe1e:	81a3      	strheq	r3, [r4, #12]
 800fe20:	bf18      	it	ne
 800fe22:	81a3      	strhne	r3, [r4, #12]
 800fe24:	bd10      	pop	{r4, pc}

0800fe26 <__sclose>:
 800fe26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe2a:	f000 bebf 	b.w	8010bac <_close_r>

0800fe2e <sulp>:
 800fe2e:	b570      	push	{r4, r5, r6, lr}
 800fe30:	4604      	mov	r4, r0
 800fe32:	460d      	mov	r5, r1
 800fe34:	ec45 4b10 	vmov	d0, r4, r5
 800fe38:	4616      	mov	r6, r2
 800fe3a:	f002 fd23 	bl	8012884 <__ulp>
 800fe3e:	ec51 0b10 	vmov	r0, r1, d0
 800fe42:	b17e      	cbz	r6, 800fe64 <sulp+0x36>
 800fe44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	dd09      	ble.n	800fe64 <sulp+0x36>
 800fe50:	051b      	lsls	r3, r3, #20
 800fe52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe56:	2400      	movs	r4, #0
 800fe58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	462b      	mov	r3, r5
 800fe60:	f7f0 fbd2 	bl	8000608 <__aeabi_dmul>
 800fe64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe68 <_strtod_l>:
 800fe68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	ed2d 8b02 	vpush	{d8}
 800fe70:	b09d      	sub	sp, #116	; 0x74
 800fe72:	461f      	mov	r7, r3
 800fe74:	2300      	movs	r3, #0
 800fe76:	9318      	str	r3, [sp, #96]	; 0x60
 800fe78:	4ba2      	ldr	r3, [pc, #648]	; (8010104 <_strtod_l+0x29c>)
 800fe7a:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	9305      	str	r3, [sp, #20]
 800fe80:	4604      	mov	r4, r0
 800fe82:	4618      	mov	r0, r3
 800fe84:	4688      	mov	r8, r1
 800fe86:	f7f0 f9ab 	bl	80001e0 <strlen>
 800fe8a:	f04f 0a00 	mov.w	sl, #0
 800fe8e:	4605      	mov	r5, r0
 800fe90:	f04f 0b00 	mov.w	fp, #0
 800fe94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fe98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe9a:	781a      	ldrb	r2, [r3, #0]
 800fe9c:	2a2b      	cmp	r2, #43	; 0x2b
 800fe9e:	d04e      	beq.n	800ff3e <_strtod_l+0xd6>
 800fea0:	d83b      	bhi.n	800ff1a <_strtod_l+0xb2>
 800fea2:	2a0d      	cmp	r2, #13
 800fea4:	d834      	bhi.n	800ff10 <_strtod_l+0xa8>
 800fea6:	2a08      	cmp	r2, #8
 800fea8:	d834      	bhi.n	800ff14 <_strtod_l+0xac>
 800feaa:	2a00      	cmp	r2, #0
 800feac:	d03e      	beq.n	800ff2c <_strtod_l+0xc4>
 800feae:	2300      	movs	r3, #0
 800feb0:	930a      	str	r3, [sp, #40]	; 0x28
 800feb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800feb4:	7833      	ldrb	r3, [r6, #0]
 800feb6:	2b30      	cmp	r3, #48	; 0x30
 800feb8:	f040 80b0 	bne.w	801001c <_strtod_l+0x1b4>
 800febc:	7873      	ldrb	r3, [r6, #1]
 800febe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fec2:	2b58      	cmp	r3, #88	; 0x58
 800fec4:	d168      	bne.n	800ff98 <_strtod_l+0x130>
 800fec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fec8:	9301      	str	r3, [sp, #4]
 800feca:	ab18      	add	r3, sp, #96	; 0x60
 800fecc:	9702      	str	r7, [sp, #8]
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	4a8d      	ldr	r2, [pc, #564]	; (8010108 <_strtod_l+0x2a0>)
 800fed2:	ab19      	add	r3, sp, #100	; 0x64
 800fed4:	a917      	add	r1, sp, #92	; 0x5c
 800fed6:	4620      	mov	r0, r4
 800fed8:	f001 fe1e 	bl	8011b18 <__gethex>
 800fedc:	f010 0707 	ands.w	r7, r0, #7
 800fee0:	4605      	mov	r5, r0
 800fee2:	d005      	beq.n	800fef0 <_strtod_l+0x88>
 800fee4:	2f06      	cmp	r7, #6
 800fee6:	d12c      	bne.n	800ff42 <_strtod_l+0xda>
 800fee8:	3601      	adds	r6, #1
 800feea:	2300      	movs	r3, #0
 800feec:	9617      	str	r6, [sp, #92]	; 0x5c
 800feee:	930a      	str	r3, [sp, #40]	; 0x28
 800fef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f040 8590 	bne.w	8010a18 <_strtod_l+0xbb0>
 800fef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fefa:	b1eb      	cbz	r3, 800ff38 <_strtod_l+0xd0>
 800fefc:	4652      	mov	r2, sl
 800fefe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ff02:	ec43 2b10 	vmov	d0, r2, r3
 800ff06:	b01d      	add	sp, #116	; 0x74
 800ff08:	ecbd 8b02 	vpop	{d8}
 800ff0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff10:	2a20      	cmp	r2, #32
 800ff12:	d1cc      	bne.n	800feae <_strtod_l+0x46>
 800ff14:	3301      	adds	r3, #1
 800ff16:	9317      	str	r3, [sp, #92]	; 0x5c
 800ff18:	e7be      	b.n	800fe98 <_strtod_l+0x30>
 800ff1a:	2a2d      	cmp	r2, #45	; 0x2d
 800ff1c:	d1c7      	bne.n	800feae <_strtod_l+0x46>
 800ff1e:	2201      	movs	r2, #1
 800ff20:	920a      	str	r2, [sp, #40]	; 0x28
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff26:	785b      	ldrb	r3, [r3, #1]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1c2      	bne.n	800feb2 <_strtod_l+0x4a>
 800ff2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f040 856e 	bne.w	8010a14 <_strtod_l+0xbac>
 800ff38:	4652      	mov	r2, sl
 800ff3a:	465b      	mov	r3, fp
 800ff3c:	e7e1      	b.n	800ff02 <_strtod_l+0x9a>
 800ff3e:	2200      	movs	r2, #0
 800ff40:	e7ee      	b.n	800ff20 <_strtod_l+0xb8>
 800ff42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ff44:	b13a      	cbz	r2, 800ff56 <_strtod_l+0xee>
 800ff46:	2135      	movs	r1, #53	; 0x35
 800ff48:	a81a      	add	r0, sp, #104	; 0x68
 800ff4a:	f002 fda6 	bl	8012a9a <__copybits>
 800ff4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff50:	4620      	mov	r0, r4
 800ff52:	f002 f965 	bl	8012220 <_Bfree>
 800ff56:	3f01      	subs	r7, #1
 800ff58:	2f04      	cmp	r7, #4
 800ff5a:	d806      	bhi.n	800ff6a <_strtod_l+0x102>
 800ff5c:	e8df f007 	tbb	[pc, r7]
 800ff60:	1714030a 	.word	0x1714030a
 800ff64:	0a          	.byte	0x0a
 800ff65:	00          	.byte	0x00
 800ff66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ff6a:	0728      	lsls	r0, r5, #28
 800ff6c:	d5c0      	bpl.n	800fef0 <_strtod_l+0x88>
 800ff6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ff72:	e7bd      	b.n	800fef0 <_strtod_l+0x88>
 800ff74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ff78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ff7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ff7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ff82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ff86:	e7f0      	b.n	800ff6a <_strtod_l+0x102>
 800ff88:	f8df b180 	ldr.w	fp, [pc, #384]	; 801010c <_strtod_l+0x2a4>
 800ff8c:	e7ed      	b.n	800ff6a <_strtod_l+0x102>
 800ff8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ff92:	f04f 3aff 	mov.w	sl, #4294967295
 800ff96:	e7e8      	b.n	800ff6a <_strtod_l+0x102>
 800ff98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff9a:	1c5a      	adds	r2, r3, #1
 800ff9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff9e:	785b      	ldrb	r3, [r3, #1]
 800ffa0:	2b30      	cmp	r3, #48	; 0x30
 800ffa2:	d0f9      	beq.n	800ff98 <_strtod_l+0x130>
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d0a3      	beq.n	800fef0 <_strtod_l+0x88>
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	f04f 0900 	mov.w	r9, #0
 800ffae:	9304      	str	r3, [sp, #16]
 800ffb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffb2:	9308      	str	r3, [sp, #32]
 800ffb4:	f8cd 901c 	str.w	r9, [sp, #28]
 800ffb8:	464f      	mov	r7, r9
 800ffba:	220a      	movs	r2, #10
 800ffbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ffbe:	7806      	ldrb	r6, [r0, #0]
 800ffc0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ffc4:	b2d9      	uxtb	r1, r3
 800ffc6:	2909      	cmp	r1, #9
 800ffc8:	d92a      	bls.n	8010020 <_strtod_l+0x1b8>
 800ffca:	9905      	ldr	r1, [sp, #20]
 800ffcc:	462a      	mov	r2, r5
 800ffce:	f002 ff83 	bl	8012ed8 <strncmp>
 800ffd2:	b398      	cbz	r0, 801003c <_strtod_l+0x1d4>
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	4632      	mov	r2, r6
 800ffd8:	463d      	mov	r5, r7
 800ffda:	9005      	str	r0, [sp, #20]
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2a65      	cmp	r2, #101	; 0x65
 800ffe0:	d001      	beq.n	800ffe6 <_strtod_l+0x17e>
 800ffe2:	2a45      	cmp	r2, #69	; 0x45
 800ffe4:	d118      	bne.n	8010018 <_strtod_l+0x1b0>
 800ffe6:	b91d      	cbnz	r5, 800fff0 <_strtod_l+0x188>
 800ffe8:	9a04      	ldr	r2, [sp, #16]
 800ffea:	4302      	orrs	r2, r0
 800ffec:	d09e      	beq.n	800ff2c <_strtod_l+0xc4>
 800ffee:	2500      	movs	r5, #0
 800fff0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fff4:	f108 0201 	add.w	r2, r8, #1
 800fff8:	9217      	str	r2, [sp, #92]	; 0x5c
 800fffa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fffe:	2a2b      	cmp	r2, #43	; 0x2b
 8010000:	d075      	beq.n	80100ee <_strtod_l+0x286>
 8010002:	2a2d      	cmp	r2, #45	; 0x2d
 8010004:	d07b      	beq.n	80100fe <_strtod_l+0x296>
 8010006:	f04f 0c00 	mov.w	ip, #0
 801000a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801000e:	2909      	cmp	r1, #9
 8010010:	f240 8082 	bls.w	8010118 <_strtod_l+0x2b0>
 8010014:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010018:	2600      	movs	r6, #0
 801001a:	e09d      	b.n	8010158 <_strtod_l+0x2f0>
 801001c:	2300      	movs	r3, #0
 801001e:	e7c4      	b.n	800ffaa <_strtod_l+0x142>
 8010020:	2f08      	cmp	r7, #8
 8010022:	bfd8      	it	le
 8010024:	9907      	ldrle	r1, [sp, #28]
 8010026:	f100 0001 	add.w	r0, r0, #1
 801002a:	bfda      	itte	le
 801002c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010030:	9307      	strle	r3, [sp, #28]
 8010032:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010036:	3701      	adds	r7, #1
 8010038:	9017      	str	r0, [sp, #92]	; 0x5c
 801003a:	e7bf      	b.n	800ffbc <_strtod_l+0x154>
 801003c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801003e:	195a      	adds	r2, r3, r5
 8010040:	9217      	str	r2, [sp, #92]	; 0x5c
 8010042:	5d5a      	ldrb	r2, [r3, r5]
 8010044:	2f00      	cmp	r7, #0
 8010046:	d037      	beq.n	80100b8 <_strtod_l+0x250>
 8010048:	9005      	str	r0, [sp, #20]
 801004a:	463d      	mov	r5, r7
 801004c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010050:	2b09      	cmp	r3, #9
 8010052:	d912      	bls.n	801007a <_strtod_l+0x212>
 8010054:	2301      	movs	r3, #1
 8010056:	e7c2      	b.n	800ffde <_strtod_l+0x176>
 8010058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801005a:	1c5a      	adds	r2, r3, #1
 801005c:	9217      	str	r2, [sp, #92]	; 0x5c
 801005e:	785a      	ldrb	r2, [r3, #1]
 8010060:	3001      	adds	r0, #1
 8010062:	2a30      	cmp	r2, #48	; 0x30
 8010064:	d0f8      	beq.n	8010058 <_strtod_l+0x1f0>
 8010066:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801006a:	2b08      	cmp	r3, #8
 801006c:	f200 84d9 	bhi.w	8010a22 <_strtod_l+0xbba>
 8010070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010072:	9005      	str	r0, [sp, #20]
 8010074:	2000      	movs	r0, #0
 8010076:	9308      	str	r3, [sp, #32]
 8010078:	4605      	mov	r5, r0
 801007a:	3a30      	subs	r2, #48	; 0x30
 801007c:	f100 0301 	add.w	r3, r0, #1
 8010080:	d014      	beq.n	80100ac <_strtod_l+0x244>
 8010082:	9905      	ldr	r1, [sp, #20]
 8010084:	4419      	add	r1, r3
 8010086:	9105      	str	r1, [sp, #20]
 8010088:	462b      	mov	r3, r5
 801008a:	eb00 0e05 	add.w	lr, r0, r5
 801008e:	210a      	movs	r1, #10
 8010090:	4573      	cmp	r3, lr
 8010092:	d113      	bne.n	80100bc <_strtod_l+0x254>
 8010094:	182b      	adds	r3, r5, r0
 8010096:	2b08      	cmp	r3, #8
 8010098:	f105 0501 	add.w	r5, r5, #1
 801009c:	4405      	add	r5, r0
 801009e:	dc1c      	bgt.n	80100da <_strtod_l+0x272>
 80100a0:	9907      	ldr	r1, [sp, #28]
 80100a2:	230a      	movs	r3, #10
 80100a4:	fb03 2301 	mla	r3, r3, r1, r2
 80100a8:	9307      	str	r3, [sp, #28]
 80100aa:	2300      	movs	r3, #0
 80100ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100ae:	1c51      	adds	r1, r2, #1
 80100b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80100b2:	7852      	ldrb	r2, [r2, #1]
 80100b4:	4618      	mov	r0, r3
 80100b6:	e7c9      	b.n	801004c <_strtod_l+0x1e4>
 80100b8:	4638      	mov	r0, r7
 80100ba:	e7d2      	b.n	8010062 <_strtod_l+0x1fa>
 80100bc:	2b08      	cmp	r3, #8
 80100be:	dc04      	bgt.n	80100ca <_strtod_l+0x262>
 80100c0:	9e07      	ldr	r6, [sp, #28]
 80100c2:	434e      	muls	r6, r1
 80100c4:	9607      	str	r6, [sp, #28]
 80100c6:	3301      	adds	r3, #1
 80100c8:	e7e2      	b.n	8010090 <_strtod_l+0x228>
 80100ca:	f103 0c01 	add.w	ip, r3, #1
 80100ce:	f1bc 0f10 	cmp.w	ip, #16
 80100d2:	bfd8      	it	le
 80100d4:	fb01 f909 	mulle.w	r9, r1, r9
 80100d8:	e7f5      	b.n	80100c6 <_strtod_l+0x25e>
 80100da:	2d10      	cmp	r5, #16
 80100dc:	bfdc      	itt	le
 80100de:	230a      	movle	r3, #10
 80100e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80100e4:	e7e1      	b.n	80100aa <_strtod_l+0x242>
 80100e6:	2300      	movs	r3, #0
 80100e8:	9305      	str	r3, [sp, #20]
 80100ea:	2301      	movs	r3, #1
 80100ec:	e77c      	b.n	800ffe8 <_strtod_l+0x180>
 80100ee:	f04f 0c00 	mov.w	ip, #0
 80100f2:	f108 0202 	add.w	r2, r8, #2
 80100f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80100f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80100fc:	e785      	b.n	801000a <_strtod_l+0x1a2>
 80100fe:	f04f 0c01 	mov.w	ip, #1
 8010102:	e7f6      	b.n	80100f2 <_strtod_l+0x28a>
 8010104:	080174e8 	.word	0x080174e8
 8010108:	080172a0 	.word	0x080172a0
 801010c:	7ff00000 	.word	0x7ff00000
 8010110:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010112:	1c51      	adds	r1, r2, #1
 8010114:	9117      	str	r1, [sp, #92]	; 0x5c
 8010116:	7852      	ldrb	r2, [r2, #1]
 8010118:	2a30      	cmp	r2, #48	; 0x30
 801011a:	d0f9      	beq.n	8010110 <_strtod_l+0x2a8>
 801011c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010120:	2908      	cmp	r1, #8
 8010122:	f63f af79 	bhi.w	8010018 <_strtod_l+0x1b0>
 8010126:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801012a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801012c:	9206      	str	r2, [sp, #24]
 801012e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010130:	1c51      	adds	r1, r2, #1
 8010132:	9117      	str	r1, [sp, #92]	; 0x5c
 8010134:	7852      	ldrb	r2, [r2, #1]
 8010136:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801013a:	2e09      	cmp	r6, #9
 801013c:	d937      	bls.n	80101ae <_strtod_l+0x346>
 801013e:	9e06      	ldr	r6, [sp, #24]
 8010140:	1b89      	subs	r1, r1, r6
 8010142:	2908      	cmp	r1, #8
 8010144:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010148:	dc02      	bgt.n	8010150 <_strtod_l+0x2e8>
 801014a:	4576      	cmp	r6, lr
 801014c:	bfa8      	it	ge
 801014e:	4676      	movge	r6, lr
 8010150:	f1bc 0f00 	cmp.w	ip, #0
 8010154:	d000      	beq.n	8010158 <_strtod_l+0x2f0>
 8010156:	4276      	negs	r6, r6
 8010158:	2d00      	cmp	r5, #0
 801015a:	d14d      	bne.n	80101f8 <_strtod_l+0x390>
 801015c:	9904      	ldr	r1, [sp, #16]
 801015e:	4301      	orrs	r1, r0
 8010160:	f47f aec6 	bne.w	800fef0 <_strtod_l+0x88>
 8010164:	2b00      	cmp	r3, #0
 8010166:	f47f aee1 	bne.w	800ff2c <_strtod_l+0xc4>
 801016a:	2a69      	cmp	r2, #105	; 0x69
 801016c:	d027      	beq.n	80101be <_strtod_l+0x356>
 801016e:	dc24      	bgt.n	80101ba <_strtod_l+0x352>
 8010170:	2a49      	cmp	r2, #73	; 0x49
 8010172:	d024      	beq.n	80101be <_strtod_l+0x356>
 8010174:	2a4e      	cmp	r2, #78	; 0x4e
 8010176:	f47f aed9 	bne.w	800ff2c <_strtod_l+0xc4>
 801017a:	499f      	ldr	r1, [pc, #636]	; (80103f8 <_strtod_l+0x590>)
 801017c:	a817      	add	r0, sp, #92	; 0x5c
 801017e:	f001 ff23 	bl	8011fc8 <__match>
 8010182:	2800      	cmp	r0, #0
 8010184:	f43f aed2 	beq.w	800ff2c <_strtod_l+0xc4>
 8010188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	2b28      	cmp	r3, #40	; 0x28
 801018e:	d12d      	bne.n	80101ec <_strtod_l+0x384>
 8010190:	499a      	ldr	r1, [pc, #616]	; (80103fc <_strtod_l+0x594>)
 8010192:	aa1a      	add	r2, sp, #104	; 0x68
 8010194:	a817      	add	r0, sp, #92	; 0x5c
 8010196:	f001 ff2b 	bl	8011ff0 <__hexnan>
 801019a:	2805      	cmp	r0, #5
 801019c:	d126      	bne.n	80101ec <_strtod_l+0x384>
 801019e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80101a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80101a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80101a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80101ac:	e6a0      	b.n	800fef0 <_strtod_l+0x88>
 80101ae:	210a      	movs	r1, #10
 80101b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80101b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80101b8:	e7b9      	b.n	801012e <_strtod_l+0x2c6>
 80101ba:	2a6e      	cmp	r2, #110	; 0x6e
 80101bc:	e7db      	b.n	8010176 <_strtod_l+0x30e>
 80101be:	4990      	ldr	r1, [pc, #576]	; (8010400 <_strtod_l+0x598>)
 80101c0:	a817      	add	r0, sp, #92	; 0x5c
 80101c2:	f001 ff01 	bl	8011fc8 <__match>
 80101c6:	2800      	cmp	r0, #0
 80101c8:	f43f aeb0 	beq.w	800ff2c <_strtod_l+0xc4>
 80101cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101ce:	498d      	ldr	r1, [pc, #564]	; (8010404 <_strtod_l+0x59c>)
 80101d0:	3b01      	subs	r3, #1
 80101d2:	a817      	add	r0, sp, #92	; 0x5c
 80101d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80101d6:	f001 fef7 	bl	8011fc8 <__match>
 80101da:	b910      	cbnz	r0, 80101e2 <_strtod_l+0x37a>
 80101dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101de:	3301      	adds	r3, #1
 80101e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80101e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010414 <_strtod_l+0x5ac>
 80101e6:	f04f 0a00 	mov.w	sl, #0
 80101ea:	e681      	b.n	800fef0 <_strtod_l+0x88>
 80101ec:	4886      	ldr	r0, [pc, #536]	; (8010408 <_strtod_l+0x5a0>)
 80101ee:	f002 fe6b 	bl	8012ec8 <nan>
 80101f2:	ec5b ab10 	vmov	sl, fp, d0
 80101f6:	e67b      	b.n	800fef0 <_strtod_l+0x88>
 80101f8:	9b05      	ldr	r3, [sp, #20]
 80101fa:	9807      	ldr	r0, [sp, #28]
 80101fc:	1af3      	subs	r3, r6, r3
 80101fe:	2f00      	cmp	r7, #0
 8010200:	bf08      	it	eq
 8010202:	462f      	moveq	r7, r5
 8010204:	2d10      	cmp	r5, #16
 8010206:	9306      	str	r3, [sp, #24]
 8010208:	46a8      	mov	r8, r5
 801020a:	bfa8      	it	ge
 801020c:	f04f 0810 	movge.w	r8, #16
 8010210:	f7f0 f980 	bl	8000514 <__aeabi_ui2d>
 8010214:	2d09      	cmp	r5, #9
 8010216:	4682      	mov	sl, r0
 8010218:	468b      	mov	fp, r1
 801021a:	dd13      	ble.n	8010244 <_strtod_l+0x3dc>
 801021c:	4b7b      	ldr	r3, [pc, #492]	; (801040c <_strtod_l+0x5a4>)
 801021e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010222:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010226:	f7f0 f9ef 	bl	8000608 <__aeabi_dmul>
 801022a:	4682      	mov	sl, r0
 801022c:	4648      	mov	r0, r9
 801022e:	468b      	mov	fp, r1
 8010230:	f7f0 f970 	bl	8000514 <__aeabi_ui2d>
 8010234:	4602      	mov	r2, r0
 8010236:	460b      	mov	r3, r1
 8010238:	4650      	mov	r0, sl
 801023a:	4659      	mov	r1, fp
 801023c:	f7f0 f82e 	bl	800029c <__adddf3>
 8010240:	4682      	mov	sl, r0
 8010242:	468b      	mov	fp, r1
 8010244:	2d0f      	cmp	r5, #15
 8010246:	dc38      	bgt.n	80102ba <_strtod_l+0x452>
 8010248:	9b06      	ldr	r3, [sp, #24]
 801024a:	2b00      	cmp	r3, #0
 801024c:	f43f ae50 	beq.w	800fef0 <_strtod_l+0x88>
 8010250:	dd24      	ble.n	801029c <_strtod_l+0x434>
 8010252:	2b16      	cmp	r3, #22
 8010254:	dc0b      	bgt.n	801026e <_strtod_l+0x406>
 8010256:	496d      	ldr	r1, [pc, #436]	; (801040c <_strtod_l+0x5a4>)
 8010258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801025c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010260:	4652      	mov	r2, sl
 8010262:	465b      	mov	r3, fp
 8010264:	f7f0 f9d0 	bl	8000608 <__aeabi_dmul>
 8010268:	4682      	mov	sl, r0
 801026a:	468b      	mov	fp, r1
 801026c:	e640      	b.n	800fef0 <_strtod_l+0x88>
 801026e:	9a06      	ldr	r2, [sp, #24]
 8010270:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010274:	4293      	cmp	r3, r2
 8010276:	db20      	blt.n	80102ba <_strtod_l+0x452>
 8010278:	4c64      	ldr	r4, [pc, #400]	; (801040c <_strtod_l+0x5a4>)
 801027a:	f1c5 050f 	rsb	r5, r5, #15
 801027e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010282:	4652      	mov	r2, sl
 8010284:	465b      	mov	r3, fp
 8010286:	e9d1 0100 	ldrd	r0, r1, [r1]
 801028a:	f7f0 f9bd 	bl	8000608 <__aeabi_dmul>
 801028e:	9b06      	ldr	r3, [sp, #24]
 8010290:	1b5d      	subs	r5, r3, r5
 8010292:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010296:	e9d4 2300 	ldrd	r2, r3, [r4]
 801029a:	e7e3      	b.n	8010264 <_strtod_l+0x3fc>
 801029c:	9b06      	ldr	r3, [sp, #24]
 801029e:	3316      	adds	r3, #22
 80102a0:	db0b      	blt.n	80102ba <_strtod_l+0x452>
 80102a2:	9b05      	ldr	r3, [sp, #20]
 80102a4:	1b9e      	subs	r6, r3, r6
 80102a6:	4b59      	ldr	r3, [pc, #356]	; (801040c <_strtod_l+0x5a4>)
 80102a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80102ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80102b0:	4650      	mov	r0, sl
 80102b2:	4659      	mov	r1, fp
 80102b4:	f7f0 fad2 	bl	800085c <__aeabi_ddiv>
 80102b8:	e7d6      	b.n	8010268 <_strtod_l+0x400>
 80102ba:	9b06      	ldr	r3, [sp, #24]
 80102bc:	eba5 0808 	sub.w	r8, r5, r8
 80102c0:	4498      	add	r8, r3
 80102c2:	f1b8 0f00 	cmp.w	r8, #0
 80102c6:	dd74      	ble.n	80103b2 <_strtod_l+0x54a>
 80102c8:	f018 030f 	ands.w	r3, r8, #15
 80102cc:	d00a      	beq.n	80102e4 <_strtod_l+0x47c>
 80102ce:	494f      	ldr	r1, [pc, #316]	; (801040c <_strtod_l+0x5a4>)
 80102d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80102d4:	4652      	mov	r2, sl
 80102d6:	465b      	mov	r3, fp
 80102d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102dc:	f7f0 f994 	bl	8000608 <__aeabi_dmul>
 80102e0:	4682      	mov	sl, r0
 80102e2:	468b      	mov	fp, r1
 80102e4:	f038 080f 	bics.w	r8, r8, #15
 80102e8:	d04f      	beq.n	801038a <_strtod_l+0x522>
 80102ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80102ee:	dd22      	ble.n	8010336 <_strtod_l+0x4ce>
 80102f0:	2500      	movs	r5, #0
 80102f2:	462e      	mov	r6, r5
 80102f4:	9507      	str	r5, [sp, #28]
 80102f6:	9505      	str	r5, [sp, #20]
 80102f8:	2322      	movs	r3, #34	; 0x22
 80102fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010414 <_strtod_l+0x5ac>
 80102fe:	6023      	str	r3, [r4, #0]
 8010300:	f04f 0a00 	mov.w	sl, #0
 8010304:	9b07      	ldr	r3, [sp, #28]
 8010306:	2b00      	cmp	r3, #0
 8010308:	f43f adf2 	beq.w	800fef0 <_strtod_l+0x88>
 801030c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801030e:	4620      	mov	r0, r4
 8010310:	f001 ff86 	bl	8012220 <_Bfree>
 8010314:	9905      	ldr	r1, [sp, #20]
 8010316:	4620      	mov	r0, r4
 8010318:	f001 ff82 	bl	8012220 <_Bfree>
 801031c:	4631      	mov	r1, r6
 801031e:	4620      	mov	r0, r4
 8010320:	f001 ff7e 	bl	8012220 <_Bfree>
 8010324:	9907      	ldr	r1, [sp, #28]
 8010326:	4620      	mov	r0, r4
 8010328:	f001 ff7a 	bl	8012220 <_Bfree>
 801032c:	4629      	mov	r1, r5
 801032e:	4620      	mov	r0, r4
 8010330:	f001 ff76 	bl	8012220 <_Bfree>
 8010334:	e5dc      	b.n	800fef0 <_strtod_l+0x88>
 8010336:	4b36      	ldr	r3, [pc, #216]	; (8010410 <_strtod_l+0x5a8>)
 8010338:	9304      	str	r3, [sp, #16]
 801033a:	2300      	movs	r3, #0
 801033c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010340:	4650      	mov	r0, sl
 8010342:	4659      	mov	r1, fp
 8010344:	4699      	mov	r9, r3
 8010346:	f1b8 0f01 	cmp.w	r8, #1
 801034a:	dc21      	bgt.n	8010390 <_strtod_l+0x528>
 801034c:	b10b      	cbz	r3, 8010352 <_strtod_l+0x4ea>
 801034e:	4682      	mov	sl, r0
 8010350:	468b      	mov	fp, r1
 8010352:	4b2f      	ldr	r3, [pc, #188]	; (8010410 <_strtod_l+0x5a8>)
 8010354:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010358:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801035c:	4652      	mov	r2, sl
 801035e:	465b      	mov	r3, fp
 8010360:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010364:	f7f0 f950 	bl	8000608 <__aeabi_dmul>
 8010368:	4b2a      	ldr	r3, [pc, #168]	; (8010414 <_strtod_l+0x5ac>)
 801036a:	460a      	mov	r2, r1
 801036c:	400b      	ands	r3, r1
 801036e:	492a      	ldr	r1, [pc, #168]	; (8010418 <_strtod_l+0x5b0>)
 8010370:	428b      	cmp	r3, r1
 8010372:	4682      	mov	sl, r0
 8010374:	d8bc      	bhi.n	80102f0 <_strtod_l+0x488>
 8010376:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801037a:	428b      	cmp	r3, r1
 801037c:	bf86      	itte	hi
 801037e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801041c <_strtod_l+0x5b4>
 8010382:	f04f 3aff 	movhi.w	sl, #4294967295
 8010386:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801038a:	2300      	movs	r3, #0
 801038c:	9304      	str	r3, [sp, #16]
 801038e:	e084      	b.n	801049a <_strtod_l+0x632>
 8010390:	f018 0f01 	tst.w	r8, #1
 8010394:	d005      	beq.n	80103a2 <_strtod_l+0x53a>
 8010396:	9b04      	ldr	r3, [sp, #16]
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	f7f0 f934 	bl	8000608 <__aeabi_dmul>
 80103a0:	2301      	movs	r3, #1
 80103a2:	9a04      	ldr	r2, [sp, #16]
 80103a4:	3208      	adds	r2, #8
 80103a6:	f109 0901 	add.w	r9, r9, #1
 80103aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80103ae:	9204      	str	r2, [sp, #16]
 80103b0:	e7c9      	b.n	8010346 <_strtod_l+0x4de>
 80103b2:	d0ea      	beq.n	801038a <_strtod_l+0x522>
 80103b4:	f1c8 0800 	rsb	r8, r8, #0
 80103b8:	f018 020f 	ands.w	r2, r8, #15
 80103bc:	d00a      	beq.n	80103d4 <_strtod_l+0x56c>
 80103be:	4b13      	ldr	r3, [pc, #76]	; (801040c <_strtod_l+0x5a4>)
 80103c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103c4:	4650      	mov	r0, sl
 80103c6:	4659      	mov	r1, fp
 80103c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103cc:	f7f0 fa46 	bl	800085c <__aeabi_ddiv>
 80103d0:	4682      	mov	sl, r0
 80103d2:	468b      	mov	fp, r1
 80103d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80103d8:	d0d7      	beq.n	801038a <_strtod_l+0x522>
 80103da:	f1b8 0f1f 	cmp.w	r8, #31
 80103de:	dd1f      	ble.n	8010420 <_strtod_l+0x5b8>
 80103e0:	2500      	movs	r5, #0
 80103e2:	462e      	mov	r6, r5
 80103e4:	9507      	str	r5, [sp, #28]
 80103e6:	9505      	str	r5, [sp, #20]
 80103e8:	2322      	movs	r3, #34	; 0x22
 80103ea:	f04f 0a00 	mov.w	sl, #0
 80103ee:	f04f 0b00 	mov.w	fp, #0
 80103f2:	6023      	str	r3, [r4, #0]
 80103f4:	e786      	b.n	8010304 <_strtod_l+0x49c>
 80103f6:	bf00      	nop
 80103f8:	08017271 	.word	0x08017271
 80103fc:	080172b4 	.word	0x080172b4
 8010400:	08017269 	.word	0x08017269
 8010404:	080173f4 	.word	0x080173f4
 8010408:	080176a0 	.word	0x080176a0
 801040c:	08017580 	.word	0x08017580
 8010410:	08017558 	.word	0x08017558
 8010414:	7ff00000 	.word	0x7ff00000
 8010418:	7ca00000 	.word	0x7ca00000
 801041c:	7fefffff 	.word	0x7fefffff
 8010420:	f018 0310 	ands.w	r3, r8, #16
 8010424:	bf18      	it	ne
 8010426:	236a      	movne	r3, #106	; 0x6a
 8010428:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80107d8 <_strtod_l+0x970>
 801042c:	9304      	str	r3, [sp, #16]
 801042e:	4650      	mov	r0, sl
 8010430:	4659      	mov	r1, fp
 8010432:	2300      	movs	r3, #0
 8010434:	f018 0f01 	tst.w	r8, #1
 8010438:	d004      	beq.n	8010444 <_strtod_l+0x5dc>
 801043a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801043e:	f7f0 f8e3 	bl	8000608 <__aeabi_dmul>
 8010442:	2301      	movs	r3, #1
 8010444:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010448:	f109 0908 	add.w	r9, r9, #8
 801044c:	d1f2      	bne.n	8010434 <_strtod_l+0x5cc>
 801044e:	b10b      	cbz	r3, 8010454 <_strtod_l+0x5ec>
 8010450:	4682      	mov	sl, r0
 8010452:	468b      	mov	fp, r1
 8010454:	9b04      	ldr	r3, [sp, #16]
 8010456:	b1c3      	cbz	r3, 801048a <_strtod_l+0x622>
 8010458:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801045c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010460:	2b00      	cmp	r3, #0
 8010462:	4659      	mov	r1, fp
 8010464:	dd11      	ble.n	801048a <_strtod_l+0x622>
 8010466:	2b1f      	cmp	r3, #31
 8010468:	f340 8124 	ble.w	80106b4 <_strtod_l+0x84c>
 801046c:	2b34      	cmp	r3, #52	; 0x34
 801046e:	bfde      	ittt	le
 8010470:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010474:	f04f 33ff 	movle.w	r3, #4294967295
 8010478:	fa03 f202 	lslle.w	r2, r3, r2
 801047c:	f04f 0a00 	mov.w	sl, #0
 8010480:	bfcc      	ite	gt
 8010482:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010486:	ea02 0b01 	andle.w	fp, r2, r1
 801048a:	2200      	movs	r2, #0
 801048c:	2300      	movs	r3, #0
 801048e:	4650      	mov	r0, sl
 8010490:	4659      	mov	r1, fp
 8010492:	f7f0 fb21 	bl	8000ad8 <__aeabi_dcmpeq>
 8010496:	2800      	cmp	r0, #0
 8010498:	d1a2      	bne.n	80103e0 <_strtod_l+0x578>
 801049a:	9b07      	ldr	r3, [sp, #28]
 801049c:	9300      	str	r3, [sp, #0]
 801049e:	9908      	ldr	r1, [sp, #32]
 80104a0:	462b      	mov	r3, r5
 80104a2:	463a      	mov	r2, r7
 80104a4:	4620      	mov	r0, r4
 80104a6:	f001 ff23 	bl	80122f0 <__s2b>
 80104aa:	9007      	str	r0, [sp, #28]
 80104ac:	2800      	cmp	r0, #0
 80104ae:	f43f af1f 	beq.w	80102f0 <_strtod_l+0x488>
 80104b2:	9b05      	ldr	r3, [sp, #20]
 80104b4:	1b9e      	subs	r6, r3, r6
 80104b6:	9b06      	ldr	r3, [sp, #24]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	bfb4      	ite	lt
 80104bc:	4633      	movlt	r3, r6
 80104be:	2300      	movge	r3, #0
 80104c0:	930c      	str	r3, [sp, #48]	; 0x30
 80104c2:	9b06      	ldr	r3, [sp, #24]
 80104c4:	2500      	movs	r5, #0
 80104c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104ca:	9312      	str	r3, [sp, #72]	; 0x48
 80104cc:	462e      	mov	r6, r5
 80104ce:	9b07      	ldr	r3, [sp, #28]
 80104d0:	4620      	mov	r0, r4
 80104d2:	6859      	ldr	r1, [r3, #4]
 80104d4:	f001 fe64 	bl	80121a0 <_Balloc>
 80104d8:	9005      	str	r0, [sp, #20]
 80104da:	2800      	cmp	r0, #0
 80104dc:	f43f af0c 	beq.w	80102f8 <_strtod_l+0x490>
 80104e0:	9b07      	ldr	r3, [sp, #28]
 80104e2:	691a      	ldr	r2, [r3, #16]
 80104e4:	3202      	adds	r2, #2
 80104e6:	f103 010c 	add.w	r1, r3, #12
 80104ea:	0092      	lsls	r2, r2, #2
 80104ec:	300c      	adds	r0, #12
 80104ee:	f7fe fc96 	bl	800ee1e <memcpy>
 80104f2:	ec4b ab10 	vmov	d0, sl, fp
 80104f6:	aa1a      	add	r2, sp, #104	; 0x68
 80104f8:	a919      	add	r1, sp, #100	; 0x64
 80104fa:	4620      	mov	r0, r4
 80104fc:	f002 fa3e 	bl	801297c <__d2b>
 8010500:	ec4b ab18 	vmov	d8, sl, fp
 8010504:	9018      	str	r0, [sp, #96]	; 0x60
 8010506:	2800      	cmp	r0, #0
 8010508:	f43f aef6 	beq.w	80102f8 <_strtod_l+0x490>
 801050c:	2101      	movs	r1, #1
 801050e:	4620      	mov	r0, r4
 8010510:	f001 ff88 	bl	8012424 <__i2b>
 8010514:	4606      	mov	r6, r0
 8010516:	2800      	cmp	r0, #0
 8010518:	f43f aeee 	beq.w	80102f8 <_strtod_l+0x490>
 801051c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801051e:	9904      	ldr	r1, [sp, #16]
 8010520:	2b00      	cmp	r3, #0
 8010522:	bfab      	itete	ge
 8010524:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010526:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010528:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801052a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801052e:	bfac      	ite	ge
 8010530:	eb03 0902 	addge.w	r9, r3, r2
 8010534:	1ad7      	sublt	r7, r2, r3
 8010536:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010538:	eba3 0801 	sub.w	r8, r3, r1
 801053c:	4490      	add	r8, r2
 801053e:	4ba1      	ldr	r3, [pc, #644]	; (80107c4 <_strtod_l+0x95c>)
 8010540:	f108 38ff 	add.w	r8, r8, #4294967295
 8010544:	4598      	cmp	r8, r3
 8010546:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801054a:	f280 80c7 	bge.w	80106dc <_strtod_l+0x874>
 801054e:	eba3 0308 	sub.w	r3, r3, r8
 8010552:	2b1f      	cmp	r3, #31
 8010554:	eba2 0203 	sub.w	r2, r2, r3
 8010558:	f04f 0101 	mov.w	r1, #1
 801055c:	f300 80b1 	bgt.w	80106c2 <_strtod_l+0x85a>
 8010560:	fa01 f303 	lsl.w	r3, r1, r3
 8010564:	930d      	str	r3, [sp, #52]	; 0x34
 8010566:	2300      	movs	r3, #0
 8010568:	9308      	str	r3, [sp, #32]
 801056a:	eb09 0802 	add.w	r8, r9, r2
 801056e:	9b04      	ldr	r3, [sp, #16]
 8010570:	45c1      	cmp	r9, r8
 8010572:	4417      	add	r7, r2
 8010574:	441f      	add	r7, r3
 8010576:	464b      	mov	r3, r9
 8010578:	bfa8      	it	ge
 801057a:	4643      	movge	r3, r8
 801057c:	42bb      	cmp	r3, r7
 801057e:	bfa8      	it	ge
 8010580:	463b      	movge	r3, r7
 8010582:	2b00      	cmp	r3, #0
 8010584:	bfc2      	ittt	gt
 8010586:	eba8 0803 	subgt.w	r8, r8, r3
 801058a:	1aff      	subgt	r7, r7, r3
 801058c:	eba9 0903 	subgt.w	r9, r9, r3
 8010590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010592:	2b00      	cmp	r3, #0
 8010594:	dd17      	ble.n	80105c6 <_strtod_l+0x75e>
 8010596:	4631      	mov	r1, r6
 8010598:	461a      	mov	r2, r3
 801059a:	4620      	mov	r0, r4
 801059c:	f002 f802 	bl	80125a4 <__pow5mult>
 80105a0:	4606      	mov	r6, r0
 80105a2:	2800      	cmp	r0, #0
 80105a4:	f43f aea8 	beq.w	80102f8 <_strtod_l+0x490>
 80105a8:	4601      	mov	r1, r0
 80105aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80105ac:	4620      	mov	r0, r4
 80105ae:	f001 ff4f 	bl	8012450 <__multiply>
 80105b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80105b4:	2800      	cmp	r0, #0
 80105b6:	f43f ae9f 	beq.w	80102f8 <_strtod_l+0x490>
 80105ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 80105bc:	4620      	mov	r0, r4
 80105be:	f001 fe2f 	bl	8012220 <_Bfree>
 80105c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105c4:	9318      	str	r3, [sp, #96]	; 0x60
 80105c6:	f1b8 0f00 	cmp.w	r8, #0
 80105ca:	f300 808c 	bgt.w	80106e6 <_strtod_l+0x87e>
 80105ce:	9b06      	ldr	r3, [sp, #24]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	dd08      	ble.n	80105e6 <_strtod_l+0x77e>
 80105d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105d6:	9905      	ldr	r1, [sp, #20]
 80105d8:	4620      	mov	r0, r4
 80105da:	f001 ffe3 	bl	80125a4 <__pow5mult>
 80105de:	9005      	str	r0, [sp, #20]
 80105e0:	2800      	cmp	r0, #0
 80105e2:	f43f ae89 	beq.w	80102f8 <_strtod_l+0x490>
 80105e6:	2f00      	cmp	r7, #0
 80105e8:	dd08      	ble.n	80105fc <_strtod_l+0x794>
 80105ea:	9905      	ldr	r1, [sp, #20]
 80105ec:	463a      	mov	r2, r7
 80105ee:	4620      	mov	r0, r4
 80105f0:	f002 f832 	bl	8012658 <__lshift>
 80105f4:	9005      	str	r0, [sp, #20]
 80105f6:	2800      	cmp	r0, #0
 80105f8:	f43f ae7e 	beq.w	80102f8 <_strtod_l+0x490>
 80105fc:	f1b9 0f00 	cmp.w	r9, #0
 8010600:	dd08      	ble.n	8010614 <_strtod_l+0x7ac>
 8010602:	4631      	mov	r1, r6
 8010604:	464a      	mov	r2, r9
 8010606:	4620      	mov	r0, r4
 8010608:	f002 f826 	bl	8012658 <__lshift>
 801060c:	4606      	mov	r6, r0
 801060e:	2800      	cmp	r0, #0
 8010610:	f43f ae72 	beq.w	80102f8 <_strtod_l+0x490>
 8010614:	9a05      	ldr	r2, [sp, #20]
 8010616:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010618:	4620      	mov	r0, r4
 801061a:	f002 f8a9 	bl	8012770 <__mdiff>
 801061e:	4605      	mov	r5, r0
 8010620:	2800      	cmp	r0, #0
 8010622:	f43f ae69 	beq.w	80102f8 <_strtod_l+0x490>
 8010626:	68c3      	ldr	r3, [r0, #12]
 8010628:	930b      	str	r3, [sp, #44]	; 0x2c
 801062a:	2300      	movs	r3, #0
 801062c:	60c3      	str	r3, [r0, #12]
 801062e:	4631      	mov	r1, r6
 8010630:	f002 f882 	bl	8012738 <__mcmp>
 8010634:	2800      	cmp	r0, #0
 8010636:	da60      	bge.n	80106fa <_strtod_l+0x892>
 8010638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801063a:	ea53 030a 	orrs.w	r3, r3, sl
 801063e:	f040 8082 	bne.w	8010746 <_strtod_l+0x8de>
 8010642:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010646:	2b00      	cmp	r3, #0
 8010648:	d17d      	bne.n	8010746 <_strtod_l+0x8de>
 801064a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801064e:	0d1b      	lsrs	r3, r3, #20
 8010650:	051b      	lsls	r3, r3, #20
 8010652:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010656:	d976      	bls.n	8010746 <_strtod_l+0x8de>
 8010658:	696b      	ldr	r3, [r5, #20]
 801065a:	b913      	cbnz	r3, 8010662 <_strtod_l+0x7fa>
 801065c:	692b      	ldr	r3, [r5, #16]
 801065e:	2b01      	cmp	r3, #1
 8010660:	dd71      	ble.n	8010746 <_strtod_l+0x8de>
 8010662:	4629      	mov	r1, r5
 8010664:	2201      	movs	r2, #1
 8010666:	4620      	mov	r0, r4
 8010668:	f001 fff6 	bl	8012658 <__lshift>
 801066c:	4631      	mov	r1, r6
 801066e:	4605      	mov	r5, r0
 8010670:	f002 f862 	bl	8012738 <__mcmp>
 8010674:	2800      	cmp	r0, #0
 8010676:	dd66      	ble.n	8010746 <_strtod_l+0x8de>
 8010678:	9904      	ldr	r1, [sp, #16]
 801067a:	4a53      	ldr	r2, [pc, #332]	; (80107c8 <_strtod_l+0x960>)
 801067c:	465b      	mov	r3, fp
 801067e:	2900      	cmp	r1, #0
 8010680:	f000 8081 	beq.w	8010786 <_strtod_l+0x91e>
 8010684:	ea02 010b 	and.w	r1, r2, fp
 8010688:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801068c:	dc7b      	bgt.n	8010786 <_strtod_l+0x91e>
 801068e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010692:	f77f aea9 	ble.w	80103e8 <_strtod_l+0x580>
 8010696:	4b4d      	ldr	r3, [pc, #308]	; (80107cc <_strtod_l+0x964>)
 8010698:	4650      	mov	r0, sl
 801069a:	4659      	mov	r1, fp
 801069c:	2200      	movs	r2, #0
 801069e:	f7ef ffb3 	bl	8000608 <__aeabi_dmul>
 80106a2:	460b      	mov	r3, r1
 80106a4:	4303      	orrs	r3, r0
 80106a6:	bf08      	it	eq
 80106a8:	2322      	moveq	r3, #34	; 0x22
 80106aa:	4682      	mov	sl, r0
 80106ac:	468b      	mov	fp, r1
 80106ae:	bf08      	it	eq
 80106b0:	6023      	streq	r3, [r4, #0]
 80106b2:	e62b      	b.n	801030c <_strtod_l+0x4a4>
 80106b4:	f04f 32ff 	mov.w	r2, #4294967295
 80106b8:	fa02 f303 	lsl.w	r3, r2, r3
 80106bc:	ea03 0a0a 	and.w	sl, r3, sl
 80106c0:	e6e3      	b.n	801048a <_strtod_l+0x622>
 80106c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80106c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80106ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80106ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80106d2:	fa01 f308 	lsl.w	r3, r1, r8
 80106d6:	9308      	str	r3, [sp, #32]
 80106d8:	910d      	str	r1, [sp, #52]	; 0x34
 80106da:	e746      	b.n	801056a <_strtod_l+0x702>
 80106dc:	2300      	movs	r3, #0
 80106de:	9308      	str	r3, [sp, #32]
 80106e0:	2301      	movs	r3, #1
 80106e2:	930d      	str	r3, [sp, #52]	; 0x34
 80106e4:	e741      	b.n	801056a <_strtod_l+0x702>
 80106e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80106e8:	4642      	mov	r2, r8
 80106ea:	4620      	mov	r0, r4
 80106ec:	f001 ffb4 	bl	8012658 <__lshift>
 80106f0:	9018      	str	r0, [sp, #96]	; 0x60
 80106f2:	2800      	cmp	r0, #0
 80106f4:	f47f af6b 	bne.w	80105ce <_strtod_l+0x766>
 80106f8:	e5fe      	b.n	80102f8 <_strtod_l+0x490>
 80106fa:	465f      	mov	r7, fp
 80106fc:	d16e      	bne.n	80107dc <_strtod_l+0x974>
 80106fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010704:	b342      	cbz	r2, 8010758 <_strtod_l+0x8f0>
 8010706:	4a32      	ldr	r2, [pc, #200]	; (80107d0 <_strtod_l+0x968>)
 8010708:	4293      	cmp	r3, r2
 801070a:	d128      	bne.n	801075e <_strtod_l+0x8f6>
 801070c:	9b04      	ldr	r3, [sp, #16]
 801070e:	4651      	mov	r1, sl
 8010710:	b1eb      	cbz	r3, 801074e <_strtod_l+0x8e6>
 8010712:	4b2d      	ldr	r3, [pc, #180]	; (80107c8 <_strtod_l+0x960>)
 8010714:	403b      	ands	r3, r7
 8010716:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801071a:	f04f 32ff 	mov.w	r2, #4294967295
 801071e:	d819      	bhi.n	8010754 <_strtod_l+0x8ec>
 8010720:	0d1b      	lsrs	r3, r3, #20
 8010722:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010726:	fa02 f303 	lsl.w	r3, r2, r3
 801072a:	4299      	cmp	r1, r3
 801072c:	d117      	bne.n	801075e <_strtod_l+0x8f6>
 801072e:	4b29      	ldr	r3, [pc, #164]	; (80107d4 <_strtod_l+0x96c>)
 8010730:	429f      	cmp	r7, r3
 8010732:	d102      	bne.n	801073a <_strtod_l+0x8d2>
 8010734:	3101      	adds	r1, #1
 8010736:	f43f addf 	beq.w	80102f8 <_strtod_l+0x490>
 801073a:	4b23      	ldr	r3, [pc, #140]	; (80107c8 <_strtod_l+0x960>)
 801073c:	403b      	ands	r3, r7
 801073e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010742:	f04f 0a00 	mov.w	sl, #0
 8010746:	9b04      	ldr	r3, [sp, #16]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1a4      	bne.n	8010696 <_strtod_l+0x82e>
 801074c:	e5de      	b.n	801030c <_strtod_l+0x4a4>
 801074e:	f04f 33ff 	mov.w	r3, #4294967295
 8010752:	e7ea      	b.n	801072a <_strtod_l+0x8c2>
 8010754:	4613      	mov	r3, r2
 8010756:	e7e8      	b.n	801072a <_strtod_l+0x8c2>
 8010758:	ea53 030a 	orrs.w	r3, r3, sl
 801075c:	d08c      	beq.n	8010678 <_strtod_l+0x810>
 801075e:	9b08      	ldr	r3, [sp, #32]
 8010760:	b1db      	cbz	r3, 801079a <_strtod_l+0x932>
 8010762:	423b      	tst	r3, r7
 8010764:	d0ef      	beq.n	8010746 <_strtod_l+0x8de>
 8010766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010768:	9a04      	ldr	r2, [sp, #16]
 801076a:	4650      	mov	r0, sl
 801076c:	4659      	mov	r1, fp
 801076e:	b1c3      	cbz	r3, 80107a2 <_strtod_l+0x93a>
 8010770:	f7ff fb5d 	bl	800fe2e <sulp>
 8010774:	4602      	mov	r2, r0
 8010776:	460b      	mov	r3, r1
 8010778:	ec51 0b18 	vmov	r0, r1, d8
 801077c:	f7ef fd8e 	bl	800029c <__adddf3>
 8010780:	4682      	mov	sl, r0
 8010782:	468b      	mov	fp, r1
 8010784:	e7df      	b.n	8010746 <_strtod_l+0x8de>
 8010786:	4013      	ands	r3, r2
 8010788:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801078c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010790:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010794:	f04f 3aff 	mov.w	sl, #4294967295
 8010798:	e7d5      	b.n	8010746 <_strtod_l+0x8de>
 801079a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801079c:	ea13 0f0a 	tst.w	r3, sl
 80107a0:	e7e0      	b.n	8010764 <_strtod_l+0x8fc>
 80107a2:	f7ff fb44 	bl	800fe2e <sulp>
 80107a6:	4602      	mov	r2, r0
 80107a8:	460b      	mov	r3, r1
 80107aa:	ec51 0b18 	vmov	r0, r1, d8
 80107ae:	f7ef fd73 	bl	8000298 <__aeabi_dsub>
 80107b2:	2200      	movs	r2, #0
 80107b4:	2300      	movs	r3, #0
 80107b6:	4682      	mov	sl, r0
 80107b8:	468b      	mov	fp, r1
 80107ba:	f7f0 f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 80107be:	2800      	cmp	r0, #0
 80107c0:	d0c1      	beq.n	8010746 <_strtod_l+0x8de>
 80107c2:	e611      	b.n	80103e8 <_strtod_l+0x580>
 80107c4:	fffffc02 	.word	0xfffffc02
 80107c8:	7ff00000 	.word	0x7ff00000
 80107cc:	39500000 	.word	0x39500000
 80107d0:	000fffff 	.word	0x000fffff
 80107d4:	7fefffff 	.word	0x7fefffff
 80107d8:	080172c8 	.word	0x080172c8
 80107dc:	4631      	mov	r1, r6
 80107de:	4628      	mov	r0, r5
 80107e0:	f002 f928 	bl	8012a34 <__ratio>
 80107e4:	ec59 8b10 	vmov	r8, r9, d0
 80107e8:	ee10 0a10 	vmov	r0, s0
 80107ec:	2200      	movs	r2, #0
 80107ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107f2:	4649      	mov	r1, r9
 80107f4:	f7f0 f984 	bl	8000b00 <__aeabi_dcmple>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	d07a      	beq.n	80108f2 <_strtod_l+0xa8a>
 80107fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d04a      	beq.n	8010898 <_strtod_l+0xa30>
 8010802:	4b95      	ldr	r3, [pc, #596]	; (8010a58 <_strtod_l+0xbf0>)
 8010804:	2200      	movs	r2, #0
 8010806:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801080a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010a58 <_strtod_l+0xbf0>
 801080e:	f04f 0800 	mov.w	r8, #0
 8010812:	4b92      	ldr	r3, [pc, #584]	; (8010a5c <_strtod_l+0xbf4>)
 8010814:	403b      	ands	r3, r7
 8010816:	930d      	str	r3, [sp, #52]	; 0x34
 8010818:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801081a:	4b91      	ldr	r3, [pc, #580]	; (8010a60 <_strtod_l+0xbf8>)
 801081c:	429a      	cmp	r2, r3
 801081e:	f040 80b0 	bne.w	8010982 <_strtod_l+0xb1a>
 8010822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010826:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801082a:	ec4b ab10 	vmov	d0, sl, fp
 801082e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010832:	f002 f827 	bl	8012884 <__ulp>
 8010836:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801083a:	ec53 2b10 	vmov	r2, r3, d0
 801083e:	f7ef fee3 	bl	8000608 <__aeabi_dmul>
 8010842:	4652      	mov	r2, sl
 8010844:	465b      	mov	r3, fp
 8010846:	f7ef fd29 	bl	800029c <__adddf3>
 801084a:	460b      	mov	r3, r1
 801084c:	4983      	ldr	r1, [pc, #524]	; (8010a5c <_strtod_l+0xbf4>)
 801084e:	4a85      	ldr	r2, [pc, #532]	; (8010a64 <_strtod_l+0xbfc>)
 8010850:	4019      	ands	r1, r3
 8010852:	4291      	cmp	r1, r2
 8010854:	4682      	mov	sl, r0
 8010856:	d960      	bls.n	801091a <_strtod_l+0xab2>
 8010858:	ee18 3a90 	vmov	r3, s17
 801085c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010860:	4293      	cmp	r3, r2
 8010862:	d104      	bne.n	801086e <_strtod_l+0xa06>
 8010864:	ee18 3a10 	vmov	r3, s16
 8010868:	3301      	adds	r3, #1
 801086a:	f43f ad45 	beq.w	80102f8 <_strtod_l+0x490>
 801086e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010a70 <_strtod_l+0xc08>
 8010872:	f04f 3aff 	mov.w	sl, #4294967295
 8010876:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010878:	4620      	mov	r0, r4
 801087a:	f001 fcd1 	bl	8012220 <_Bfree>
 801087e:	9905      	ldr	r1, [sp, #20]
 8010880:	4620      	mov	r0, r4
 8010882:	f001 fccd 	bl	8012220 <_Bfree>
 8010886:	4631      	mov	r1, r6
 8010888:	4620      	mov	r0, r4
 801088a:	f001 fcc9 	bl	8012220 <_Bfree>
 801088e:	4629      	mov	r1, r5
 8010890:	4620      	mov	r0, r4
 8010892:	f001 fcc5 	bl	8012220 <_Bfree>
 8010896:	e61a      	b.n	80104ce <_strtod_l+0x666>
 8010898:	f1ba 0f00 	cmp.w	sl, #0
 801089c:	d11b      	bne.n	80108d6 <_strtod_l+0xa6e>
 801089e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108a2:	b9f3      	cbnz	r3, 80108e2 <_strtod_l+0xa7a>
 80108a4:	4b6c      	ldr	r3, [pc, #432]	; (8010a58 <_strtod_l+0xbf0>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	4640      	mov	r0, r8
 80108aa:	4649      	mov	r1, r9
 80108ac:	f7f0 f91e 	bl	8000aec <__aeabi_dcmplt>
 80108b0:	b9d0      	cbnz	r0, 80108e8 <_strtod_l+0xa80>
 80108b2:	4640      	mov	r0, r8
 80108b4:	4649      	mov	r1, r9
 80108b6:	4b6c      	ldr	r3, [pc, #432]	; (8010a68 <_strtod_l+0xc00>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	f7ef fea5 	bl	8000608 <__aeabi_dmul>
 80108be:	4680      	mov	r8, r0
 80108c0:	4689      	mov	r9, r1
 80108c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80108c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80108ca:	9315      	str	r3, [sp, #84]	; 0x54
 80108cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80108d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80108d4:	e79d      	b.n	8010812 <_strtod_l+0x9aa>
 80108d6:	f1ba 0f01 	cmp.w	sl, #1
 80108da:	d102      	bne.n	80108e2 <_strtod_l+0xa7a>
 80108dc:	2f00      	cmp	r7, #0
 80108de:	f43f ad83 	beq.w	80103e8 <_strtod_l+0x580>
 80108e2:	4b62      	ldr	r3, [pc, #392]	; (8010a6c <_strtod_l+0xc04>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	e78e      	b.n	8010806 <_strtod_l+0x99e>
 80108e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010a68 <_strtod_l+0xc00>
 80108ec:	f04f 0800 	mov.w	r8, #0
 80108f0:	e7e7      	b.n	80108c2 <_strtod_l+0xa5a>
 80108f2:	4b5d      	ldr	r3, [pc, #372]	; (8010a68 <_strtod_l+0xc00>)
 80108f4:	4640      	mov	r0, r8
 80108f6:	4649      	mov	r1, r9
 80108f8:	2200      	movs	r2, #0
 80108fa:	f7ef fe85 	bl	8000608 <__aeabi_dmul>
 80108fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010900:	4680      	mov	r8, r0
 8010902:	4689      	mov	r9, r1
 8010904:	b933      	cbnz	r3, 8010914 <_strtod_l+0xaac>
 8010906:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801090a:	900e      	str	r0, [sp, #56]	; 0x38
 801090c:	930f      	str	r3, [sp, #60]	; 0x3c
 801090e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010912:	e7dd      	b.n	80108d0 <_strtod_l+0xa68>
 8010914:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010918:	e7f9      	b.n	801090e <_strtod_l+0xaa6>
 801091a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1a8      	bne.n	8010876 <_strtod_l+0xa0e>
 8010924:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801092a:	0d1b      	lsrs	r3, r3, #20
 801092c:	051b      	lsls	r3, r3, #20
 801092e:	429a      	cmp	r2, r3
 8010930:	d1a1      	bne.n	8010876 <_strtod_l+0xa0e>
 8010932:	4640      	mov	r0, r8
 8010934:	4649      	mov	r1, r9
 8010936:	f7f0 f9c7 	bl	8000cc8 <__aeabi_d2lz>
 801093a:	f7ef fe37 	bl	80005ac <__aeabi_l2d>
 801093e:	4602      	mov	r2, r0
 8010940:	460b      	mov	r3, r1
 8010942:	4640      	mov	r0, r8
 8010944:	4649      	mov	r1, r9
 8010946:	f7ef fca7 	bl	8000298 <__aeabi_dsub>
 801094a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801094c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010950:	ea43 030a 	orr.w	r3, r3, sl
 8010954:	4313      	orrs	r3, r2
 8010956:	4680      	mov	r8, r0
 8010958:	4689      	mov	r9, r1
 801095a:	d055      	beq.n	8010a08 <_strtod_l+0xba0>
 801095c:	a336      	add	r3, pc, #216	; (adr r3, 8010a38 <_strtod_l+0xbd0>)
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	f7f0 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8010966:	2800      	cmp	r0, #0
 8010968:	f47f acd0 	bne.w	801030c <_strtod_l+0x4a4>
 801096c:	a334      	add	r3, pc, #208	; (adr r3, 8010a40 <_strtod_l+0xbd8>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	4640      	mov	r0, r8
 8010974:	4649      	mov	r1, r9
 8010976:	f7f0 f8d7 	bl	8000b28 <__aeabi_dcmpgt>
 801097a:	2800      	cmp	r0, #0
 801097c:	f43f af7b 	beq.w	8010876 <_strtod_l+0xa0e>
 8010980:	e4c4      	b.n	801030c <_strtod_l+0x4a4>
 8010982:	9b04      	ldr	r3, [sp, #16]
 8010984:	b333      	cbz	r3, 80109d4 <_strtod_l+0xb6c>
 8010986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010988:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801098c:	d822      	bhi.n	80109d4 <_strtod_l+0xb6c>
 801098e:	a32e      	add	r3, pc, #184	; (adr r3, 8010a48 <_strtod_l+0xbe0>)
 8010990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010994:	4640      	mov	r0, r8
 8010996:	4649      	mov	r1, r9
 8010998:	f7f0 f8b2 	bl	8000b00 <__aeabi_dcmple>
 801099c:	b1a0      	cbz	r0, 80109c8 <_strtod_l+0xb60>
 801099e:	4649      	mov	r1, r9
 80109a0:	4640      	mov	r0, r8
 80109a2:	f7f0 f909 	bl	8000bb8 <__aeabi_d2uiz>
 80109a6:	2801      	cmp	r0, #1
 80109a8:	bf38      	it	cc
 80109aa:	2001      	movcc	r0, #1
 80109ac:	f7ef fdb2 	bl	8000514 <__aeabi_ui2d>
 80109b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109b2:	4680      	mov	r8, r0
 80109b4:	4689      	mov	r9, r1
 80109b6:	bb23      	cbnz	r3, 8010a02 <_strtod_l+0xb9a>
 80109b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109bc:	9010      	str	r0, [sp, #64]	; 0x40
 80109be:	9311      	str	r3, [sp, #68]	; 0x44
 80109c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80109c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80109c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80109d0:	1a9b      	subs	r3, r3, r2
 80109d2:	9309      	str	r3, [sp, #36]	; 0x24
 80109d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80109d8:	eeb0 0a48 	vmov.f32	s0, s16
 80109dc:	eef0 0a68 	vmov.f32	s1, s17
 80109e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80109e4:	f001 ff4e 	bl	8012884 <__ulp>
 80109e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80109ec:	ec53 2b10 	vmov	r2, r3, d0
 80109f0:	f7ef fe0a 	bl	8000608 <__aeabi_dmul>
 80109f4:	ec53 2b18 	vmov	r2, r3, d8
 80109f8:	f7ef fc50 	bl	800029c <__adddf3>
 80109fc:	4682      	mov	sl, r0
 80109fe:	468b      	mov	fp, r1
 8010a00:	e78d      	b.n	801091e <_strtod_l+0xab6>
 8010a02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010a06:	e7db      	b.n	80109c0 <_strtod_l+0xb58>
 8010a08:	a311      	add	r3, pc, #68	; (adr r3, 8010a50 <_strtod_l+0xbe8>)
 8010a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0e:	f7f0 f86d 	bl	8000aec <__aeabi_dcmplt>
 8010a12:	e7b2      	b.n	801097a <_strtod_l+0xb12>
 8010a14:	2300      	movs	r3, #0
 8010a16:	930a      	str	r3, [sp, #40]	; 0x28
 8010a18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010a1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a1c:	6013      	str	r3, [r2, #0]
 8010a1e:	f7ff ba6b 	b.w	800fef8 <_strtod_l+0x90>
 8010a22:	2a65      	cmp	r2, #101	; 0x65
 8010a24:	f43f ab5f 	beq.w	80100e6 <_strtod_l+0x27e>
 8010a28:	2a45      	cmp	r2, #69	; 0x45
 8010a2a:	f43f ab5c 	beq.w	80100e6 <_strtod_l+0x27e>
 8010a2e:	2301      	movs	r3, #1
 8010a30:	f7ff bb94 	b.w	801015c <_strtod_l+0x2f4>
 8010a34:	f3af 8000 	nop.w
 8010a38:	94a03595 	.word	0x94a03595
 8010a3c:	3fdfffff 	.word	0x3fdfffff
 8010a40:	35afe535 	.word	0x35afe535
 8010a44:	3fe00000 	.word	0x3fe00000
 8010a48:	ffc00000 	.word	0xffc00000
 8010a4c:	41dfffff 	.word	0x41dfffff
 8010a50:	94a03595 	.word	0x94a03595
 8010a54:	3fcfffff 	.word	0x3fcfffff
 8010a58:	3ff00000 	.word	0x3ff00000
 8010a5c:	7ff00000 	.word	0x7ff00000
 8010a60:	7fe00000 	.word	0x7fe00000
 8010a64:	7c9fffff 	.word	0x7c9fffff
 8010a68:	3fe00000 	.word	0x3fe00000
 8010a6c:	bff00000 	.word	0xbff00000
 8010a70:	7fefffff 	.word	0x7fefffff

08010a74 <_strtod_r>:
 8010a74:	4b01      	ldr	r3, [pc, #4]	; (8010a7c <_strtod_r+0x8>)
 8010a76:	f7ff b9f7 	b.w	800fe68 <_strtod_l>
 8010a7a:	bf00      	nop
 8010a7c:	20000178 	.word	0x20000178

08010a80 <_strtol_l.constprop.0>:
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a86:	d001      	beq.n	8010a8c <_strtol_l.constprop.0+0xc>
 8010a88:	2b24      	cmp	r3, #36	; 0x24
 8010a8a:	d906      	bls.n	8010a9a <_strtol_l.constprop.0+0x1a>
 8010a8c:	f7fe f8a4 	bl	800ebd8 <__errno>
 8010a90:	2316      	movs	r3, #22
 8010a92:	6003      	str	r3, [r0, #0]
 8010a94:	2000      	movs	r0, #0
 8010a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010b80 <_strtol_l.constprop.0+0x100>
 8010a9e:	460d      	mov	r5, r1
 8010aa0:	462e      	mov	r6, r5
 8010aa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010aa6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010aaa:	f017 0708 	ands.w	r7, r7, #8
 8010aae:	d1f7      	bne.n	8010aa0 <_strtol_l.constprop.0+0x20>
 8010ab0:	2c2d      	cmp	r4, #45	; 0x2d
 8010ab2:	d132      	bne.n	8010b1a <_strtol_l.constprop.0+0x9a>
 8010ab4:	782c      	ldrb	r4, [r5, #0]
 8010ab6:	2701      	movs	r7, #1
 8010ab8:	1cb5      	adds	r5, r6, #2
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d05b      	beq.n	8010b76 <_strtol_l.constprop.0+0xf6>
 8010abe:	2b10      	cmp	r3, #16
 8010ac0:	d109      	bne.n	8010ad6 <_strtol_l.constprop.0+0x56>
 8010ac2:	2c30      	cmp	r4, #48	; 0x30
 8010ac4:	d107      	bne.n	8010ad6 <_strtol_l.constprop.0+0x56>
 8010ac6:	782c      	ldrb	r4, [r5, #0]
 8010ac8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010acc:	2c58      	cmp	r4, #88	; 0x58
 8010ace:	d14d      	bne.n	8010b6c <_strtol_l.constprop.0+0xec>
 8010ad0:	786c      	ldrb	r4, [r5, #1]
 8010ad2:	2310      	movs	r3, #16
 8010ad4:	3502      	adds	r5, #2
 8010ad6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ade:	f04f 0c00 	mov.w	ip, #0
 8010ae2:	fbb8 f9f3 	udiv	r9, r8, r3
 8010ae6:	4666      	mov	r6, ip
 8010ae8:	fb03 8a19 	mls	sl, r3, r9, r8
 8010aec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010af0:	f1be 0f09 	cmp.w	lr, #9
 8010af4:	d816      	bhi.n	8010b24 <_strtol_l.constprop.0+0xa4>
 8010af6:	4674      	mov	r4, lr
 8010af8:	42a3      	cmp	r3, r4
 8010afa:	dd24      	ble.n	8010b46 <_strtol_l.constprop.0+0xc6>
 8010afc:	f1bc 0f00 	cmp.w	ip, #0
 8010b00:	db1e      	blt.n	8010b40 <_strtol_l.constprop.0+0xc0>
 8010b02:	45b1      	cmp	r9, r6
 8010b04:	d31c      	bcc.n	8010b40 <_strtol_l.constprop.0+0xc0>
 8010b06:	d101      	bne.n	8010b0c <_strtol_l.constprop.0+0x8c>
 8010b08:	45a2      	cmp	sl, r4
 8010b0a:	db19      	blt.n	8010b40 <_strtol_l.constprop.0+0xc0>
 8010b0c:	fb06 4603 	mla	r6, r6, r3, r4
 8010b10:	f04f 0c01 	mov.w	ip, #1
 8010b14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b18:	e7e8      	b.n	8010aec <_strtol_l.constprop.0+0x6c>
 8010b1a:	2c2b      	cmp	r4, #43	; 0x2b
 8010b1c:	bf04      	itt	eq
 8010b1e:	782c      	ldrbeq	r4, [r5, #0]
 8010b20:	1cb5      	addeq	r5, r6, #2
 8010b22:	e7ca      	b.n	8010aba <_strtol_l.constprop.0+0x3a>
 8010b24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010b28:	f1be 0f19 	cmp.w	lr, #25
 8010b2c:	d801      	bhi.n	8010b32 <_strtol_l.constprop.0+0xb2>
 8010b2e:	3c37      	subs	r4, #55	; 0x37
 8010b30:	e7e2      	b.n	8010af8 <_strtol_l.constprop.0+0x78>
 8010b32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010b36:	f1be 0f19 	cmp.w	lr, #25
 8010b3a:	d804      	bhi.n	8010b46 <_strtol_l.constprop.0+0xc6>
 8010b3c:	3c57      	subs	r4, #87	; 0x57
 8010b3e:	e7db      	b.n	8010af8 <_strtol_l.constprop.0+0x78>
 8010b40:	f04f 3cff 	mov.w	ip, #4294967295
 8010b44:	e7e6      	b.n	8010b14 <_strtol_l.constprop.0+0x94>
 8010b46:	f1bc 0f00 	cmp.w	ip, #0
 8010b4a:	da05      	bge.n	8010b58 <_strtol_l.constprop.0+0xd8>
 8010b4c:	2322      	movs	r3, #34	; 0x22
 8010b4e:	6003      	str	r3, [r0, #0]
 8010b50:	4646      	mov	r6, r8
 8010b52:	b942      	cbnz	r2, 8010b66 <_strtol_l.constprop.0+0xe6>
 8010b54:	4630      	mov	r0, r6
 8010b56:	e79e      	b.n	8010a96 <_strtol_l.constprop.0+0x16>
 8010b58:	b107      	cbz	r7, 8010b5c <_strtol_l.constprop.0+0xdc>
 8010b5a:	4276      	negs	r6, r6
 8010b5c:	2a00      	cmp	r2, #0
 8010b5e:	d0f9      	beq.n	8010b54 <_strtol_l.constprop.0+0xd4>
 8010b60:	f1bc 0f00 	cmp.w	ip, #0
 8010b64:	d000      	beq.n	8010b68 <_strtol_l.constprop.0+0xe8>
 8010b66:	1e69      	subs	r1, r5, #1
 8010b68:	6011      	str	r1, [r2, #0]
 8010b6a:	e7f3      	b.n	8010b54 <_strtol_l.constprop.0+0xd4>
 8010b6c:	2430      	movs	r4, #48	; 0x30
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1b1      	bne.n	8010ad6 <_strtol_l.constprop.0+0x56>
 8010b72:	2308      	movs	r3, #8
 8010b74:	e7af      	b.n	8010ad6 <_strtol_l.constprop.0+0x56>
 8010b76:	2c30      	cmp	r4, #48	; 0x30
 8010b78:	d0a5      	beq.n	8010ac6 <_strtol_l.constprop.0+0x46>
 8010b7a:	230a      	movs	r3, #10
 8010b7c:	e7ab      	b.n	8010ad6 <_strtol_l.constprop.0+0x56>
 8010b7e:	bf00      	nop
 8010b80:	080172f1 	.word	0x080172f1

08010b84 <_strtol_r>:
 8010b84:	f7ff bf7c 	b.w	8010a80 <_strtol_l.constprop.0>

08010b88 <_write_r>:
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	4d07      	ldr	r5, [pc, #28]	; (8010ba8 <_write_r+0x20>)
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	4608      	mov	r0, r1
 8010b90:	4611      	mov	r1, r2
 8010b92:	2200      	movs	r2, #0
 8010b94:	602a      	str	r2, [r5, #0]
 8010b96:	461a      	mov	r2, r3
 8010b98:	f002 fd64 	bl	8013664 <_write>
 8010b9c:	1c43      	adds	r3, r0, #1
 8010b9e:	d102      	bne.n	8010ba6 <_write_r+0x1e>
 8010ba0:	682b      	ldr	r3, [r5, #0]
 8010ba2:	b103      	cbz	r3, 8010ba6 <_write_r+0x1e>
 8010ba4:	6023      	str	r3, [r4, #0]
 8010ba6:	bd38      	pop	{r3, r4, r5, pc}
 8010ba8:	20006c7c 	.word	0x20006c7c

08010bac <_close_r>:
 8010bac:	b538      	push	{r3, r4, r5, lr}
 8010bae:	4d06      	ldr	r5, [pc, #24]	; (8010bc8 <_close_r+0x1c>)
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	4608      	mov	r0, r1
 8010bb6:	602b      	str	r3, [r5, #0]
 8010bb8:	f002 fd1c 	bl	80135f4 <_close>
 8010bbc:	1c43      	adds	r3, r0, #1
 8010bbe:	d102      	bne.n	8010bc6 <_close_r+0x1a>
 8010bc0:	682b      	ldr	r3, [r5, #0]
 8010bc2:	b103      	cbz	r3, 8010bc6 <_close_r+0x1a>
 8010bc4:	6023      	str	r3, [r4, #0]
 8010bc6:	bd38      	pop	{r3, r4, r5, pc}
 8010bc8:	20006c7c 	.word	0x20006c7c

08010bcc <quorem>:
 8010bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd0:	6903      	ldr	r3, [r0, #16]
 8010bd2:	690c      	ldr	r4, [r1, #16]
 8010bd4:	42a3      	cmp	r3, r4
 8010bd6:	4607      	mov	r7, r0
 8010bd8:	f2c0 8081 	blt.w	8010cde <quorem+0x112>
 8010bdc:	3c01      	subs	r4, #1
 8010bde:	f101 0814 	add.w	r8, r1, #20
 8010be2:	f100 0514 	add.w	r5, r0, #20
 8010be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bea:	9301      	str	r3, [sp, #4]
 8010bec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8010c04:	d331      	bcc.n	8010c6a <quorem+0x9e>
 8010c06:	f04f 0e00 	mov.w	lr, #0
 8010c0a:	4640      	mov	r0, r8
 8010c0c:	46ac      	mov	ip, r5
 8010c0e:	46f2      	mov	sl, lr
 8010c10:	f850 2b04 	ldr.w	r2, [r0], #4
 8010c14:	b293      	uxth	r3, r2
 8010c16:	fb06 e303 	mla	r3, r6, r3, lr
 8010c1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	ebaa 0303 	sub.w	r3, sl, r3
 8010c24:	f8dc a000 	ldr.w	sl, [ip]
 8010c28:	0c12      	lsrs	r2, r2, #16
 8010c2a:	fa13 f38a 	uxtah	r3, r3, sl
 8010c2e:	fb06 e202 	mla	r2, r6, r2, lr
 8010c32:	9300      	str	r3, [sp, #0]
 8010c34:	9b00      	ldr	r3, [sp, #0]
 8010c36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010c3a:	b292      	uxth	r2, r2
 8010c3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c44:	f8bd 3000 	ldrh.w	r3, [sp]
 8010c48:	4581      	cmp	r9, r0
 8010c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c4e:	f84c 3b04 	str.w	r3, [ip], #4
 8010c52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010c56:	d2db      	bcs.n	8010c10 <quorem+0x44>
 8010c58:	f855 300b 	ldr.w	r3, [r5, fp]
 8010c5c:	b92b      	cbnz	r3, 8010c6a <quorem+0x9e>
 8010c5e:	9b01      	ldr	r3, [sp, #4]
 8010c60:	3b04      	subs	r3, #4
 8010c62:	429d      	cmp	r5, r3
 8010c64:	461a      	mov	r2, r3
 8010c66:	d32e      	bcc.n	8010cc6 <quorem+0xfa>
 8010c68:	613c      	str	r4, [r7, #16]
 8010c6a:	4638      	mov	r0, r7
 8010c6c:	f001 fd64 	bl	8012738 <__mcmp>
 8010c70:	2800      	cmp	r0, #0
 8010c72:	db24      	blt.n	8010cbe <quorem+0xf2>
 8010c74:	3601      	adds	r6, #1
 8010c76:	4628      	mov	r0, r5
 8010c78:	f04f 0c00 	mov.w	ip, #0
 8010c7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c80:	f8d0 e000 	ldr.w	lr, [r0]
 8010c84:	b293      	uxth	r3, r2
 8010c86:	ebac 0303 	sub.w	r3, ip, r3
 8010c8a:	0c12      	lsrs	r2, r2, #16
 8010c8c:	fa13 f38e 	uxtah	r3, r3, lr
 8010c90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c9e:	45c1      	cmp	r9, r8
 8010ca0:	f840 3b04 	str.w	r3, [r0], #4
 8010ca4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010ca8:	d2e8      	bcs.n	8010c7c <quorem+0xb0>
 8010caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cb2:	b922      	cbnz	r2, 8010cbe <quorem+0xf2>
 8010cb4:	3b04      	subs	r3, #4
 8010cb6:	429d      	cmp	r5, r3
 8010cb8:	461a      	mov	r2, r3
 8010cba:	d30a      	bcc.n	8010cd2 <quorem+0x106>
 8010cbc:	613c      	str	r4, [r7, #16]
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	b003      	add	sp, #12
 8010cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cc6:	6812      	ldr	r2, [r2, #0]
 8010cc8:	3b04      	subs	r3, #4
 8010cca:	2a00      	cmp	r2, #0
 8010ccc:	d1cc      	bne.n	8010c68 <quorem+0x9c>
 8010cce:	3c01      	subs	r4, #1
 8010cd0:	e7c7      	b.n	8010c62 <quorem+0x96>
 8010cd2:	6812      	ldr	r2, [r2, #0]
 8010cd4:	3b04      	subs	r3, #4
 8010cd6:	2a00      	cmp	r2, #0
 8010cd8:	d1f0      	bne.n	8010cbc <quorem+0xf0>
 8010cda:	3c01      	subs	r4, #1
 8010cdc:	e7eb      	b.n	8010cb6 <quorem+0xea>
 8010cde:	2000      	movs	r0, #0
 8010ce0:	e7ee      	b.n	8010cc0 <quorem+0xf4>
 8010ce2:	0000      	movs	r0, r0
 8010ce4:	0000      	movs	r0, r0
	...

08010ce8 <_dtoa_r>:
 8010ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cec:	ed2d 8b04 	vpush	{d8-d9}
 8010cf0:	ec57 6b10 	vmov	r6, r7, d0
 8010cf4:	b093      	sub	sp, #76	; 0x4c
 8010cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010cf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010cfc:	9106      	str	r1, [sp, #24]
 8010cfe:	ee10 aa10 	vmov	sl, s0
 8010d02:	4604      	mov	r4, r0
 8010d04:	9209      	str	r2, [sp, #36]	; 0x24
 8010d06:	930c      	str	r3, [sp, #48]	; 0x30
 8010d08:	46bb      	mov	fp, r7
 8010d0a:	b975      	cbnz	r5, 8010d2a <_dtoa_r+0x42>
 8010d0c:	2010      	movs	r0, #16
 8010d0e:	f001 fa21 	bl	8012154 <malloc>
 8010d12:	4602      	mov	r2, r0
 8010d14:	6260      	str	r0, [r4, #36]	; 0x24
 8010d16:	b920      	cbnz	r0, 8010d22 <_dtoa_r+0x3a>
 8010d18:	4ba7      	ldr	r3, [pc, #668]	; (8010fb8 <_dtoa_r+0x2d0>)
 8010d1a:	21ea      	movs	r1, #234	; 0xea
 8010d1c:	48a7      	ldr	r0, [pc, #668]	; (8010fbc <_dtoa_r+0x2d4>)
 8010d1e:	f002 f8fd 	bl	8012f1c <__assert_func>
 8010d22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d26:	6005      	str	r5, [r0, #0]
 8010d28:	60c5      	str	r5, [r0, #12]
 8010d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d2c:	6819      	ldr	r1, [r3, #0]
 8010d2e:	b151      	cbz	r1, 8010d46 <_dtoa_r+0x5e>
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	604a      	str	r2, [r1, #4]
 8010d34:	2301      	movs	r3, #1
 8010d36:	4093      	lsls	r3, r2
 8010d38:	608b      	str	r3, [r1, #8]
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f001 fa70 	bl	8012220 <_Bfree>
 8010d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d42:	2200      	movs	r2, #0
 8010d44:	601a      	str	r2, [r3, #0]
 8010d46:	1e3b      	subs	r3, r7, #0
 8010d48:	bfaa      	itet	ge
 8010d4a:	2300      	movge	r3, #0
 8010d4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010d50:	f8c8 3000 	strge.w	r3, [r8]
 8010d54:	4b9a      	ldr	r3, [pc, #616]	; (8010fc0 <_dtoa_r+0x2d8>)
 8010d56:	bfbc      	itt	lt
 8010d58:	2201      	movlt	r2, #1
 8010d5a:	f8c8 2000 	strlt.w	r2, [r8]
 8010d5e:	ea33 030b 	bics.w	r3, r3, fp
 8010d62:	d11b      	bne.n	8010d9c <_dtoa_r+0xb4>
 8010d64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d66:	f242 730f 	movw	r3, #9999	; 0x270f
 8010d6a:	6013      	str	r3, [r2, #0]
 8010d6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d70:	4333      	orrs	r3, r6
 8010d72:	f000 8592 	beq.w	801189a <_dtoa_r+0xbb2>
 8010d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d78:	b963      	cbnz	r3, 8010d94 <_dtoa_r+0xac>
 8010d7a:	4b92      	ldr	r3, [pc, #584]	; (8010fc4 <_dtoa_r+0x2dc>)
 8010d7c:	e022      	b.n	8010dc4 <_dtoa_r+0xdc>
 8010d7e:	4b92      	ldr	r3, [pc, #584]	; (8010fc8 <_dtoa_r+0x2e0>)
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	3308      	adds	r3, #8
 8010d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d86:	6013      	str	r3, [r2, #0]
 8010d88:	9801      	ldr	r0, [sp, #4]
 8010d8a:	b013      	add	sp, #76	; 0x4c
 8010d8c:	ecbd 8b04 	vpop	{d8-d9}
 8010d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d94:	4b8b      	ldr	r3, [pc, #556]	; (8010fc4 <_dtoa_r+0x2dc>)
 8010d96:	9301      	str	r3, [sp, #4]
 8010d98:	3303      	adds	r3, #3
 8010d9a:	e7f3      	b.n	8010d84 <_dtoa_r+0x9c>
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	2300      	movs	r3, #0
 8010da0:	4650      	mov	r0, sl
 8010da2:	4659      	mov	r1, fp
 8010da4:	f7ef fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8010da8:	ec4b ab19 	vmov	d9, sl, fp
 8010dac:	4680      	mov	r8, r0
 8010dae:	b158      	cbz	r0, 8010dc8 <_dtoa_r+0xe0>
 8010db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010db2:	2301      	movs	r3, #1
 8010db4:	6013      	str	r3, [r2, #0]
 8010db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f000 856b 	beq.w	8011894 <_dtoa_r+0xbac>
 8010dbe:	4883      	ldr	r0, [pc, #524]	; (8010fcc <_dtoa_r+0x2e4>)
 8010dc0:	6018      	str	r0, [r3, #0]
 8010dc2:	1e43      	subs	r3, r0, #1
 8010dc4:	9301      	str	r3, [sp, #4]
 8010dc6:	e7df      	b.n	8010d88 <_dtoa_r+0xa0>
 8010dc8:	ec4b ab10 	vmov	d0, sl, fp
 8010dcc:	aa10      	add	r2, sp, #64	; 0x40
 8010dce:	a911      	add	r1, sp, #68	; 0x44
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f001 fdd3 	bl	801297c <__d2b>
 8010dd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010dda:	ee08 0a10 	vmov	s16, r0
 8010dde:	2d00      	cmp	r5, #0
 8010de0:	f000 8084 	beq.w	8010eec <_dtoa_r+0x204>
 8010de4:	ee19 3a90 	vmov	r3, s19
 8010de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010df0:	4656      	mov	r6, sl
 8010df2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010dfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010dfe:	4b74      	ldr	r3, [pc, #464]	; (8010fd0 <_dtoa_r+0x2e8>)
 8010e00:	2200      	movs	r2, #0
 8010e02:	4630      	mov	r0, r6
 8010e04:	4639      	mov	r1, r7
 8010e06:	f7ef fa47 	bl	8000298 <__aeabi_dsub>
 8010e0a:	a365      	add	r3, pc, #404	; (adr r3, 8010fa0 <_dtoa_r+0x2b8>)
 8010e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e10:	f7ef fbfa 	bl	8000608 <__aeabi_dmul>
 8010e14:	a364      	add	r3, pc, #400	; (adr r3, 8010fa8 <_dtoa_r+0x2c0>)
 8010e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1a:	f7ef fa3f 	bl	800029c <__adddf3>
 8010e1e:	4606      	mov	r6, r0
 8010e20:	4628      	mov	r0, r5
 8010e22:	460f      	mov	r7, r1
 8010e24:	f7ef fb86 	bl	8000534 <__aeabi_i2d>
 8010e28:	a361      	add	r3, pc, #388	; (adr r3, 8010fb0 <_dtoa_r+0x2c8>)
 8010e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2e:	f7ef fbeb 	bl	8000608 <__aeabi_dmul>
 8010e32:	4602      	mov	r2, r0
 8010e34:	460b      	mov	r3, r1
 8010e36:	4630      	mov	r0, r6
 8010e38:	4639      	mov	r1, r7
 8010e3a:	f7ef fa2f 	bl	800029c <__adddf3>
 8010e3e:	4606      	mov	r6, r0
 8010e40:	460f      	mov	r7, r1
 8010e42:	f7ef fe91 	bl	8000b68 <__aeabi_d2iz>
 8010e46:	2200      	movs	r2, #0
 8010e48:	9000      	str	r0, [sp, #0]
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	4630      	mov	r0, r6
 8010e4e:	4639      	mov	r1, r7
 8010e50:	f7ef fe4c 	bl	8000aec <__aeabi_dcmplt>
 8010e54:	b150      	cbz	r0, 8010e6c <_dtoa_r+0x184>
 8010e56:	9800      	ldr	r0, [sp, #0]
 8010e58:	f7ef fb6c 	bl	8000534 <__aeabi_i2d>
 8010e5c:	4632      	mov	r2, r6
 8010e5e:	463b      	mov	r3, r7
 8010e60:	f7ef fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e64:	b910      	cbnz	r0, 8010e6c <_dtoa_r+0x184>
 8010e66:	9b00      	ldr	r3, [sp, #0]
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	9b00      	ldr	r3, [sp, #0]
 8010e6e:	2b16      	cmp	r3, #22
 8010e70:	d85a      	bhi.n	8010f28 <_dtoa_r+0x240>
 8010e72:	9a00      	ldr	r2, [sp, #0]
 8010e74:	4b57      	ldr	r3, [pc, #348]	; (8010fd4 <_dtoa_r+0x2ec>)
 8010e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	ec51 0b19 	vmov	r0, r1, d9
 8010e82:	f7ef fe33 	bl	8000aec <__aeabi_dcmplt>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d050      	beq.n	8010f2c <_dtoa_r+0x244>
 8010e8a:	9b00      	ldr	r3, [sp, #0]
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	9300      	str	r3, [sp, #0]
 8010e90:	2300      	movs	r3, #0
 8010e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e96:	1b5d      	subs	r5, r3, r5
 8010e98:	1e6b      	subs	r3, r5, #1
 8010e9a:	9305      	str	r3, [sp, #20]
 8010e9c:	bf45      	ittet	mi
 8010e9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010ea2:	9304      	strmi	r3, [sp, #16]
 8010ea4:	2300      	movpl	r3, #0
 8010ea6:	2300      	movmi	r3, #0
 8010ea8:	bf4c      	ite	mi
 8010eaa:	9305      	strmi	r3, [sp, #20]
 8010eac:	9304      	strpl	r3, [sp, #16]
 8010eae:	9b00      	ldr	r3, [sp, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	db3d      	blt.n	8010f30 <_dtoa_r+0x248>
 8010eb4:	9b05      	ldr	r3, [sp, #20]
 8010eb6:	9a00      	ldr	r2, [sp, #0]
 8010eb8:	920a      	str	r2, [sp, #40]	; 0x28
 8010eba:	4413      	add	r3, r2
 8010ebc:	9305      	str	r3, [sp, #20]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	9307      	str	r3, [sp, #28]
 8010ec2:	9b06      	ldr	r3, [sp, #24]
 8010ec4:	2b09      	cmp	r3, #9
 8010ec6:	f200 8089 	bhi.w	8010fdc <_dtoa_r+0x2f4>
 8010eca:	2b05      	cmp	r3, #5
 8010ecc:	bfc4      	itt	gt
 8010ece:	3b04      	subgt	r3, #4
 8010ed0:	9306      	strgt	r3, [sp, #24]
 8010ed2:	9b06      	ldr	r3, [sp, #24]
 8010ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8010ed8:	bfcc      	ite	gt
 8010eda:	2500      	movgt	r5, #0
 8010edc:	2501      	movle	r5, #1
 8010ede:	2b03      	cmp	r3, #3
 8010ee0:	f200 8087 	bhi.w	8010ff2 <_dtoa_r+0x30a>
 8010ee4:	e8df f003 	tbb	[pc, r3]
 8010ee8:	59383a2d 	.word	0x59383a2d
 8010eec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010ef0:	441d      	add	r5, r3
 8010ef2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010ef6:	2b20      	cmp	r3, #32
 8010ef8:	bfc1      	itttt	gt
 8010efa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010efe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010f02:	fa0b f303 	lslgt.w	r3, fp, r3
 8010f06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010f0a:	bfda      	itte	le
 8010f0c:	f1c3 0320 	rsble	r3, r3, #32
 8010f10:	fa06 f003 	lslle.w	r0, r6, r3
 8010f14:	4318      	orrgt	r0, r3
 8010f16:	f7ef fafd 	bl	8000514 <__aeabi_ui2d>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	4606      	mov	r6, r0
 8010f1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010f22:	3d01      	subs	r5, #1
 8010f24:	930e      	str	r3, [sp, #56]	; 0x38
 8010f26:	e76a      	b.n	8010dfe <_dtoa_r+0x116>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	e7b2      	b.n	8010e92 <_dtoa_r+0x1aa>
 8010f2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f2e:	e7b1      	b.n	8010e94 <_dtoa_r+0x1ac>
 8010f30:	9b04      	ldr	r3, [sp, #16]
 8010f32:	9a00      	ldr	r2, [sp, #0]
 8010f34:	1a9b      	subs	r3, r3, r2
 8010f36:	9304      	str	r3, [sp, #16]
 8010f38:	4253      	negs	r3, r2
 8010f3a:	9307      	str	r3, [sp, #28]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8010f40:	e7bf      	b.n	8010ec2 <_dtoa_r+0x1da>
 8010f42:	2300      	movs	r3, #0
 8010f44:	9308      	str	r3, [sp, #32]
 8010f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	dc55      	bgt.n	8010ff8 <_dtoa_r+0x310>
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f52:	461a      	mov	r2, r3
 8010f54:	9209      	str	r2, [sp, #36]	; 0x24
 8010f56:	e00c      	b.n	8010f72 <_dtoa_r+0x28a>
 8010f58:	2301      	movs	r3, #1
 8010f5a:	e7f3      	b.n	8010f44 <_dtoa_r+0x25c>
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f60:	9308      	str	r3, [sp, #32]
 8010f62:	9b00      	ldr	r3, [sp, #0]
 8010f64:	4413      	add	r3, r2
 8010f66:	9302      	str	r3, [sp, #8]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	9303      	str	r3, [sp, #12]
 8010f6e:	bfb8      	it	lt
 8010f70:	2301      	movlt	r3, #1
 8010f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010f74:	2200      	movs	r2, #0
 8010f76:	6042      	str	r2, [r0, #4]
 8010f78:	2204      	movs	r2, #4
 8010f7a:	f102 0614 	add.w	r6, r2, #20
 8010f7e:	429e      	cmp	r6, r3
 8010f80:	6841      	ldr	r1, [r0, #4]
 8010f82:	d93d      	bls.n	8011000 <_dtoa_r+0x318>
 8010f84:	4620      	mov	r0, r4
 8010f86:	f001 f90b 	bl	80121a0 <_Balloc>
 8010f8a:	9001      	str	r0, [sp, #4]
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d13b      	bne.n	8011008 <_dtoa_r+0x320>
 8010f90:	4b11      	ldr	r3, [pc, #68]	; (8010fd8 <_dtoa_r+0x2f0>)
 8010f92:	4602      	mov	r2, r0
 8010f94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010f98:	e6c0      	b.n	8010d1c <_dtoa_r+0x34>
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e7df      	b.n	8010f5e <_dtoa_r+0x276>
 8010f9e:	bf00      	nop
 8010fa0:	636f4361 	.word	0x636f4361
 8010fa4:	3fd287a7 	.word	0x3fd287a7
 8010fa8:	8b60c8b3 	.word	0x8b60c8b3
 8010fac:	3fc68a28 	.word	0x3fc68a28
 8010fb0:	509f79fb 	.word	0x509f79fb
 8010fb4:	3fd34413 	.word	0x3fd34413
 8010fb8:	080173fe 	.word	0x080173fe
 8010fbc:	08017415 	.word	0x08017415
 8010fc0:	7ff00000 	.word	0x7ff00000
 8010fc4:	080173fa 	.word	0x080173fa
 8010fc8:	080173f1 	.word	0x080173f1
 8010fcc:	08017275 	.word	0x08017275
 8010fd0:	3ff80000 	.word	0x3ff80000
 8010fd4:	08017580 	.word	0x08017580
 8010fd8:	08017470 	.word	0x08017470
 8010fdc:	2501      	movs	r5, #1
 8010fde:	2300      	movs	r3, #0
 8010fe0:	9306      	str	r3, [sp, #24]
 8010fe2:	9508      	str	r5, [sp, #32]
 8010fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010fec:	2200      	movs	r2, #0
 8010fee:	2312      	movs	r3, #18
 8010ff0:	e7b0      	b.n	8010f54 <_dtoa_r+0x26c>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	9308      	str	r3, [sp, #32]
 8010ff6:	e7f5      	b.n	8010fe4 <_dtoa_r+0x2fc>
 8010ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ffa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ffe:	e7b8      	b.n	8010f72 <_dtoa_r+0x28a>
 8011000:	3101      	adds	r1, #1
 8011002:	6041      	str	r1, [r0, #4]
 8011004:	0052      	lsls	r2, r2, #1
 8011006:	e7b8      	b.n	8010f7a <_dtoa_r+0x292>
 8011008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801100a:	9a01      	ldr	r2, [sp, #4]
 801100c:	601a      	str	r2, [r3, #0]
 801100e:	9b03      	ldr	r3, [sp, #12]
 8011010:	2b0e      	cmp	r3, #14
 8011012:	f200 809d 	bhi.w	8011150 <_dtoa_r+0x468>
 8011016:	2d00      	cmp	r5, #0
 8011018:	f000 809a 	beq.w	8011150 <_dtoa_r+0x468>
 801101c:	9b00      	ldr	r3, [sp, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	dd32      	ble.n	8011088 <_dtoa_r+0x3a0>
 8011022:	4ab7      	ldr	r2, [pc, #732]	; (8011300 <_dtoa_r+0x618>)
 8011024:	f003 030f 	and.w	r3, r3, #15
 8011028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801102c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011030:	9b00      	ldr	r3, [sp, #0]
 8011032:	05d8      	lsls	r0, r3, #23
 8011034:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011038:	d516      	bpl.n	8011068 <_dtoa_r+0x380>
 801103a:	4bb2      	ldr	r3, [pc, #712]	; (8011304 <_dtoa_r+0x61c>)
 801103c:	ec51 0b19 	vmov	r0, r1, d9
 8011040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011044:	f7ef fc0a 	bl	800085c <__aeabi_ddiv>
 8011048:	f007 070f 	and.w	r7, r7, #15
 801104c:	4682      	mov	sl, r0
 801104e:	468b      	mov	fp, r1
 8011050:	2503      	movs	r5, #3
 8011052:	4eac      	ldr	r6, [pc, #688]	; (8011304 <_dtoa_r+0x61c>)
 8011054:	b957      	cbnz	r7, 801106c <_dtoa_r+0x384>
 8011056:	4642      	mov	r2, r8
 8011058:	464b      	mov	r3, r9
 801105a:	4650      	mov	r0, sl
 801105c:	4659      	mov	r1, fp
 801105e:	f7ef fbfd 	bl	800085c <__aeabi_ddiv>
 8011062:	4682      	mov	sl, r0
 8011064:	468b      	mov	fp, r1
 8011066:	e028      	b.n	80110ba <_dtoa_r+0x3d2>
 8011068:	2502      	movs	r5, #2
 801106a:	e7f2      	b.n	8011052 <_dtoa_r+0x36a>
 801106c:	07f9      	lsls	r1, r7, #31
 801106e:	d508      	bpl.n	8011082 <_dtoa_r+0x39a>
 8011070:	4640      	mov	r0, r8
 8011072:	4649      	mov	r1, r9
 8011074:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011078:	f7ef fac6 	bl	8000608 <__aeabi_dmul>
 801107c:	3501      	adds	r5, #1
 801107e:	4680      	mov	r8, r0
 8011080:	4689      	mov	r9, r1
 8011082:	107f      	asrs	r7, r7, #1
 8011084:	3608      	adds	r6, #8
 8011086:	e7e5      	b.n	8011054 <_dtoa_r+0x36c>
 8011088:	f000 809b 	beq.w	80111c2 <_dtoa_r+0x4da>
 801108c:	9b00      	ldr	r3, [sp, #0]
 801108e:	4f9d      	ldr	r7, [pc, #628]	; (8011304 <_dtoa_r+0x61c>)
 8011090:	425e      	negs	r6, r3
 8011092:	4b9b      	ldr	r3, [pc, #620]	; (8011300 <_dtoa_r+0x618>)
 8011094:	f006 020f 	and.w	r2, r6, #15
 8011098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a0:	ec51 0b19 	vmov	r0, r1, d9
 80110a4:	f7ef fab0 	bl	8000608 <__aeabi_dmul>
 80110a8:	1136      	asrs	r6, r6, #4
 80110aa:	4682      	mov	sl, r0
 80110ac:	468b      	mov	fp, r1
 80110ae:	2300      	movs	r3, #0
 80110b0:	2502      	movs	r5, #2
 80110b2:	2e00      	cmp	r6, #0
 80110b4:	d17a      	bne.n	80111ac <_dtoa_r+0x4c4>
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1d3      	bne.n	8011062 <_dtoa_r+0x37a>
 80110ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	f000 8082 	beq.w	80111c6 <_dtoa_r+0x4de>
 80110c2:	4b91      	ldr	r3, [pc, #580]	; (8011308 <_dtoa_r+0x620>)
 80110c4:	2200      	movs	r2, #0
 80110c6:	4650      	mov	r0, sl
 80110c8:	4659      	mov	r1, fp
 80110ca:	f7ef fd0f 	bl	8000aec <__aeabi_dcmplt>
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d079      	beq.n	80111c6 <_dtoa_r+0x4de>
 80110d2:	9b03      	ldr	r3, [sp, #12]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d076      	beq.n	80111c6 <_dtoa_r+0x4de>
 80110d8:	9b02      	ldr	r3, [sp, #8]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dd36      	ble.n	801114c <_dtoa_r+0x464>
 80110de:	9b00      	ldr	r3, [sp, #0]
 80110e0:	4650      	mov	r0, sl
 80110e2:	4659      	mov	r1, fp
 80110e4:	1e5f      	subs	r7, r3, #1
 80110e6:	2200      	movs	r2, #0
 80110e8:	4b88      	ldr	r3, [pc, #544]	; (801130c <_dtoa_r+0x624>)
 80110ea:	f7ef fa8d 	bl	8000608 <__aeabi_dmul>
 80110ee:	9e02      	ldr	r6, [sp, #8]
 80110f0:	4682      	mov	sl, r0
 80110f2:	468b      	mov	fp, r1
 80110f4:	3501      	adds	r5, #1
 80110f6:	4628      	mov	r0, r5
 80110f8:	f7ef fa1c 	bl	8000534 <__aeabi_i2d>
 80110fc:	4652      	mov	r2, sl
 80110fe:	465b      	mov	r3, fp
 8011100:	f7ef fa82 	bl	8000608 <__aeabi_dmul>
 8011104:	4b82      	ldr	r3, [pc, #520]	; (8011310 <_dtoa_r+0x628>)
 8011106:	2200      	movs	r2, #0
 8011108:	f7ef f8c8 	bl	800029c <__adddf3>
 801110c:	46d0      	mov	r8, sl
 801110e:	46d9      	mov	r9, fp
 8011110:	4682      	mov	sl, r0
 8011112:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011116:	2e00      	cmp	r6, #0
 8011118:	d158      	bne.n	80111cc <_dtoa_r+0x4e4>
 801111a:	4b7e      	ldr	r3, [pc, #504]	; (8011314 <_dtoa_r+0x62c>)
 801111c:	2200      	movs	r2, #0
 801111e:	4640      	mov	r0, r8
 8011120:	4649      	mov	r1, r9
 8011122:	f7ef f8b9 	bl	8000298 <__aeabi_dsub>
 8011126:	4652      	mov	r2, sl
 8011128:	465b      	mov	r3, fp
 801112a:	4680      	mov	r8, r0
 801112c:	4689      	mov	r9, r1
 801112e:	f7ef fcfb 	bl	8000b28 <__aeabi_dcmpgt>
 8011132:	2800      	cmp	r0, #0
 8011134:	f040 8295 	bne.w	8011662 <_dtoa_r+0x97a>
 8011138:	4652      	mov	r2, sl
 801113a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801113e:	4640      	mov	r0, r8
 8011140:	4649      	mov	r1, r9
 8011142:	f7ef fcd3 	bl	8000aec <__aeabi_dcmplt>
 8011146:	2800      	cmp	r0, #0
 8011148:	f040 8289 	bne.w	801165e <_dtoa_r+0x976>
 801114c:	ec5b ab19 	vmov	sl, fp, d9
 8011150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011152:	2b00      	cmp	r3, #0
 8011154:	f2c0 8148 	blt.w	80113e8 <_dtoa_r+0x700>
 8011158:	9a00      	ldr	r2, [sp, #0]
 801115a:	2a0e      	cmp	r2, #14
 801115c:	f300 8144 	bgt.w	80113e8 <_dtoa_r+0x700>
 8011160:	4b67      	ldr	r3, [pc, #412]	; (8011300 <_dtoa_r+0x618>)
 8011162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011166:	e9d3 8900 	ldrd	r8, r9, [r3]
 801116a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801116c:	2b00      	cmp	r3, #0
 801116e:	f280 80d5 	bge.w	801131c <_dtoa_r+0x634>
 8011172:	9b03      	ldr	r3, [sp, #12]
 8011174:	2b00      	cmp	r3, #0
 8011176:	f300 80d1 	bgt.w	801131c <_dtoa_r+0x634>
 801117a:	f040 826f 	bne.w	801165c <_dtoa_r+0x974>
 801117e:	4b65      	ldr	r3, [pc, #404]	; (8011314 <_dtoa_r+0x62c>)
 8011180:	2200      	movs	r2, #0
 8011182:	4640      	mov	r0, r8
 8011184:	4649      	mov	r1, r9
 8011186:	f7ef fa3f 	bl	8000608 <__aeabi_dmul>
 801118a:	4652      	mov	r2, sl
 801118c:	465b      	mov	r3, fp
 801118e:	f7ef fcc1 	bl	8000b14 <__aeabi_dcmpge>
 8011192:	9e03      	ldr	r6, [sp, #12]
 8011194:	4637      	mov	r7, r6
 8011196:	2800      	cmp	r0, #0
 8011198:	f040 8245 	bne.w	8011626 <_dtoa_r+0x93e>
 801119c:	9d01      	ldr	r5, [sp, #4]
 801119e:	2331      	movs	r3, #49	; 0x31
 80111a0:	f805 3b01 	strb.w	r3, [r5], #1
 80111a4:	9b00      	ldr	r3, [sp, #0]
 80111a6:	3301      	adds	r3, #1
 80111a8:	9300      	str	r3, [sp, #0]
 80111aa:	e240      	b.n	801162e <_dtoa_r+0x946>
 80111ac:	07f2      	lsls	r2, r6, #31
 80111ae:	d505      	bpl.n	80111bc <_dtoa_r+0x4d4>
 80111b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111b4:	f7ef fa28 	bl	8000608 <__aeabi_dmul>
 80111b8:	3501      	adds	r5, #1
 80111ba:	2301      	movs	r3, #1
 80111bc:	1076      	asrs	r6, r6, #1
 80111be:	3708      	adds	r7, #8
 80111c0:	e777      	b.n	80110b2 <_dtoa_r+0x3ca>
 80111c2:	2502      	movs	r5, #2
 80111c4:	e779      	b.n	80110ba <_dtoa_r+0x3d2>
 80111c6:	9f00      	ldr	r7, [sp, #0]
 80111c8:	9e03      	ldr	r6, [sp, #12]
 80111ca:	e794      	b.n	80110f6 <_dtoa_r+0x40e>
 80111cc:	9901      	ldr	r1, [sp, #4]
 80111ce:	4b4c      	ldr	r3, [pc, #304]	; (8011300 <_dtoa_r+0x618>)
 80111d0:	4431      	add	r1, r6
 80111d2:	910d      	str	r1, [sp, #52]	; 0x34
 80111d4:	9908      	ldr	r1, [sp, #32]
 80111d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80111da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80111de:	2900      	cmp	r1, #0
 80111e0:	d043      	beq.n	801126a <_dtoa_r+0x582>
 80111e2:	494d      	ldr	r1, [pc, #308]	; (8011318 <_dtoa_r+0x630>)
 80111e4:	2000      	movs	r0, #0
 80111e6:	f7ef fb39 	bl	800085c <__aeabi_ddiv>
 80111ea:	4652      	mov	r2, sl
 80111ec:	465b      	mov	r3, fp
 80111ee:	f7ef f853 	bl	8000298 <__aeabi_dsub>
 80111f2:	9d01      	ldr	r5, [sp, #4]
 80111f4:	4682      	mov	sl, r0
 80111f6:	468b      	mov	fp, r1
 80111f8:	4649      	mov	r1, r9
 80111fa:	4640      	mov	r0, r8
 80111fc:	f7ef fcb4 	bl	8000b68 <__aeabi_d2iz>
 8011200:	4606      	mov	r6, r0
 8011202:	f7ef f997 	bl	8000534 <__aeabi_i2d>
 8011206:	4602      	mov	r2, r0
 8011208:	460b      	mov	r3, r1
 801120a:	4640      	mov	r0, r8
 801120c:	4649      	mov	r1, r9
 801120e:	f7ef f843 	bl	8000298 <__aeabi_dsub>
 8011212:	3630      	adds	r6, #48	; 0x30
 8011214:	f805 6b01 	strb.w	r6, [r5], #1
 8011218:	4652      	mov	r2, sl
 801121a:	465b      	mov	r3, fp
 801121c:	4680      	mov	r8, r0
 801121e:	4689      	mov	r9, r1
 8011220:	f7ef fc64 	bl	8000aec <__aeabi_dcmplt>
 8011224:	2800      	cmp	r0, #0
 8011226:	d163      	bne.n	80112f0 <_dtoa_r+0x608>
 8011228:	4642      	mov	r2, r8
 801122a:	464b      	mov	r3, r9
 801122c:	4936      	ldr	r1, [pc, #216]	; (8011308 <_dtoa_r+0x620>)
 801122e:	2000      	movs	r0, #0
 8011230:	f7ef f832 	bl	8000298 <__aeabi_dsub>
 8011234:	4652      	mov	r2, sl
 8011236:	465b      	mov	r3, fp
 8011238:	f7ef fc58 	bl	8000aec <__aeabi_dcmplt>
 801123c:	2800      	cmp	r0, #0
 801123e:	f040 80b5 	bne.w	80113ac <_dtoa_r+0x6c4>
 8011242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011244:	429d      	cmp	r5, r3
 8011246:	d081      	beq.n	801114c <_dtoa_r+0x464>
 8011248:	4b30      	ldr	r3, [pc, #192]	; (801130c <_dtoa_r+0x624>)
 801124a:	2200      	movs	r2, #0
 801124c:	4650      	mov	r0, sl
 801124e:	4659      	mov	r1, fp
 8011250:	f7ef f9da 	bl	8000608 <__aeabi_dmul>
 8011254:	4b2d      	ldr	r3, [pc, #180]	; (801130c <_dtoa_r+0x624>)
 8011256:	4682      	mov	sl, r0
 8011258:	468b      	mov	fp, r1
 801125a:	4640      	mov	r0, r8
 801125c:	4649      	mov	r1, r9
 801125e:	2200      	movs	r2, #0
 8011260:	f7ef f9d2 	bl	8000608 <__aeabi_dmul>
 8011264:	4680      	mov	r8, r0
 8011266:	4689      	mov	r9, r1
 8011268:	e7c6      	b.n	80111f8 <_dtoa_r+0x510>
 801126a:	4650      	mov	r0, sl
 801126c:	4659      	mov	r1, fp
 801126e:	f7ef f9cb 	bl	8000608 <__aeabi_dmul>
 8011272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011274:	9d01      	ldr	r5, [sp, #4]
 8011276:	930f      	str	r3, [sp, #60]	; 0x3c
 8011278:	4682      	mov	sl, r0
 801127a:	468b      	mov	fp, r1
 801127c:	4649      	mov	r1, r9
 801127e:	4640      	mov	r0, r8
 8011280:	f7ef fc72 	bl	8000b68 <__aeabi_d2iz>
 8011284:	4606      	mov	r6, r0
 8011286:	f7ef f955 	bl	8000534 <__aeabi_i2d>
 801128a:	3630      	adds	r6, #48	; 0x30
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	4640      	mov	r0, r8
 8011292:	4649      	mov	r1, r9
 8011294:	f7ef f800 	bl	8000298 <__aeabi_dsub>
 8011298:	f805 6b01 	strb.w	r6, [r5], #1
 801129c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801129e:	429d      	cmp	r5, r3
 80112a0:	4680      	mov	r8, r0
 80112a2:	4689      	mov	r9, r1
 80112a4:	f04f 0200 	mov.w	r2, #0
 80112a8:	d124      	bne.n	80112f4 <_dtoa_r+0x60c>
 80112aa:	4b1b      	ldr	r3, [pc, #108]	; (8011318 <_dtoa_r+0x630>)
 80112ac:	4650      	mov	r0, sl
 80112ae:	4659      	mov	r1, fp
 80112b0:	f7ee fff4 	bl	800029c <__adddf3>
 80112b4:	4602      	mov	r2, r0
 80112b6:	460b      	mov	r3, r1
 80112b8:	4640      	mov	r0, r8
 80112ba:	4649      	mov	r1, r9
 80112bc:	f7ef fc34 	bl	8000b28 <__aeabi_dcmpgt>
 80112c0:	2800      	cmp	r0, #0
 80112c2:	d173      	bne.n	80113ac <_dtoa_r+0x6c4>
 80112c4:	4652      	mov	r2, sl
 80112c6:	465b      	mov	r3, fp
 80112c8:	4913      	ldr	r1, [pc, #76]	; (8011318 <_dtoa_r+0x630>)
 80112ca:	2000      	movs	r0, #0
 80112cc:	f7ee ffe4 	bl	8000298 <__aeabi_dsub>
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	4640      	mov	r0, r8
 80112d6:	4649      	mov	r1, r9
 80112d8:	f7ef fc08 	bl	8000aec <__aeabi_dcmplt>
 80112dc:	2800      	cmp	r0, #0
 80112de:	f43f af35 	beq.w	801114c <_dtoa_r+0x464>
 80112e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80112e4:	1e6b      	subs	r3, r5, #1
 80112e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80112e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112ec:	2b30      	cmp	r3, #48	; 0x30
 80112ee:	d0f8      	beq.n	80112e2 <_dtoa_r+0x5fa>
 80112f0:	9700      	str	r7, [sp, #0]
 80112f2:	e049      	b.n	8011388 <_dtoa_r+0x6a0>
 80112f4:	4b05      	ldr	r3, [pc, #20]	; (801130c <_dtoa_r+0x624>)
 80112f6:	f7ef f987 	bl	8000608 <__aeabi_dmul>
 80112fa:	4680      	mov	r8, r0
 80112fc:	4689      	mov	r9, r1
 80112fe:	e7bd      	b.n	801127c <_dtoa_r+0x594>
 8011300:	08017580 	.word	0x08017580
 8011304:	08017558 	.word	0x08017558
 8011308:	3ff00000 	.word	0x3ff00000
 801130c:	40240000 	.word	0x40240000
 8011310:	401c0000 	.word	0x401c0000
 8011314:	40140000 	.word	0x40140000
 8011318:	3fe00000 	.word	0x3fe00000
 801131c:	9d01      	ldr	r5, [sp, #4]
 801131e:	4656      	mov	r6, sl
 8011320:	465f      	mov	r7, fp
 8011322:	4642      	mov	r2, r8
 8011324:	464b      	mov	r3, r9
 8011326:	4630      	mov	r0, r6
 8011328:	4639      	mov	r1, r7
 801132a:	f7ef fa97 	bl	800085c <__aeabi_ddiv>
 801132e:	f7ef fc1b 	bl	8000b68 <__aeabi_d2iz>
 8011332:	4682      	mov	sl, r0
 8011334:	f7ef f8fe 	bl	8000534 <__aeabi_i2d>
 8011338:	4642      	mov	r2, r8
 801133a:	464b      	mov	r3, r9
 801133c:	f7ef f964 	bl	8000608 <__aeabi_dmul>
 8011340:	4602      	mov	r2, r0
 8011342:	460b      	mov	r3, r1
 8011344:	4630      	mov	r0, r6
 8011346:	4639      	mov	r1, r7
 8011348:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801134c:	f7ee ffa4 	bl	8000298 <__aeabi_dsub>
 8011350:	f805 6b01 	strb.w	r6, [r5], #1
 8011354:	9e01      	ldr	r6, [sp, #4]
 8011356:	9f03      	ldr	r7, [sp, #12]
 8011358:	1bae      	subs	r6, r5, r6
 801135a:	42b7      	cmp	r7, r6
 801135c:	4602      	mov	r2, r0
 801135e:	460b      	mov	r3, r1
 8011360:	d135      	bne.n	80113ce <_dtoa_r+0x6e6>
 8011362:	f7ee ff9b 	bl	800029c <__adddf3>
 8011366:	4642      	mov	r2, r8
 8011368:	464b      	mov	r3, r9
 801136a:	4606      	mov	r6, r0
 801136c:	460f      	mov	r7, r1
 801136e:	f7ef fbdb 	bl	8000b28 <__aeabi_dcmpgt>
 8011372:	b9d0      	cbnz	r0, 80113aa <_dtoa_r+0x6c2>
 8011374:	4642      	mov	r2, r8
 8011376:	464b      	mov	r3, r9
 8011378:	4630      	mov	r0, r6
 801137a:	4639      	mov	r1, r7
 801137c:	f7ef fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 8011380:	b110      	cbz	r0, 8011388 <_dtoa_r+0x6a0>
 8011382:	f01a 0f01 	tst.w	sl, #1
 8011386:	d110      	bne.n	80113aa <_dtoa_r+0x6c2>
 8011388:	4620      	mov	r0, r4
 801138a:	ee18 1a10 	vmov	r1, s16
 801138e:	f000 ff47 	bl	8012220 <_Bfree>
 8011392:	2300      	movs	r3, #0
 8011394:	9800      	ldr	r0, [sp, #0]
 8011396:	702b      	strb	r3, [r5, #0]
 8011398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801139a:	3001      	adds	r0, #1
 801139c:	6018      	str	r0, [r3, #0]
 801139e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f43f acf1 	beq.w	8010d88 <_dtoa_r+0xa0>
 80113a6:	601d      	str	r5, [r3, #0]
 80113a8:	e4ee      	b.n	8010d88 <_dtoa_r+0xa0>
 80113aa:	9f00      	ldr	r7, [sp, #0]
 80113ac:	462b      	mov	r3, r5
 80113ae:	461d      	mov	r5, r3
 80113b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113b4:	2a39      	cmp	r2, #57	; 0x39
 80113b6:	d106      	bne.n	80113c6 <_dtoa_r+0x6de>
 80113b8:	9a01      	ldr	r2, [sp, #4]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d1f7      	bne.n	80113ae <_dtoa_r+0x6c6>
 80113be:	9901      	ldr	r1, [sp, #4]
 80113c0:	2230      	movs	r2, #48	; 0x30
 80113c2:	3701      	adds	r7, #1
 80113c4:	700a      	strb	r2, [r1, #0]
 80113c6:	781a      	ldrb	r2, [r3, #0]
 80113c8:	3201      	adds	r2, #1
 80113ca:	701a      	strb	r2, [r3, #0]
 80113cc:	e790      	b.n	80112f0 <_dtoa_r+0x608>
 80113ce:	4ba6      	ldr	r3, [pc, #664]	; (8011668 <_dtoa_r+0x980>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	f7ef f919 	bl	8000608 <__aeabi_dmul>
 80113d6:	2200      	movs	r2, #0
 80113d8:	2300      	movs	r3, #0
 80113da:	4606      	mov	r6, r0
 80113dc:	460f      	mov	r7, r1
 80113de:	f7ef fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80113e2:	2800      	cmp	r0, #0
 80113e4:	d09d      	beq.n	8011322 <_dtoa_r+0x63a>
 80113e6:	e7cf      	b.n	8011388 <_dtoa_r+0x6a0>
 80113e8:	9a08      	ldr	r2, [sp, #32]
 80113ea:	2a00      	cmp	r2, #0
 80113ec:	f000 80d7 	beq.w	801159e <_dtoa_r+0x8b6>
 80113f0:	9a06      	ldr	r2, [sp, #24]
 80113f2:	2a01      	cmp	r2, #1
 80113f4:	f300 80ba 	bgt.w	801156c <_dtoa_r+0x884>
 80113f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113fa:	2a00      	cmp	r2, #0
 80113fc:	f000 80b2 	beq.w	8011564 <_dtoa_r+0x87c>
 8011400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011404:	9e07      	ldr	r6, [sp, #28]
 8011406:	9d04      	ldr	r5, [sp, #16]
 8011408:	9a04      	ldr	r2, [sp, #16]
 801140a:	441a      	add	r2, r3
 801140c:	9204      	str	r2, [sp, #16]
 801140e:	9a05      	ldr	r2, [sp, #20]
 8011410:	2101      	movs	r1, #1
 8011412:	441a      	add	r2, r3
 8011414:	4620      	mov	r0, r4
 8011416:	9205      	str	r2, [sp, #20]
 8011418:	f001 f804 	bl	8012424 <__i2b>
 801141c:	4607      	mov	r7, r0
 801141e:	2d00      	cmp	r5, #0
 8011420:	dd0c      	ble.n	801143c <_dtoa_r+0x754>
 8011422:	9b05      	ldr	r3, [sp, #20]
 8011424:	2b00      	cmp	r3, #0
 8011426:	dd09      	ble.n	801143c <_dtoa_r+0x754>
 8011428:	42ab      	cmp	r3, r5
 801142a:	9a04      	ldr	r2, [sp, #16]
 801142c:	bfa8      	it	ge
 801142e:	462b      	movge	r3, r5
 8011430:	1ad2      	subs	r2, r2, r3
 8011432:	9204      	str	r2, [sp, #16]
 8011434:	9a05      	ldr	r2, [sp, #20]
 8011436:	1aed      	subs	r5, r5, r3
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	9305      	str	r3, [sp, #20]
 801143c:	9b07      	ldr	r3, [sp, #28]
 801143e:	b31b      	cbz	r3, 8011488 <_dtoa_r+0x7a0>
 8011440:	9b08      	ldr	r3, [sp, #32]
 8011442:	2b00      	cmp	r3, #0
 8011444:	f000 80af 	beq.w	80115a6 <_dtoa_r+0x8be>
 8011448:	2e00      	cmp	r6, #0
 801144a:	dd13      	ble.n	8011474 <_dtoa_r+0x78c>
 801144c:	4639      	mov	r1, r7
 801144e:	4632      	mov	r2, r6
 8011450:	4620      	mov	r0, r4
 8011452:	f001 f8a7 	bl	80125a4 <__pow5mult>
 8011456:	ee18 2a10 	vmov	r2, s16
 801145a:	4601      	mov	r1, r0
 801145c:	4607      	mov	r7, r0
 801145e:	4620      	mov	r0, r4
 8011460:	f000 fff6 	bl	8012450 <__multiply>
 8011464:	ee18 1a10 	vmov	r1, s16
 8011468:	4680      	mov	r8, r0
 801146a:	4620      	mov	r0, r4
 801146c:	f000 fed8 	bl	8012220 <_Bfree>
 8011470:	ee08 8a10 	vmov	s16, r8
 8011474:	9b07      	ldr	r3, [sp, #28]
 8011476:	1b9a      	subs	r2, r3, r6
 8011478:	d006      	beq.n	8011488 <_dtoa_r+0x7a0>
 801147a:	ee18 1a10 	vmov	r1, s16
 801147e:	4620      	mov	r0, r4
 8011480:	f001 f890 	bl	80125a4 <__pow5mult>
 8011484:	ee08 0a10 	vmov	s16, r0
 8011488:	2101      	movs	r1, #1
 801148a:	4620      	mov	r0, r4
 801148c:	f000 ffca 	bl	8012424 <__i2b>
 8011490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011492:	2b00      	cmp	r3, #0
 8011494:	4606      	mov	r6, r0
 8011496:	f340 8088 	ble.w	80115aa <_dtoa_r+0x8c2>
 801149a:	461a      	mov	r2, r3
 801149c:	4601      	mov	r1, r0
 801149e:	4620      	mov	r0, r4
 80114a0:	f001 f880 	bl	80125a4 <__pow5mult>
 80114a4:	9b06      	ldr	r3, [sp, #24]
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	4606      	mov	r6, r0
 80114aa:	f340 8081 	ble.w	80115b0 <_dtoa_r+0x8c8>
 80114ae:	f04f 0800 	mov.w	r8, #0
 80114b2:	6933      	ldr	r3, [r6, #16]
 80114b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80114b8:	6918      	ldr	r0, [r3, #16]
 80114ba:	f000 ff63 	bl	8012384 <__hi0bits>
 80114be:	f1c0 0020 	rsb	r0, r0, #32
 80114c2:	9b05      	ldr	r3, [sp, #20]
 80114c4:	4418      	add	r0, r3
 80114c6:	f010 001f 	ands.w	r0, r0, #31
 80114ca:	f000 8092 	beq.w	80115f2 <_dtoa_r+0x90a>
 80114ce:	f1c0 0320 	rsb	r3, r0, #32
 80114d2:	2b04      	cmp	r3, #4
 80114d4:	f340 808a 	ble.w	80115ec <_dtoa_r+0x904>
 80114d8:	f1c0 001c 	rsb	r0, r0, #28
 80114dc:	9b04      	ldr	r3, [sp, #16]
 80114de:	4403      	add	r3, r0
 80114e0:	9304      	str	r3, [sp, #16]
 80114e2:	9b05      	ldr	r3, [sp, #20]
 80114e4:	4403      	add	r3, r0
 80114e6:	4405      	add	r5, r0
 80114e8:	9305      	str	r3, [sp, #20]
 80114ea:	9b04      	ldr	r3, [sp, #16]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	dd07      	ble.n	8011500 <_dtoa_r+0x818>
 80114f0:	ee18 1a10 	vmov	r1, s16
 80114f4:	461a      	mov	r2, r3
 80114f6:	4620      	mov	r0, r4
 80114f8:	f001 f8ae 	bl	8012658 <__lshift>
 80114fc:	ee08 0a10 	vmov	s16, r0
 8011500:	9b05      	ldr	r3, [sp, #20]
 8011502:	2b00      	cmp	r3, #0
 8011504:	dd05      	ble.n	8011512 <_dtoa_r+0x82a>
 8011506:	4631      	mov	r1, r6
 8011508:	461a      	mov	r2, r3
 801150a:	4620      	mov	r0, r4
 801150c:	f001 f8a4 	bl	8012658 <__lshift>
 8011510:	4606      	mov	r6, r0
 8011512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011514:	2b00      	cmp	r3, #0
 8011516:	d06e      	beq.n	80115f6 <_dtoa_r+0x90e>
 8011518:	ee18 0a10 	vmov	r0, s16
 801151c:	4631      	mov	r1, r6
 801151e:	f001 f90b 	bl	8012738 <__mcmp>
 8011522:	2800      	cmp	r0, #0
 8011524:	da67      	bge.n	80115f6 <_dtoa_r+0x90e>
 8011526:	9b00      	ldr	r3, [sp, #0]
 8011528:	3b01      	subs	r3, #1
 801152a:	ee18 1a10 	vmov	r1, s16
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	220a      	movs	r2, #10
 8011532:	2300      	movs	r3, #0
 8011534:	4620      	mov	r0, r4
 8011536:	f000 fe95 	bl	8012264 <__multadd>
 801153a:	9b08      	ldr	r3, [sp, #32]
 801153c:	ee08 0a10 	vmov	s16, r0
 8011540:	2b00      	cmp	r3, #0
 8011542:	f000 81b1 	beq.w	80118a8 <_dtoa_r+0xbc0>
 8011546:	2300      	movs	r3, #0
 8011548:	4639      	mov	r1, r7
 801154a:	220a      	movs	r2, #10
 801154c:	4620      	mov	r0, r4
 801154e:	f000 fe89 	bl	8012264 <__multadd>
 8011552:	9b02      	ldr	r3, [sp, #8]
 8011554:	2b00      	cmp	r3, #0
 8011556:	4607      	mov	r7, r0
 8011558:	f300 808e 	bgt.w	8011678 <_dtoa_r+0x990>
 801155c:	9b06      	ldr	r3, [sp, #24]
 801155e:	2b02      	cmp	r3, #2
 8011560:	dc51      	bgt.n	8011606 <_dtoa_r+0x91e>
 8011562:	e089      	b.n	8011678 <_dtoa_r+0x990>
 8011564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801156a:	e74b      	b.n	8011404 <_dtoa_r+0x71c>
 801156c:	9b03      	ldr	r3, [sp, #12]
 801156e:	1e5e      	subs	r6, r3, #1
 8011570:	9b07      	ldr	r3, [sp, #28]
 8011572:	42b3      	cmp	r3, r6
 8011574:	bfbf      	itttt	lt
 8011576:	9b07      	ldrlt	r3, [sp, #28]
 8011578:	9607      	strlt	r6, [sp, #28]
 801157a:	1af2      	sublt	r2, r6, r3
 801157c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801157e:	bfb6      	itet	lt
 8011580:	189b      	addlt	r3, r3, r2
 8011582:	1b9e      	subge	r6, r3, r6
 8011584:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011586:	9b03      	ldr	r3, [sp, #12]
 8011588:	bfb8      	it	lt
 801158a:	2600      	movlt	r6, #0
 801158c:	2b00      	cmp	r3, #0
 801158e:	bfb7      	itett	lt
 8011590:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011594:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011598:	1a9d      	sublt	r5, r3, r2
 801159a:	2300      	movlt	r3, #0
 801159c:	e734      	b.n	8011408 <_dtoa_r+0x720>
 801159e:	9e07      	ldr	r6, [sp, #28]
 80115a0:	9d04      	ldr	r5, [sp, #16]
 80115a2:	9f08      	ldr	r7, [sp, #32]
 80115a4:	e73b      	b.n	801141e <_dtoa_r+0x736>
 80115a6:	9a07      	ldr	r2, [sp, #28]
 80115a8:	e767      	b.n	801147a <_dtoa_r+0x792>
 80115aa:	9b06      	ldr	r3, [sp, #24]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	dc18      	bgt.n	80115e2 <_dtoa_r+0x8fa>
 80115b0:	f1ba 0f00 	cmp.w	sl, #0
 80115b4:	d115      	bne.n	80115e2 <_dtoa_r+0x8fa>
 80115b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115ba:	b993      	cbnz	r3, 80115e2 <_dtoa_r+0x8fa>
 80115bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80115c0:	0d1b      	lsrs	r3, r3, #20
 80115c2:	051b      	lsls	r3, r3, #20
 80115c4:	b183      	cbz	r3, 80115e8 <_dtoa_r+0x900>
 80115c6:	9b04      	ldr	r3, [sp, #16]
 80115c8:	3301      	adds	r3, #1
 80115ca:	9304      	str	r3, [sp, #16]
 80115cc:	9b05      	ldr	r3, [sp, #20]
 80115ce:	3301      	adds	r3, #1
 80115d0:	9305      	str	r3, [sp, #20]
 80115d2:	f04f 0801 	mov.w	r8, #1
 80115d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f47f af6a 	bne.w	80114b2 <_dtoa_r+0x7ca>
 80115de:	2001      	movs	r0, #1
 80115e0:	e76f      	b.n	80114c2 <_dtoa_r+0x7da>
 80115e2:	f04f 0800 	mov.w	r8, #0
 80115e6:	e7f6      	b.n	80115d6 <_dtoa_r+0x8ee>
 80115e8:	4698      	mov	r8, r3
 80115ea:	e7f4      	b.n	80115d6 <_dtoa_r+0x8ee>
 80115ec:	f43f af7d 	beq.w	80114ea <_dtoa_r+0x802>
 80115f0:	4618      	mov	r0, r3
 80115f2:	301c      	adds	r0, #28
 80115f4:	e772      	b.n	80114dc <_dtoa_r+0x7f4>
 80115f6:	9b03      	ldr	r3, [sp, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	dc37      	bgt.n	801166c <_dtoa_r+0x984>
 80115fc:	9b06      	ldr	r3, [sp, #24]
 80115fe:	2b02      	cmp	r3, #2
 8011600:	dd34      	ble.n	801166c <_dtoa_r+0x984>
 8011602:	9b03      	ldr	r3, [sp, #12]
 8011604:	9302      	str	r3, [sp, #8]
 8011606:	9b02      	ldr	r3, [sp, #8]
 8011608:	b96b      	cbnz	r3, 8011626 <_dtoa_r+0x93e>
 801160a:	4631      	mov	r1, r6
 801160c:	2205      	movs	r2, #5
 801160e:	4620      	mov	r0, r4
 8011610:	f000 fe28 	bl	8012264 <__multadd>
 8011614:	4601      	mov	r1, r0
 8011616:	4606      	mov	r6, r0
 8011618:	ee18 0a10 	vmov	r0, s16
 801161c:	f001 f88c 	bl	8012738 <__mcmp>
 8011620:	2800      	cmp	r0, #0
 8011622:	f73f adbb 	bgt.w	801119c <_dtoa_r+0x4b4>
 8011626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011628:	9d01      	ldr	r5, [sp, #4]
 801162a:	43db      	mvns	r3, r3
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	f04f 0800 	mov.w	r8, #0
 8011632:	4631      	mov	r1, r6
 8011634:	4620      	mov	r0, r4
 8011636:	f000 fdf3 	bl	8012220 <_Bfree>
 801163a:	2f00      	cmp	r7, #0
 801163c:	f43f aea4 	beq.w	8011388 <_dtoa_r+0x6a0>
 8011640:	f1b8 0f00 	cmp.w	r8, #0
 8011644:	d005      	beq.n	8011652 <_dtoa_r+0x96a>
 8011646:	45b8      	cmp	r8, r7
 8011648:	d003      	beq.n	8011652 <_dtoa_r+0x96a>
 801164a:	4641      	mov	r1, r8
 801164c:	4620      	mov	r0, r4
 801164e:	f000 fde7 	bl	8012220 <_Bfree>
 8011652:	4639      	mov	r1, r7
 8011654:	4620      	mov	r0, r4
 8011656:	f000 fde3 	bl	8012220 <_Bfree>
 801165a:	e695      	b.n	8011388 <_dtoa_r+0x6a0>
 801165c:	2600      	movs	r6, #0
 801165e:	4637      	mov	r7, r6
 8011660:	e7e1      	b.n	8011626 <_dtoa_r+0x93e>
 8011662:	9700      	str	r7, [sp, #0]
 8011664:	4637      	mov	r7, r6
 8011666:	e599      	b.n	801119c <_dtoa_r+0x4b4>
 8011668:	40240000 	.word	0x40240000
 801166c:	9b08      	ldr	r3, [sp, #32]
 801166e:	2b00      	cmp	r3, #0
 8011670:	f000 80ca 	beq.w	8011808 <_dtoa_r+0xb20>
 8011674:	9b03      	ldr	r3, [sp, #12]
 8011676:	9302      	str	r3, [sp, #8]
 8011678:	2d00      	cmp	r5, #0
 801167a:	dd05      	ble.n	8011688 <_dtoa_r+0x9a0>
 801167c:	4639      	mov	r1, r7
 801167e:	462a      	mov	r2, r5
 8011680:	4620      	mov	r0, r4
 8011682:	f000 ffe9 	bl	8012658 <__lshift>
 8011686:	4607      	mov	r7, r0
 8011688:	f1b8 0f00 	cmp.w	r8, #0
 801168c:	d05b      	beq.n	8011746 <_dtoa_r+0xa5e>
 801168e:	6879      	ldr	r1, [r7, #4]
 8011690:	4620      	mov	r0, r4
 8011692:	f000 fd85 	bl	80121a0 <_Balloc>
 8011696:	4605      	mov	r5, r0
 8011698:	b928      	cbnz	r0, 80116a6 <_dtoa_r+0x9be>
 801169a:	4b87      	ldr	r3, [pc, #540]	; (80118b8 <_dtoa_r+0xbd0>)
 801169c:	4602      	mov	r2, r0
 801169e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80116a2:	f7ff bb3b 	b.w	8010d1c <_dtoa_r+0x34>
 80116a6:	693a      	ldr	r2, [r7, #16]
 80116a8:	3202      	adds	r2, #2
 80116aa:	0092      	lsls	r2, r2, #2
 80116ac:	f107 010c 	add.w	r1, r7, #12
 80116b0:	300c      	adds	r0, #12
 80116b2:	f7fd fbb4 	bl	800ee1e <memcpy>
 80116b6:	2201      	movs	r2, #1
 80116b8:	4629      	mov	r1, r5
 80116ba:	4620      	mov	r0, r4
 80116bc:	f000 ffcc 	bl	8012658 <__lshift>
 80116c0:	9b01      	ldr	r3, [sp, #4]
 80116c2:	f103 0901 	add.w	r9, r3, #1
 80116c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80116ca:	4413      	add	r3, r2
 80116cc:	9305      	str	r3, [sp, #20]
 80116ce:	f00a 0301 	and.w	r3, sl, #1
 80116d2:	46b8      	mov	r8, r7
 80116d4:	9304      	str	r3, [sp, #16]
 80116d6:	4607      	mov	r7, r0
 80116d8:	4631      	mov	r1, r6
 80116da:	ee18 0a10 	vmov	r0, s16
 80116de:	f7ff fa75 	bl	8010bcc <quorem>
 80116e2:	4641      	mov	r1, r8
 80116e4:	9002      	str	r0, [sp, #8]
 80116e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80116ea:	ee18 0a10 	vmov	r0, s16
 80116ee:	f001 f823 	bl	8012738 <__mcmp>
 80116f2:	463a      	mov	r2, r7
 80116f4:	9003      	str	r0, [sp, #12]
 80116f6:	4631      	mov	r1, r6
 80116f8:	4620      	mov	r0, r4
 80116fa:	f001 f839 	bl	8012770 <__mdiff>
 80116fe:	68c2      	ldr	r2, [r0, #12]
 8011700:	f109 3bff 	add.w	fp, r9, #4294967295
 8011704:	4605      	mov	r5, r0
 8011706:	bb02      	cbnz	r2, 801174a <_dtoa_r+0xa62>
 8011708:	4601      	mov	r1, r0
 801170a:	ee18 0a10 	vmov	r0, s16
 801170e:	f001 f813 	bl	8012738 <__mcmp>
 8011712:	4602      	mov	r2, r0
 8011714:	4629      	mov	r1, r5
 8011716:	4620      	mov	r0, r4
 8011718:	9207      	str	r2, [sp, #28]
 801171a:	f000 fd81 	bl	8012220 <_Bfree>
 801171e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011722:	ea43 0102 	orr.w	r1, r3, r2
 8011726:	9b04      	ldr	r3, [sp, #16]
 8011728:	430b      	orrs	r3, r1
 801172a:	464d      	mov	r5, r9
 801172c:	d10f      	bne.n	801174e <_dtoa_r+0xa66>
 801172e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011732:	d02a      	beq.n	801178a <_dtoa_r+0xaa2>
 8011734:	9b03      	ldr	r3, [sp, #12]
 8011736:	2b00      	cmp	r3, #0
 8011738:	dd02      	ble.n	8011740 <_dtoa_r+0xa58>
 801173a:	9b02      	ldr	r3, [sp, #8]
 801173c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011740:	f88b a000 	strb.w	sl, [fp]
 8011744:	e775      	b.n	8011632 <_dtoa_r+0x94a>
 8011746:	4638      	mov	r0, r7
 8011748:	e7ba      	b.n	80116c0 <_dtoa_r+0x9d8>
 801174a:	2201      	movs	r2, #1
 801174c:	e7e2      	b.n	8011714 <_dtoa_r+0xa2c>
 801174e:	9b03      	ldr	r3, [sp, #12]
 8011750:	2b00      	cmp	r3, #0
 8011752:	db04      	blt.n	801175e <_dtoa_r+0xa76>
 8011754:	9906      	ldr	r1, [sp, #24]
 8011756:	430b      	orrs	r3, r1
 8011758:	9904      	ldr	r1, [sp, #16]
 801175a:	430b      	orrs	r3, r1
 801175c:	d122      	bne.n	80117a4 <_dtoa_r+0xabc>
 801175e:	2a00      	cmp	r2, #0
 8011760:	ddee      	ble.n	8011740 <_dtoa_r+0xa58>
 8011762:	ee18 1a10 	vmov	r1, s16
 8011766:	2201      	movs	r2, #1
 8011768:	4620      	mov	r0, r4
 801176a:	f000 ff75 	bl	8012658 <__lshift>
 801176e:	4631      	mov	r1, r6
 8011770:	ee08 0a10 	vmov	s16, r0
 8011774:	f000 ffe0 	bl	8012738 <__mcmp>
 8011778:	2800      	cmp	r0, #0
 801177a:	dc03      	bgt.n	8011784 <_dtoa_r+0xa9c>
 801177c:	d1e0      	bne.n	8011740 <_dtoa_r+0xa58>
 801177e:	f01a 0f01 	tst.w	sl, #1
 8011782:	d0dd      	beq.n	8011740 <_dtoa_r+0xa58>
 8011784:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011788:	d1d7      	bne.n	801173a <_dtoa_r+0xa52>
 801178a:	2339      	movs	r3, #57	; 0x39
 801178c:	f88b 3000 	strb.w	r3, [fp]
 8011790:	462b      	mov	r3, r5
 8011792:	461d      	mov	r5, r3
 8011794:	3b01      	subs	r3, #1
 8011796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801179a:	2a39      	cmp	r2, #57	; 0x39
 801179c:	d071      	beq.n	8011882 <_dtoa_r+0xb9a>
 801179e:	3201      	adds	r2, #1
 80117a0:	701a      	strb	r2, [r3, #0]
 80117a2:	e746      	b.n	8011632 <_dtoa_r+0x94a>
 80117a4:	2a00      	cmp	r2, #0
 80117a6:	dd07      	ble.n	80117b8 <_dtoa_r+0xad0>
 80117a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80117ac:	d0ed      	beq.n	801178a <_dtoa_r+0xaa2>
 80117ae:	f10a 0301 	add.w	r3, sl, #1
 80117b2:	f88b 3000 	strb.w	r3, [fp]
 80117b6:	e73c      	b.n	8011632 <_dtoa_r+0x94a>
 80117b8:	9b05      	ldr	r3, [sp, #20]
 80117ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80117be:	4599      	cmp	r9, r3
 80117c0:	d047      	beq.n	8011852 <_dtoa_r+0xb6a>
 80117c2:	ee18 1a10 	vmov	r1, s16
 80117c6:	2300      	movs	r3, #0
 80117c8:	220a      	movs	r2, #10
 80117ca:	4620      	mov	r0, r4
 80117cc:	f000 fd4a 	bl	8012264 <__multadd>
 80117d0:	45b8      	cmp	r8, r7
 80117d2:	ee08 0a10 	vmov	s16, r0
 80117d6:	f04f 0300 	mov.w	r3, #0
 80117da:	f04f 020a 	mov.w	r2, #10
 80117de:	4641      	mov	r1, r8
 80117e0:	4620      	mov	r0, r4
 80117e2:	d106      	bne.n	80117f2 <_dtoa_r+0xb0a>
 80117e4:	f000 fd3e 	bl	8012264 <__multadd>
 80117e8:	4680      	mov	r8, r0
 80117ea:	4607      	mov	r7, r0
 80117ec:	f109 0901 	add.w	r9, r9, #1
 80117f0:	e772      	b.n	80116d8 <_dtoa_r+0x9f0>
 80117f2:	f000 fd37 	bl	8012264 <__multadd>
 80117f6:	4639      	mov	r1, r7
 80117f8:	4680      	mov	r8, r0
 80117fa:	2300      	movs	r3, #0
 80117fc:	220a      	movs	r2, #10
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 fd30 	bl	8012264 <__multadd>
 8011804:	4607      	mov	r7, r0
 8011806:	e7f1      	b.n	80117ec <_dtoa_r+0xb04>
 8011808:	9b03      	ldr	r3, [sp, #12]
 801180a:	9302      	str	r3, [sp, #8]
 801180c:	9d01      	ldr	r5, [sp, #4]
 801180e:	ee18 0a10 	vmov	r0, s16
 8011812:	4631      	mov	r1, r6
 8011814:	f7ff f9da 	bl	8010bcc <quorem>
 8011818:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801181c:	9b01      	ldr	r3, [sp, #4]
 801181e:	f805 ab01 	strb.w	sl, [r5], #1
 8011822:	1aea      	subs	r2, r5, r3
 8011824:	9b02      	ldr	r3, [sp, #8]
 8011826:	4293      	cmp	r3, r2
 8011828:	dd09      	ble.n	801183e <_dtoa_r+0xb56>
 801182a:	ee18 1a10 	vmov	r1, s16
 801182e:	2300      	movs	r3, #0
 8011830:	220a      	movs	r2, #10
 8011832:	4620      	mov	r0, r4
 8011834:	f000 fd16 	bl	8012264 <__multadd>
 8011838:	ee08 0a10 	vmov	s16, r0
 801183c:	e7e7      	b.n	801180e <_dtoa_r+0xb26>
 801183e:	9b02      	ldr	r3, [sp, #8]
 8011840:	2b00      	cmp	r3, #0
 8011842:	bfc8      	it	gt
 8011844:	461d      	movgt	r5, r3
 8011846:	9b01      	ldr	r3, [sp, #4]
 8011848:	bfd8      	it	le
 801184a:	2501      	movle	r5, #1
 801184c:	441d      	add	r5, r3
 801184e:	f04f 0800 	mov.w	r8, #0
 8011852:	ee18 1a10 	vmov	r1, s16
 8011856:	2201      	movs	r2, #1
 8011858:	4620      	mov	r0, r4
 801185a:	f000 fefd 	bl	8012658 <__lshift>
 801185e:	4631      	mov	r1, r6
 8011860:	ee08 0a10 	vmov	s16, r0
 8011864:	f000 ff68 	bl	8012738 <__mcmp>
 8011868:	2800      	cmp	r0, #0
 801186a:	dc91      	bgt.n	8011790 <_dtoa_r+0xaa8>
 801186c:	d102      	bne.n	8011874 <_dtoa_r+0xb8c>
 801186e:	f01a 0f01 	tst.w	sl, #1
 8011872:	d18d      	bne.n	8011790 <_dtoa_r+0xaa8>
 8011874:	462b      	mov	r3, r5
 8011876:	461d      	mov	r5, r3
 8011878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801187c:	2a30      	cmp	r2, #48	; 0x30
 801187e:	d0fa      	beq.n	8011876 <_dtoa_r+0xb8e>
 8011880:	e6d7      	b.n	8011632 <_dtoa_r+0x94a>
 8011882:	9a01      	ldr	r2, [sp, #4]
 8011884:	429a      	cmp	r2, r3
 8011886:	d184      	bne.n	8011792 <_dtoa_r+0xaaa>
 8011888:	9b00      	ldr	r3, [sp, #0]
 801188a:	3301      	adds	r3, #1
 801188c:	9300      	str	r3, [sp, #0]
 801188e:	2331      	movs	r3, #49	; 0x31
 8011890:	7013      	strb	r3, [r2, #0]
 8011892:	e6ce      	b.n	8011632 <_dtoa_r+0x94a>
 8011894:	4b09      	ldr	r3, [pc, #36]	; (80118bc <_dtoa_r+0xbd4>)
 8011896:	f7ff ba95 	b.w	8010dc4 <_dtoa_r+0xdc>
 801189a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801189c:	2b00      	cmp	r3, #0
 801189e:	f47f aa6e 	bne.w	8010d7e <_dtoa_r+0x96>
 80118a2:	4b07      	ldr	r3, [pc, #28]	; (80118c0 <_dtoa_r+0xbd8>)
 80118a4:	f7ff ba8e 	b.w	8010dc4 <_dtoa_r+0xdc>
 80118a8:	9b02      	ldr	r3, [sp, #8]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	dcae      	bgt.n	801180c <_dtoa_r+0xb24>
 80118ae:	9b06      	ldr	r3, [sp, #24]
 80118b0:	2b02      	cmp	r3, #2
 80118b2:	f73f aea8 	bgt.w	8011606 <_dtoa_r+0x91e>
 80118b6:	e7a9      	b.n	801180c <_dtoa_r+0xb24>
 80118b8:	08017470 	.word	0x08017470
 80118bc:	08017274 	.word	0x08017274
 80118c0:	080173f1 	.word	0x080173f1

080118c4 <__sflush_r>:
 80118c4:	898a      	ldrh	r2, [r1, #12]
 80118c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ca:	4605      	mov	r5, r0
 80118cc:	0710      	lsls	r0, r2, #28
 80118ce:	460c      	mov	r4, r1
 80118d0:	d458      	bmi.n	8011984 <__sflush_r+0xc0>
 80118d2:	684b      	ldr	r3, [r1, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	dc05      	bgt.n	80118e4 <__sflush_r+0x20>
 80118d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118da:	2b00      	cmp	r3, #0
 80118dc:	dc02      	bgt.n	80118e4 <__sflush_r+0x20>
 80118de:	2000      	movs	r0, #0
 80118e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118e6:	2e00      	cmp	r6, #0
 80118e8:	d0f9      	beq.n	80118de <__sflush_r+0x1a>
 80118ea:	2300      	movs	r3, #0
 80118ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80118f0:	682f      	ldr	r7, [r5, #0]
 80118f2:	602b      	str	r3, [r5, #0]
 80118f4:	d032      	beq.n	801195c <__sflush_r+0x98>
 80118f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	075a      	lsls	r2, r3, #29
 80118fc:	d505      	bpl.n	801190a <__sflush_r+0x46>
 80118fe:	6863      	ldr	r3, [r4, #4]
 8011900:	1ac0      	subs	r0, r0, r3
 8011902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011904:	b10b      	cbz	r3, 801190a <__sflush_r+0x46>
 8011906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011908:	1ac0      	subs	r0, r0, r3
 801190a:	2300      	movs	r3, #0
 801190c:	4602      	mov	r2, r0
 801190e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011910:	6a21      	ldr	r1, [r4, #32]
 8011912:	4628      	mov	r0, r5
 8011914:	47b0      	blx	r6
 8011916:	1c43      	adds	r3, r0, #1
 8011918:	89a3      	ldrh	r3, [r4, #12]
 801191a:	d106      	bne.n	801192a <__sflush_r+0x66>
 801191c:	6829      	ldr	r1, [r5, #0]
 801191e:	291d      	cmp	r1, #29
 8011920:	d82c      	bhi.n	801197c <__sflush_r+0xb8>
 8011922:	4a2a      	ldr	r2, [pc, #168]	; (80119cc <__sflush_r+0x108>)
 8011924:	40ca      	lsrs	r2, r1
 8011926:	07d6      	lsls	r6, r2, #31
 8011928:	d528      	bpl.n	801197c <__sflush_r+0xb8>
 801192a:	2200      	movs	r2, #0
 801192c:	6062      	str	r2, [r4, #4]
 801192e:	04d9      	lsls	r1, r3, #19
 8011930:	6922      	ldr	r2, [r4, #16]
 8011932:	6022      	str	r2, [r4, #0]
 8011934:	d504      	bpl.n	8011940 <__sflush_r+0x7c>
 8011936:	1c42      	adds	r2, r0, #1
 8011938:	d101      	bne.n	801193e <__sflush_r+0x7a>
 801193a:	682b      	ldr	r3, [r5, #0]
 801193c:	b903      	cbnz	r3, 8011940 <__sflush_r+0x7c>
 801193e:	6560      	str	r0, [r4, #84]	; 0x54
 8011940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011942:	602f      	str	r7, [r5, #0]
 8011944:	2900      	cmp	r1, #0
 8011946:	d0ca      	beq.n	80118de <__sflush_r+0x1a>
 8011948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801194c:	4299      	cmp	r1, r3
 801194e:	d002      	beq.n	8011956 <__sflush_r+0x92>
 8011950:	4628      	mov	r0, r5
 8011952:	f001 f8fd 	bl	8012b50 <_free_r>
 8011956:	2000      	movs	r0, #0
 8011958:	6360      	str	r0, [r4, #52]	; 0x34
 801195a:	e7c1      	b.n	80118e0 <__sflush_r+0x1c>
 801195c:	6a21      	ldr	r1, [r4, #32]
 801195e:	2301      	movs	r3, #1
 8011960:	4628      	mov	r0, r5
 8011962:	47b0      	blx	r6
 8011964:	1c41      	adds	r1, r0, #1
 8011966:	d1c7      	bne.n	80118f8 <__sflush_r+0x34>
 8011968:	682b      	ldr	r3, [r5, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d0c4      	beq.n	80118f8 <__sflush_r+0x34>
 801196e:	2b1d      	cmp	r3, #29
 8011970:	d001      	beq.n	8011976 <__sflush_r+0xb2>
 8011972:	2b16      	cmp	r3, #22
 8011974:	d101      	bne.n	801197a <__sflush_r+0xb6>
 8011976:	602f      	str	r7, [r5, #0]
 8011978:	e7b1      	b.n	80118de <__sflush_r+0x1a>
 801197a:	89a3      	ldrh	r3, [r4, #12]
 801197c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011980:	81a3      	strh	r3, [r4, #12]
 8011982:	e7ad      	b.n	80118e0 <__sflush_r+0x1c>
 8011984:	690f      	ldr	r7, [r1, #16]
 8011986:	2f00      	cmp	r7, #0
 8011988:	d0a9      	beq.n	80118de <__sflush_r+0x1a>
 801198a:	0793      	lsls	r3, r2, #30
 801198c:	680e      	ldr	r6, [r1, #0]
 801198e:	bf08      	it	eq
 8011990:	694b      	ldreq	r3, [r1, #20]
 8011992:	600f      	str	r7, [r1, #0]
 8011994:	bf18      	it	ne
 8011996:	2300      	movne	r3, #0
 8011998:	eba6 0807 	sub.w	r8, r6, r7
 801199c:	608b      	str	r3, [r1, #8]
 801199e:	f1b8 0f00 	cmp.w	r8, #0
 80119a2:	dd9c      	ble.n	80118de <__sflush_r+0x1a>
 80119a4:	6a21      	ldr	r1, [r4, #32]
 80119a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119a8:	4643      	mov	r3, r8
 80119aa:	463a      	mov	r2, r7
 80119ac:	4628      	mov	r0, r5
 80119ae:	47b0      	blx	r6
 80119b0:	2800      	cmp	r0, #0
 80119b2:	dc06      	bgt.n	80119c2 <__sflush_r+0xfe>
 80119b4:	89a3      	ldrh	r3, [r4, #12]
 80119b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119ba:	81a3      	strh	r3, [r4, #12]
 80119bc:	f04f 30ff 	mov.w	r0, #4294967295
 80119c0:	e78e      	b.n	80118e0 <__sflush_r+0x1c>
 80119c2:	4407      	add	r7, r0
 80119c4:	eba8 0800 	sub.w	r8, r8, r0
 80119c8:	e7e9      	b.n	801199e <__sflush_r+0xda>
 80119ca:	bf00      	nop
 80119cc:	20400001 	.word	0x20400001

080119d0 <_fflush_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	690b      	ldr	r3, [r1, #16]
 80119d4:	4605      	mov	r5, r0
 80119d6:	460c      	mov	r4, r1
 80119d8:	b913      	cbnz	r3, 80119e0 <_fflush_r+0x10>
 80119da:	2500      	movs	r5, #0
 80119dc:	4628      	mov	r0, r5
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	b118      	cbz	r0, 80119ea <_fflush_r+0x1a>
 80119e2:	6983      	ldr	r3, [r0, #24]
 80119e4:	b90b      	cbnz	r3, 80119ea <_fflush_r+0x1a>
 80119e6:	f7fd f955 	bl	800ec94 <__sinit>
 80119ea:	4b14      	ldr	r3, [pc, #80]	; (8011a3c <_fflush_r+0x6c>)
 80119ec:	429c      	cmp	r4, r3
 80119ee:	d11b      	bne.n	8011a28 <_fflush_r+0x58>
 80119f0:	686c      	ldr	r4, [r5, #4]
 80119f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d0ef      	beq.n	80119da <_fflush_r+0xa>
 80119fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80119fc:	07d0      	lsls	r0, r2, #31
 80119fe:	d404      	bmi.n	8011a0a <_fflush_r+0x3a>
 8011a00:	0599      	lsls	r1, r3, #22
 8011a02:	d402      	bmi.n	8011a0a <_fflush_r+0x3a>
 8011a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a06:	f7fd fa08 	bl	800ee1a <__retarget_lock_acquire_recursive>
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	f7ff ff59 	bl	80118c4 <__sflush_r>
 8011a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a14:	07da      	lsls	r2, r3, #31
 8011a16:	4605      	mov	r5, r0
 8011a18:	d4e0      	bmi.n	80119dc <_fflush_r+0xc>
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	059b      	lsls	r3, r3, #22
 8011a1e:	d4dd      	bmi.n	80119dc <_fflush_r+0xc>
 8011a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a22:	f7fd f9fb 	bl	800ee1c <__retarget_lock_release_recursive>
 8011a26:	e7d9      	b.n	80119dc <_fflush_r+0xc>
 8011a28:	4b05      	ldr	r3, [pc, #20]	; (8011a40 <_fflush_r+0x70>)
 8011a2a:	429c      	cmp	r4, r3
 8011a2c:	d101      	bne.n	8011a32 <_fflush_r+0x62>
 8011a2e:	68ac      	ldr	r4, [r5, #8]
 8011a30:	e7df      	b.n	80119f2 <_fflush_r+0x22>
 8011a32:	4b04      	ldr	r3, [pc, #16]	; (8011a44 <_fflush_r+0x74>)
 8011a34:	429c      	cmp	r4, r3
 8011a36:	bf08      	it	eq
 8011a38:	68ec      	ldreq	r4, [r5, #12]
 8011a3a:	e7da      	b.n	80119f2 <_fflush_r+0x22>
 8011a3c:	08017220 	.word	0x08017220
 8011a40:	08017240 	.word	0x08017240
 8011a44:	08017200 	.word	0x08017200

08011a48 <rshift>:
 8011a48:	6903      	ldr	r3, [r0, #16]
 8011a4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011a4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011a56:	f100 0414 	add.w	r4, r0, #20
 8011a5a:	dd45      	ble.n	8011ae8 <rshift+0xa0>
 8011a5c:	f011 011f 	ands.w	r1, r1, #31
 8011a60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011a64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011a68:	d10c      	bne.n	8011a84 <rshift+0x3c>
 8011a6a:	f100 0710 	add.w	r7, r0, #16
 8011a6e:	4629      	mov	r1, r5
 8011a70:	42b1      	cmp	r1, r6
 8011a72:	d334      	bcc.n	8011ade <rshift+0x96>
 8011a74:	1a9b      	subs	r3, r3, r2
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	1eea      	subs	r2, r5, #3
 8011a7a:	4296      	cmp	r6, r2
 8011a7c:	bf38      	it	cc
 8011a7e:	2300      	movcc	r3, #0
 8011a80:	4423      	add	r3, r4
 8011a82:	e015      	b.n	8011ab0 <rshift+0x68>
 8011a84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a88:	f1c1 0820 	rsb	r8, r1, #32
 8011a8c:	40cf      	lsrs	r7, r1
 8011a8e:	f105 0e04 	add.w	lr, r5, #4
 8011a92:	46a1      	mov	r9, r4
 8011a94:	4576      	cmp	r6, lr
 8011a96:	46f4      	mov	ip, lr
 8011a98:	d815      	bhi.n	8011ac6 <rshift+0x7e>
 8011a9a:	1a9a      	subs	r2, r3, r2
 8011a9c:	0092      	lsls	r2, r2, #2
 8011a9e:	3a04      	subs	r2, #4
 8011aa0:	3501      	adds	r5, #1
 8011aa2:	42ae      	cmp	r6, r5
 8011aa4:	bf38      	it	cc
 8011aa6:	2200      	movcc	r2, #0
 8011aa8:	18a3      	adds	r3, r4, r2
 8011aaa:	50a7      	str	r7, [r4, r2]
 8011aac:	b107      	cbz	r7, 8011ab0 <rshift+0x68>
 8011aae:	3304      	adds	r3, #4
 8011ab0:	1b1a      	subs	r2, r3, r4
 8011ab2:	42a3      	cmp	r3, r4
 8011ab4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011ab8:	bf08      	it	eq
 8011aba:	2300      	moveq	r3, #0
 8011abc:	6102      	str	r2, [r0, #16]
 8011abe:	bf08      	it	eq
 8011ac0:	6143      	streq	r3, [r0, #20]
 8011ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ac6:	f8dc c000 	ldr.w	ip, [ip]
 8011aca:	fa0c fc08 	lsl.w	ip, ip, r8
 8011ace:	ea4c 0707 	orr.w	r7, ip, r7
 8011ad2:	f849 7b04 	str.w	r7, [r9], #4
 8011ad6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011ada:	40cf      	lsrs	r7, r1
 8011adc:	e7da      	b.n	8011a94 <rshift+0x4c>
 8011ade:	f851 cb04 	ldr.w	ip, [r1], #4
 8011ae2:	f847 cf04 	str.w	ip, [r7, #4]!
 8011ae6:	e7c3      	b.n	8011a70 <rshift+0x28>
 8011ae8:	4623      	mov	r3, r4
 8011aea:	e7e1      	b.n	8011ab0 <rshift+0x68>

08011aec <__hexdig_fun>:
 8011aec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011af0:	2b09      	cmp	r3, #9
 8011af2:	d802      	bhi.n	8011afa <__hexdig_fun+0xe>
 8011af4:	3820      	subs	r0, #32
 8011af6:	b2c0      	uxtb	r0, r0
 8011af8:	4770      	bx	lr
 8011afa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011afe:	2b05      	cmp	r3, #5
 8011b00:	d801      	bhi.n	8011b06 <__hexdig_fun+0x1a>
 8011b02:	3847      	subs	r0, #71	; 0x47
 8011b04:	e7f7      	b.n	8011af6 <__hexdig_fun+0xa>
 8011b06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011b0a:	2b05      	cmp	r3, #5
 8011b0c:	d801      	bhi.n	8011b12 <__hexdig_fun+0x26>
 8011b0e:	3827      	subs	r0, #39	; 0x27
 8011b10:	e7f1      	b.n	8011af6 <__hexdig_fun+0xa>
 8011b12:	2000      	movs	r0, #0
 8011b14:	4770      	bx	lr
	...

08011b18 <__gethex>:
 8011b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1c:	ed2d 8b02 	vpush	{d8}
 8011b20:	b089      	sub	sp, #36	; 0x24
 8011b22:	ee08 0a10 	vmov	s16, r0
 8011b26:	9304      	str	r3, [sp, #16]
 8011b28:	4bb4      	ldr	r3, [pc, #720]	; (8011dfc <__gethex+0x2e4>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	9301      	str	r3, [sp, #4]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	468b      	mov	fp, r1
 8011b32:	4690      	mov	r8, r2
 8011b34:	f7ee fb54 	bl	80001e0 <strlen>
 8011b38:	9b01      	ldr	r3, [sp, #4]
 8011b3a:	f8db 2000 	ldr.w	r2, [fp]
 8011b3e:	4403      	add	r3, r0
 8011b40:	4682      	mov	sl, r0
 8011b42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011b46:	9305      	str	r3, [sp, #20]
 8011b48:	1c93      	adds	r3, r2, #2
 8011b4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011b4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011b52:	32fe      	adds	r2, #254	; 0xfe
 8011b54:	18d1      	adds	r1, r2, r3
 8011b56:	461f      	mov	r7, r3
 8011b58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011b5c:	9100      	str	r1, [sp, #0]
 8011b5e:	2830      	cmp	r0, #48	; 0x30
 8011b60:	d0f8      	beq.n	8011b54 <__gethex+0x3c>
 8011b62:	f7ff ffc3 	bl	8011aec <__hexdig_fun>
 8011b66:	4604      	mov	r4, r0
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	d13a      	bne.n	8011be2 <__gethex+0xca>
 8011b6c:	9901      	ldr	r1, [sp, #4]
 8011b6e:	4652      	mov	r2, sl
 8011b70:	4638      	mov	r0, r7
 8011b72:	f001 f9b1 	bl	8012ed8 <strncmp>
 8011b76:	4605      	mov	r5, r0
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d168      	bne.n	8011c4e <__gethex+0x136>
 8011b7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011b80:	eb07 060a 	add.w	r6, r7, sl
 8011b84:	f7ff ffb2 	bl	8011aec <__hexdig_fun>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d062      	beq.n	8011c52 <__gethex+0x13a>
 8011b8c:	4633      	mov	r3, r6
 8011b8e:	7818      	ldrb	r0, [r3, #0]
 8011b90:	2830      	cmp	r0, #48	; 0x30
 8011b92:	461f      	mov	r7, r3
 8011b94:	f103 0301 	add.w	r3, r3, #1
 8011b98:	d0f9      	beq.n	8011b8e <__gethex+0x76>
 8011b9a:	f7ff ffa7 	bl	8011aec <__hexdig_fun>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	fab0 f480 	clz	r4, r0
 8011ba4:	0964      	lsrs	r4, r4, #5
 8011ba6:	4635      	mov	r5, r6
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	463a      	mov	r2, r7
 8011bac:	4616      	mov	r6, r2
 8011bae:	3201      	adds	r2, #1
 8011bb0:	7830      	ldrb	r0, [r6, #0]
 8011bb2:	f7ff ff9b 	bl	8011aec <__hexdig_fun>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d1f8      	bne.n	8011bac <__gethex+0x94>
 8011bba:	9901      	ldr	r1, [sp, #4]
 8011bbc:	4652      	mov	r2, sl
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	f001 f98a 	bl	8012ed8 <strncmp>
 8011bc4:	b980      	cbnz	r0, 8011be8 <__gethex+0xd0>
 8011bc6:	b94d      	cbnz	r5, 8011bdc <__gethex+0xc4>
 8011bc8:	eb06 050a 	add.w	r5, r6, sl
 8011bcc:	462a      	mov	r2, r5
 8011bce:	4616      	mov	r6, r2
 8011bd0:	3201      	adds	r2, #1
 8011bd2:	7830      	ldrb	r0, [r6, #0]
 8011bd4:	f7ff ff8a 	bl	8011aec <__hexdig_fun>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d1f8      	bne.n	8011bce <__gethex+0xb6>
 8011bdc:	1bad      	subs	r5, r5, r6
 8011bde:	00ad      	lsls	r5, r5, #2
 8011be0:	e004      	b.n	8011bec <__gethex+0xd4>
 8011be2:	2400      	movs	r4, #0
 8011be4:	4625      	mov	r5, r4
 8011be6:	e7e0      	b.n	8011baa <__gethex+0x92>
 8011be8:	2d00      	cmp	r5, #0
 8011bea:	d1f7      	bne.n	8011bdc <__gethex+0xc4>
 8011bec:	7833      	ldrb	r3, [r6, #0]
 8011bee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011bf2:	2b50      	cmp	r3, #80	; 0x50
 8011bf4:	d13b      	bne.n	8011c6e <__gethex+0x156>
 8011bf6:	7873      	ldrb	r3, [r6, #1]
 8011bf8:	2b2b      	cmp	r3, #43	; 0x2b
 8011bfa:	d02c      	beq.n	8011c56 <__gethex+0x13e>
 8011bfc:	2b2d      	cmp	r3, #45	; 0x2d
 8011bfe:	d02e      	beq.n	8011c5e <__gethex+0x146>
 8011c00:	1c71      	adds	r1, r6, #1
 8011c02:	f04f 0900 	mov.w	r9, #0
 8011c06:	7808      	ldrb	r0, [r1, #0]
 8011c08:	f7ff ff70 	bl	8011aec <__hexdig_fun>
 8011c0c:	1e43      	subs	r3, r0, #1
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	2b18      	cmp	r3, #24
 8011c12:	d82c      	bhi.n	8011c6e <__gethex+0x156>
 8011c14:	f1a0 0210 	sub.w	r2, r0, #16
 8011c18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c1c:	f7ff ff66 	bl	8011aec <__hexdig_fun>
 8011c20:	1e43      	subs	r3, r0, #1
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	2b18      	cmp	r3, #24
 8011c26:	d91d      	bls.n	8011c64 <__gethex+0x14c>
 8011c28:	f1b9 0f00 	cmp.w	r9, #0
 8011c2c:	d000      	beq.n	8011c30 <__gethex+0x118>
 8011c2e:	4252      	negs	r2, r2
 8011c30:	4415      	add	r5, r2
 8011c32:	f8cb 1000 	str.w	r1, [fp]
 8011c36:	b1e4      	cbz	r4, 8011c72 <__gethex+0x15a>
 8011c38:	9b00      	ldr	r3, [sp, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	bf14      	ite	ne
 8011c3e:	2700      	movne	r7, #0
 8011c40:	2706      	moveq	r7, #6
 8011c42:	4638      	mov	r0, r7
 8011c44:	b009      	add	sp, #36	; 0x24
 8011c46:	ecbd 8b02 	vpop	{d8}
 8011c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4e:	463e      	mov	r6, r7
 8011c50:	4625      	mov	r5, r4
 8011c52:	2401      	movs	r4, #1
 8011c54:	e7ca      	b.n	8011bec <__gethex+0xd4>
 8011c56:	f04f 0900 	mov.w	r9, #0
 8011c5a:	1cb1      	adds	r1, r6, #2
 8011c5c:	e7d3      	b.n	8011c06 <__gethex+0xee>
 8011c5e:	f04f 0901 	mov.w	r9, #1
 8011c62:	e7fa      	b.n	8011c5a <__gethex+0x142>
 8011c64:	230a      	movs	r3, #10
 8011c66:	fb03 0202 	mla	r2, r3, r2, r0
 8011c6a:	3a10      	subs	r2, #16
 8011c6c:	e7d4      	b.n	8011c18 <__gethex+0x100>
 8011c6e:	4631      	mov	r1, r6
 8011c70:	e7df      	b.n	8011c32 <__gethex+0x11a>
 8011c72:	1bf3      	subs	r3, r6, r7
 8011c74:	3b01      	subs	r3, #1
 8011c76:	4621      	mov	r1, r4
 8011c78:	2b07      	cmp	r3, #7
 8011c7a:	dc0b      	bgt.n	8011c94 <__gethex+0x17c>
 8011c7c:	ee18 0a10 	vmov	r0, s16
 8011c80:	f000 fa8e 	bl	80121a0 <_Balloc>
 8011c84:	4604      	mov	r4, r0
 8011c86:	b940      	cbnz	r0, 8011c9a <__gethex+0x182>
 8011c88:	4b5d      	ldr	r3, [pc, #372]	; (8011e00 <__gethex+0x2e8>)
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	21de      	movs	r1, #222	; 0xde
 8011c8e:	485d      	ldr	r0, [pc, #372]	; (8011e04 <__gethex+0x2ec>)
 8011c90:	f001 f944 	bl	8012f1c <__assert_func>
 8011c94:	3101      	adds	r1, #1
 8011c96:	105b      	asrs	r3, r3, #1
 8011c98:	e7ee      	b.n	8011c78 <__gethex+0x160>
 8011c9a:	f100 0914 	add.w	r9, r0, #20
 8011c9e:	f04f 0b00 	mov.w	fp, #0
 8011ca2:	f1ca 0301 	rsb	r3, sl, #1
 8011ca6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011caa:	f8cd b000 	str.w	fp, [sp]
 8011cae:	9306      	str	r3, [sp, #24]
 8011cb0:	42b7      	cmp	r7, r6
 8011cb2:	d340      	bcc.n	8011d36 <__gethex+0x21e>
 8011cb4:	9802      	ldr	r0, [sp, #8]
 8011cb6:	9b00      	ldr	r3, [sp, #0]
 8011cb8:	f840 3b04 	str.w	r3, [r0], #4
 8011cbc:	eba0 0009 	sub.w	r0, r0, r9
 8011cc0:	1080      	asrs	r0, r0, #2
 8011cc2:	0146      	lsls	r6, r0, #5
 8011cc4:	6120      	str	r0, [r4, #16]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f000 fb5c 	bl	8012384 <__hi0bits>
 8011ccc:	1a30      	subs	r0, r6, r0
 8011cce:	f8d8 6000 	ldr.w	r6, [r8]
 8011cd2:	42b0      	cmp	r0, r6
 8011cd4:	dd63      	ble.n	8011d9e <__gethex+0x286>
 8011cd6:	1b87      	subs	r7, r0, r6
 8011cd8:	4639      	mov	r1, r7
 8011cda:	4620      	mov	r0, r4
 8011cdc:	f000 ff00 	bl	8012ae0 <__any_on>
 8011ce0:	4682      	mov	sl, r0
 8011ce2:	b1a8      	cbz	r0, 8011d10 <__gethex+0x1f8>
 8011ce4:	1e7b      	subs	r3, r7, #1
 8011ce6:	1159      	asrs	r1, r3, #5
 8011ce8:	f003 021f 	and.w	r2, r3, #31
 8011cec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011cf0:	f04f 0a01 	mov.w	sl, #1
 8011cf4:	fa0a f202 	lsl.w	r2, sl, r2
 8011cf8:	420a      	tst	r2, r1
 8011cfa:	d009      	beq.n	8011d10 <__gethex+0x1f8>
 8011cfc:	4553      	cmp	r3, sl
 8011cfe:	dd05      	ble.n	8011d0c <__gethex+0x1f4>
 8011d00:	1eb9      	subs	r1, r7, #2
 8011d02:	4620      	mov	r0, r4
 8011d04:	f000 feec 	bl	8012ae0 <__any_on>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	d145      	bne.n	8011d98 <__gethex+0x280>
 8011d0c:	f04f 0a02 	mov.w	sl, #2
 8011d10:	4639      	mov	r1, r7
 8011d12:	4620      	mov	r0, r4
 8011d14:	f7ff fe98 	bl	8011a48 <rshift>
 8011d18:	443d      	add	r5, r7
 8011d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d1e:	42ab      	cmp	r3, r5
 8011d20:	da4c      	bge.n	8011dbc <__gethex+0x2a4>
 8011d22:	ee18 0a10 	vmov	r0, s16
 8011d26:	4621      	mov	r1, r4
 8011d28:	f000 fa7a 	bl	8012220 <_Bfree>
 8011d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d2e:	2300      	movs	r3, #0
 8011d30:	6013      	str	r3, [r2, #0]
 8011d32:	27a3      	movs	r7, #163	; 0xa3
 8011d34:	e785      	b.n	8011c42 <__gethex+0x12a>
 8011d36:	1e73      	subs	r3, r6, #1
 8011d38:	9a05      	ldr	r2, [sp, #20]
 8011d3a:	9303      	str	r3, [sp, #12]
 8011d3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d019      	beq.n	8011d78 <__gethex+0x260>
 8011d44:	f1bb 0f20 	cmp.w	fp, #32
 8011d48:	d107      	bne.n	8011d5a <__gethex+0x242>
 8011d4a:	9b02      	ldr	r3, [sp, #8]
 8011d4c:	9a00      	ldr	r2, [sp, #0]
 8011d4e:	f843 2b04 	str.w	r2, [r3], #4
 8011d52:	9302      	str	r3, [sp, #8]
 8011d54:	2300      	movs	r3, #0
 8011d56:	9300      	str	r3, [sp, #0]
 8011d58:	469b      	mov	fp, r3
 8011d5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011d5e:	f7ff fec5 	bl	8011aec <__hexdig_fun>
 8011d62:	9b00      	ldr	r3, [sp, #0]
 8011d64:	f000 000f 	and.w	r0, r0, #15
 8011d68:	fa00 f00b 	lsl.w	r0, r0, fp
 8011d6c:	4303      	orrs	r3, r0
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	f10b 0b04 	add.w	fp, fp, #4
 8011d74:	9b03      	ldr	r3, [sp, #12]
 8011d76:	e00d      	b.n	8011d94 <__gethex+0x27c>
 8011d78:	9b03      	ldr	r3, [sp, #12]
 8011d7a:	9a06      	ldr	r2, [sp, #24]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	42bb      	cmp	r3, r7
 8011d80:	d3e0      	bcc.n	8011d44 <__gethex+0x22c>
 8011d82:	4618      	mov	r0, r3
 8011d84:	9901      	ldr	r1, [sp, #4]
 8011d86:	9307      	str	r3, [sp, #28]
 8011d88:	4652      	mov	r2, sl
 8011d8a:	f001 f8a5 	bl	8012ed8 <strncmp>
 8011d8e:	9b07      	ldr	r3, [sp, #28]
 8011d90:	2800      	cmp	r0, #0
 8011d92:	d1d7      	bne.n	8011d44 <__gethex+0x22c>
 8011d94:	461e      	mov	r6, r3
 8011d96:	e78b      	b.n	8011cb0 <__gethex+0x198>
 8011d98:	f04f 0a03 	mov.w	sl, #3
 8011d9c:	e7b8      	b.n	8011d10 <__gethex+0x1f8>
 8011d9e:	da0a      	bge.n	8011db6 <__gethex+0x29e>
 8011da0:	1a37      	subs	r7, r6, r0
 8011da2:	4621      	mov	r1, r4
 8011da4:	ee18 0a10 	vmov	r0, s16
 8011da8:	463a      	mov	r2, r7
 8011daa:	f000 fc55 	bl	8012658 <__lshift>
 8011dae:	1bed      	subs	r5, r5, r7
 8011db0:	4604      	mov	r4, r0
 8011db2:	f100 0914 	add.w	r9, r0, #20
 8011db6:	f04f 0a00 	mov.w	sl, #0
 8011dba:	e7ae      	b.n	8011d1a <__gethex+0x202>
 8011dbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011dc0:	42a8      	cmp	r0, r5
 8011dc2:	dd72      	ble.n	8011eaa <__gethex+0x392>
 8011dc4:	1b45      	subs	r5, r0, r5
 8011dc6:	42ae      	cmp	r6, r5
 8011dc8:	dc36      	bgt.n	8011e38 <__gethex+0x320>
 8011dca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011dce:	2b02      	cmp	r3, #2
 8011dd0:	d02a      	beq.n	8011e28 <__gethex+0x310>
 8011dd2:	2b03      	cmp	r3, #3
 8011dd4:	d02c      	beq.n	8011e30 <__gethex+0x318>
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d11c      	bne.n	8011e14 <__gethex+0x2fc>
 8011dda:	42ae      	cmp	r6, r5
 8011ddc:	d11a      	bne.n	8011e14 <__gethex+0x2fc>
 8011dde:	2e01      	cmp	r6, #1
 8011de0:	d112      	bne.n	8011e08 <__gethex+0x2f0>
 8011de2:	9a04      	ldr	r2, [sp, #16]
 8011de4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011de8:	6013      	str	r3, [r2, #0]
 8011dea:	2301      	movs	r3, #1
 8011dec:	6123      	str	r3, [r4, #16]
 8011dee:	f8c9 3000 	str.w	r3, [r9]
 8011df2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011df4:	2762      	movs	r7, #98	; 0x62
 8011df6:	601c      	str	r4, [r3, #0]
 8011df8:	e723      	b.n	8011c42 <__gethex+0x12a>
 8011dfa:	bf00      	nop
 8011dfc:	080174e8 	.word	0x080174e8
 8011e00:	08017470 	.word	0x08017470
 8011e04:	08017481 	.word	0x08017481
 8011e08:	1e71      	subs	r1, r6, #1
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f000 fe68 	bl	8012ae0 <__any_on>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d1e6      	bne.n	8011de2 <__gethex+0x2ca>
 8011e14:	ee18 0a10 	vmov	r0, s16
 8011e18:	4621      	mov	r1, r4
 8011e1a:	f000 fa01 	bl	8012220 <_Bfree>
 8011e1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e20:	2300      	movs	r3, #0
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	2750      	movs	r7, #80	; 0x50
 8011e26:	e70c      	b.n	8011c42 <__gethex+0x12a>
 8011e28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f2      	bne.n	8011e14 <__gethex+0x2fc>
 8011e2e:	e7d8      	b.n	8011de2 <__gethex+0x2ca>
 8011e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1d5      	bne.n	8011de2 <__gethex+0x2ca>
 8011e36:	e7ed      	b.n	8011e14 <__gethex+0x2fc>
 8011e38:	1e6f      	subs	r7, r5, #1
 8011e3a:	f1ba 0f00 	cmp.w	sl, #0
 8011e3e:	d131      	bne.n	8011ea4 <__gethex+0x38c>
 8011e40:	b127      	cbz	r7, 8011e4c <__gethex+0x334>
 8011e42:	4639      	mov	r1, r7
 8011e44:	4620      	mov	r0, r4
 8011e46:	f000 fe4b 	bl	8012ae0 <__any_on>
 8011e4a:	4682      	mov	sl, r0
 8011e4c:	117b      	asrs	r3, r7, #5
 8011e4e:	2101      	movs	r1, #1
 8011e50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011e54:	f007 071f 	and.w	r7, r7, #31
 8011e58:	fa01 f707 	lsl.w	r7, r1, r7
 8011e5c:	421f      	tst	r7, r3
 8011e5e:	4629      	mov	r1, r5
 8011e60:	4620      	mov	r0, r4
 8011e62:	bf18      	it	ne
 8011e64:	f04a 0a02 	orrne.w	sl, sl, #2
 8011e68:	1b76      	subs	r6, r6, r5
 8011e6a:	f7ff fded 	bl	8011a48 <rshift>
 8011e6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011e72:	2702      	movs	r7, #2
 8011e74:	f1ba 0f00 	cmp.w	sl, #0
 8011e78:	d048      	beq.n	8011f0c <__gethex+0x3f4>
 8011e7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e7e:	2b02      	cmp	r3, #2
 8011e80:	d015      	beq.n	8011eae <__gethex+0x396>
 8011e82:	2b03      	cmp	r3, #3
 8011e84:	d017      	beq.n	8011eb6 <__gethex+0x39e>
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d109      	bne.n	8011e9e <__gethex+0x386>
 8011e8a:	f01a 0f02 	tst.w	sl, #2
 8011e8e:	d006      	beq.n	8011e9e <__gethex+0x386>
 8011e90:	f8d9 0000 	ldr.w	r0, [r9]
 8011e94:	ea4a 0a00 	orr.w	sl, sl, r0
 8011e98:	f01a 0f01 	tst.w	sl, #1
 8011e9c:	d10e      	bne.n	8011ebc <__gethex+0x3a4>
 8011e9e:	f047 0710 	orr.w	r7, r7, #16
 8011ea2:	e033      	b.n	8011f0c <__gethex+0x3f4>
 8011ea4:	f04f 0a01 	mov.w	sl, #1
 8011ea8:	e7d0      	b.n	8011e4c <__gethex+0x334>
 8011eaa:	2701      	movs	r7, #1
 8011eac:	e7e2      	b.n	8011e74 <__gethex+0x35c>
 8011eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011eb0:	f1c3 0301 	rsb	r3, r3, #1
 8011eb4:	9315      	str	r3, [sp, #84]	; 0x54
 8011eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d0f0      	beq.n	8011e9e <__gethex+0x386>
 8011ebc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ec0:	f104 0314 	add.w	r3, r4, #20
 8011ec4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011ec8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011ecc:	f04f 0c00 	mov.w	ip, #0
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ed6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011eda:	d01c      	beq.n	8011f16 <__gethex+0x3fe>
 8011edc:	3201      	adds	r2, #1
 8011ede:	6002      	str	r2, [r0, #0]
 8011ee0:	2f02      	cmp	r7, #2
 8011ee2:	f104 0314 	add.w	r3, r4, #20
 8011ee6:	d13f      	bne.n	8011f68 <__gethex+0x450>
 8011ee8:	f8d8 2000 	ldr.w	r2, [r8]
 8011eec:	3a01      	subs	r2, #1
 8011eee:	42b2      	cmp	r2, r6
 8011ef0:	d10a      	bne.n	8011f08 <__gethex+0x3f0>
 8011ef2:	1171      	asrs	r1, r6, #5
 8011ef4:	2201      	movs	r2, #1
 8011ef6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011efa:	f006 061f 	and.w	r6, r6, #31
 8011efe:	fa02 f606 	lsl.w	r6, r2, r6
 8011f02:	421e      	tst	r6, r3
 8011f04:	bf18      	it	ne
 8011f06:	4617      	movne	r7, r2
 8011f08:	f047 0720 	orr.w	r7, r7, #32
 8011f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f0e:	601c      	str	r4, [r3, #0]
 8011f10:	9b04      	ldr	r3, [sp, #16]
 8011f12:	601d      	str	r5, [r3, #0]
 8011f14:	e695      	b.n	8011c42 <__gethex+0x12a>
 8011f16:	4299      	cmp	r1, r3
 8011f18:	f843 cc04 	str.w	ip, [r3, #-4]
 8011f1c:	d8d8      	bhi.n	8011ed0 <__gethex+0x3b8>
 8011f1e:	68a3      	ldr	r3, [r4, #8]
 8011f20:	459b      	cmp	fp, r3
 8011f22:	db19      	blt.n	8011f58 <__gethex+0x440>
 8011f24:	6861      	ldr	r1, [r4, #4]
 8011f26:	ee18 0a10 	vmov	r0, s16
 8011f2a:	3101      	adds	r1, #1
 8011f2c:	f000 f938 	bl	80121a0 <_Balloc>
 8011f30:	4681      	mov	r9, r0
 8011f32:	b918      	cbnz	r0, 8011f3c <__gethex+0x424>
 8011f34:	4b1a      	ldr	r3, [pc, #104]	; (8011fa0 <__gethex+0x488>)
 8011f36:	4602      	mov	r2, r0
 8011f38:	2184      	movs	r1, #132	; 0x84
 8011f3a:	e6a8      	b.n	8011c8e <__gethex+0x176>
 8011f3c:	6922      	ldr	r2, [r4, #16]
 8011f3e:	3202      	adds	r2, #2
 8011f40:	f104 010c 	add.w	r1, r4, #12
 8011f44:	0092      	lsls	r2, r2, #2
 8011f46:	300c      	adds	r0, #12
 8011f48:	f7fc ff69 	bl	800ee1e <memcpy>
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	ee18 0a10 	vmov	r0, s16
 8011f52:	f000 f965 	bl	8012220 <_Bfree>
 8011f56:	464c      	mov	r4, r9
 8011f58:	6923      	ldr	r3, [r4, #16]
 8011f5a:	1c5a      	adds	r2, r3, #1
 8011f5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011f60:	6122      	str	r2, [r4, #16]
 8011f62:	2201      	movs	r2, #1
 8011f64:	615a      	str	r2, [r3, #20]
 8011f66:	e7bb      	b.n	8011ee0 <__gethex+0x3c8>
 8011f68:	6922      	ldr	r2, [r4, #16]
 8011f6a:	455a      	cmp	r2, fp
 8011f6c:	dd0b      	ble.n	8011f86 <__gethex+0x46e>
 8011f6e:	2101      	movs	r1, #1
 8011f70:	4620      	mov	r0, r4
 8011f72:	f7ff fd69 	bl	8011a48 <rshift>
 8011f76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f7a:	3501      	adds	r5, #1
 8011f7c:	42ab      	cmp	r3, r5
 8011f7e:	f6ff aed0 	blt.w	8011d22 <__gethex+0x20a>
 8011f82:	2701      	movs	r7, #1
 8011f84:	e7c0      	b.n	8011f08 <__gethex+0x3f0>
 8011f86:	f016 061f 	ands.w	r6, r6, #31
 8011f8a:	d0fa      	beq.n	8011f82 <__gethex+0x46a>
 8011f8c:	4453      	add	r3, sl
 8011f8e:	f1c6 0620 	rsb	r6, r6, #32
 8011f92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f96:	f000 f9f5 	bl	8012384 <__hi0bits>
 8011f9a:	42b0      	cmp	r0, r6
 8011f9c:	dbe7      	blt.n	8011f6e <__gethex+0x456>
 8011f9e:	e7f0      	b.n	8011f82 <__gethex+0x46a>
 8011fa0:	08017470 	.word	0x08017470

08011fa4 <L_shift>:
 8011fa4:	f1c2 0208 	rsb	r2, r2, #8
 8011fa8:	0092      	lsls	r2, r2, #2
 8011faa:	b570      	push	{r4, r5, r6, lr}
 8011fac:	f1c2 0620 	rsb	r6, r2, #32
 8011fb0:	6843      	ldr	r3, [r0, #4]
 8011fb2:	6804      	ldr	r4, [r0, #0]
 8011fb4:	fa03 f506 	lsl.w	r5, r3, r6
 8011fb8:	432c      	orrs	r4, r5
 8011fba:	40d3      	lsrs	r3, r2
 8011fbc:	6004      	str	r4, [r0, #0]
 8011fbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8011fc2:	4288      	cmp	r0, r1
 8011fc4:	d3f4      	bcc.n	8011fb0 <L_shift+0xc>
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}

08011fc8 <__match>:
 8011fc8:	b530      	push	{r4, r5, lr}
 8011fca:	6803      	ldr	r3, [r0, #0]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fd2:	b914      	cbnz	r4, 8011fda <__match+0x12>
 8011fd4:	6003      	str	r3, [r0, #0]
 8011fd6:	2001      	movs	r0, #1
 8011fd8:	bd30      	pop	{r4, r5, pc}
 8011fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fde:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011fe2:	2d19      	cmp	r5, #25
 8011fe4:	bf98      	it	ls
 8011fe6:	3220      	addls	r2, #32
 8011fe8:	42a2      	cmp	r2, r4
 8011fea:	d0f0      	beq.n	8011fce <__match+0x6>
 8011fec:	2000      	movs	r0, #0
 8011fee:	e7f3      	b.n	8011fd8 <__match+0x10>

08011ff0 <__hexnan>:
 8011ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff4:	680b      	ldr	r3, [r1, #0]
 8011ff6:	115e      	asrs	r6, r3, #5
 8011ff8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011ffc:	f013 031f 	ands.w	r3, r3, #31
 8012000:	b087      	sub	sp, #28
 8012002:	bf18      	it	ne
 8012004:	3604      	addne	r6, #4
 8012006:	2500      	movs	r5, #0
 8012008:	1f37      	subs	r7, r6, #4
 801200a:	4690      	mov	r8, r2
 801200c:	6802      	ldr	r2, [r0, #0]
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	4682      	mov	sl, r0
 8012012:	f846 5c04 	str.w	r5, [r6, #-4]
 8012016:	46b9      	mov	r9, r7
 8012018:	463c      	mov	r4, r7
 801201a:	9502      	str	r5, [sp, #8]
 801201c:	46ab      	mov	fp, r5
 801201e:	7851      	ldrb	r1, [r2, #1]
 8012020:	1c53      	adds	r3, r2, #1
 8012022:	9303      	str	r3, [sp, #12]
 8012024:	b341      	cbz	r1, 8012078 <__hexnan+0x88>
 8012026:	4608      	mov	r0, r1
 8012028:	9205      	str	r2, [sp, #20]
 801202a:	9104      	str	r1, [sp, #16]
 801202c:	f7ff fd5e 	bl	8011aec <__hexdig_fun>
 8012030:	2800      	cmp	r0, #0
 8012032:	d14f      	bne.n	80120d4 <__hexnan+0xe4>
 8012034:	9904      	ldr	r1, [sp, #16]
 8012036:	9a05      	ldr	r2, [sp, #20]
 8012038:	2920      	cmp	r1, #32
 801203a:	d818      	bhi.n	801206e <__hexnan+0x7e>
 801203c:	9b02      	ldr	r3, [sp, #8]
 801203e:	459b      	cmp	fp, r3
 8012040:	dd13      	ble.n	801206a <__hexnan+0x7a>
 8012042:	454c      	cmp	r4, r9
 8012044:	d206      	bcs.n	8012054 <__hexnan+0x64>
 8012046:	2d07      	cmp	r5, #7
 8012048:	dc04      	bgt.n	8012054 <__hexnan+0x64>
 801204a:	462a      	mov	r2, r5
 801204c:	4649      	mov	r1, r9
 801204e:	4620      	mov	r0, r4
 8012050:	f7ff ffa8 	bl	8011fa4 <L_shift>
 8012054:	4544      	cmp	r4, r8
 8012056:	d950      	bls.n	80120fa <__hexnan+0x10a>
 8012058:	2300      	movs	r3, #0
 801205a:	f1a4 0904 	sub.w	r9, r4, #4
 801205e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012062:	f8cd b008 	str.w	fp, [sp, #8]
 8012066:	464c      	mov	r4, r9
 8012068:	461d      	mov	r5, r3
 801206a:	9a03      	ldr	r2, [sp, #12]
 801206c:	e7d7      	b.n	801201e <__hexnan+0x2e>
 801206e:	2929      	cmp	r1, #41	; 0x29
 8012070:	d156      	bne.n	8012120 <__hexnan+0x130>
 8012072:	3202      	adds	r2, #2
 8012074:	f8ca 2000 	str.w	r2, [sl]
 8012078:	f1bb 0f00 	cmp.w	fp, #0
 801207c:	d050      	beq.n	8012120 <__hexnan+0x130>
 801207e:	454c      	cmp	r4, r9
 8012080:	d206      	bcs.n	8012090 <__hexnan+0xa0>
 8012082:	2d07      	cmp	r5, #7
 8012084:	dc04      	bgt.n	8012090 <__hexnan+0xa0>
 8012086:	462a      	mov	r2, r5
 8012088:	4649      	mov	r1, r9
 801208a:	4620      	mov	r0, r4
 801208c:	f7ff ff8a 	bl	8011fa4 <L_shift>
 8012090:	4544      	cmp	r4, r8
 8012092:	d934      	bls.n	80120fe <__hexnan+0x10e>
 8012094:	f1a8 0204 	sub.w	r2, r8, #4
 8012098:	4623      	mov	r3, r4
 801209a:	f853 1b04 	ldr.w	r1, [r3], #4
 801209e:	f842 1f04 	str.w	r1, [r2, #4]!
 80120a2:	429f      	cmp	r7, r3
 80120a4:	d2f9      	bcs.n	801209a <__hexnan+0xaa>
 80120a6:	1b3b      	subs	r3, r7, r4
 80120a8:	f023 0303 	bic.w	r3, r3, #3
 80120ac:	3304      	adds	r3, #4
 80120ae:	3401      	adds	r4, #1
 80120b0:	3e03      	subs	r6, #3
 80120b2:	42b4      	cmp	r4, r6
 80120b4:	bf88      	it	hi
 80120b6:	2304      	movhi	r3, #4
 80120b8:	4443      	add	r3, r8
 80120ba:	2200      	movs	r2, #0
 80120bc:	f843 2b04 	str.w	r2, [r3], #4
 80120c0:	429f      	cmp	r7, r3
 80120c2:	d2fb      	bcs.n	80120bc <__hexnan+0xcc>
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	b91b      	cbnz	r3, 80120d0 <__hexnan+0xe0>
 80120c8:	4547      	cmp	r7, r8
 80120ca:	d127      	bne.n	801211c <__hexnan+0x12c>
 80120cc:	2301      	movs	r3, #1
 80120ce:	603b      	str	r3, [r7, #0]
 80120d0:	2005      	movs	r0, #5
 80120d2:	e026      	b.n	8012122 <__hexnan+0x132>
 80120d4:	3501      	adds	r5, #1
 80120d6:	2d08      	cmp	r5, #8
 80120d8:	f10b 0b01 	add.w	fp, fp, #1
 80120dc:	dd06      	ble.n	80120ec <__hexnan+0xfc>
 80120de:	4544      	cmp	r4, r8
 80120e0:	d9c3      	bls.n	801206a <__hexnan+0x7a>
 80120e2:	2300      	movs	r3, #0
 80120e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80120e8:	2501      	movs	r5, #1
 80120ea:	3c04      	subs	r4, #4
 80120ec:	6822      	ldr	r2, [r4, #0]
 80120ee:	f000 000f 	and.w	r0, r0, #15
 80120f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80120f6:	6022      	str	r2, [r4, #0]
 80120f8:	e7b7      	b.n	801206a <__hexnan+0x7a>
 80120fa:	2508      	movs	r5, #8
 80120fc:	e7b5      	b.n	801206a <__hexnan+0x7a>
 80120fe:	9b01      	ldr	r3, [sp, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d0df      	beq.n	80120c4 <__hexnan+0xd4>
 8012104:	f04f 32ff 	mov.w	r2, #4294967295
 8012108:	f1c3 0320 	rsb	r3, r3, #32
 801210c:	fa22 f303 	lsr.w	r3, r2, r3
 8012110:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012114:	401a      	ands	r2, r3
 8012116:	f846 2c04 	str.w	r2, [r6, #-4]
 801211a:	e7d3      	b.n	80120c4 <__hexnan+0xd4>
 801211c:	3f04      	subs	r7, #4
 801211e:	e7d1      	b.n	80120c4 <__hexnan+0xd4>
 8012120:	2004      	movs	r0, #4
 8012122:	b007      	add	sp, #28
 8012124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012128 <_localeconv_r>:
 8012128:	4800      	ldr	r0, [pc, #0]	; (801212c <_localeconv_r+0x4>)
 801212a:	4770      	bx	lr
 801212c:	20000268 	.word	0x20000268

08012130 <_lseek_r>:
 8012130:	b538      	push	{r3, r4, r5, lr}
 8012132:	4d07      	ldr	r5, [pc, #28]	; (8012150 <_lseek_r+0x20>)
 8012134:	4604      	mov	r4, r0
 8012136:	4608      	mov	r0, r1
 8012138:	4611      	mov	r1, r2
 801213a:	2200      	movs	r2, #0
 801213c:	602a      	str	r2, [r5, #0]
 801213e:	461a      	mov	r2, r3
 8012140:	f001 fa80 	bl	8013644 <_lseek>
 8012144:	1c43      	adds	r3, r0, #1
 8012146:	d102      	bne.n	801214e <_lseek_r+0x1e>
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	b103      	cbz	r3, 801214e <_lseek_r+0x1e>
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	bd38      	pop	{r3, r4, r5, pc}
 8012150:	20006c7c 	.word	0x20006c7c

08012154 <malloc>:
 8012154:	4b02      	ldr	r3, [pc, #8]	; (8012160 <malloc+0xc>)
 8012156:	4601      	mov	r1, r0
 8012158:	6818      	ldr	r0, [r3, #0]
 801215a:	f7fc be97 	b.w	800ee8c <_malloc_r>
 801215e:	bf00      	nop
 8012160:	20000110 	.word	0x20000110

08012164 <__ascii_mbtowc>:
 8012164:	b082      	sub	sp, #8
 8012166:	b901      	cbnz	r1, 801216a <__ascii_mbtowc+0x6>
 8012168:	a901      	add	r1, sp, #4
 801216a:	b142      	cbz	r2, 801217e <__ascii_mbtowc+0x1a>
 801216c:	b14b      	cbz	r3, 8012182 <__ascii_mbtowc+0x1e>
 801216e:	7813      	ldrb	r3, [r2, #0]
 8012170:	600b      	str	r3, [r1, #0]
 8012172:	7812      	ldrb	r2, [r2, #0]
 8012174:	1e10      	subs	r0, r2, #0
 8012176:	bf18      	it	ne
 8012178:	2001      	movne	r0, #1
 801217a:	b002      	add	sp, #8
 801217c:	4770      	bx	lr
 801217e:	4610      	mov	r0, r2
 8012180:	e7fb      	b.n	801217a <__ascii_mbtowc+0x16>
 8012182:	f06f 0001 	mvn.w	r0, #1
 8012186:	e7f8      	b.n	801217a <__ascii_mbtowc+0x16>

08012188 <__malloc_lock>:
 8012188:	4801      	ldr	r0, [pc, #4]	; (8012190 <__malloc_lock+0x8>)
 801218a:	f7fc be46 	b.w	800ee1a <__retarget_lock_acquire_recursive>
 801218e:	bf00      	nop
 8012190:	20006c70 	.word	0x20006c70

08012194 <__malloc_unlock>:
 8012194:	4801      	ldr	r0, [pc, #4]	; (801219c <__malloc_unlock+0x8>)
 8012196:	f7fc be41 	b.w	800ee1c <__retarget_lock_release_recursive>
 801219a:	bf00      	nop
 801219c:	20006c70 	.word	0x20006c70

080121a0 <_Balloc>:
 80121a0:	b570      	push	{r4, r5, r6, lr}
 80121a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121a4:	4604      	mov	r4, r0
 80121a6:	460d      	mov	r5, r1
 80121a8:	b976      	cbnz	r6, 80121c8 <_Balloc+0x28>
 80121aa:	2010      	movs	r0, #16
 80121ac:	f7ff ffd2 	bl	8012154 <malloc>
 80121b0:	4602      	mov	r2, r0
 80121b2:	6260      	str	r0, [r4, #36]	; 0x24
 80121b4:	b920      	cbnz	r0, 80121c0 <_Balloc+0x20>
 80121b6:	4b18      	ldr	r3, [pc, #96]	; (8012218 <_Balloc+0x78>)
 80121b8:	4818      	ldr	r0, [pc, #96]	; (801221c <_Balloc+0x7c>)
 80121ba:	2166      	movs	r1, #102	; 0x66
 80121bc:	f000 feae 	bl	8012f1c <__assert_func>
 80121c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121c4:	6006      	str	r6, [r0, #0]
 80121c6:	60c6      	str	r6, [r0, #12]
 80121c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80121ca:	68f3      	ldr	r3, [r6, #12]
 80121cc:	b183      	cbz	r3, 80121f0 <_Balloc+0x50>
 80121ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121d6:	b9b8      	cbnz	r0, 8012208 <_Balloc+0x68>
 80121d8:	2101      	movs	r1, #1
 80121da:	fa01 f605 	lsl.w	r6, r1, r5
 80121de:	1d72      	adds	r2, r6, #5
 80121e0:	0092      	lsls	r2, r2, #2
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 fc9d 	bl	8012b22 <_calloc_r>
 80121e8:	b160      	cbz	r0, 8012204 <_Balloc+0x64>
 80121ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80121ee:	e00e      	b.n	801220e <_Balloc+0x6e>
 80121f0:	2221      	movs	r2, #33	; 0x21
 80121f2:	2104      	movs	r1, #4
 80121f4:	4620      	mov	r0, r4
 80121f6:	f000 fc94 	bl	8012b22 <_calloc_r>
 80121fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121fc:	60f0      	str	r0, [r6, #12]
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1e4      	bne.n	80121ce <_Balloc+0x2e>
 8012204:	2000      	movs	r0, #0
 8012206:	bd70      	pop	{r4, r5, r6, pc}
 8012208:	6802      	ldr	r2, [r0, #0]
 801220a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801220e:	2300      	movs	r3, #0
 8012210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012214:	e7f7      	b.n	8012206 <_Balloc+0x66>
 8012216:	bf00      	nop
 8012218:	080173fe 	.word	0x080173fe
 801221c:	080174fc 	.word	0x080174fc

08012220 <_Bfree>:
 8012220:	b570      	push	{r4, r5, r6, lr}
 8012222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012224:	4605      	mov	r5, r0
 8012226:	460c      	mov	r4, r1
 8012228:	b976      	cbnz	r6, 8012248 <_Bfree+0x28>
 801222a:	2010      	movs	r0, #16
 801222c:	f7ff ff92 	bl	8012154 <malloc>
 8012230:	4602      	mov	r2, r0
 8012232:	6268      	str	r0, [r5, #36]	; 0x24
 8012234:	b920      	cbnz	r0, 8012240 <_Bfree+0x20>
 8012236:	4b09      	ldr	r3, [pc, #36]	; (801225c <_Bfree+0x3c>)
 8012238:	4809      	ldr	r0, [pc, #36]	; (8012260 <_Bfree+0x40>)
 801223a:	218a      	movs	r1, #138	; 0x8a
 801223c:	f000 fe6e 	bl	8012f1c <__assert_func>
 8012240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012244:	6006      	str	r6, [r0, #0]
 8012246:	60c6      	str	r6, [r0, #12]
 8012248:	b13c      	cbz	r4, 801225a <_Bfree+0x3a>
 801224a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801224c:	6862      	ldr	r2, [r4, #4]
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012254:	6021      	str	r1, [r4, #0]
 8012256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801225a:	bd70      	pop	{r4, r5, r6, pc}
 801225c:	080173fe 	.word	0x080173fe
 8012260:	080174fc 	.word	0x080174fc

08012264 <__multadd>:
 8012264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012268:	690d      	ldr	r5, [r1, #16]
 801226a:	4607      	mov	r7, r0
 801226c:	460c      	mov	r4, r1
 801226e:	461e      	mov	r6, r3
 8012270:	f101 0c14 	add.w	ip, r1, #20
 8012274:	2000      	movs	r0, #0
 8012276:	f8dc 3000 	ldr.w	r3, [ip]
 801227a:	b299      	uxth	r1, r3
 801227c:	fb02 6101 	mla	r1, r2, r1, r6
 8012280:	0c1e      	lsrs	r6, r3, #16
 8012282:	0c0b      	lsrs	r3, r1, #16
 8012284:	fb02 3306 	mla	r3, r2, r6, r3
 8012288:	b289      	uxth	r1, r1
 801228a:	3001      	adds	r0, #1
 801228c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012290:	4285      	cmp	r5, r0
 8012292:	f84c 1b04 	str.w	r1, [ip], #4
 8012296:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801229a:	dcec      	bgt.n	8012276 <__multadd+0x12>
 801229c:	b30e      	cbz	r6, 80122e2 <__multadd+0x7e>
 801229e:	68a3      	ldr	r3, [r4, #8]
 80122a0:	42ab      	cmp	r3, r5
 80122a2:	dc19      	bgt.n	80122d8 <__multadd+0x74>
 80122a4:	6861      	ldr	r1, [r4, #4]
 80122a6:	4638      	mov	r0, r7
 80122a8:	3101      	adds	r1, #1
 80122aa:	f7ff ff79 	bl	80121a0 <_Balloc>
 80122ae:	4680      	mov	r8, r0
 80122b0:	b928      	cbnz	r0, 80122be <__multadd+0x5a>
 80122b2:	4602      	mov	r2, r0
 80122b4:	4b0c      	ldr	r3, [pc, #48]	; (80122e8 <__multadd+0x84>)
 80122b6:	480d      	ldr	r0, [pc, #52]	; (80122ec <__multadd+0x88>)
 80122b8:	21b5      	movs	r1, #181	; 0xb5
 80122ba:	f000 fe2f 	bl	8012f1c <__assert_func>
 80122be:	6922      	ldr	r2, [r4, #16]
 80122c0:	3202      	adds	r2, #2
 80122c2:	f104 010c 	add.w	r1, r4, #12
 80122c6:	0092      	lsls	r2, r2, #2
 80122c8:	300c      	adds	r0, #12
 80122ca:	f7fc fda8 	bl	800ee1e <memcpy>
 80122ce:	4621      	mov	r1, r4
 80122d0:	4638      	mov	r0, r7
 80122d2:	f7ff ffa5 	bl	8012220 <_Bfree>
 80122d6:	4644      	mov	r4, r8
 80122d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80122dc:	3501      	adds	r5, #1
 80122de:	615e      	str	r6, [r3, #20]
 80122e0:	6125      	str	r5, [r4, #16]
 80122e2:	4620      	mov	r0, r4
 80122e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122e8:	08017470 	.word	0x08017470
 80122ec:	080174fc 	.word	0x080174fc

080122f0 <__s2b>:
 80122f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122f4:	460c      	mov	r4, r1
 80122f6:	4615      	mov	r5, r2
 80122f8:	461f      	mov	r7, r3
 80122fa:	2209      	movs	r2, #9
 80122fc:	3308      	adds	r3, #8
 80122fe:	4606      	mov	r6, r0
 8012300:	fb93 f3f2 	sdiv	r3, r3, r2
 8012304:	2100      	movs	r1, #0
 8012306:	2201      	movs	r2, #1
 8012308:	429a      	cmp	r2, r3
 801230a:	db09      	blt.n	8012320 <__s2b+0x30>
 801230c:	4630      	mov	r0, r6
 801230e:	f7ff ff47 	bl	80121a0 <_Balloc>
 8012312:	b940      	cbnz	r0, 8012326 <__s2b+0x36>
 8012314:	4602      	mov	r2, r0
 8012316:	4b19      	ldr	r3, [pc, #100]	; (801237c <__s2b+0x8c>)
 8012318:	4819      	ldr	r0, [pc, #100]	; (8012380 <__s2b+0x90>)
 801231a:	21ce      	movs	r1, #206	; 0xce
 801231c:	f000 fdfe 	bl	8012f1c <__assert_func>
 8012320:	0052      	lsls	r2, r2, #1
 8012322:	3101      	adds	r1, #1
 8012324:	e7f0      	b.n	8012308 <__s2b+0x18>
 8012326:	9b08      	ldr	r3, [sp, #32]
 8012328:	6143      	str	r3, [r0, #20]
 801232a:	2d09      	cmp	r5, #9
 801232c:	f04f 0301 	mov.w	r3, #1
 8012330:	6103      	str	r3, [r0, #16]
 8012332:	dd16      	ble.n	8012362 <__s2b+0x72>
 8012334:	f104 0909 	add.w	r9, r4, #9
 8012338:	46c8      	mov	r8, r9
 801233a:	442c      	add	r4, r5
 801233c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012340:	4601      	mov	r1, r0
 8012342:	3b30      	subs	r3, #48	; 0x30
 8012344:	220a      	movs	r2, #10
 8012346:	4630      	mov	r0, r6
 8012348:	f7ff ff8c 	bl	8012264 <__multadd>
 801234c:	45a0      	cmp	r8, r4
 801234e:	d1f5      	bne.n	801233c <__s2b+0x4c>
 8012350:	f1a5 0408 	sub.w	r4, r5, #8
 8012354:	444c      	add	r4, r9
 8012356:	1b2d      	subs	r5, r5, r4
 8012358:	1963      	adds	r3, r4, r5
 801235a:	42bb      	cmp	r3, r7
 801235c:	db04      	blt.n	8012368 <__s2b+0x78>
 801235e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012362:	340a      	adds	r4, #10
 8012364:	2509      	movs	r5, #9
 8012366:	e7f6      	b.n	8012356 <__s2b+0x66>
 8012368:	f814 3b01 	ldrb.w	r3, [r4], #1
 801236c:	4601      	mov	r1, r0
 801236e:	3b30      	subs	r3, #48	; 0x30
 8012370:	220a      	movs	r2, #10
 8012372:	4630      	mov	r0, r6
 8012374:	f7ff ff76 	bl	8012264 <__multadd>
 8012378:	e7ee      	b.n	8012358 <__s2b+0x68>
 801237a:	bf00      	nop
 801237c:	08017470 	.word	0x08017470
 8012380:	080174fc 	.word	0x080174fc

08012384 <__hi0bits>:
 8012384:	0c03      	lsrs	r3, r0, #16
 8012386:	041b      	lsls	r3, r3, #16
 8012388:	b9d3      	cbnz	r3, 80123c0 <__hi0bits+0x3c>
 801238a:	0400      	lsls	r0, r0, #16
 801238c:	2310      	movs	r3, #16
 801238e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012392:	bf04      	itt	eq
 8012394:	0200      	lsleq	r0, r0, #8
 8012396:	3308      	addeq	r3, #8
 8012398:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801239c:	bf04      	itt	eq
 801239e:	0100      	lsleq	r0, r0, #4
 80123a0:	3304      	addeq	r3, #4
 80123a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80123a6:	bf04      	itt	eq
 80123a8:	0080      	lsleq	r0, r0, #2
 80123aa:	3302      	addeq	r3, #2
 80123ac:	2800      	cmp	r0, #0
 80123ae:	db05      	blt.n	80123bc <__hi0bits+0x38>
 80123b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80123b4:	f103 0301 	add.w	r3, r3, #1
 80123b8:	bf08      	it	eq
 80123ba:	2320      	moveq	r3, #32
 80123bc:	4618      	mov	r0, r3
 80123be:	4770      	bx	lr
 80123c0:	2300      	movs	r3, #0
 80123c2:	e7e4      	b.n	801238e <__hi0bits+0xa>

080123c4 <__lo0bits>:
 80123c4:	6803      	ldr	r3, [r0, #0]
 80123c6:	f013 0207 	ands.w	r2, r3, #7
 80123ca:	4601      	mov	r1, r0
 80123cc:	d00b      	beq.n	80123e6 <__lo0bits+0x22>
 80123ce:	07da      	lsls	r2, r3, #31
 80123d0:	d423      	bmi.n	801241a <__lo0bits+0x56>
 80123d2:	0798      	lsls	r0, r3, #30
 80123d4:	bf49      	itett	mi
 80123d6:	085b      	lsrmi	r3, r3, #1
 80123d8:	089b      	lsrpl	r3, r3, #2
 80123da:	2001      	movmi	r0, #1
 80123dc:	600b      	strmi	r3, [r1, #0]
 80123de:	bf5c      	itt	pl
 80123e0:	600b      	strpl	r3, [r1, #0]
 80123e2:	2002      	movpl	r0, #2
 80123e4:	4770      	bx	lr
 80123e6:	b298      	uxth	r0, r3
 80123e8:	b9a8      	cbnz	r0, 8012416 <__lo0bits+0x52>
 80123ea:	0c1b      	lsrs	r3, r3, #16
 80123ec:	2010      	movs	r0, #16
 80123ee:	b2da      	uxtb	r2, r3
 80123f0:	b90a      	cbnz	r2, 80123f6 <__lo0bits+0x32>
 80123f2:	3008      	adds	r0, #8
 80123f4:	0a1b      	lsrs	r3, r3, #8
 80123f6:	071a      	lsls	r2, r3, #28
 80123f8:	bf04      	itt	eq
 80123fa:	091b      	lsreq	r3, r3, #4
 80123fc:	3004      	addeq	r0, #4
 80123fe:	079a      	lsls	r2, r3, #30
 8012400:	bf04      	itt	eq
 8012402:	089b      	lsreq	r3, r3, #2
 8012404:	3002      	addeq	r0, #2
 8012406:	07da      	lsls	r2, r3, #31
 8012408:	d403      	bmi.n	8012412 <__lo0bits+0x4e>
 801240a:	085b      	lsrs	r3, r3, #1
 801240c:	f100 0001 	add.w	r0, r0, #1
 8012410:	d005      	beq.n	801241e <__lo0bits+0x5a>
 8012412:	600b      	str	r3, [r1, #0]
 8012414:	4770      	bx	lr
 8012416:	4610      	mov	r0, r2
 8012418:	e7e9      	b.n	80123ee <__lo0bits+0x2a>
 801241a:	2000      	movs	r0, #0
 801241c:	4770      	bx	lr
 801241e:	2020      	movs	r0, #32
 8012420:	4770      	bx	lr
	...

08012424 <__i2b>:
 8012424:	b510      	push	{r4, lr}
 8012426:	460c      	mov	r4, r1
 8012428:	2101      	movs	r1, #1
 801242a:	f7ff feb9 	bl	80121a0 <_Balloc>
 801242e:	4602      	mov	r2, r0
 8012430:	b928      	cbnz	r0, 801243e <__i2b+0x1a>
 8012432:	4b05      	ldr	r3, [pc, #20]	; (8012448 <__i2b+0x24>)
 8012434:	4805      	ldr	r0, [pc, #20]	; (801244c <__i2b+0x28>)
 8012436:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801243a:	f000 fd6f 	bl	8012f1c <__assert_func>
 801243e:	2301      	movs	r3, #1
 8012440:	6144      	str	r4, [r0, #20]
 8012442:	6103      	str	r3, [r0, #16]
 8012444:	bd10      	pop	{r4, pc}
 8012446:	bf00      	nop
 8012448:	08017470 	.word	0x08017470
 801244c:	080174fc 	.word	0x080174fc

08012450 <__multiply>:
 8012450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012454:	4691      	mov	r9, r2
 8012456:	690a      	ldr	r2, [r1, #16]
 8012458:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801245c:	429a      	cmp	r2, r3
 801245e:	bfb8      	it	lt
 8012460:	460b      	movlt	r3, r1
 8012462:	460c      	mov	r4, r1
 8012464:	bfbc      	itt	lt
 8012466:	464c      	movlt	r4, r9
 8012468:	4699      	movlt	r9, r3
 801246a:	6927      	ldr	r7, [r4, #16]
 801246c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012470:	68a3      	ldr	r3, [r4, #8]
 8012472:	6861      	ldr	r1, [r4, #4]
 8012474:	eb07 060a 	add.w	r6, r7, sl
 8012478:	42b3      	cmp	r3, r6
 801247a:	b085      	sub	sp, #20
 801247c:	bfb8      	it	lt
 801247e:	3101      	addlt	r1, #1
 8012480:	f7ff fe8e 	bl	80121a0 <_Balloc>
 8012484:	b930      	cbnz	r0, 8012494 <__multiply+0x44>
 8012486:	4602      	mov	r2, r0
 8012488:	4b44      	ldr	r3, [pc, #272]	; (801259c <__multiply+0x14c>)
 801248a:	4845      	ldr	r0, [pc, #276]	; (80125a0 <__multiply+0x150>)
 801248c:	f240 115d 	movw	r1, #349	; 0x15d
 8012490:	f000 fd44 	bl	8012f1c <__assert_func>
 8012494:	f100 0514 	add.w	r5, r0, #20
 8012498:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801249c:	462b      	mov	r3, r5
 801249e:	2200      	movs	r2, #0
 80124a0:	4543      	cmp	r3, r8
 80124a2:	d321      	bcc.n	80124e8 <__multiply+0x98>
 80124a4:	f104 0314 	add.w	r3, r4, #20
 80124a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80124ac:	f109 0314 	add.w	r3, r9, #20
 80124b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80124b4:	9202      	str	r2, [sp, #8]
 80124b6:	1b3a      	subs	r2, r7, r4
 80124b8:	3a15      	subs	r2, #21
 80124ba:	f022 0203 	bic.w	r2, r2, #3
 80124be:	3204      	adds	r2, #4
 80124c0:	f104 0115 	add.w	r1, r4, #21
 80124c4:	428f      	cmp	r7, r1
 80124c6:	bf38      	it	cc
 80124c8:	2204      	movcc	r2, #4
 80124ca:	9201      	str	r2, [sp, #4]
 80124cc:	9a02      	ldr	r2, [sp, #8]
 80124ce:	9303      	str	r3, [sp, #12]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d80c      	bhi.n	80124ee <__multiply+0x9e>
 80124d4:	2e00      	cmp	r6, #0
 80124d6:	dd03      	ble.n	80124e0 <__multiply+0x90>
 80124d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d05a      	beq.n	8012596 <__multiply+0x146>
 80124e0:	6106      	str	r6, [r0, #16]
 80124e2:	b005      	add	sp, #20
 80124e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e8:	f843 2b04 	str.w	r2, [r3], #4
 80124ec:	e7d8      	b.n	80124a0 <__multiply+0x50>
 80124ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80124f2:	f1ba 0f00 	cmp.w	sl, #0
 80124f6:	d024      	beq.n	8012542 <__multiply+0xf2>
 80124f8:	f104 0e14 	add.w	lr, r4, #20
 80124fc:	46a9      	mov	r9, r5
 80124fe:	f04f 0c00 	mov.w	ip, #0
 8012502:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012506:	f8d9 1000 	ldr.w	r1, [r9]
 801250a:	fa1f fb82 	uxth.w	fp, r2
 801250e:	b289      	uxth	r1, r1
 8012510:	fb0a 110b 	mla	r1, sl, fp, r1
 8012514:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012518:	f8d9 2000 	ldr.w	r2, [r9]
 801251c:	4461      	add	r1, ip
 801251e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012522:	fb0a c20b 	mla	r2, sl, fp, ip
 8012526:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801252a:	b289      	uxth	r1, r1
 801252c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012530:	4577      	cmp	r7, lr
 8012532:	f849 1b04 	str.w	r1, [r9], #4
 8012536:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801253a:	d8e2      	bhi.n	8012502 <__multiply+0xb2>
 801253c:	9a01      	ldr	r2, [sp, #4]
 801253e:	f845 c002 	str.w	ip, [r5, r2]
 8012542:	9a03      	ldr	r2, [sp, #12]
 8012544:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012548:	3304      	adds	r3, #4
 801254a:	f1b9 0f00 	cmp.w	r9, #0
 801254e:	d020      	beq.n	8012592 <__multiply+0x142>
 8012550:	6829      	ldr	r1, [r5, #0]
 8012552:	f104 0c14 	add.w	ip, r4, #20
 8012556:	46ae      	mov	lr, r5
 8012558:	f04f 0a00 	mov.w	sl, #0
 801255c:	f8bc b000 	ldrh.w	fp, [ip]
 8012560:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012564:	fb09 220b 	mla	r2, r9, fp, r2
 8012568:	4492      	add	sl, r2
 801256a:	b289      	uxth	r1, r1
 801256c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012570:	f84e 1b04 	str.w	r1, [lr], #4
 8012574:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012578:	f8be 1000 	ldrh.w	r1, [lr]
 801257c:	0c12      	lsrs	r2, r2, #16
 801257e:	fb09 1102 	mla	r1, r9, r2, r1
 8012582:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012586:	4567      	cmp	r7, ip
 8012588:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801258c:	d8e6      	bhi.n	801255c <__multiply+0x10c>
 801258e:	9a01      	ldr	r2, [sp, #4]
 8012590:	50a9      	str	r1, [r5, r2]
 8012592:	3504      	adds	r5, #4
 8012594:	e79a      	b.n	80124cc <__multiply+0x7c>
 8012596:	3e01      	subs	r6, #1
 8012598:	e79c      	b.n	80124d4 <__multiply+0x84>
 801259a:	bf00      	nop
 801259c:	08017470 	.word	0x08017470
 80125a0:	080174fc 	.word	0x080174fc

080125a4 <__pow5mult>:
 80125a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125a8:	4615      	mov	r5, r2
 80125aa:	f012 0203 	ands.w	r2, r2, #3
 80125ae:	4606      	mov	r6, r0
 80125b0:	460f      	mov	r7, r1
 80125b2:	d007      	beq.n	80125c4 <__pow5mult+0x20>
 80125b4:	4c25      	ldr	r4, [pc, #148]	; (801264c <__pow5mult+0xa8>)
 80125b6:	3a01      	subs	r2, #1
 80125b8:	2300      	movs	r3, #0
 80125ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125be:	f7ff fe51 	bl	8012264 <__multadd>
 80125c2:	4607      	mov	r7, r0
 80125c4:	10ad      	asrs	r5, r5, #2
 80125c6:	d03d      	beq.n	8012644 <__pow5mult+0xa0>
 80125c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80125ca:	b97c      	cbnz	r4, 80125ec <__pow5mult+0x48>
 80125cc:	2010      	movs	r0, #16
 80125ce:	f7ff fdc1 	bl	8012154 <malloc>
 80125d2:	4602      	mov	r2, r0
 80125d4:	6270      	str	r0, [r6, #36]	; 0x24
 80125d6:	b928      	cbnz	r0, 80125e4 <__pow5mult+0x40>
 80125d8:	4b1d      	ldr	r3, [pc, #116]	; (8012650 <__pow5mult+0xac>)
 80125da:	481e      	ldr	r0, [pc, #120]	; (8012654 <__pow5mult+0xb0>)
 80125dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80125e0:	f000 fc9c 	bl	8012f1c <__assert_func>
 80125e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125e8:	6004      	str	r4, [r0, #0]
 80125ea:	60c4      	str	r4, [r0, #12]
 80125ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80125f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125f4:	b94c      	cbnz	r4, 801260a <__pow5mult+0x66>
 80125f6:	f240 2171 	movw	r1, #625	; 0x271
 80125fa:	4630      	mov	r0, r6
 80125fc:	f7ff ff12 	bl	8012424 <__i2b>
 8012600:	2300      	movs	r3, #0
 8012602:	f8c8 0008 	str.w	r0, [r8, #8]
 8012606:	4604      	mov	r4, r0
 8012608:	6003      	str	r3, [r0, #0]
 801260a:	f04f 0900 	mov.w	r9, #0
 801260e:	07eb      	lsls	r3, r5, #31
 8012610:	d50a      	bpl.n	8012628 <__pow5mult+0x84>
 8012612:	4639      	mov	r1, r7
 8012614:	4622      	mov	r2, r4
 8012616:	4630      	mov	r0, r6
 8012618:	f7ff ff1a 	bl	8012450 <__multiply>
 801261c:	4639      	mov	r1, r7
 801261e:	4680      	mov	r8, r0
 8012620:	4630      	mov	r0, r6
 8012622:	f7ff fdfd 	bl	8012220 <_Bfree>
 8012626:	4647      	mov	r7, r8
 8012628:	106d      	asrs	r5, r5, #1
 801262a:	d00b      	beq.n	8012644 <__pow5mult+0xa0>
 801262c:	6820      	ldr	r0, [r4, #0]
 801262e:	b938      	cbnz	r0, 8012640 <__pow5mult+0x9c>
 8012630:	4622      	mov	r2, r4
 8012632:	4621      	mov	r1, r4
 8012634:	4630      	mov	r0, r6
 8012636:	f7ff ff0b 	bl	8012450 <__multiply>
 801263a:	6020      	str	r0, [r4, #0]
 801263c:	f8c0 9000 	str.w	r9, [r0]
 8012640:	4604      	mov	r4, r0
 8012642:	e7e4      	b.n	801260e <__pow5mult+0x6a>
 8012644:	4638      	mov	r0, r7
 8012646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801264a:	bf00      	nop
 801264c:	08017648 	.word	0x08017648
 8012650:	080173fe 	.word	0x080173fe
 8012654:	080174fc 	.word	0x080174fc

08012658 <__lshift>:
 8012658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801265c:	460c      	mov	r4, r1
 801265e:	6849      	ldr	r1, [r1, #4]
 8012660:	6923      	ldr	r3, [r4, #16]
 8012662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012666:	68a3      	ldr	r3, [r4, #8]
 8012668:	4607      	mov	r7, r0
 801266a:	4691      	mov	r9, r2
 801266c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012670:	f108 0601 	add.w	r6, r8, #1
 8012674:	42b3      	cmp	r3, r6
 8012676:	db0b      	blt.n	8012690 <__lshift+0x38>
 8012678:	4638      	mov	r0, r7
 801267a:	f7ff fd91 	bl	80121a0 <_Balloc>
 801267e:	4605      	mov	r5, r0
 8012680:	b948      	cbnz	r0, 8012696 <__lshift+0x3e>
 8012682:	4602      	mov	r2, r0
 8012684:	4b2a      	ldr	r3, [pc, #168]	; (8012730 <__lshift+0xd8>)
 8012686:	482b      	ldr	r0, [pc, #172]	; (8012734 <__lshift+0xdc>)
 8012688:	f240 11d9 	movw	r1, #473	; 0x1d9
 801268c:	f000 fc46 	bl	8012f1c <__assert_func>
 8012690:	3101      	adds	r1, #1
 8012692:	005b      	lsls	r3, r3, #1
 8012694:	e7ee      	b.n	8012674 <__lshift+0x1c>
 8012696:	2300      	movs	r3, #0
 8012698:	f100 0114 	add.w	r1, r0, #20
 801269c:	f100 0210 	add.w	r2, r0, #16
 80126a0:	4618      	mov	r0, r3
 80126a2:	4553      	cmp	r3, sl
 80126a4:	db37      	blt.n	8012716 <__lshift+0xbe>
 80126a6:	6920      	ldr	r0, [r4, #16]
 80126a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80126ac:	f104 0314 	add.w	r3, r4, #20
 80126b0:	f019 091f 	ands.w	r9, r9, #31
 80126b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80126b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80126bc:	d02f      	beq.n	801271e <__lshift+0xc6>
 80126be:	f1c9 0e20 	rsb	lr, r9, #32
 80126c2:	468a      	mov	sl, r1
 80126c4:	f04f 0c00 	mov.w	ip, #0
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	fa02 f209 	lsl.w	r2, r2, r9
 80126ce:	ea42 020c 	orr.w	r2, r2, ip
 80126d2:	f84a 2b04 	str.w	r2, [sl], #4
 80126d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80126da:	4298      	cmp	r0, r3
 80126dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80126e0:	d8f2      	bhi.n	80126c8 <__lshift+0x70>
 80126e2:	1b03      	subs	r3, r0, r4
 80126e4:	3b15      	subs	r3, #21
 80126e6:	f023 0303 	bic.w	r3, r3, #3
 80126ea:	3304      	adds	r3, #4
 80126ec:	f104 0215 	add.w	r2, r4, #21
 80126f0:	4290      	cmp	r0, r2
 80126f2:	bf38      	it	cc
 80126f4:	2304      	movcc	r3, #4
 80126f6:	f841 c003 	str.w	ip, [r1, r3]
 80126fa:	f1bc 0f00 	cmp.w	ip, #0
 80126fe:	d001      	beq.n	8012704 <__lshift+0xac>
 8012700:	f108 0602 	add.w	r6, r8, #2
 8012704:	3e01      	subs	r6, #1
 8012706:	4638      	mov	r0, r7
 8012708:	612e      	str	r6, [r5, #16]
 801270a:	4621      	mov	r1, r4
 801270c:	f7ff fd88 	bl	8012220 <_Bfree>
 8012710:	4628      	mov	r0, r5
 8012712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012716:	f842 0f04 	str.w	r0, [r2, #4]!
 801271a:	3301      	adds	r3, #1
 801271c:	e7c1      	b.n	80126a2 <__lshift+0x4a>
 801271e:	3904      	subs	r1, #4
 8012720:	f853 2b04 	ldr.w	r2, [r3], #4
 8012724:	f841 2f04 	str.w	r2, [r1, #4]!
 8012728:	4298      	cmp	r0, r3
 801272a:	d8f9      	bhi.n	8012720 <__lshift+0xc8>
 801272c:	e7ea      	b.n	8012704 <__lshift+0xac>
 801272e:	bf00      	nop
 8012730:	08017470 	.word	0x08017470
 8012734:	080174fc 	.word	0x080174fc

08012738 <__mcmp>:
 8012738:	b530      	push	{r4, r5, lr}
 801273a:	6902      	ldr	r2, [r0, #16]
 801273c:	690c      	ldr	r4, [r1, #16]
 801273e:	1b12      	subs	r2, r2, r4
 8012740:	d10e      	bne.n	8012760 <__mcmp+0x28>
 8012742:	f100 0314 	add.w	r3, r0, #20
 8012746:	3114      	adds	r1, #20
 8012748:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801274c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012750:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012754:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012758:	42a5      	cmp	r5, r4
 801275a:	d003      	beq.n	8012764 <__mcmp+0x2c>
 801275c:	d305      	bcc.n	801276a <__mcmp+0x32>
 801275e:	2201      	movs	r2, #1
 8012760:	4610      	mov	r0, r2
 8012762:	bd30      	pop	{r4, r5, pc}
 8012764:	4283      	cmp	r3, r0
 8012766:	d3f3      	bcc.n	8012750 <__mcmp+0x18>
 8012768:	e7fa      	b.n	8012760 <__mcmp+0x28>
 801276a:	f04f 32ff 	mov.w	r2, #4294967295
 801276e:	e7f7      	b.n	8012760 <__mcmp+0x28>

08012770 <__mdiff>:
 8012770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012774:	460c      	mov	r4, r1
 8012776:	4606      	mov	r6, r0
 8012778:	4611      	mov	r1, r2
 801277a:	4620      	mov	r0, r4
 801277c:	4690      	mov	r8, r2
 801277e:	f7ff ffdb 	bl	8012738 <__mcmp>
 8012782:	1e05      	subs	r5, r0, #0
 8012784:	d110      	bne.n	80127a8 <__mdiff+0x38>
 8012786:	4629      	mov	r1, r5
 8012788:	4630      	mov	r0, r6
 801278a:	f7ff fd09 	bl	80121a0 <_Balloc>
 801278e:	b930      	cbnz	r0, 801279e <__mdiff+0x2e>
 8012790:	4b3a      	ldr	r3, [pc, #232]	; (801287c <__mdiff+0x10c>)
 8012792:	4602      	mov	r2, r0
 8012794:	f240 2132 	movw	r1, #562	; 0x232
 8012798:	4839      	ldr	r0, [pc, #228]	; (8012880 <__mdiff+0x110>)
 801279a:	f000 fbbf 	bl	8012f1c <__assert_func>
 801279e:	2301      	movs	r3, #1
 80127a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80127a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a8:	bfa4      	itt	ge
 80127aa:	4643      	movge	r3, r8
 80127ac:	46a0      	movge	r8, r4
 80127ae:	4630      	mov	r0, r6
 80127b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80127b4:	bfa6      	itte	ge
 80127b6:	461c      	movge	r4, r3
 80127b8:	2500      	movge	r5, #0
 80127ba:	2501      	movlt	r5, #1
 80127bc:	f7ff fcf0 	bl	80121a0 <_Balloc>
 80127c0:	b920      	cbnz	r0, 80127cc <__mdiff+0x5c>
 80127c2:	4b2e      	ldr	r3, [pc, #184]	; (801287c <__mdiff+0x10c>)
 80127c4:	4602      	mov	r2, r0
 80127c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80127ca:	e7e5      	b.n	8012798 <__mdiff+0x28>
 80127cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80127d0:	6926      	ldr	r6, [r4, #16]
 80127d2:	60c5      	str	r5, [r0, #12]
 80127d4:	f104 0914 	add.w	r9, r4, #20
 80127d8:	f108 0514 	add.w	r5, r8, #20
 80127dc:	f100 0e14 	add.w	lr, r0, #20
 80127e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80127e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80127e8:	f108 0210 	add.w	r2, r8, #16
 80127ec:	46f2      	mov	sl, lr
 80127ee:	2100      	movs	r1, #0
 80127f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80127f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80127f8:	fa1f f883 	uxth.w	r8, r3
 80127fc:	fa11 f18b 	uxtah	r1, r1, fp
 8012800:	0c1b      	lsrs	r3, r3, #16
 8012802:	eba1 0808 	sub.w	r8, r1, r8
 8012806:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801280a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801280e:	fa1f f888 	uxth.w	r8, r8
 8012812:	1419      	asrs	r1, r3, #16
 8012814:	454e      	cmp	r6, r9
 8012816:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801281a:	f84a 3b04 	str.w	r3, [sl], #4
 801281e:	d8e7      	bhi.n	80127f0 <__mdiff+0x80>
 8012820:	1b33      	subs	r3, r6, r4
 8012822:	3b15      	subs	r3, #21
 8012824:	f023 0303 	bic.w	r3, r3, #3
 8012828:	3304      	adds	r3, #4
 801282a:	3415      	adds	r4, #21
 801282c:	42a6      	cmp	r6, r4
 801282e:	bf38      	it	cc
 8012830:	2304      	movcc	r3, #4
 8012832:	441d      	add	r5, r3
 8012834:	4473      	add	r3, lr
 8012836:	469e      	mov	lr, r3
 8012838:	462e      	mov	r6, r5
 801283a:	4566      	cmp	r6, ip
 801283c:	d30e      	bcc.n	801285c <__mdiff+0xec>
 801283e:	f10c 0203 	add.w	r2, ip, #3
 8012842:	1b52      	subs	r2, r2, r5
 8012844:	f022 0203 	bic.w	r2, r2, #3
 8012848:	3d03      	subs	r5, #3
 801284a:	45ac      	cmp	ip, r5
 801284c:	bf38      	it	cc
 801284e:	2200      	movcc	r2, #0
 8012850:	441a      	add	r2, r3
 8012852:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012856:	b17b      	cbz	r3, 8012878 <__mdiff+0x108>
 8012858:	6107      	str	r7, [r0, #16]
 801285a:	e7a3      	b.n	80127a4 <__mdiff+0x34>
 801285c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012860:	fa11 f288 	uxtah	r2, r1, r8
 8012864:	1414      	asrs	r4, r2, #16
 8012866:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801286a:	b292      	uxth	r2, r2
 801286c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012870:	f84e 2b04 	str.w	r2, [lr], #4
 8012874:	1421      	asrs	r1, r4, #16
 8012876:	e7e0      	b.n	801283a <__mdiff+0xca>
 8012878:	3f01      	subs	r7, #1
 801287a:	e7ea      	b.n	8012852 <__mdiff+0xe2>
 801287c:	08017470 	.word	0x08017470
 8012880:	080174fc 	.word	0x080174fc

08012884 <__ulp>:
 8012884:	b082      	sub	sp, #8
 8012886:	ed8d 0b00 	vstr	d0, [sp]
 801288a:	9b01      	ldr	r3, [sp, #4]
 801288c:	4912      	ldr	r1, [pc, #72]	; (80128d8 <__ulp+0x54>)
 801288e:	4019      	ands	r1, r3
 8012890:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012894:	2900      	cmp	r1, #0
 8012896:	dd05      	ble.n	80128a4 <__ulp+0x20>
 8012898:	2200      	movs	r2, #0
 801289a:	460b      	mov	r3, r1
 801289c:	ec43 2b10 	vmov	d0, r2, r3
 80128a0:	b002      	add	sp, #8
 80128a2:	4770      	bx	lr
 80128a4:	4249      	negs	r1, r1
 80128a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80128aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80128ae:	f04f 0200 	mov.w	r2, #0
 80128b2:	f04f 0300 	mov.w	r3, #0
 80128b6:	da04      	bge.n	80128c2 <__ulp+0x3e>
 80128b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80128bc:	fa41 f300 	asr.w	r3, r1, r0
 80128c0:	e7ec      	b.n	801289c <__ulp+0x18>
 80128c2:	f1a0 0114 	sub.w	r1, r0, #20
 80128c6:	291e      	cmp	r1, #30
 80128c8:	bfda      	itte	le
 80128ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80128ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80128d2:	2101      	movgt	r1, #1
 80128d4:	460a      	mov	r2, r1
 80128d6:	e7e1      	b.n	801289c <__ulp+0x18>
 80128d8:	7ff00000 	.word	0x7ff00000

080128dc <__b2d>:
 80128dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128de:	6905      	ldr	r5, [r0, #16]
 80128e0:	f100 0714 	add.w	r7, r0, #20
 80128e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80128e8:	1f2e      	subs	r6, r5, #4
 80128ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80128ee:	4620      	mov	r0, r4
 80128f0:	f7ff fd48 	bl	8012384 <__hi0bits>
 80128f4:	f1c0 0320 	rsb	r3, r0, #32
 80128f8:	280a      	cmp	r0, #10
 80128fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012978 <__b2d+0x9c>
 80128fe:	600b      	str	r3, [r1, #0]
 8012900:	dc14      	bgt.n	801292c <__b2d+0x50>
 8012902:	f1c0 0e0b 	rsb	lr, r0, #11
 8012906:	fa24 f10e 	lsr.w	r1, r4, lr
 801290a:	42b7      	cmp	r7, r6
 801290c:	ea41 030c 	orr.w	r3, r1, ip
 8012910:	bf34      	ite	cc
 8012912:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012916:	2100      	movcs	r1, #0
 8012918:	3015      	adds	r0, #21
 801291a:	fa04 f000 	lsl.w	r0, r4, r0
 801291e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012922:	ea40 0201 	orr.w	r2, r0, r1
 8012926:	ec43 2b10 	vmov	d0, r2, r3
 801292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801292c:	42b7      	cmp	r7, r6
 801292e:	bf3a      	itte	cc
 8012930:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012934:	f1a5 0608 	subcc.w	r6, r5, #8
 8012938:	2100      	movcs	r1, #0
 801293a:	380b      	subs	r0, #11
 801293c:	d017      	beq.n	801296e <__b2d+0x92>
 801293e:	f1c0 0c20 	rsb	ip, r0, #32
 8012942:	fa04 f500 	lsl.w	r5, r4, r0
 8012946:	42be      	cmp	r6, r7
 8012948:	fa21 f40c 	lsr.w	r4, r1, ip
 801294c:	ea45 0504 	orr.w	r5, r5, r4
 8012950:	bf8c      	ite	hi
 8012952:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012956:	2400      	movls	r4, #0
 8012958:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801295c:	fa01 f000 	lsl.w	r0, r1, r0
 8012960:	fa24 f40c 	lsr.w	r4, r4, ip
 8012964:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012968:	ea40 0204 	orr.w	r2, r0, r4
 801296c:	e7db      	b.n	8012926 <__b2d+0x4a>
 801296e:	ea44 030c 	orr.w	r3, r4, ip
 8012972:	460a      	mov	r2, r1
 8012974:	e7d7      	b.n	8012926 <__b2d+0x4a>
 8012976:	bf00      	nop
 8012978:	3ff00000 	.word	0x3ff00000

0801297c <__d2b>:
 801297c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012980:	4689      	mov	r9, r1
 8012982:	2101      	movs	r1, #1
 8012984:	ec57 6b10 	vmov	r6, r7, d0
 8012988:	4690      	mov	r8, r2
 801298a:	f7ff fc09 	bl	80121a0 <_Balloc>
 801298e:	4604      	mov	r4, r0
 8012990:	b930      	cbnz	r0, 80129a0 <__d2b+0x24>
 8012992:	4602      	mov	r2, r0
 8012994:	4b25      	ldr	r3, [pc, #148]	; (8012a2c <__d2b+0xb0>)
 8012996:	4826      	ldr	r0, [pc, #152]	; (8012a30 <__d2b+0xb4>)
 8012998:	f240 310a 	movw	r1, #778	; 0x30a
 801299c:	f000 fabe 	bl	8012f1c <__assert_func>
 80129a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80129a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80129a8:	bb35      	cbnz	r5, 80129f8 <__d2b+0x7c>
 80129aa:	2e00      	cmp	r6, #0
 80129ac:	9301      	str	r3, [sp, #4]
 80129ae:	d028      	beq.n	8012a02 <__d2b+0x86>
 80129b0:	4668      	mov	r0, sp
 80129b2:	9600      	str	r6, [sp, #0]
 80129b4:	f7ff fd06 	bl	80123c4 <__lo0bits>
 80129b8:	9900      	ldr	r1, [sp, #0]
 80129ba:	b300      	cbz	r0, 80129fe <__d2b+0x82>
 80129bc:	9a01      	ldr	r2, [sp, #4]
 80129be:	f1c0 0320 	rsb	r3, r0, #32
 80129c2:	fa02 f303 	lsl.w	r3, r2, r3
 80129c6:	430b      	orrs	r3, r1
 80129c8:	40c2      	lsrs	r2, r0
 80129ca:	6163      	str	r3, [r4, #20]
 80129cc:	9201      	str	r2, [sp, #4]
 80129ce:	9b01      	ldr	r3, [sp, #4]
 80129d0:	61a3      	str	r3, [r4, #24]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	bf14      	ite	ne
 80129d6:	2202      	movne	r2, #2
 80129d8:	2201      	moveq	r2, #1
 80129da:	6122      	str	r2, [r4, #16]
 80129dc:	b1d5      	cbz	r5, 8012a14 <__d2b+0x98>
 80129de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80129e2:	4405      	add	r5, r0
 80129e4:	f8c9 5000 	str.w	r5, [r9]
 80129e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80129ec:	f8c8 0000 	str.w	r0, [r8]
 80129f0:	4620      	mov	r0, r4
 80129f2:	b003      	add	sp, #12
 80129f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129fc:	e7d5      	b.n	80129aa <__d2b+0x2e>
 80129fe:	6161      	str	r1, [r4, #20]
 8012a00:	e7e5      	b.n	80129ce <__d2b+0x52>
 8012a02:	a801      	add	r0, sp, #4
 8012a04:	f7ff fcde 	bl	80123c4 <__lo0bits>
 8012a08:	9b01      	ldr	r3, [sp, #4]
 8012a0a:	6163      	str	r3, [r4, #20]
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	6122      	str	r2, [r4, #16]
 8012a10:	3020      	adds	r0, #32
 8012a12:	e7e3      	b.n	80129dc <__d2b+0x60>
 8012a14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a1c:	f8c9 0000 	str.w	r0, [r9]
 8012a20:	6918      	ldr	r0, [r3, #16]
 8012a22:	f7ff fcaf 	bl	8012384 <__hi0bits>
 8012a26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a2a:	e7df      	b.n	80129ec <__d2b+0x70>
 8012a2c:	08017470 	.word	0x08017470
 8012a30:	080174fc 	.word	0x080174fc

08012a34 <__ratio>:
 8012a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a38:	4688      	mov	r8, r1
 8012a3a:	4669      	mov	r1, sp
 8012a3c:	4681      	mov	r9, r0
 8012a3e:	f7ff ff4d 	bl	80128dc <__b2d>
 8012a42:	a901      	add	r1, sp, #4
 8012a44:	4640      	mov	r0, r8
 8012a46:	ec55 4b10 	vmov	r4, r5, d0
 8012a4a:	f7ff ff47 	bl	80128dc <__b2d>
 8012a4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012a56:	eba3 0c02 	sub.w	ip, r3, r2
 8012a5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a5e:	1a9b      	subs	r3, r3, r2
 8012a60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012a64:	ec51 0b10 	vmov	r0, r1, d0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	bfd6      	itet	le
 8012a6c:	460a      	movle	r2, r1
 8012a6e:	462a      	movgt	r2, r5
 8012a70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012a74:	468b      	mov	fp, r1
 8012a76:	462f      	mov	r7, r5
 8012a78:	bfd4      	ite	le
 8012a7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012a7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012a82:	4620      	mov	r0, r4
 8012a84:	ee10 2a10 	vmov	r2, s0
 8012a88:	465b      	mov	r3, fp
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	f7ed fee6 	bl	800085c <__aeabi_ddiv>
 8012a90:	ec41 0b10 	vmov	d0, r0, r1
 8012a94:	b003      	add	sp, #12
 8012a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012a9a <__copybits>:
 8012a9a:	3901      	subs	r1, #1
 8012a9c:	b570      	push	{r4, r5, r6, lr}
 8012a9e:	1149      	asrs	r1, r1, #5
 8012aa0:	6914      	ldr	r4, [r2, #16]
 8012aa2:	3101      	adds	r1, #1
 8012aa4:	f102 0314 	add.w	r3, r2, #20
 8012aa8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012aac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012ab0:	1f05      	subs	r5, r0, #4
 8012ab2:	42a3      	cmp	r3, r4
 8012ab4:	d30c      	bcc.n	8012ad0 <__copybits+0x36>
 8012ab6:	1aa3      	subs	r3, r4, r2
 8012ab8:	3b11      	subs	r3, #17
 8012aba:	f023 0303 	bic.w	r3, r3, #3
 8012abe:	3211      	adds	r2, #17
 8012ac0:	42a2      	cmp	r2, r4
 8012ac2:	bf88      	it	hi
 8012ac4:	2300      	movhi	r3, #0
 8012ac6:	4418      	add	r0, r3
 8012ac8:	2300      	movs	r3, #0
 8012aca:	4288      	cmp	r0, r1
 8012acc:	d305      	bcc.n	8012ada <__copybits+0x40>
 8012ace:	bd70      	pop	{r4, r5, r6, pc}
 8012ad0:	f853 6b04 	ldr.w	r6, [r3], #4
 8012ad4:	f845 6f04 	str.w	r6, [r5, #4]!
 8012ad8:	e7eb      	b.n	8012ab2 <__copybits+0x18>
 8012ada:	f840 3b04 	str.w	r3, [r0], #4
 8012ade:	e7f4      	b.n	8012aca <__copybits+0x30>

08012ae0 <__any_on>:
 8012ae0:	f100 0214 	add.w	r2, r0, #20
 8012ae4:	6900      	ldr	r0, [r0, #16]
 8012ae6:	114b      	asrs	r3, r1, #5
 8012ae8:	4298      	cmp	r0, r3
 8012aea:	b510      	push	{r4, lr}
 8012aec:	db11      	blt.n	8012b12 <__any_on+0x32>
 8012aee:	dd0a      	ble.n	8012b06 <__any_on+0x26>
 8012af0:	f011 011f 	ands.w	r1, r1, #31
 8012af4:	d007      	beq.n	8012b06 <__any_on+0x26>
 8012af6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012afa:	fa24 f001 	lsr.w	r0, r4, r1
 8012afe:	fa00 f101 	lsl.w	r1, r0, r1
 8012b02:	428c      	cmp	r4, r1
 8012b04:	d10b      	bne.n	8012b1e <__any_on+0x3e>
 8012b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d803      	bhi.n	8012b16 <__any_on+0x36>
 8012b0e:	2000      	movs	r0, #0
 8012b10:	bd10      	pop	{r4, pc}
 8012b12:	4603      	mov	r3, r0
 8012b14:	e7f7      	b.n	8012b06 <__any_on+0x26>
 8012b16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b1a:	2900      	cmp	r1, #0
 8012b1c:	d0f5      	beq.n	8012b0a <__any_on+0x2a>
 8012b1e:	2001      	movs	r0, #1
 8012b20:	e7f6      	b.n	8012b10 <__any_on+0x30>

08012b22 <_calloc_r>:
 8012b22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b24:	fba1 2402 	umull	r2, r4, r1, r2
 8012b28:	b94c      	cbnz	r4, 8012b3e <_calloc_r+0x1c>
 8012b2a:	4611      	mov	r1, r2
 8012b2c:	9201      	str	r2, [sp, #4]
 8012b2e:	f7fc f9ad 	bl	800ee8c <_malloc_r>
 8012b32:	9a01      	ldr	r2, [sp, #4]
 8012b34:	4605      	mov	r5, r0
 8012b36:	b930      	cbnz	r0, 8012b46 <_calloc_r+0x24>
 8012b38:	4628      	mov	r0, r5
 8012b3a:	b003      	add	sp, #12
 8012b3c:	bd30      	pop	{r4, r5, pc}
 8012b3e:	220c      	movs	r2, #12
 8012b40:	6002      	str	r2, [r0, #0]
 8012b42:	2500      	movs	r5, #0
 8012b44:	e7f8      	b.n	8012b38 <_calloc_r+0x16>
 8012b46:	4621      	mov	r1, r4
 8012b48:	f7fc f977 	bl	800ee3a <memset>
 8012b4c:	e7f4      	b.n	8012b38 <_calloc_r+0x16>
	...

08012b50 <_free_r>:
 8012b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b52:	2900      	cmp	r1, #0
 8012b54:	d044      	beq.n	8012be0 <_free_r+0x90>
 8012b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b5a:	9001      	str	r0, [sp, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8012b62:	bfb8      	it	lt
 8012b64:	18e4      	addlt	r4, r4, r3
 8012b66:	f7ff fb0f 	bl	8012188 <__malloc_lock>
 8012b6a:	4a1e      	ldr	r2, [pc, #120]	; (8012be4 <_free_r+0x94>)
 8012b6c:	9801      	ldr	r0, [sp, #4]
 8012b6e:	6813      	ldr	r3, [r2, #0]
 8012b70:	b933      	cbnz	r3, 8012b80 <_free_r+0x30>
 8012b72:	6063      	str	r3, [r4, #4]
 8012b74:	6014      	str	r4, [r2, #0]
 8012b76:	b003      	add	sp, #12
 8012b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b7c:	f7ff bb0a 	b.w	8012194 <__malloc_unlock>
 8012b80:	42a3      	cmp	r3, r4
 8012b82:	d908      	bls.n	8012b96 <_free_r+0x46>
 8012b84:	6825      	ldr	r5, [r4, #0]
 8012b86:	1961      	adds	r1, r4, r5
 8012b88:	428b      	cmp	r3, r1
 8012b8a:	bf01      	itttt	eq
 8012b8c:	6819      	ldreq	r1, [r3, #0]
 8012b8e:	685b      	ldreq	r3, [r3, #4]
 8012b90:	1949      	addeq	r1, r1, r5
 8012b92:	6021      	streq	r1, [r4, #0]
 8012b94:	e7ed      	b.n	8012b72 <_free_r+0x22>
 8012b96:	461a      	mov	r2, r3
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	b10b      	cbz	r3, 8012ba0 <_free_r+0x50>
 8012b9c:	42a3      	cmp	r3, r4
 8012b9e:	d9fa      	bls.n	8012b96 <_free_r+0x46>
 8012ba0:	6811      	ldr	r1, [r2, #0]
 8012ba2:	1855      	adds	r5, r2, r1
 8012ba4:	42a5      	cmp	r5, r4
 8012ba6:	d10b      	bne.n	8012bc0 <_free_r+0x70>
 8012ba8:	6824      	ldr	r4, [r4, #0]
 8012baa:	4421      	add	r1, r4
 8012bac:	1854      	adds	r4, r2, r1
 8012bae:	42a3      	cmp	r3, r4
 8012bb0:	6011      	str	r1, [r2, #0]
 8012bb2:	d1e0      	bne.n	8012b76 <_free_r+0x26>
 8012bb4:	681c      	ldr	r4, [r3, #0]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	6053      	str	r3, [r2, #4]
 8012bba:	4421      	add	r1, r4
 8012bbc:	6011      	str	r1, [r2, #0]
 8012bbe:	e7da      	b.n	8012b76 <_free_r+0x26>
 8012bc0:	d902      	bls.n	8012bc8 <_free_r+0x78>
 8012bc2:	230c      	movs	r3, #12
 8012bc4:	6003      	str	r3, [r0, #0]
 8012bc6:	e7d6      	b.n	8012b76 <_free_r+0x26>
 8012bc8:	6825      	ldr	r5, [r4, #0]
 8012bca:	1961      	adds	r1, r4, r5
 8012bcc:	428b      	cmp	r3, r1
 8012bce:	bf04      	itt	eq
 8012bd0:	6819      	ldreq	r1, [r3, #0]
 8012bd2:	685b      	ldreq	r3, [r3, #4]
 8012bd4:	6063      	str	r3, [r4, #4]
 8012bd6:	bf04      	itt	eq
 8012bd8:	1949      	addeq	r1, r1, r5
 8012bda:	6021      	streq	r1, [r4, #0]
 8012bdc:	6054      	str	r4, [r2, #4]
 8012bde:	e7ca      	b.n	8012b76 <_free_r+0x26>
 8012be0:	b003      	add	sp, #12
 8012be2:	bd30      	pop	{r4, r5, pc}
 8012be4:	20006c74 	.word	0x20006c74

08012be8 <__ssputs_r>:
 8012be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bec:	688e      	ldr	r6, [r1, #8]
 8012bee:	429e      	cmp	r6, r3
 8012bf0:	4682      	mov	sl, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	4690      	mov	r8, r2
 8012bf6:	461f      	mov	r7, r3
 8012bf8:	d838      	bhi.n	8012c6c <__ssputs_r+0x84>
 8012bfa:	898a      	ldrh	r2, [r1, #12]
 8012bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012c00:	d032      	beq.n	8012c68 <__ssputs_r+0x80>
 8012c02:	6825      	ldr	r5, [r4, #0]
 8012c04:	6909      	ldr	r1, [r1, #16]
 8012c06:	eba5 0901 	sub.w	r9, r5, r1
 8012c0a:	6965      	ldr	r5, [r4, #20]
 8012c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c14:	3301      	adds	r3, #1
 8012c16:	444b      	add	r3, r9
 8012c18:	106d      	asrs	r5, r5, #1
 8012c1a:	429d      	cmp	r5, r3
 8012c1c:	bf38      	it	cc
 8012c1e:	461d      	movcc	r5, r3
 8012c20:	0553      	lsls	r3, r2, #21
 8012c22:	d531      	bpl.n	8012c88 <__ssputs_r+0xa0>
 8012c24:	4629      	mov	r1, r5
 8012c26:	f7fc f931 	bl	800ee8c <_malloc_r>
 8012c2a:	4606      	mov	r6, r0
 8012c2c:	b950      	cbnz	r0, 8012c44 <__ssputs_r+0x5c>
 8012c2e:	230c      	movs	r3, #12
 8012c30:	f8ca 3000 	str.w	r3, [sl]
 8012c34:	89a3      	ldrh	r3, [r4, #12]
 8012c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c3a:	81a3      	strh	r3, [r4, #12]
 8012c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c44:	6921      	ldr	r1, [r4, #16]
 8012c46:	464a      	mov	r2, r9
 8012c48:	f7fc f8e9 	bl	800ee1e <memcpy>
 8012c4c:	89a3      	ldrh	r3, [r4, #12]
 8012c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c56:	81a3      	strh	r3, [r4, #12]
 8012c58:	6126      	str	r6, [r4, #16]
 8012c5a:	6165      	str	r5, [r4, #20]
 8012c5c:	444e      	add	r6, r9
 8012c5e:	eba5 0509 	sub.w	r5, r5, r9
 8012c62:	6026      	str	r6, [r4, #0]
 8012c64:	60a5      	str	r5, [r4, #8]
 8012c66:	463e      	mov	r6, r7
 8012c68:	42be      	cmp	r6, r7
 8012c6a:	d900      	bls.n	8012c6e <__ssputs_r+0x86>
 8012c6c:	463e      	mov	r6, r7
 8012c6e:	6820      	ldr	r0, [r4, #0]
 8012c70:	4632      	mov	r2, r6
 8012c72:	4641      	mov	r1, r8
 8012c74:	f000 f982 	bl	8012f7c <memmove>
 8012c78:	68a3      	ldr	r3, [r4, #8]
 8012c7a:	1b9b      	subs	r3, r3, r6
 8012c7c:	60a3      	str	r3, [r4, #8]
 8012c7e:	6823      	ldr	r3, [r4, #0]
 8012c80:	4433      	add	r3, r6
 8012c82:	6023      	str	r3, [r4, #0]
 8012c84:	2000      	movs	r0, #0
 8012c86:	e7db      	b.n	8012c40 <__ssputs_r+0x58>
 8012c88:	462a      	mov	r2, r5
 8012c8a:	f000 f991 	bl	8012fb0 <_realloc_r>
 8012c8e:	4606      	mov	r6, r0
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d1e1      	bne.n	8012c58 <__ssputs_r+0x70>
 8012c94:	6921      	ldr	r1, [r4, #16]
 8012c96:	4650      	mov	r0, sl
 8012c98:	f7ff ff5a 	bl	8012b50 <_free_r>
 8012c9c:	e7c7      	b.n	8012c2e <__ssputs_r+0x46>
	...

08012ca0 <_svfiprintf_r>:
 8012ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca4:	4698      	mov	r8, r3
 8012ca6:	898b      	ldrh	r3, [r1, #12]
 8012ca8:	061b      	lsls	r3, r3, #24
 8012caa:	b09d      	sub	sp, #116	; 0x74
 8012cac:	4607      	mov	r7, r0
 8012cae:	460d      	mov	r5, r1
 8012cb0:	4614      	mov	r4, r2
 8012cb2:	d50e      	bpl.n	8012cd2 <_svfiprintf_r+0x32>
 8012cb4:	690b      	ldr	r3, [r1, #16]
 8012cb6:	b963      	cbnz	r3, 8012cd2 <_svfiprintf_r+0x32>
 8012cb8:	2140      	movs	r1, #64	; 0x40
 8012cba:	f7fc f8e7 	bl	800ee8c <_malloc_r>
 8012cbe:	6028      	str	r0, [r5, #0]
 8012cc0:	6128      	str	r0, [r5, #16]
 8012cc2:	b920      	cbnz	r0, 8012cce <_svfiprintf_r+0x2e>
 8012cc4:	230c      	movs	r3, #12
 8012cc6:	603b      	str	r3, [r7, #0]
 8012cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ccc:	e0d1      	b.n	8012e72 <_svfiprintf_r+0x1d2>
 8012cce:	2340      	movs	r3, #64	; 0x40
 8012cd0:	616b      	str	r3, [r5, #20]
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8012cd6:	2320      	movs	r3, #32
 8012cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ce0:	2330      	movs	r3, #48	; 0x30
 8012ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e8c <_svfiprintf_r+0x1ec>
 8012ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cea:	f04f 0901 	mov.w	r9, #1
 8012cee:	4623      	mov	r3, r4
 8012cf0:	469a      	mov	sl, r3
 8012cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cf6:	b10a      	cbz	r2, 8012cfc <_svfiprintf_r+0x5c>
 8012cf8:	2a25      	cmp	r2, #37	; 0x25
 8012cfa:	d1f9      	bne.n	8012cf0 <_svfiprintf_r+0x50>
 8012cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8012d00:	d00b      	beq.n	8012d1a <_svfiprintf_r+0x7a>
 8012d02:	465b      	mov	r3, fp
 8012d04:	4622      	mov	r2, r4
 8012d06:	4629      	mov	r1, r5
 8012d08:	4638      	mov	r0, r7
 8012d0a:	f7ff ff6d 	bl	8012be8 <__ssputs_r>
 8012d0e:	3001      	adds	r0, #1
 8012d10:	f000 80aa 	beq.w	8012e68 <_svfiprintf_r+0x1c8>
 8012d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d16:	445a      	add	r2, fp
 8012d18:	9209      	str	r2, [sp, #36]	; 0x24
 8012d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 80a2 	beq.w	8012e68 <_svfiprintf_r+0x1c8>
 8012d24:	2300      	movs	r3, #0
 8012d26:	f04f 32ff 	mov.w	r2, #4294967295
 8012d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d2e:	f10a 0a01 	add.w	sl, sl, #1
 8012d32:	9304      	str	r3, [sp, #16]
 8012d34:	9307      	str	r3, [sp, #28]
 8012d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8012d3c:	4654      	mov	r4, sl
 8012d3e:	2205      	movs	r2, #5
 8012d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d44:	4851      	ldr	r0, [pc, #324]	; (8012e8c <_svfiprintf_r+0x1ec>)
 8012d46:	f7ed fa53 	bl	80001f0 <memchr>
 8012d4a:	9a04      	ldr	r2, [sp, #16]
 8012d4c:	b9d8      	cbnz	r0, 8012d86 <_svfiprintf_r+0xe6>
 8012d4e:	06d0      	lsls	r0, r2, #27
 8012d50:	bf44      	itt	mi
 8012d52:	2320      	movmi	r3, #32
 8012d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d58:	0711      	lsls	r1, r2, #28
 8012d5a:	bf44      	itt	mi
 8012d5c:	232b      	movmi	r3, #43	; 0x2b
 8012d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d62:	f89a 3000 	ldrb.w	r3, [sl]
 8012d66:	2b2a      	cmp	r3, #42	; 0x2a
 8012d68:	d015      	beq.n	8012d96 <_svfiprintf_r+0xf6>
 8012d6a:	9a07      	ldr	r2, [sp, #28]
 8012d6c:	4654      	mov	r4, sl
 8012d6e:	2000      	movs	r0, #0
 8012d70:	f04f 0c0a 	mov.w	ip, #10
 8012d74:	4621      	mov	r1, r4
 8012d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d7a:	3b30      	subs	r3, #48	; 0x30
 8012d7c:	2b09      	cmp	r3, #9
 8012d7e:	d94e      	bls.n	8012e1e <_svfiprintf_r+0x17e>
 8012d80:	b1b0      	cbz	r0, 8012db0 <_svfiprintf_r+0x110>
 8012d82:	9207      	str	r2, [sp, #28]
 8012d84:	e014      	b.n	8012db0 <_svfiprintf_r+0x110>
 8012d86:	eba0 0308 	sub.w	r3, r0, r8
 8012d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d8e:	4313      	orrs	r3, r2
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	46a2      	mov	sl, r4
 8012d94:	e7d2      	b.n	8012d3c <_svfiprintf_r+0x9c>
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	1d19      	adds	r1, r3, #4
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	9103      	str	r1, [sp, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	bfbb      	ittet	lt
 8012da2:	425b      	neglt	r3, r3
 8012da4:	f042 0202 	orrlt.w	r2, r2, #2
 8012da8:	9307      	strge	r3, [sp, #28]
 8012daa:	9307      	strlt	r3, [sp, #28]
 8012dac:	bfb8      	it	lt
 8012dae:	9204      	strlt	r2, [sp, #16]
 8012db0:	7823      	ldrb	r3, [r4, #0]
 8012db2:	2b2e      	cmp	r3, #46	; 0x2e
 8012db4:	d10c      	bne.n	8012dd0 <_svfiprintf_r+0x130>
 8012db6:	7863      	ldrb	r3, [r4, #1]
 8012db8:	2b2a      	cmp	r3, #42	; 0x2a
 8012dba:	d135      	bne.n	8012e28 <_svfiprintf_r+0x188>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	1d1a      	adds	r2, r3, #4
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	9203      	str	r2, [sp, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	bfb8      	it	lt
 8012dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012dcc:	3402      	adds	r4, #2
 8012dce:	9305      	str	r3, [sp, #20]
 8012dd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e9c <_svfiprintf_r+0x1fc>
 8012dd4:	7821      	ldrb	r1, [r4, #0]
 8012dd6:	2203      	movs	r2, #3
 8012dd8:	4650      	mov	r0, sl
 8012dda:	f7ed fa09 	bl	80001f0 <memchr>
 8012dde:	b140      	cbz	r0, 8012df2 <_svfiprintf_r+0x152>
 8012de0:	2340      	movs	r3, #64	; 0x40
 8012de2:	eba0 000a 	sub.w	r0, r0, sl
 8012de6:	fa03 f000 	lsl.w	r0, r3, r0
 8012dea:	9b04      	ldr	r3, [sp, #16]
 8012dec:	4303      	orrs	r3, r0
 8012dee:	3401      	adds	r4, #1
 8012df0:	9304      	str	r3, [sp, #16]
 8012df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012df6:	4826      	ldr	r0, [pc, #152]	; (8012e90 <_svfiprintf_r+0x1f0>)
 8012df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dfc:	2206      	movs	r2, #6
 8012dfe:	f7ed f9f7 	bl	80001f0 <memchr>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d038      	beq.n	8012e78 <_svfiprintf_r+0x1d8>
 8012e06:	4b23      	ldr	r3, [pc, #140]	; (8012e94 <_svfiprintf_r+0x1f4>)
 8012e08:	bb1b      	cbnz	r3, 8012e52 <_svfiprintf_r+0x1b2>
 8012e0a:	9b03      	ldr	r3, [sp, #12]
 8012e0c:	3307      	adds	r3, #7
 8012e0e:	f023 0307 	bic.w	r3, r3, #7
 8012e12:	3308      	adds	r3, #8
 8012e14:	9303      	str	r3, [sp, #12]
 8012e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e18:	4433      	add	r3, r6
 8012e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8012e1c:	e767      	b.n	8012cee <_svfiprintf_r+0x4e>
 8012e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e22:	460c      	mov	r4, r1
 8012e24:	2001      	movs	r0, #1
 8012e26:	e7a5      	b.n	8012d74 <_svfiprintf_r+0xd4>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	3401      	adds	r4, #1
 8012e2c:	9305      	str	r3, [sp, #20]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	f04f 0c0a 	mov.w	ip, #10
 8012e34:	4620      	mov	r0, r4
 8012e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e3a:	3a30      	subs	r2, #48	; 0x30
 8012e3c:	2a09      	cmp	r2, #9
 8012e3e:	d903      	bls.n	8012e48 <_svfiprintf_r+0x1a8>
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d0c5      	beq.n	8012dd0 <_svfiprintf_r+0x130>
 8012e44:	9105      	str	r1, [sp, #20]
 8012e46:	e7c3      	b.n	8012dd0 <_svfiprintf_r+0x130>
 8012e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e7f0      	b.n	8012e34 <_svfiprintf_r+0x194>
 8012e52:	ab03      	add	r3, sp, #12
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	462a      	mov	r2, r5
 8012e58:	4b0f      	ldr	r3, [pc, #60]	; (8012e98 <_svfiprintf_r+0x1f8>)
 8012e5a:	a904      	add	r1, sp, #16
 8012e5c:	4638      	mov	r0, r7
 8012e5e:	f7fc f929 	bl	800f0b4 <_printf_float>
 8012e62:	1c42      	adds	r2, r0, #1
 8012e64:	4606      	mov	r6, r0
 8012e66:	d1d6      	bne.n	8012e16 <_svfiprintf_r+0x176>
 8012e68:	89ab      	ldrh	r3, [r5, #12]
 8012e6a:	065b      	lsls	r3, r3, #25
 8012e6c:	f53f af2c 	bmi.w	8012cc8 <_svfiprintf_r+0x28>
 8012e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e72:	b01d      	add	sp, #116	; 0x74
 8012e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e78:	ab03      	add	r3, sp, #12
 8012e7a:	9300      	str	r3, [sp, #0]
 8012e7c:	462a      	mov	r2, r5
 8012e7e:	4b06      	ldr	r3, [pc, #24]	; (8012e98 <_svfiprintf_r+0x1f8>)
 8012e80:	a904      	add	r1, sp, #16
 8012e82:	4638      	mov	r0, r7
 8012e84:	f7fc fbba 	bl	800f5fc <_printf_i>
 8012e88:	e7eb      	b.n	8012e62 <_svfiprintf_r+0x1c2>
 8012e8a:	bf00      	nop
 8012e8c:	08017654 	.word	0x08017654
 8012e90:	0801765e 	.word	0x0801765e
 8012e94:	0800f0b5 	.word	0x0800f0b5
 8012e98:	08012be9 	.word	0x08012be9
 8012e9c:	0801765a 	.word	0x0801765a

08012ea0 <_read_r>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	4d07      	ldr	r5, [pc, #28]	; (8012ec0 <_read_r+0x20>)
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	4608      	mov	r0, r1
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	2200      	movs	r2, #0
 8012eac:	602a      	str	r2, [r5, #0]
 8012eae:	461a      	mov	r2, r3
 8012eb0:	f000 fbd0 	bl	8013654 <_read>
 8012eb4:	1c43      	adds	r3, r0, #1
 8012eb6:	d102      	bne.n	8012ebe <_read_r+0x1e>
 8012eb8:	682b      	ldr	r3, [r5, #0]
 8012eba:	b103      	cbz	r3, 8012ebe <_read_r+0x1e>
 8012ebc:	6023      	str	r3, [r4, #0]
 8012ebe:	bd38      	pop	{r3, r4, r5, pc}
 8012ec0:	20006c7c 	.word	0x20006c7c
 8012ec4:	00000000 	.word	0x00000000

08012ec8 <nan>:
 8012ec8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ed0 <nan+0x8>
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop
 8012ed0:	00000000 	.word	0x00000000
 8012ed4:	7ff80000 	.word	0x7ff80000

08012ed8 <strncmp>:
 8012ed8:	b510      	push	{r4, lr}
 8012eda:	b17a      	cbz	r2, 8012efc <strncmp+0x24>
 8012edc:	4603      	mov	r3, r0
 8012ede:	3901      	subs	r1, #1
 8012ee0:	1884      	adds	r4, r0, r2
 8012ee2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012ee6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012eea:	4290      	cmp	r0, r2
 8012eec:	d101      	bne.n	8012ef2 <strncmp+0x1a>
 8012eee:	42a3      	cmp	r3, r4
 8012ef0:	d101      	bne.n	8012ef6 <strncmp+0x1e>
 8012ef2:	1a80      	subs	r0, r0, r2
 8012ef4:	bd10      	pop	{r4, pc}
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d1f3      	bne.n	8012ee2 <strncmp+0xa>
 8012efa:	e7fa      	b.n	8012ef2 <strncmp+0x1a>
 8012efc:	4610      	mov	r0, r2
 8012efe:	e7f9      	b.n	8012ef4 <strncmp+0x1c>

08012f00 <__ascii_wctomb>:
 8012f00:	b149      	cbz	r1, 8012f16 <__ascii_wctomb+0x16>
 8012f02:	2aff      	cmp	r2, #255	; 0xff
 8012f04:	bf85      	ittet	hi
 8012f06:	238a      	movhi	r3, #138	; 0x8a
 8012f08:	6003      	strhi	r3, [r0, #0]
 8012f0a:	700a      	strbls	r2, [r1, #0]
 8012f0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012f10:	bf98      	it	ls
 8012f12:	2001      	movls	r0, #1
 8012f14:	4770      	bx	lr
 8012f16:	4608      	mov	r0, r1
 8012f18:	4770      	bx	lr
	...

08012f1c <__assert_func>:
 8012f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f1e:	4614      	mov	r4, r2
 8012f20:	461a      	mov	r2, r3
 8012f22:	4b09      	ldr	r3, [pc, #36]	; (8012f48 <__assert_func+0x2c>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4605      	mov	r5, r0
 8012f28:	68d8      	ldr	r0, [r3, #12]
 8012f2a:	b14c      	cbz	r4, 8012f40 <__assert_func+0x24>
 8012f2c:	4b07      	ldr	r3, [pc, #28]	; (8012f4c <__assert_func+0x30>)
 8012f2e:	9100      	str	r1, [sp, #0]
 8012f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f34:	4906      	ldr	r1, [pc, #24]	; (8012f50 <__assert_func+0x34>)
 8012f36:	462b      	mov	r3, r5
 8012f38:	f000 f80e 	bl	8012f58 <fiprintf>
 8012f3c:	f000 fa80 	bl	8013440 <abort>
 8012f40:	4b04      	ldr	r3, [pc, #16]	; (8012f54 <__assert_func+0x38>)
 8012f42:	461c      	mov	r4, r3
 8012f44:	e7f3      	b.n	8012f2e <__assert_func+0x12>
 8012f46:	bf00      	nop
 8012f48:	20000110 	.word	0x20000110
 8012f4c:	08017665 	.word	0x08017665
 8012f50:	08017672 	.word	0x08017672
 8012f54:	080176a0 	.word	0x080176a0

08012f58 <fiprintf>:
 8012f58:	b40e      	push	{r1, r2, r3}
 8012f5a:	b503      	push	{r0, r1, lr}
 8012f5c:	4601      	mov	r1, r0
 8012f5e:	ab03      	add	r3, sp, #12
 8012f60:	4805      	ldr	r0, [pc, #20]	; (8012f78 <fiprintf+0x20>)
 8012f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f66:	6800      	ldr	r0, [r0, #0]
 8012f68:	9301      	str	r3, [sp, #4]
 8012f6a:	f000 f879 	bl	8013060 <_vfiprintf_r>
 8012f6e:	b002      	add	sp, #8
 8012f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f74:	b003      	add	sp, #12
 8012f76:	4770      	bx	lr
 8012f78:	20000110 	.word	0x20000110

08012f7c <memmove>:
 8012f7c:	4288      	cmp	r0, r1
 8012f7e:	b510      	push	{r4, lr}
 8012f80:	eb01 0402 	add.w	r4, r1, r2
 8012f84:	d902      	bls.n	8012f8c <memmove+0x10>
 8012f86:	4284      	cmp	r4, r0
 8012f88:	4623      	mov	r3, r4
 8012f8a:	d807      	bhi.n	8012f9c <memmove+0x20>
 8012f8c:	1e43      	subs	r3, r0, #1
 8012f8e:	42a1      	cmp	r1, r4
 8012f90:	d008      	beq.n	8012fa4 <memmove+0x28>
 8012f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f9a:	e7f8      	b.n	8012f8e <memmove+0x12>
 8012f9c:	4402      	add	r2, r0
 8012f9e:	4601      	mov	r1, r0
 8012fa0:	428a      	cmp	r2, r1
 8012fa2:	d100      	bne.n	8012fa6 <memmove+0x2a>
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012fae:	e7f7      	b.n	8012fa0 <memmove+0x24>

08012fb0 <_realloc_r>:
 8012fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	4614      	mov	r4, r2
 8012fb8:	460e      	mov	r6, r1
 8012fba:	b921      	cbnz	r1, 8012fc6 <_realloc_r+0x16>
 8012fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	f7fb bf63 	b.w	800ee8c <_malloc_r>
 8012fc6:	b92a      	cbnz	r2, 8012fd4 <_realloc_r+0x24>
 8012fc8:	f7ff fdc2 	bl	8012b50 <_free_r>
 8012fcc:	4625      	mov	r5, r4
 8012fce:	4628      	mov	r0, r5
 8012fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd4:	f000 faa0 	bl	8013518 <_malloc_usable_size_r>
 8012fd8:	4284      	cmp	r4, r0
 8012fda:	4607      	mov	r7, r0
 8012fdc:	d802      	bhi.n	8012fe4 <_realloc_r+0x34>
 8012fde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012fe2:	d812      	bhi.n	801300a <_realloc_r+0x5a>
 8012fe4:	4621      	mov	r1, r4
 8012fe6:	4640      	mov	r0, r8
 8012fe8:	f7fb ff50 	bl	800ee8c <_malloc_r>
 8012fec:	4605      	mov	r5, r0
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d0ed      	beq.n	8012fce <_realloc_r+0x1e>
 8012ff2:	42bc      	cmp	r4, r7
 8012ff4:	4622      	mov	r2, r4
 8012ff6:	4631      	mov	r1, r6
 8012ff8:	bf28      	it	cs
 8012ffa:	463a      	movcs	r2, r7
 8012ffc:	f7fb ff0f 	bl	800ee1e <memcpy>
 8013000:	4631      	mov	r1, r6
 8013002:	4640      	mov	r0, r8
 8013004:	f7ff fda4 	bl	8012b50 <_free_r>
 8013008:	e7e1      	b.n	8012fce <_realloc_r+0x1e>
 801300a:	4635      	mov	r5, r6
 801300c:	e7df      	b.n	8012fce <_realloc_r+0x1e>

0801300e <__sfputc_r>:
 801300e:	6893      	ldr	r3, [r2, #8]
 8013010:	3b01      	subs	r3, #1
 8013012:	2b00      	cmp	r3, #0
 8013014:	b410      	push	{r4}
 8013016:	6093      	str	r3, [r2, #8]
 8013018:	da08      	bge.n	801302c <__sfputc_r+0x1e>
 801301a:	6994      	ldr	r4, [r2, #24]
 801301c:	42a3      	cmp	r3, r4
 801301e:	db01      	blt.n	8013024 <__sfputc_r+0x16>
 8013020:	290a      	cmp	r1, #10
 8013022:	d103      	bne.n	801302c <__sfputc_r+0x1e>
 8013024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013028:	f000 b94a 	b.w	80132c0 <__swbuf_r>
 801302c:	6813      	ldr	r3, [r2, #0]
 801302e:	1c58      	adds	r0, r3, #1
 8013030:	6010      	str	r0, [r2, #0]
 8013032:	7019      	strb	r1, [r3, #0]
 8013034:	4608      	mov	r0, r1
 8013036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801303a:	4770      	bx	lr

0801303c <__sfputs_r>:
 801303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303e:	4606      	mov	r6, r0
 8013040:	460f      	mov	r7, r1
 8013042:	4614      	mov	r4, r2
 8013044:	18d5      	adds	r5, r2, r3
 8013046:	42ac      	cmp	r4, r5
 8013048:	d101      	bne.n	801304e <__sfputs_r+0x12>
 801304a:	2000      	movs	r0, #0
 801304c:	e007      	b.n	801305e <__sfputs_r+0x22>
 801304e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013052:	463a      	mov	r2, r7
 8013054:	4630      	mov	r0, r6
 8013056:	f7ff ffda 	bl	801300e <__sfputc_r>
 801305a:	1c43      	adds	r3, r0, #1
 801305c:	d1f3      	bne.n	8013046 <__sfputs_r+0xa>
 801305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013060 <_vfiprintf_r>:
 8013060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013064:	460d      	mov	r5, r1
 8013066:	b09d      	sub	sp, #116	; 0x74
 8013068:	4614      	mov	r4, r2
 801306a:	4698      	mov	r8, r3
 801306c:	4606      	mov	r6, r0
 801306e:	b118      	cbz	r0, 8013078 <_vfiprintf_r+0x18>
 8013070:	6983      	ldr	r3, [r0, #24]
 8013072:	b90b      	cbnz	r3, 8013078 <_vfiprintf_r+0x18>
 8013074:	f7fb fe0e 	bl	800ec94 <__sinit>
 8013078:	4b89      	ldr	r3, [pc, #548]	; (80132a0 <_vfiprintf_r+0x240>)
 801307a:	429d      	cmp	r5, r3
 801307c:	d11b      	bne.n	80130b6 <_vfiprintf_r+0x56>
 801307e:	6875      	ldr	r5, [r6, #4]
 8013080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013082:	07d9      	lsls	r1, r3, #31
 8013084:	d405      	bmi.n	8013092 <_vfiprintf_r+0x32>
 8013086:	89ab      	ldrh	r3, [r5, #12]
 8013088:	059a      	lsls	r2, r3, #22
 801308a:	d402      	bmi.n	8013092 <_vfiprintf_r+0x32>
 801308c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801308e:	f7fb fec4 	bl	800ee1a <__retarget_lock_acquire_recursive>
 8013092:	89ab      	ldrh	r3, [r5, #12]
 8013094:	071b      	lsls	r3, r3, #28
 8013096:	d501      	bpl.n	801309c <_vfiprintf_r+0x3c>
 8013098:	692b      	ldr	r3, [r5, #16]
 801309a:	b9eb      	cbnz	r3, 80130d8 <_vfiprintf_r+0x78>
 801309c:	4629      	mov	r1, r5
 801309e:	4630      	mov	r0, r6
 80130a0:	f000 f960 	bl	8013364 <__swsetup_r>
 80130a4:	b1c0      	cbz	r0, 80130d8 <_vfiprintf_r+0x78>
 80130a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130a8:	07dc      	lsls	r4, r3, #31
 80130aa:	d50e      	bpl.n	80130ca <_vfiprintf_r+0x6a>
 80130ac:	f04f 30ff 	mov.w	r0, #4294967295
 80130b0:	b01d      	add	sp, #116	; 0x74
 80130b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b6:	4b7b      	ldr	r3, [pc, #492]	; (80132a4 <_vfiprintf_r+0x244>)
 80130b8:	429d      	cmp	r5, r3
 80130ba:	d101      	bne.n	80130c0 <_vfiprintf_r+0x60>
 80130bc:	68b5      	ldr	r5, [r6, #8]
 80130be:	e7df      	b.n	8013080 <_vfiprintf_r+0x20>
 80130c0:	4b79      	ldr	r3, [pc, #484]	; (80132a8 <_vfiprintf_r+0x248>)
 80130c2:	429d      	cmp	r5, r3
 80130c4:	bf08      	it	eq
 80130c6:	68f5      	ldreq	r5, [r6, #12]
 80130c8:	e7da      	b.n	8013080 <_vfiprintf_r+0x20>
 80130ca:	89ab      	ldrh	r3, [r5, #12]
 80130cc:	0598      	lsls	r0, r3, #22
 80130ce:	d4ed      	bmi.n	80130ac <_vfiprintf_r+0x4c>
 80130d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130d2:	f7fb fea3 	bl	800ee1c <__retarget_lock_release_recursive>
 80130d6:	e7e9      	b.n	80130ac <_vfiprintf_r+0x4c>
 80130d8:	2300      	movs	r3, #0
 80130da:	9309      	str	r3, [sp, #36]	; 0x24
 80130dc:	2320      	movs	r3, #32
 80130de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80130e6:	2330      	movs	r3, #48	; 0x30
 80130e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80132ac <_vfiprintf_r+0x24c>
 80130ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130f0:	f04f 0901 	mov.w	r9, #1
 80130f4:	4623      	mov	r3, r4
 80130f6:	469a      	mov	sl, r3
 80130f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130fc:	b10a      	cbz	r2, 8013102 <_vfiprintf_r+0xa2>
 80130fe:	2a25      	cmp	r2, #37	; 0x25
 8013100:	d1f9      	bne.n	80130f6 <_vfiprintf_r+0x96>
 8013102:	ebba 0b04 	subs.w	fp, sl, r4
 8013106:	d00b      	beq.n	8013120 <_vfiprintf_r+0xc0>
 8013108:	465b      	mov	r3, fp
 801310a:	4622      	mov	r2, r4
 801310c:	4629      	mov	r1, r5
 801310e:	4630      	mov	r0, r6
 8013110:	f7ff ff94 	bl	801303c <__sfputs_r>
 8013114:	3001      	adds	r0, #1
 8013116:	f000 80aa 	beq.w	801326e <_vfiprintf_r+0x20e>
 801311a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801311c:	445a      	add	r2, fp
 801311e:	9209      	str	r2, [sp, #36]	; 0x24
 8013120:	f89a 3000 	ldrb.w	r3, [sl]
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 80a2 	beq.w	801326e <_vfiprintf_r+0x20e>
 801312a:	2300      	movs	r3, #0
 801312c:	f04f 32ff 	mov.w	r2, #4294967295
 8013130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013134:	f10a 0a01 	add.w	sl, sl, #1
 8013138:	9304      	str	r3, [sp, #16]
 801313a:	9307      	str	r3, [sp, #28]
 801313c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013140:	931a      	str	r3, [sp, #104]	; 0x68
 8013142:	4654      	mov	r4, sl
 8013144:	2205      	movs	r2, #5
 8013146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801314a:	4858      	ldr	r0, [pc, #352]	; (80132ac <_vfiprintf_r+0x24c>)
 801314c:	f7ed f850 	bl	80001f0 <memchr>
 8013150:	9a04      	ldr	r2, [sp, #16]
 8013152:	b9d8      	cbnz	r0, 801318c <_vfiprintf_r+0x12c>
 8013154:	06d1      	lsls	r1, r2, #27
 8013156:	bf44      	itt	mi
 8013158:	2320      	movmi	r3, #32
 801315a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801315e:	0713      	lsls	r3, r2, #28
 8013160:	bf44      	itt	mi
 8013162:	232b      	movmi	r3, #43	; 0x2b
 8013164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013168:	f89a 3000 	ldrb.w	r3, [sl]
 801316c:	2b2a      	cmp	r3, #42	; 0x2a
 801316e:	d015      	beq.n	801319c <_vfiprintf_r+0x13c>
 8013170:	9a07      	ldr	r2, [sp, #28]
 8013172:	4654      	mov	r4, sl
 8013174:	2000      	movs	r0, #0
 8013176:	f04f 0c0a 	mov.w	ip, #10
 801317a:	4621      	mov	r1, r4
 801317c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013180:	3b30      	subs	r3, #48	; 0x30
 8013182:	2b09      	cmp	r3, #9
 8013184:	d94e      	bls.n	8013224 <_vfiprintf_r+0x1c4>
 8013186:	b1b0      	cbz	r0, 80131b6 <_vfiprintf_r+0x156>
 8013188:	9207      	str	r2, [sp, #28]
 801318a:	e014      	b.n	80131b6 <_vfiprintf_r+0x156>
 801318c:	eba0 0308 	sub.w	r3, r0, r8
 8013190:	fa09 f303 	lsl.w	r3, r9, r3
 8013194:	4313      	orrs	r3, r2
 8013196:	9304      	str	r3, [sp, #16]
 8013198:	46a2      	mov	sl, r4
 801319a:	e7d2      	b.n	8013142 <_vfiprintf_r+0xe2>
 801319c:	9b03      	ldr	r3, [sp, #12]
 801319e:	1d19      	adds	r1, r3, #4
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	9103      	str	r1, [sp, #12]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	bfbb      	ittet	lt
 80131a8:	425b      	neglt	r3, r3
 80131aa:	f042 0202 	orrlt.w	r2, r2, #2
 80131ae:	9307      	strge	r3, [sp, #28]
 80131b0:	9307      	strlt	r3, [sp, #28]
 80131b2:	bfb8      	it	lt
 80131b4:	9204      	strlt	r2, [sp, #16]
 80131b6:	7823      	ldrb	r3, [r4, #0]
 80131b8:	2b2e      	cmp	r3, #46	; 0x2e
 80131ba:	d10c      	bne.n	80131d6 <_vfiprintf_r+0x176>
 80131bc:	7863      	ldrb	r3, [r4, #1]
 80131be:	2b2a      	cmp	r3, #42	; 0x2a
 80131c0:	d135      	bne.n	801322e <_vfiprintf_r+0x1ce>
 80131c2:	9b03      	ldr	r3, [sp, #12]
 80131c4:	1d1a      	adds	r2, r3, #4
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	9203      	str	r2, [sp, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	bfb8      	it	lt
 80131ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80131d2:	3402      	adds	r4, #2
 80131d4:	9305      	str	r3, [sp, #20]
 80131d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80132bc <_vfiprintf_r+0x25c>
 80131da:	7821      	ldrb	r1, [r4, #0]
 80131dc:	2203      	movs	r2, #3
 80131de:	4650      	mov	r0, sl
 80131e0:	f7ed f806 	bl	80001f0 <memchr>
 80131e4:	b140      	cbz	r0, 80131f8 <_vfiprintf_r+0x198>
 80131e6:	2340      	movs	r3, #64	; 0x40
 80131e8:	eba0 000a 	sub.w	r0, r0, sl
 80131ec:	fa03 f000 	lsl.w	r0, r3, r0
 80131f0:	9b04      	ldr	r3, [sp, #16]
 80131f2:	4303      	orrs	r3, r0
 80131f4:	3401      	adds	r4, #1
 80131f6:	9304      	str	r3, [sp, #16]
 80131f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131fc:	482c      	ldr	r0, [pc, #176]	; (80132b0 <_vfiprintf_r+0x250>)
 80131fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013202:	2206      	movs	r2, #6
 8013204:	f7ec fff4 	bl	80001f0 <memchr>
 8013208:	2800      	cmp	r0, #0
 801320a:	d03f      	beq.n	801328c <_vfiprintf_r+0x22c>
 801320c:	4b29      	ldr	r3, [pc, #164]	; (80132b4 <_vfiprintf_r+0x254>)
 801320e:	bb1b      	cbnz	r3, 8013258 <_vfiprintf_r+0x1f8>
 8013210:	9b03      	ldr	r3, [sp, #12]
 8013212:	3307      	adds	r3, #7
 8013214:	f023 0307 	bic.w	r3, r3, #7
 8013218:	3308      	adds	r3, #8
 801321a:	9303      	str	r3, [sp, #12]
 801321c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801321e:	443b      	add	r3, r7
 8013220:	9309      	str	r3, [sp, #36]	; 0x24
 8013222:	e767      	b.n	80130f4 <_vfiprintf_r+0x94>
 8013224:	fb0c 3202 	mla	r2, ip, r2, r3
 8013228:	460c      	mov	r4, r1
 801322a:	2001      	movs	r0, #1
 801322c:	e7a5      	b.n	801317a <_vfiprintf_r+0x11a>
 801322e:	2300      	movs	r3, #0
 8013230:	3401      	adds	r4, #1
 8013232:	9305      	str	r3, [sp, #20]
 8013234:	4619      	mov	r1, r3
 8013236:	f04f 0c0a 	mov.w	ip, #10
 801323a:	4620      	mov	r0, r4
 801323c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013240:	3a30      	subs	r2, #48	; 0x30
 8013242:	2a09      	cmp	r2, #9
 8013244:	d903      	bls.n	801324e <_vfiprintf_r+0x1ee>
 8013246:	2b00      	cmp	r3, #0
 8013248:	d0c5      	beq.n	80131d6 <_vfiprintf_r+0x176>
 801324a:	9105      	str	r1, [sp, #20]
 801324c:	e7c3      	b.n	80131d6 <_vfiprintf_r+0x176>
 801324e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013252:	4604      	mov	r4, r0
 8013254:	2301      	movs	r3, #1
 8013256:	e7f0      	b.n	801323a <_vfiprintf_r+0x1da>
 8013258:	ab03      	add	r3, sp, #12
 801325a:	9300      	str	r3, [sp, #0]
 801325c:	462a      	mov	r2, r5
 801325e:	4b16      	ldr	r3, [pc, #88]	; (80132b8 <_vfiprintf_r+0x258>)
 8013260:	a904      	add	r1, sp, #16
 8013262:	4630      	mov	r0, r6
 8013264:	f7fb ff26 	bl	800f0b4 <_printf_float>
 8013268:	4607      	mov	r7, r0
 801326a:	1c78      	adds	r0, r7, #1
 801326c:	d1d6      	bne.n	801321c <_vfiprintf_r+0x1bc>
 801326e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013270:	07d9      	lsls	r1, r3, #31
 8013272:	d405      	bmi.n	8013280 <_vfiprintf_r+0x220>
 8013274:	89ab      	ldrh	r3, [r5, #12]
 8013276:	059a      	lsls	r2, r3, #22
 8013278:	d402      	bmi.n	8013280 <_vfiprintf_r+0x220>
 801327a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801327c:	f7fb fdce 	bl	800ee1c <__retarget_lock_release_recursive>
 8013280:	89ab      	ldrh	r3, [r5, #12]
 8013282:	065b      	lsls	r3, r3, #25
 8013284:	f53f af12 	bmi.w	80130ac <_vfiprintf_r+0x4c>
 8013288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801328a:	e711      	b.n	80130b0 <_vfiprintf_r+0x50>
 801328c:	ab03      	add	r3, sp, #12
 801328e:	9300      	str	r3, [sp, #0]
 8013290:	462a      	mov	r2, r5
 8013292:	4b09      	ldr	r3, [pc, #36]	; (80132b8 <_vfiprintf_r+0x258>)
 8013294:	a904      	add	r1, sp, #16
 8013296:	4630      	mov	r0, r6
 8013298:	f7fc f9b0 	bl	800f5fc <_printf_i>
 801329c:	e7e4      	b.n	8013268 <_vfiprintf_r+0x208>
 801329e:	bf00      	nop
 80132a0:	08017220 	.word	0x08017220
 80132a4:	08017240 	.word	0x08017240
 80132a8:	08017200 	.word	0x08017200
 80132ac:	08017654 	.word	0x08017654
 80132b0:	0801765e 	.word	0x0801765e
 80132b4:	0800f0b5 	.word	0x0800f0b5
 80132b8:	0801303d 	.word	0x0801303d
 80132bc:	0801765a 	.word	0x0801765a

080132c0 <__swbuf_r>:
 80132c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132c2:	460e      	mov	r6, r1
 80132c4:	4614      	mov	r4, r2
 80132c6:	4605      	mov	r5, r0
 80132c8:	b118      	cbz	r0, 80132d2 <__swbuf_r+0x12>
 80132ca:	6983      	ldr	r3, [r0, #24]
 80132cc:	b90b      	cbnz	r3, 80132d2 <__swbuf_r+0x12>
 80132ce:	f7fb fce1 	bl	800ec94 <__sinit>
 80132d2:	4b21      	ldr	r3, [pc, #132]	; (8013358 <__swbuf_r+0x98>)
 80132d4:	429c      	cmp	r4, r3
 80132d6:	d12b      	bne.n	8013330 <__swbuf_r+0x70>
 80132d8:	686c      	ldr	r4, [r5, #4]
 80132da:	69a3      	ldr	r3, [r4, #24]
 80132dc:	60a3      	str	r3, [r4, #8]
 80132de:	89a3      	ldrh	r3, [r4, #12]
 80132e0:	071a      	lsls	r2, r3, #28
 80132e2:	d52f      	bpl.n	8013344 <__swbuf_r+0x84>
 80132e4:	6923      	ldr	r3, [r4, #16]
 80132e6:	b36b      	cbz	r3, 8013344 <__swbuf_r+0x84>
 80132e8:	6923      	ldr	r3, [r4, #16]
 80132ea:	6820      	ldr	r0, [r4, #0]
 80132ec:	1ac0      	subs	r0, r0, r3
 80132ee:	6963      	ldr	r3, [r4, #20]
 80132f0:	b2f6      	uxtb	r6, r6
 80132f2:	4283      	cmp	r3, r0
 80132f4:	4637      	mov	r7, r6
 80132f6:	dc04      	bgt.n	8013302 <__swbuf_r+0x42>
 80132f8:	4621      	mov	r1, r4
 80132fa:	4628      	mov	r0, r5
 80132fc:	f7fe fb68 	bl	80119d0 <_fflush_r>
 8013300:	bb30      	cbnz	r0, 8013350 <__swbuf_r+0x90>
 8013302:	68a3      	ldr	r3, [r4, #8]
 8013304:	3b01      	subs	r3, #1
 8013306:	60a3      	str	r3, [r4, #8]
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	1c5a      	adds	r2, r3, #1
 801330c:	6022      	str	r2, [r4, #0]
 801330e:	701e      	strb	r6, [r3, #0]
 8013310:	6963      	ldr	r3, [r4, #20]
 8013312:	3001      	adds	r0, #1
 8013314:	4283      	cmp	r3, r0
 8013316:	d004      	beq.n	8013322 <__swbuf_r+0x62>
 8013318:	89a3      	ldrh	r3, [r4, #12]
 801331a:	07db      	lsls	r3, r3, #31
 801331c:	d506      	bpl.n	801332c <__swbuf_r+0x6c>
 801331e:	2e0a      	cmp	r6, #10
 8013320:	d104      	bne.n	801332c <__swbuf_r+0x6c>
 8013322:	4621      	mov	r1, r4
 8013324:	4628      	mov	r0, r5
 8013326:	f7fe fb53 	bl	80119d0 <_fflush_r>
 801332a:	b988      	cbnz	r0, 8013350 <__swbuf_r+0x90>
 801332c:	4638      	mov	r0, r7
 801332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013330:	4b0a      	ldr	r3, [pc, #40]	; (801335c <__swbuf_r+0x9c>)
 8013332:	429c      	cmp	r4, r3
 8013334:	d101      	bne.n	801333a <__swbuf_r+0x7a>
 8013336:	68ac      	ldr	r4, [r5, #8]
 8013338:	e7cf      	b.n	80132da <__swbuf_r+0x1a>
 801333a:	4b09      	ldr	r3, [pc, #36]	; (8013360 <__swbuf_r+0xa0>)
 801333c:	429c      	cmp	r4, r3
 801333e:	bf08      	it	eq
 8013340:	68ec      	ldreq	r4, [r5, #12]
 8013342:	e7ca      	b.n	80132da <__swbuf_r+0x1a>
 8013344:	4621      	mov	r1, r4
 8013346:	4628      	mov	r0, r5
 8013348:	f000 f80c 	bl	8013364 <__swsetup_r>
 801334c:	2800      	cmp	r0, #0
 801334e:	d0cb      	beq.n	80132e8 <__swbuf_r+0x28>
 8013350:	f04f 37ff 	mov.w	r7, #4294967295
 8013354:	e7ea      	b.n	801332c <__swbuf_r+0x6c>
 8013356:	bf00      	nop
 8013358:	08017220 	.word	0x08017220
 801335c:	08017240 	.word	0x08017240
 8013360:	08017200 	.word	0x08017200

08013364 <__swsetup_r>:
 8013364:	4b32      	ldr	r3, [pc, #200]	; (8013430 <__swsetup_r+0xcc>)
 8013366:	b570      	push	{r4, r5, r6, lr}
 8013368:	681d      	ldr	r5, [r3, #0]
 801336a:	4606      	mov	r6, r0
 801336c:	460c      	mov	r4, r1
 801336e:	b125      	cbz	r5, 801337a <__swsetup_r+0x16>
 8013370:	69ab      	ldr	r3, [r5, #24]
 8013372:	b913      	cbnz	r3, 801337a <__swsetup_r+0x16>
 8013374:	4628      	mov	r0, r5
 8013376:	f7fb fc8d 	bl	800ec94 <__sinit>
 801337a:	4b2e      	ldr	r3, [pc, #184]	; (8013434 <__swsetup_r+0xd0>)
 801337c:	429c      	cmp	r4, r3
 801337e:	d10f      	bne.n	80133a0 <__swsetup_r+0x3c>
 8013380:	686c      	ldr	r4, [r5, #4]
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013388:	0719      	lsls	r1, r3, #28
 801338a:	d42c      	bmi.n	80133e6 <__swsetup_r+0x82>
 801338c:	06dd      	lsls	r5, r3, #27
 801338e:	d411      	bmi.n	80133b4 <__swsetup_r+0x50>
 8013390:	2309      	movs	r3, #9
 8013392:	6033      	str	r3, [r6, #0]
 8013394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013398:	81a3      	strh	r3, [r4, #12]
 801339a:	f04f 30ff 	mov.w	r0, #4294967295
 801339e:	e03e      	b.n	801341e <__swsetup_r+0xba>
 80133a0:	4b25      	ldr	r3, [pc, #148]	; (8013438 <__swsetup_r+0xd4>)
 80133a2:	429c      	cmp	r4, r3
 80133a4:	d101      	bne.n	80133aa <__swsetup_r+0x46>
 80133a6:	68ac      	ldr	r4, [r5, #8]
 80133a8:	e7eb      	b.n	8013382 <__swsetup_r+0x1e>
 80133aa:	4b24      	ldr	r3, [pc, #144]	; (801343c <__swsetup_r+0xd8>)
 80133ac:	429c      	cmp	r4, r3
 80133ae:	bf08      	it	eq
 80133b0:	68ec      	ldreq	r4, [r5, #12]
 80133b2:	e7e6      	b.n	8013382 <__swsetup_r+0x1e>
 80133b4:	0758      	lsls	r0, r3, #29
 80133b6:	d512      	bpl.n	80133de <__swsetup_r+0x7a>
 80133b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133ba:	b141      	cbz	r1, 80133ce <__swsetup_r+0x6a>
 80133bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133c0:	4299      	cmp	r1, r3
 80133c2:	d002      	beq.n	80133ca <__swsetup_r+0x66>
 80133c4:	4630      	mov	r0, r6
 80133c6:	f7ff fbc3 	bl	8012b50 <_free_r>
 80133ca:	2300      	movs	r3, #0
 80133cc:	6363      	str	r3, [r4, #52]	; 0x34
 80133ce:	89a3      	ldrh	r3, [r4, #12]
 80133d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133d4:	81a3      	strh	r3, [r4, #12]
 80133d6:	2300      	movs	r3, #0
 80133d8:	6063      	str	r3, [r4, #4]
 80133da:	6923      	ldr	r3, [r4, #16]
 80133dc:	6023      	str	r3, [r4, #0]
 80133de:	89a3      	ldrh	r3, [r4, #12]
 80133e0:	f043 0308 	orr.w	r3, r3, #8
 80133e4:	81a3      	strh	r3, [r4, #12]
 80133e6:	6923      	ldr	r3, [r4, #16]
 80133e8:	b94b      	cbnz	r3, 80133fe <__swsetup_r+0x9a>
 80133ea:	89a3      	ldrh	r3, [r4, #12]
 80133ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133f4:	d003      	beq.n	80133fe <__swsetup_r+0x9a>
 80133f6:	4621      	mov	r1, r4
 80133f8:	4630      	mov	r0, r6
 80133fa:	f000 f84d 	bl	8013498 <__smakebuf_r>
 80133fe:	89a0      	ldrh	r0, [r4, #12]
 8013400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013404:	f010 0301 	ands.w	r3, r0, #1
 8013408:	d00a      	beq.n	8013420 <__swsetup_r+0xbc>
 801340a:	2300      	movs	r3, #0
 801340c:	60a3      	str	r3, [r4, #8]
 801340e:	6963      	ldr	r3, [r4, #20]
 8013410:	425b      	negs	r3, r3
 8013412:	61a3      	str	r3, [r4, #24]
 8013414:	6923      	ldr	r3, [r4, #16]
 8013416:	b943      	cbnz	r3, 801342a <__swsetup_r+0xc6>
 8013418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801341c:	d1ba      	bne.n	8013394 <__swsetup_r+0x30>
 801341e:	bd70      	pop	{r4, r5, r6, pc}
 8013420:	0781      	lsls	r1, r0, #30
 8013422:	bf58      	it	pl
 8013424:	6963      	ldrpl	r3, [r4, #20]
 8013426:	60a3      	str	r3, [r4, #8]
 8013428:	e7f4      	b.n	8013414 <__swsetup_r+0xb0>
 801342a:	2000      	movs	r0, #0
 801342c:	e7f7      	b.n	801341e <__swsetup_r+0xba>
 801342e:	bf00      	nop
 8013430:	20000110 	.word	0x20000110
 8013434:	08017220 	.word	0x08017220
 8013438:	08017240 	.word	0x08017240
 801343c:	08017200 	.word	0x08017200

08013440 <abort>:
 8013440:	b508      	push	{r3, lr}
 8013442:	2006      	movs	r0, #6
 8013444:	f000 f898 	bl	8013578 <raise>
 8013448:	2001      	movs	r0, #1
 801344a:	f000 f913 	bl	8013674 <_exit>

0801344e <__swhatbuf_r>:
 801344e:	b570      	push	{r4, r5, r6, lr}
 8013450:	460e      	mov	r6, r1
 8013452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013456:	2900      	cmp	r1, #0
 8013458:	b096      	sub	sp, #88	; 0x58
 801345a:	4614      	mov	r4, r2
 801345c:	461d      	mov	r5, r3
 801345e:	da08      	bge.n	8013472 <__swhatbuf_r+0x24>
 8013460:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013464:	2200      	movs	r2, #0
 8013466:	602a      	str	r2, [r5, #0]
 8013468:	061a      	lsls	r2, r3, #24
 801346a:	d410      	bmi.n	801348e <__swhatbuf_r+0x40>
 801346c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013470:	e00e      	b.n	8013490 <__swhatbuf_r+0x42>
 8013472:	466a      	mov	r2, sp
 8013474:	f000 f89c 	bl	80135b0 <_fstat_r>
 8013478:	2800      	cmp	r0, #0
 801347a:	dbf1      	blt.n	8013460 <__swhatbuf_r+0x12>
 801347c:	9a01      	ldr	r2, [sp, #4]
 801347e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013482:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013486:	425a      	negs	r2, r3
 8013488:	415a      	adcs	r2, r3
 801348a:	602a      	str	r2, [r5, #0]
 801348c:	e7ee      	b.n	801346c <__swhatbuf_r+0x1e>
 801348e:	2340      	movs	r3, #64	; 0x40
 8013490:	2000      	movs	r0, #0
 8013492:	6023      	str	r3, [r4, #0]
 8013494:	b016      	add	sp, #88	; 0x58
 8013496:	bd70      	pop	{r4, r5, r6, pc}

08013498 <__smakebuf_r>:
 8013498:	898b      	ldrh	r3, [r1, #12]
 801349a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801349c:	079d      	lsls	r5, r3, #30
 801349e:	4606      	mov	r6, r0
 80134a0:	460c      	mov	r4, r1
 80134a2:	d507      	bpl.n	80134b4 <__smakebuf_r+0x1c>
 80134a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134a8:	6023      	str	r3, [r4, #0]
 80134aa:	6123      	str	r3, [r4, #16]
 80134ac:	2301      	movs	r3, #1
 80134ae:	6163      	str	r3, [r4, #20]
 80134b0:	b002      	add	sp, #8
 80134b2:	bd70      	pop	{r4, r5, r6, pc}
 80134b4:	ab01      	add	r3, sp, #4
 80134b6:	466a      	mov	r2, sp
 80134b8:	f7ff ffc9 	bl	801344e <__swhatbuf_r>
 80134bc:	9900      	ldr	r1, [sp, #0]
 80134be:	4605      	mov	r5, r0
 80134c0:	4630      	mov	r0, r6
 80134c2:	f7fb fce3 	bl	800ee8c <_malloc_r>
 80134c6:	b948      	cbnz	r0, 80134dc <__smakebuf_r+0x44>
 80134c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134cc:	059a      	lsls	r2, r3, #22
 80134ce:	d4ef      	bmi.n	80134b0 <__smakebuf_r+0x18>
 80134d0:	f023 0303 	bic.w	r3, r3, #3
 80134d4:	f043 0302 	orr.w	r3, r3, #2
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	e7e3      	b.n	80134a4 <__smakebuf_r+0xc>
 80134dc:	4b0d      	ldr	r3, [pc, #52]	; (8013514 <__smakebuf_r+0x7c>)
 80134de:	62b3      	str	r3, [r6, #40]	; 0x28
 80134e0:	89a3      	ldrh	r3, [r4, #12]
 80134e2:	6020      	str	r0, [r4, #0]
 80134e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134e8:	81a3      	strh	r3, [r4, #12]
 80134ea:	9b00      	ldr	r3, [sp, #0]
 80134ec:	6163      	str	r3, [r4, #20]
 80134ee:	9b01      	ldr	r3, [sp, #4]
 80134f0:	6120      	str	r0, [r4, #16]
 80134f2:	b15b      	cbz	r3, 801350c <__smakebuf_r+0x74>
 80134f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134f8:	4630      	mov	r0, r6
 80134fa:	f000 f86b 	bl	80135d4 <_isatty_r>
 80134fe:	b128      	cbz	r0, 801350c <__smakebuf_r+0x74>
 8013500:	89a3      	ldrh	r3, [r4, #12]
 8013502:	f023 0303 	bic.w	r3, r3, #3
 8013506:	f043 0301 	orr.w	r3, r3, #1
 801350a:	81a3      	strh	r3, [r4, #12]
 801350c:	89a0      	ldrh	r0, [r4, #12]
 801350e:	4305      	orrs	r5, r0
 8013510:	81a5      	strh	r5, [r4, #12]
 8013512:	e7cd      	b.n	80134b0 <__smakebuf_r+0x18>
 8013514:	0800ec2d 	.word	0x0800ec2d

08013518 <_malloc_usable_size_r>:
 8013518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801351c:	1f18      	subs	r0, r3, #4
 801351e:	2b00      	cmp	r3, #0
 8013520:	bfbc      	itt	lt
 8013522:	580b      	ldrlt	r3, [r1, r0]
 8013524:	18c0      	addlt	r0, r0, r3
 8013526:	4770      	bx	lr

08013528 <_raise_r>:
 8013528:	291f      	cmp	r1, #31
 801352a:	b538      	push	{r3, r4, r5, lr}
 801352c:	4604      	mov	r4, r0
 801352e:	460d      	mov	r5, r1
 8013530:	d904      	bls.n	801353c <_raise_r+0x14>
 8013532:	2316      	movs	r3, #22
 8013534:	6003      	str	r3, [r0, #0]
 8013536:	f04f 30ff 	mov.w	r0, #4294967295
 801353a:	bd38      	pop	{r3, r4, r5, pc}
 801353c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801353e:	b112      	cbz	r2, 8013546 <_raise_r+0x1e>
 8013540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013544:	b94b      	cbnz	r3, 801355a <_raise_r+0x32>
 8013546:	4620      	mov	r0, r4
 8013548:	f000 f830 	bl	80135ac <_getpid_r>
 801354c:	462a      	mov	r2, r5
 801354e:	4601      	mov	r1, r0
 8013550:	4620      	mov	r0, r4
 8013552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013556:	f000 b817 	b.w	8013588 <_kill_r>
 801355a:	2b01      	cmp	r3, #1
 801355c:	d00a      	beq.n	8013574 <_raise_r+0x4c>
 801355e:	1c59      	adds	r1, r3, #1
 8013560:	d103      	bne.n	801356a <_raise_r+0x42>
 8013562:	2316      	movs	r3, #22
 8013564:	6003      	str	r3, [r0, #0]
 8013566:	2001      	movs	r0, #1
 8013568:	e7e7      	b.n	801353a <_raise_r+0x12>
 801356a:	2400      	movs	r4, #0
 801356c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013570:	4628      	mov	r0, r5
 8013572:	4798      	blx	r3
 8013574:	2000      	movs	r0, #0
 8013576:	e7e0      	b.n	801353a <_raise_r+0x12>

08013578 <raise>:
 8013578:	4b02      	ldr	r3, [pc, #8]	; (8013584 <raise+0xc>)
 801357a:	4601      	mov	r1, r0
 801357c:	6818      	ldr	r0, [r3, #0]
 801357e:	f7ff bfd3 	b.w	8013528 <_raise_r>
 8013582:	bf00      	nop
 8013584:	20000110 	.word	0x20000110

08013588 <_kill_r>:
 8013588:	b538      	push	{r3, r4, r5, lr}
 801358a:	4d07      	ldr	r5, [pc, #28]	; (80135a8 <_kill_r+0x20>)
 801358c:	2300      	movs	r3, #0
 801358e:	4604      	mov	r4, r0
 8013590:	4608      	mov	r0, r1
 8013592:	4611      	mov	r1, r2
 8013594:	602b      	str	r3, [r5, #0]
 8013596:	f000 f84d 	bl	8013634 <_kill>
 801359a:	1c43      	adds	r3, r0, #1
 801359c:	d102      	bne.n	80135a4 <_kill_r+0x1c>
 801359e:	682b      	ldr	r3, [r5, #0]
 80135a0:	b103      	cbz	r3, 80135a4 <_kill_r+0x1c>
 80135a2:	6023      	str	r3, [r4, #0]
 80135a4:	bd38      	pop	{r3, r4, r5, pc}
 80135a6:	bf00      	nop
 80135a8:	20006c7c 	.word	0x20006c7c

080135ac <_getpid_r>:
 80135ac:	f000 b832 	b.w	8013614 <_getpid>

080135b0 <_fstat_r>:
 80135b0:	b538      	push	{r3, r4, r5, lr}
 80135b2:	4d07      	ldr	r5, [pc, #28]	; (80135d0 <_fstat_r+0x20>)
 80135b4:	2300      	movs	r3, #0
 80135b6:	4604      	mov	r4, r0
 80135b8:	4608      	mov	r0, r1
 80135ba:	4611      	mov	r1, r2
 80135bc:	602b      	str	r3, [r5, #0]
 80135be:	f000 f821 	bl	8013604 <_fstat>
 80135c2:	1c43      	adds	r3, r0, #1
 80135c4:	d102      	bne.n	80135cc <_fstat_r+0x1c>
 80135c6:	682b      	ldr	r3, [r5, #0]
 80135c8:	b103      	cbz	r3, 80135cc <_fstat_r+0x1c>
 80135ca:	6023      	str	r3, [r4, #0]
 80135cc:	bd38      	pop	{r3, r4, r5, pc}
 80135ce:	bf00      	nop
 80135d0:	20006c7c 	.word	0x20006c7c

080135d4 <_isatty_r>:
 80135d4:	b538      	push	{r3, r4, r5, lr}
 80135d6:	4d06      	ldr	r5, [pc, #24]	; (80135f0 <_isatty_r+0x1c>)
 80135d8:	2300      	movs	r3, #0
 80135da:	4604      	mov	r4, r0
 80135dc:	4608      	mov	r0, r1
 80135de:	602b      	str	r3, [r5, #0]
 80135e0:	f000 f820 	bl	8013624 <_isatty>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d102      	bne.n	80135ee <_isatty_r+0x1a>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b103      	cbz	r3, 80135ee <_isatty_r+0x1a>
 80135ec:	6023      	str	r3, [r4, #0]
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	20006c7c 	.word	0x20006c7c

080135f4 <_close>:
 80135f4:	4b02      	ldr	r3, [pc, #8]	; (8013600 <_close+0xc>)
 80135f6:	2258      	movs	r2, #88	; 0x58
 80135f8:	601a      	str	r2, [r3, #0]
 80135fa:	f04f 30ff 	mov.w	r0, #4294967295
 80135fe:	4770      	bx	lr
 8013600:	20006c7c 	.word	0x20006c7c

08013604 <_fstat>:
 8013604:	4b02      	ldr	r3, [pc, #8]	; (8013610 <_fstat+0xc>)
 8013606:	2258      	movs	r2, #88	; 0x58
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	f04f 30ff 	mov.w	r0, #4294967295
 801360e:	4770      	bx	lr
 8013610:	20006c7c 	.word	0x20006c7c

08013614 <_getpid>:
 8013614:	4b02      	ldr	r3, [pc, #8]	; (8013620 <_getpid+0xc>)
 8013616:	2258      	movs	r2, #88	; 0x58
 8013618:	601a      	str	r2, [r3, #0]
 801361a:	f04f 30ff 	mov.w	r0, #4294967295
 801361e:	4770      	bx	lr
 8013620:	20006c7c 	.word	0x20006c7c

08013624 <_isatty>:
 8013624:	4b02      	ldr	r3, [pc, #8]	; (8013630 <_isatty+0xc>)
 8013626:	2258      	movs	r2, #88	; 0x58
 8013628:	601a      	str	r2, [r3, #0]
 801362a:	2000      	movs	r0, #0
 801362c:	4770      	bx	lr
 801362e:	bf00      	nop
 8013630:	20006c7c 	.word	0x20006c7c

08013634 <_kill>:
 8013634:	4b02      	ldr	r3, [pc, #8]	; (8013640 <_kill+0xc>)
 8013636:	2258      	movs	r2, #88	; 0x58
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	f04f 30ff 	mov.w	r0, #4294967295
 801363e:	4770      	bx	lr
 8013640:	20006c7c 	.word	0x20006c7c

08013644 <_lseek>:
 8013644:	4b02      	ldr	r3, [pc, #8]	; (8013650 <_lseek+0xc>)
 8013646:	2258      	movs	r2, #88	; 0x58
 8013648:	601a      	str	r2, [r3, #0]
 801364a:	f04f 30ff 	mov.w	r0, #4294967295
 801364e:	4770      	bx	lr
 8013650:	20006c7c 	.word	0x20006c7c

08013654 <_read>:
 8013654:	4b02      	ldr	r3, [pc, #8]	; (8013660 <_read+0xc>)
 8013656:	2258      	movs	r2, #88	; 0x58
 8013658:	601a      	str	r2, [r3, #0]
 801365a:	f04f 30ff 	mov.w	r0, #4294967295
 801365e:	4770      	bx	lr
 8013660:	20006c7c 	.word	0x20006c7c

08013664 <_write>:
 8013664:	4b02      	ldr	r3, [pc, #8]	; (8013670 <_write+0xc>)
 8013666:	2258      	movs	r2, #88	; 0x58
 8013668:	601a      	str	r2, [r3, #0]
 801366a:	f04f 30ff 	mov.w	r0, #4294967295
 801366e:	4770      	bx	lr
 8013670:	20006c7c 	.word	0x20006c7c

08013674 <_exit>:
 8013674:	e7fe      	b.n	8013674 <_exit>
	...

08013678 <_init>:
 8013678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801367a:	bf00      	nop
 801367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801367e:	bc08      	pop	{r3}
 8013680:	469e      	mov	lr, r3
 8013682:	4770      	bx	lr

08013684 <_fini>:
 8013684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013686:	bf00      	nop
 8013688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801368a:	bc08      	pop	{r3}
 801368c:	469e      	mov	lr, r3
 801368e:	4770      	bx	lr
