
F411_diplay_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bd4  0800e644  0800e644  0001e644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012218  08012218  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  08012218  08012218  00022218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012220  08012220  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012220  08012220  00022220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012224  08012224  00022224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08012228  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006930  20000174  0801239c  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20006aa4  0801239c  00036aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b43  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d0  00000000  00000000  00056ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  0005c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  0005e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dafc  00000000  00000000  0005fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002527e  00000000  00000000  0007daec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a94ee  00000000  00000000  000a2d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008834  00000000  00000000  0014c2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      000000df  00000000  00000000  00154adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e62c 	.word	0x0800e62c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800e62c 	.word	0x0800e62c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f002 f8f6 	bl	8002788 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059c:	f000 f85c 	bl	8000658 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	T = HAL_GetTick();
 80005a0:	f002 f928 	bl	80027f4 <HAL_GetTick>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <main+0x90>)
 80005a8:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 fa73 	bl	8000a94 <MX_GPIO_Init>
	MX_DMA_Init();
 80005ae:	f000 fa51 	bl	8000a54 <MX_DMA_Init>
	MX_CRC_Init();
 80005b2:	f000 f90b 	bl	80007cc <MX_CRC_Init>
	MX_SPI1_Init();
 80005b6:	f000 f91d 	bl	80007f4 <MX_SPI1_Init>
	MX_TIM2_Init();
 80005ba:	f000 f951 	bl	8000860 <MX_TIM2_Init>
	MX_ADC1_Init();
 80005be:	f000 f8b3 	bl	8000728 <MX_ADC1_Init>
	MX_TIM3_Init();
 80005c2:	f000 f999 	bl	80008f8 <MX_TIM3_Init>
	MX_TIM4_Init();
 80005c6:	f000 f9f1 	bl	80009ac <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 80005ca:	f00c fdff 	bl	800d1cc <MX_USB_DEVICE_Init>

	ST7789_Init();
 80005ce:	f000 fcf7 	bl	8000fc0 <ST7789_Init>
	ST7789_rotation(2);
 80005d2:	2002      	movs	r0, #2
 80005d4:	f001 fbc2 	bl	8001d5c <ST7789_rotation>
//	c
//	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005d8:	f00a f880 	bl	800a6dc <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of DisplayTask */
	DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL,
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <main+0x94>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4812      	ldr	r0, [pc, #72]	; (800062c <main+0x98>)
 80005e2:	f00a f8c5 	bl	800a770 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <main+0x9c>)
 80005ea:	6013      	str	r3, [r2, #0]
			&DisplayTask_attributes);

	/* creation of MotorTask */
	MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <main+0xa0>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <main+0xa4>)
 80005f2:	f00a f8bd 	bl	800a770 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <main+0xa8>)
 80005fa:	6013      	str	r3, [r2, #0]

	/* creation of ADCTask */
	ADCTaskHandle = osThreadNew(StartADCTask, NULL, &ADCTask_attributes);
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <main+0xac>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <main+0xb0>)
 8000602:	f00a f8b5 	bl	800a770 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <main+0xb4>)
 800060a:	6013      	str	r3, [r2, #0]

	/* creation of USB */
	USBHandle = osThreadNew(StartUSB, NULL, &USB_attributes);
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0xb8>)
 800060e:	2100      	movs	r1, #0
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0xbc>)
 8000612:	f00a f8ad 	bl	800a770 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <main+0xc0>)
 800061a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800061c:	f00a f882 	bl	800a724 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000620:	e7fe      	b.n	8000620 <main+0x8c>
 8000622:	bf00      	nop
 8000624:	20000380 	.word	0x20000380
 8000628:	080120b0 	.word	0x080120b0
 800062c:	08000c7d 	.word	0x08000c7d
 8000630:	20000370 	.word	0x20000370
 8000634:	080120d4 	.word	0x080120d4
 8000638:	08000e71 	.word	0x08000e71
 800063c:	20000374 	.word	0x20000374
 8000640:	080120f8 	.word	0x080120f8
 8000644:	08000ed1 	.word	0x08000ed1
 8000648:	20000378 	.word	0x20000378
 800064c:	0801211c 	.word	0x0801211c
 8000650:	08000f49 	.word	0x08000f49
 8000654:	2000037c 	.word	0x2000037c

08000658 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00d fb10 	bl	800dc8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xc8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <SystemClock_Config+0xc8>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SystemClock_Config+0xcc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <SystemClock_Config+0xcc>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80006c8:	230f      	movs	r3, #15
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80006cc:	2390      	movs	r3, #144	; 0x90
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80006d4:	2305      	movs	r3, #5
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 fd05 	bl	80050ec <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
		Error_Handler();
 80006e8:	f000 fc64 	bl	8000fb4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f004 ff67 	bl	80055dc <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc0>
		Error_Handler();
 8000714:	f000 fc4e 	bl	8000fb4 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_ADC1_Init+0x98>)
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800073e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <MX_ADC1_Init+0xa0>)
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000774:	2201      	movs	r2, #1
 8000776:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <MX_ADC1_Init+0x98>)
 8000788:	f002 f864 	bl	8002854 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000792:	f000 fc0f 	bl	8000fb4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000796:	2306      	movs	r3, #6
 8000798:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_ADC1_Init+0x98>)
 80007a8:	f002 f922 	bl	80029f0 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0x8e>
		Error_Handler();
 80007b2:	f000 fbff 	bl	8000fb4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000190 	.word	0x20000190
 80007c4:	40012000 	.word	0x40012000
 80007c8:	0f000001 	.word	0x0f000001

080007cc <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_CRC_Init+0x20>)
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <MX_CRC_Init+0x24>)
 80007d4:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_CRC_Init+0x20>)
 80007d8:	f002 fd68 	bl	80032ac <HAL_CRC_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_CRC_Init+0x1a>
		Error_Handler();
 80007e2:	f000 fbe7 	bl	8000fb4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200001d8 	.word	0x200001d8
 80007f0:	40023000 	.word	0x40023000

080007f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2202      	movs	r2, #2
 8000816:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f005 f8c7 	bl	80059d8 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000850:	f000 fbb0 	bl	8000fb4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200001e0 	.word	0x200001e0
 800085c:	40013000 	.word	0x40013000

08000860 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM2_Init+0x94>)
 800087e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000882:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 44999;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000886:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800088a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_TIM2_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000894:	220f      	movs	r2, #15
 8000896:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_TIM2_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a6:	f005 fb35 	bl	8005f14 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x54>
		Error_Handler();
 80008b0:	f000 fb80 	bl	8000fb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008c2:	f005 fe99 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x70>
		Error_Handler();
 80008cc:	f000 fb72 	bl	8000fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008de:	f006 fa21 	bl	8006d24 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80008e8:	f000 fb64 	bl	8000fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000298 	.word	0x20000298

080008f8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <MX_TIM3_Init+0xac>)
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <MX_TIM3_Init+0xb0>)
 800091e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_TIM3_Init+0xac>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_TIM3_Init+0xac>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_TIM3_Init+0xac>)
 800092e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000932:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_TIM3_Init+0xac>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM3_Init+0xac>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000940:	4818      	ldr	r0, [pc, #96]	; (80009a4 <MX_TIM3_Init+0xac>)
 8000942:	f005 fb99 	bl	8006078 <HAL_TIM_PWM_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x58>
		Error_Handler();
 800094c:	f000 fb32 	bl	8000fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4619      	mov	r1, r3
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_TIM3_Init+0xac>)
 8000960:	f006 f9e0 	bl	8006d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800096a:	f000 fb23 	bl	8000fb4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	; 0x60
 8000970:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_TIM3_Init+0xac>)
 8000986:	f005 fd75 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000990:	f000 fb10 	bl	8000fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <MX_TIM3_Init+0xac>)
 8000996:	f001 fd91 	bl	80024bc <HAL_TIM_MspPostInit>

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200002e0 	.word	0x200002e0
 80009a8:	40000400 	.word	0x40000400

080009ac <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2224      	movs	r2, #36	; 0x24
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00d f966 	bl	800dc8c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_TIM4_Init+0xa0>)
 80009ca:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <MX_TIM4_Init+0xa4>)
 80009cc:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_TIM4_Init+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM4_Init+0xa0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM4_Init+0xa0>)
 80009dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM4_Init+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM4_Init+0xa0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a06:	2301      	movs	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM4_Init+0xa0>)
 8000a1a:	f005 fb7c 	bl	8006116 <HAL_TIM_Encoder_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8000a24:	f000 fac6 	bl	8000fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM4_Init+0xa0>)
 8000a36:	f006 f975 	bl	8006d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000a40:	f000 fab8 	bl	8000fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000328 	.word	0x20000328
 8000a50:	40000800 	.word	0x40000800

08000a54 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_DMA_Init+0x3c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <MX_DMA_Init+0x3c>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_DMA_Init+0x3c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	203a      	movs	r0, #58	; 0x3a
 8000a7c:	f002 fbec 	bl	8003258 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a80:	203a      	movs	r0, #58	; 0x3a
 8000a82:	f002 fc05 	bl	8003290 <HAL_NVIC_EnableIRQ>

}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_GPIO_Init+0x98>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RST_Pin | DC_Pin | CS_Pin | M_IN1_Pin | M_IN2_Pin,
 8000afe:	2200      	movs	r2, #0
 8000b00:	212f      	movs	r1, #47	; 0x2f
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <MX_GPIO_Init+0x9c>)
 8000b04:	f003 f85c 	bl	8003bc0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RST_Pin DC_Pin CS_Pin M_IN1_Pin
	 M_IN2_Pin */
	GPIO_InitStruct.Pin = RST_Pin | DC_Pin | CS_Pin | M_IN1_Pin | M_IN2_Pin;
 8000b08:	232f      	movs	r3, #47	; 0x2f
 8000b0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_GPIO_Init+0x9c>)
 8000b20:	f002 feca 	bl	80038b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400

08000b34 <printTime>:

/* USER CODE BEGIN 4 */
void printTime() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af04      	add	r7, sp, #16
	char str_s[10];
	TIME_ON.h = HAL_GetTick() / ONEHOUR;
 8000b3a:	f001 fe5b 	bl	80027f4 <HAL_GetTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a47      	ldr	r2, [pc, #284]	; (8000c60 <printTime+0x12c>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	0d5b      	lsrs	r3, r3, #21
 8000b48:	4a46      	ldr	r2, [pc, #280]	; (8000c64 <printTime+0x130>)
 8000b4a:	6013      	str	r3, [r2, #0]
	TIME_ON.m = HAL_GetTick() / MINUT;
 8000b4c:	f001 fe52 	bl	80027f4 <HAL_GetTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a45      	ldr	r2, [pc, #276]	; (8000c68 <printTime+0x134>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	0b9b      	lsrs	r3, r3, #14
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <printTime+0x130>)
 8000b5c:	6053      	str	r3, [r2, #4]
	TIME_ON.s = HAL_GetTick() / SEC;
 8000b5e:	f001 fe49 	bl	80027f4 <HAL_GetTick>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a41      	ldr	r2, [pc, #260]	; (8000c6c <printTime+0x138>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	099b      	lsrs	r3, r3, #6
 8000b6c:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <printTime+0x130>)
 8000b6e:	6093      	str	r3, [r2, #8]

	if (TIME_ON.s > 59) {
 8000b70:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <printTime+0x130>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	2b3b      	cmp	r3, #59	; 0x3b
 8000b76:	d923      	bls.n	8000bc0 <printTime+0x8c>
		if (TIME_ON.h > 0) {
 8000b78:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <printTime+0x130>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00f      	beq.n	8000ba0 <printTime+0x6c>
			TIME_ON.s = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 8000b80:	f001 fe38 	bl	80027f4 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <printTime+0x130>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4939      	ldr	r1, [pc, #228]	; (8000c70 <printTime+0x13c>)
 8000b8c:	fb01 f303 	mul.w	r3, r1, r3
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <printTime+0x138>)
 8000b94:	fba2 2303 	umull	r2, r3, r2, r3
 8000b98:	099b      	lsrs	r3, r3, #6
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <printTime+0x130>)
 8000b9c:	6093      	str	r3, [r2, #8]
 8000b9e:	e00f      	b.n	8000bc0 <printTime+0x8c>

		} else {
			TIME_ON.s = (HAL_GetTick() - (MINUT * TIME_ON.m)) / SEC;
 8000ba0:	f001 fe28 	bl	80027f4 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <printTime+0x130>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000bae:	fb01 f303 	mul.w	r3, r1, r3
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <printTime+0x138>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	099b      	lsrs	r3, r3, #6
 8000bbc:	4a29      	ldr	r2, [pc, #164]	; (8000c64 <printTime+0x130>)
 8000bbe:	6093      	str	r3, [r2, #8]
		}
	}
	if (TIME_ON.m > 59) {
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <printTime+0x130>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b3b      	cmp	r3, #59	; 0x3b
 8000bc6:	d90f      	bls.n	8000be8 <printTime+0xb4>
		TIME_ON.m = (HAL_GetTick() - (MINUT * TIME_ON.h)) / SEC;
 8000bc8:	f001 fe14 	bl	80027f4 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <printTime+0x130>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <printTime+0x138>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	099b      	lsrs	r3, r3, #6
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <printTime+0x130>)
 8000be6:	6053      	str	r3, [r2, #4]
	}
	if (TIME_ON.h >= HAL_ERROR) {
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <printTime+0x130>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00e      	beq.n	8000c0e <printTime+0xda>
		TIME_ON.h = (HAL_GetTick() - (ONEHOUR * TIME_ON.h)) / SEC;
 8000bf0:	f001 fe00 	bl	80027f4 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <printTime+0x130>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	491d      	ldr	r1, [pc, #116]	; (8000c70 <printTime+0x13c>)
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <printTime+0x138>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	099b      	lsrs	r3, r3, #6
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <printTime+0x130>)
 8000c0c:	6013      	str	r3, [r2, #0]
	}

	sprintf(str_s, "%li:%li:%li ", TIME_ON.h, TIME_ON.m, TIME_ON.s);
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <printTime+0x130>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <printTime+0x130>)
 8000c14:	6859      	ldr	r1, [r3, #4]
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <printTime+0x130>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	1d38      	adds	r0, r7, #4
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4914      	ldr	r1, [pc, #80]	; (8000c74 <printTime+0x140>)
 8000c22:	f00d f949 	bl	800deb8 <siprintf>

	ST7789_DrawFillRoundRect(0, 0, 90, 50, 0, ST7789_BLACK);
 8000c26:	2300      	movs	r3, #0
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2332      	movs	r3, #50	; 0x32
 8000c30:	225a      	movs	r2, #90	; 0x5a
 8000c32:	2100      	movs	r1, #0
 8000c34:	2000      	movs	r0, #0
 8000c36:	f001 f90b 	bl	8001e50 <ST7789_DrawFillRoundRect>

	ST7789_print(5, 5, ST7789_GREEN, ST7789_BLACK, 0, &Font_11x18, 1, str_s);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	9303      	str	r3, [sp, #12]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <printTime+0x144>)
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	2300      	movs	r3, #0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c50:	2105      	movs	r1, #5
 8000c52:	2005      	movs	r0, #5
 8000c54:	f000 ffbe 	bl	8001bd4 <ST7789_print>
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	95217cb1 	.word	0x95217cb1
 8000c64:	20000388 	.word	0x20000388
 8000c68:	45e7b273 	.word	0x45e7b273
 8000c6c:	10624dd3 	.word	0x10624dd3
 8000c70:	0036ee80 	.word	0x0036ee80
 8000c74:	0800e668 	.word	0x0800e668
 8000c78:	20000000 	.word	0x20000000

08000c7c <StartDisplayTask>:
 * @brief  Function implementing the DisplayTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000c84:	f00c faa2 	bl	800d1cc <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	char str[10];
	ST7789_FillScreen(ST7789_BLACK);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 faab 	bl	80011e4 <ST7789_FillScreen>
	ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8000c8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c92:	2250      	movs	r2, #80	; 0x50
 8000c94:	2178      	movs	r1, #120	; 0x78
 8000c96:	20a0      	movs	r0, #160	; 0xa0
 8000c98:	f000 fd7a 	bl	8001790 <ST7789_DrawCircleFilled>

	/* Infinite loop */
	for (;;) {
		if (TIME_ON.m <= TIMEFORSENSORS) {
 8000c9c:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <StartDisplayTask+0x1d8>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d850      	bhi.n	8000d46 <StartDisplayTask+0xca>
			if (ch4.actual != ch4.last) {
 8000ca4:	4b6c      	ldr	r3, [pc, #432]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	4b6b      	ldr	r3, [pc, #428]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000caa:	885b      	ldrh	r3, [r3, #2]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f000 80c9 	beq.w	8000e44 <StartDisplayTask+0x1c8>
				sprintf(str, "%i %%", ch4.actual);
 8000cb2:	4b69      	ldr	r3, [pc, #420]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4967      	ldr	r1, [pc, #412]	; (8000e5c <StartDisplayTask+0x1e0>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00d f8fa 	bl	800deb8 <siprintf>
				ST7789_DrawCircleFilled(160, 120, 80, ST7789_RED);
 8000cc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cc8:	2250      	movs	r2, #80	; 0x50
 8000cca:	2178      	movs	r1, #120	; 0x78
 8000ccc:	20a0      	movs	r0, #160	; 0xa0
 8000cce:	f000 fd5f 	bl	8001790 <ST7789_DrawCircleFilled>

				ST7789_print(130, 70, ST7789_WHITE, ST7789_BLACK, 0,
 8000cd2:	4b63      	ldr	r3, [pc, #396]	; (8000e60 <StartDisplayTask+0x1e4>)
 8000cd4:	9303      	str	r3, [sp, #12]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <StartDisplayTask+0x1e8>)
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce8:	2146      	movs	r1, #70	; 0x46
 8000cea:	2082      	movs	r0, #130	; 0x82
 8000cec:	f000 ff72 	bl	8001bd4 <ST7789_print>
						&Font_16x26, 1, "Wait");

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	9303      	str	r3, [sp, #12]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <StartDisplayTask+0x1e8>)
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2300      	movs	r3, #0
 8000d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d08:	216e      	movs	r1, #110	; 0x6e
 8000d0a:	2087      	movs	r0, #135	; 0x87
 8000d0c:	f000 ff62 	bl	8001bd4 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4954      	ldr	r1, [pc, #336]	; (8000e68 <StartDisplayTask+0x1ec>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00d f8ce 	bl	800deb8 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	9303      	str	r3, [sp, #12]
 8000d22:	2301      	movs	r3, #1
 8000d24:	9302      	str	r3, [sp, #8]
 8000d26:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <StartDisplayTask+0x1e8>)
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d34:	2196      	movs	r1, #150	; 0x96
 8000d36:	2087      	movs	r0, #135	; 0x87
 8000d38:	f000 ff4c 	bl	8001bd4 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 8000d3c:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000d42:	805a      	strh	r2, [r3, #2]
 8000d44:	e07e      	b.n	8000e44 <StartDisplayTask+0x1c8>
			}
		} else {
			if (flagt.Heat == 0) {
 8000d46:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <StartDisplayTask+0x1f0>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d13b      	bne.n	8000dc6 <StartDisplayTask+0x14a>
				sprintf(str, "%i %%", ch4.actual);
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4940      	ldr	r1, [pc, #256]	; (8000e5c <StartDisplayTask+0x1e0>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f00d f8ac 	bl	800deb8 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 8000d60:	231f      	movs	r3, #31
 8000d62:	2250      	movs	r2, #80	; 0x50
 8000d64:	2178      	movs	r1, #120	; 0x78
 8000d66:	20a0      	movs	r0, #160	; 0xa0
 8000d68:	f000 fd12 	bl	8001790 <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	9303      	str	r3, [sp, #12]
 8000d72:	2301      	movs	r3, #1
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <StartDisplayTask+0x1e8>)
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d84:	216e      	movs	r1, #110	; 0x6e
 8000d86:	2087      	movs	r0, #135	; 0x87
 8000d88:	f000 ff24 	bl	8001bd4 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4935      	ldr	r1, [pc, #212]	; (8000e68 <StartDisplayTask+0x1ec>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00d f890 	bl	800deb8 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <StartDisplayTask+0x1e8>)
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	2300      	movs	r3, #0
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2300      	movs	r3, #0
 8000dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db0:	2196      	movs	r1, #150	; 0x96
 8000db2:	2087      	movs	r0, #135	; 0x87
 8000db4:	f000 ff0e 	bl	8001bd4 <ST7789_print>
						&Font_16x26, 1, str);
				ch4.last = ch4.actual;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000dbe:	805a      	strh	r2, [r3, #2]
				flagt.Heat = 1;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <StartDisplayTask+0x1f0>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
			}
			if (ch4.actual != ch4.last) {
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000dcc:	885b      	ldrh	r3, [r3, #2]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d038      	beq.n	8000e44 <StartDisplayTask+0x1c8>
				sprintf(str, "%i %%", ch4.actual);
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	491f      	ldr	r1, [pc, #124]	; (8000e5c <StartDisplayTask+0x1e0>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00d f86a 	bl	800deb8 <siprintf>

				ST7789_DrawCircleFilled(160, 120, 80, ST7789_BLUE);
 8000de4:	231f      	movs	r3, #31
 8000de6:	2250      	movs	r2, #80	; 0x50
 8000de8:	2178      	movs	r1, #120	; 0x78
 8000dea:	20a0      	movs	r0, #160	; 0xa0
 8000dec:	f000 fcd0 	bl	8001790 <ST7789_DrawCircleFilled>

				ST7789_print(135, 110, ST7789_WHITE, ST7789_BLACK, 0,
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	9303      	str	r3, [sp, #12]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <StartDisplayTask+0x1e8>)
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e08:	216e      	movs	r1, #110	; 0x6e
 8000e0a:	2087      	movs	r0, #135	; 0x87
 8000e0c:	f000 fee2 	bl	8001bd4 <ST7789_print>
						&Font_16x26, 1, str);
				sprintf(str, "CH4");
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4914      	ldr	r1, [pc, #80]	; (8000e68 <StartDisplayTask+0x1ec>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f00d f84e 	bl	800deb8 <siprintf>
				ST7789_print(135, 150, ST7789_WHITE, ST7789_BLACK, 0,
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	9303      	str	r3, [sp, #12]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <StartDisplayTask+0x1e8>)
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	2196      	movs	r1, #150	; 0x96
 8000e36:	2087      	movs	r0, #135	; 0x87
 8000e38:	f000 fecc 	bl	8001bd4 <ST7789_print>
						&Font_16x26, 1, str);

				ch4.last = ch4.actual;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000e3e:	881a      	ldrh	r2, [r3, #0]
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <StartDisplayTask+0x1dc>)
 8000e42:	805a      	strh	r2, [r3, #2]
			}
		}

		printTime();
 8000e44:	f7ff fe76 	bl	8000b34 <printTime>
		osDelay(SEC);
 8000e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4c:	f009 fd22 	bl	800a894 <osDelay>
		if (TIME_ON.m <= TIMEFORSENSORS) {
 8000e50:	e724      	b.n	8000c9c <StartDisplayTask+0x20>
 8000e52:	bf00      	nop
 8000e54:	20000388 	.word	0x20000388
 8000e58:	20000394 	.word	0x20000394
 8000e5c:	0800e678 	.word	0x0800e678
 8000e60:	0800e680 	.word	0x0800e680
 8000e64:	20000008 	.word	0x20000008
 8000e68:	0800e688 	.word	0x0800e688
 8000e6c:	2000039c 	.word	0x2000039c

08000e70 <StartMotorTask>:
 * @brief Function implementing the MotorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	/* Infinite loop */
	for (;;) {
		if (ch4.actual > 20) {
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <StartMotorTask+0x58>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	2b14      	cmp	r3, #20
 8000e7e:	d90f      	bls.n	8000ea0 <StartMotorTask+0x30>
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <StartMotorTask+0x5c>)
 8000e86:	f002 fe9b 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	480f      	ldr	r0, [pc, #60]	; (8000ecc <StartMotorTask+0x5c>)
 8000e90:	f002 fe96 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2120      	movs	r1, #32
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <StartMotorTask+0x5c>)
 8000e9a:	f002 fe91 	bl	8003bc0 <HAL_GPIO_WritePin>
 8000e9e:	e00e      	b.n	8000ebe <StartMotorTask+0x4e>
		} else {
			HAL_GPIO_WritePin(M_EN_GPIO_Port, M_EN_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <StartMotorTask+0x5c>)
 8000ea6:	f002 fe8b 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2108      	movs	r1, #8
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <StartMotorTask+0x5c>)
 8000eb0:	f002 fe86 	bl	8003bc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <StartMotorTask+0x5c>)
 8000eba:	f002 fe81 	bl	8003bc0 <HAL_GPIO_WritePin>
		}
		osDelay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f009 fce8 	bl	800a894 <osDelay>
		if (ch4.actual > 20) {
 8000ec4:	e7d8      	b.n	8000e78 <StartMotorTask+0x8>
 8000ec6:	bf00      	nop
 8000ec8:	20000394 	.word	0x20000394
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <StartADCTask>:
 * @brief Function implementing the ADCTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADCTask */
void StartADCTask(void *argument) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartADCTask */

	/* Infinite loop */
	for (;;) {
		HAL_ADCEx_InjectedStart(&hadc1);
 8000ed8:	4817      	ldr	r0, [pc, #92]	; (8000f38 <StartADCTask+0x68>)
 8000eda:	f001 ffb7 	bl	8002e4c <HAL_ADCEx_InjectedStart>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000ede:	2164      	movs	r1, #100	; 0x64
 8000ee0:	4815      	ldr	r0, [pc, #84]	; (8000f38 <StartADCTask+0x68>)
 8000ee2:	f001 fcfa 	bl	80028da <HAL_ADC_PollForConversion>

		adcVal = HAL_ADCEx_InjectedGetValue(&hadc1,
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <StartADCTask+0x68>)
 8000eea:	f002 f8c5 	bl	8003078 <HAL_ADCEx_InjectedGetValue>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <StartADCTask+0x6c>)
 8000ef4:	801a      	strh	r2, [r3, #0]
		ADC_INJECTED_RANK_1);
		ch4.BIT16 = HAL_ADCEx_InjectedGetValue(&hadc1,
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <StartADCTask+0x68>)
 8000efa:	f002 f8bd 	bl	8003078 <HAL_ADCEx_InjectedGetValue>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <StartADCTask+0x70>)
 8000f04:	809a      	strh	r2, [r3, #4]
		ADC_INJECTED_RANK_1);

		HAL_ADCEx_InjectedStop(&hadc1);
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <StartADCTask+0x68>)
 8000f08:	f002 f86a 	bl	8002fe0 <HAL_ADCEx_InjectedStop>

		ch4.actual = (ch4.BIT16 * 100) / SEBSORMAXVAL;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <StartADCTask+0x70>)
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	461a      	mov	r2, r3
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	fb02 f303 	mul.w	r3, r2, r3
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <StartADCTask+0x74>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	12d2      	asrs	r2, r2, #11
 8000f22:	17db      	asrs	r3, r3, #31
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <StartADCTask+0x70>)
 8000f2a:	801a      	strh	r2, [r3, #0]
		osDelay(900);
 8000f2c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000f30:	f009 fcb0 	bl	800a894 <osDelay>
		HAL_ADCEx_InjectedStart(&hadc1);
 8000f34:	e7d0      	b.n	8000ed8 <StartADCTask+0x8>
 8000f36:	bf00      	nop
 8000f38:	20000190 	.word	0x20000190
 8000f3c:	20000384 	.word	0x20000384
 8000f40:	20000394 	.word	0x20000394
 8000f44:	a00a00a1 	.word	0xa00a00a1

08000f48 <StartUSB>:
 * @brief Function implementing the USB thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUSB */
void StartUSB(void *argument) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUSB */
	/* Infinite loop */
	for (;;) {
		if (ch4.actual != ch4.last) {
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <StartUSB+0x3c>)
 8000f52:	881a      	ldrh	r2, [r3, #0]
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <StartUSB+0x3c>)
 8000f56:	885b      	ldrh	r3, [r3, #2]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d00f      	beq.n	8000f7c <StartUSB+0x34>
			sprintf((char*) data, "CH4 val: %i\n", ch4.BIT16);
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <StartUSB+0x3c>)
 8000f5e:	889b      	ldrh	r3, [r3, #4]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4909      	ldr	r1, [pc, #36]	; (8000f88 <StartUSB+0x40>)
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <StartUSB+0x44>)
 8000f66:	f00c ffa7 	bl	800deb8 <siprintf>
			CDC_Transmit_FS(data, strlen((char*) data));
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <StartUSB+0x44>)
 8000f6c:	f7ff f938 	bl	80001e0 <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <StartUSB+0x44>)
 8000f78:	f00c f9fc 	bl	800d374 <CDC_Transmit_FS>
		}
		osDelay(SEC / 5);
 8000f7c:	20c8      	movs	r0, #200	; 0xc8
 8000f7e:	f009 fc89 	bl	800a894 <osDelay>
		if (ch4.actual != ch4.last) {
 8000f82:	e7e5      	b.n	8000f50 <StartUSB+0x8>
 8000f84:	20000394 	.word	0x20000394
 8000f88:	0800e68c 	.word	0x0800e68c
 8000f8c:	200003a0 	.word	0x200003a0

08000f90 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fa2:	f001 fc13 	bl	80027cc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010000 	.word	0x40010000

08000fb4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <ST7789_Init>:
	  
	  
//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	
	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);	
 8000fc4:	20c8      	movs	r0, #200	; 0xc8
 8000fc6:	f001 fc21 	bl	800280c <HAL_Delay>

	ST7789_Width = ST7789_WIDTH;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <ST7789_Init+0x30>)
 8000fcc:	22f0      	movs	r2, #240	; 0xf0
 8000fce:	801a      	strh	r2, [r3, #0]
	ST7789_Height = ST7789_HEIGHT;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <ST7789_Init+0x34>)
 8000fd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fd6:	801a      	strh	r2, [r3, #0]


    ST7789_Select();
 8000fd8:	f000 f810 	bl	8000ffc <ST7789_Select>
	
    ST7789_HardReset(); 
 8000fdc:	f000 f870 	bl	80010c0 <ST7789_HardReset>
    ST7789_ExecuteCommandList(init_cmds);
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <ST7789_Init+0x38>)
 8000fe2:	f000 f823 	bl	800102c <ST7789_ExecuteCommandList>
	
    ST7789_Unselect();
 8000fe6:	f000 f815 	bl	8001014 <ST7789_Unselect>

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000424 	.word	0x20000424
 8000ff4:	20000426 	.word	0x20000426
 8000ff8:	08012140 	.word	0x08012140

08000ffc <ST7789_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Select(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2104      	movs	r1, #4
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <ST7789_Select+0x14>)
 8001006:	f002 fddb 	bl	8003bc0 <HAL_GPIO_WritePin>
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020400 	.word	0x40020400

08001014 <ST7789_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Unselect(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2104      	movs	r1, #4
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <ST7789_Unselect+0x14>)
 800101e:	f002 fdcf 	bl	8003bc0 <HAL_GPIO_WritePin>
			#endif
			//-----------------------------------------------------
	
	#endif
	
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020400 	.word	0x40020400

0800102c <ST7789_ExecuteCommandList>:


//==============================================================================
// Процедура отправки данных для инициализации дисплея
//==============================================================================
 void ST7789_ExecuteCommandList(const uint8_t *addr) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800103e:	e034      	b.n	80010aa <ST7789_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	72fb      	strb	r3, [r7, #11]
        ST7789_SendCmd(cmd);
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f84b 	bl	80010e8 <ST7789_SendCmd>

        numArgs = *addr++;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800105c:	7abb      	ldrb	r3, [r7, #10]
 800105e:	b29b      	uxth	r3, r3
 8001060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001064:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001066:	7abb      	ldrb	r3, [r7, #10]
 8001068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800106c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800106e:	7abb      	ldrb	r3, [r7, #10]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <ST7789_ExecuteCommandList+0x5a>
            ST7789_SendDataMASS((uint8_t*)addr, numArgs);
 8001074:	7abb      	ldrb	r3, [r7, #10]
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f875 	bl	8001168 <ST7789_SendDataMASS>
            addr += numArgs;
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00e      	beq.n	80010aa <ST7789_ExecuteCommandList+0x7e>
            ms = *addr++;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001096:	89bb      	ldrh	r3, [r7, #12]
 8001098:	2bff      	cmp	r3, #255	; 0xff
 800109a:	d102      	bne.n	80010a2 <ST7789_ExecuteCommandList+0x76>
 800109c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010a0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fbb1 	bl	800280c <HAL_Delay>
    while(numCommands--) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	1e5a      	subs	r2, r3, #1
 80010ae:	73fa      	strb	r2, [r7, #15]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1c5      	bne.n	8001040 <ST7789_ExecuteCommandList+0x14>
        }
    }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <ST7789_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void ST7789_HardReset(void){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <ST7789_HardReset+0x24>)
 80010ca:	f002 fd79 	bl	8003bc0 <HAL_GPIO_WritePin>
	HAL_Delay(20);	
 80010ce:	2014      	movs	r0, #20
 80010d0:	f001 fb9c 	bl	800280c <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2101      	movs	r1, #1
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <ST7789_HardReset+0x24>)
 80010da:	f002 fd71 	bl	8003bc0 <HAL_GPIO_WritePin>
	
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020400 	.word	0x40020400

080010e8 <ST7789_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline void ST7789_SendCmd(uint8_t Cmd){	
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
		
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7789_SPI_HAL
	
		 // pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <ST7789_SendCmd+0x44>)
 80010f8:	f002 fd62 	bl	8003bc0 <HAL_GPIO_WritePin>
					 
		 HAL_SPI_Transmit(&ST7789_SPI_HAL, &Cmd, 1, HAL_MAX_DELAY);
 80010fc:	1df9      	adds	r1, r7, #7
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	2201      	movs	r2, #1
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <ST7789_SendCmd+0x48>)
 8001106:	f004 fcf0 	bl	8005aea <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 800110a:	bf00      	nop
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <ST7789_SendCmd+0x48>)
 800110e:	f004 fe28 	bl	8005d62 <HAL_SPI_GetState>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d1f9      	bne.n	800110c <ST7789_SendCmd+0x24>
				
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2102      	movs	r1, #2
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <ST7789_SendCmd+0x44>)
 800111e:	f002 fd4f 	bl	8003bc0 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
	
	#endif
	//-----------------------------------------------------------------------------------

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020400 	.word	0x40020400
 8001130:	200001e0 	.word	0x200001e0

08001134 <ST7789_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline void ST7789_SendData(uint8_t Data ){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
	
		HAL_SPI_Transmit(&ST7789_SPI_HAL, &Data, 1, HAL_MAX_DELAY);
 800113e:	1df9      	adds	r1, r7, #7
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	2201      	movs	r2, #1
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <ST7789_SendData+0x30>)
 8001148:	f004 fccf 	bl	8005aea <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 800114c:	bf00      	nop
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <ST7789_SendData+0x30>)
 8001150:	f004 fe07 	bl	8005d62 <HAL_SPI_GetState>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d1f9      	bne.n	800114e <ST7789_SendData+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200001e0 	.word	0x200001e0

08001168 <ST7789_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
		
		if( buff_size <= 0xFFFF ){
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d21a      	bcs.n	80011b0 <ST7789_SendDataMASS+0x48>
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <ST7789_SendDataMASS+0x78>)
 8001186:	f004 fcb0 	bl	8005aea <HAL_SPI_Transmit>
 800118a:	e01d      	b.n	80011c8 <ST7789_SendDataMASS+0x60>
		}
		else{
			while( buff_size > 0xFFFF ){
				HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, 0xFFFF, HAL_MAX_DELAY);
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4812      	ldr	r0, [pc, #72]	; (80011e0 <ST7789_SendDataMASS+0x78>)
 8001198:	f004 fca7 	bl	8005aea <HAL_SPI_Transmit>
				buff_size-=0xFFFF;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80011a2:	3bff      	subs	r3, #255	; 0xff
 80011a4:	603b      	str	r3, [r7, #0]
				buff+=0xFFFF;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011ac:	33ff      	adds	r3, #255	; 0xff
 80011ae:	607b      	str	r3, [r7, #4]
			while( buff_size > 0xFFFF ){
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b6:	d2e9      	bcs.n	800118c <ST7789_SendDataMASS+0x24>
			}
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <ST7789_SendDataMASS+0x78>)
 80011c4:	f004 fc91 	bl	8005aea <HAL_SPI_Transmit>
		}
		
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 80011c8:	bf00      	nop
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <ST7789_SendDataMASS+0x78>)
 80011cc:	f004 fdc9 	bl	8005d62 <HAL_SPI_GetState>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d1f9      	bne.n	80011ca <ST7789_SendDataMASS+0x62>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200001e0 	.word	0x200001e0

080011e4 <ST7789_FillScreen>:


//==============================================================================
// Процедура закрашивает экран цветом color
//==============================================================================
void ST7789_FillScreen(uint16_t color){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <ST7789_FillScreen+0x2c>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <ST7789_FillScreen+0x30>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	b219      	sxth	r1, r3
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	460b      	mov	r3, r1
 8001200:	2100      	movs	r1, #0
 8001202:	2000      	movs	r0, #0
 8001204:	f000 f808 	bl	8001218 <ST7789_FillRect>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000424 	.word	0x20000424
 8001214:	20000426 	.word	0x20000426

08001218 <ST7789_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4603      	mov	r3, r0
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	4613      	mov	r3, r2
 8001234:	803b      	strh	r3, [r7, #0]
	
  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <ST7789_FillRect+0xb4>)
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	4293      	cmp	r3, r2
 8001240:	da40      	bge.n	80012c4 <ST7789_FillRect+0xac>
 8001242:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001246:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <ST7789_FillRect+0xb8>)
 8001248:	8812      	ldrh	r2, [r2, #0]
 800124a:	4293      	cmp	r3, r2
 800124c:	da3a      	bge.n	80012c4 <ST7789_FillRect+0xac>
	  return;
  }
  
  if ((x + w) > ST7789_Width){	  
 800124e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001252:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001256:	4413      	add	r3, r2
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <ST7789_FillRect+0xb4>)
 800125a:	8812      	ldrh	r2, [r2, #0]
 800125c:	4293      	cmp	r3, r2
 800125e:	dd05      	ble.n	800126c <ST7789_FillRect+0x54>
	  w = ST7789_Width - x;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <ST7789_FillRect+0xb4>)
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	807b      	strh	r3, [r7, #2]
  }
  
  if ((y + h) > ST7789_Height){
 800126c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001270:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001274:	4413      	add	r3, r2
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <ST7789_FillRect+0xb8>)
 8001278:	8812      	ldrh	r2, [r2, #0]
 800127a:	4293      	cmp	r3, r2
 800127c:	dd05      	ble.n	800128a <ST7789_FillRect+0x72>
	  h = ST7789_Height - y;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <ST7789_FillRect+0xb8>)
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	88bb      	ldrh	r3, [r7, #4]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	803b      	strh	r3, [r7, #0]
  }
  
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 800128a:	88f8      	ldrh	r0, [r7, #6]
 800128c:	88b9      	ldrh	r1, [r7, #4]
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	4413      	add	r3, r2
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b29c      	uxth	r4, r3
 800129a:	88ba      	ldrh	r2, [r7, #4]
 800129c:	883b      	ldrh	r3, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4622      	mov	r2, r4
 80012a8:	f000 f814 	bl	80012d4 <ST7789_SetWindow>
  
//  for (uint32_t i = 0; i < (h * w); i++){
//	  ST7789_RamWrite(&color, 1);
//  }
		
  ST7789_RamWrite(&color, (h * w)); 
 80012ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	f107 0018 	add.w	r0, r7, #24
 80012be:	f000 f82f 	bl	8001320 <ST7789_RamWrite>
 80012c2:	e000      	b.n	80012c6 <ST7789_FillRect+0xae>
	  return;
 80012c4:	bf00      	nop
}
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	20000424 	.word	0x20000424
 80012d0:	20000426 	.word	0x20000426

080012d4 <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	4603      	mov	r3, r0
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	803b      	strh	r3, [r7, #0]
	
	ST7789_Select();
 80012f2:	f7ff fe83 	bl	8000ffc <ST7789_Select>
	
	ST7789_ColumnSet(x0, x1);
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f833 	bl	8001368 <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 8001302:	883a      	ldrh	r2, [r7, #0]
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f86f 	bl	80013ec <ST7789_RowSet>
	
	// write to RAM
	ST7789_SendCmd(ST7789_RAMWR);
 800130e:	202c      	movs	r0, #44	; 0x2c
 8001310:	f7ff feea 	bl	80010e8 <ST7789_SendCmd>
	
	ST7789_Unselect();
 8001314:	f7ff fe7e 	bl	8001014 <ST7789_Unselect>
	
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}

08001320 <ST7789_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
void ST7789_RamWrite(uint16_t *pBuff, uint32_t Len){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	
  ST7789_Select();
 800132a:	f7ff fe67 	bl	8000ffc <ST7789_Select>
	
  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	737b      	strb	r3, [r7, #13]
	
  while (Len--){
 8001342:	e005      	b.n	8001350 <ST7789_RamWrite+0x30>
//    ST7789_SendData( buff[0] );  
//    ST7789_SendData( buff[1] );
	  ST7789_SendDataMASS( buff, 2);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff0c 	bl	8001168 <ST7789_SendDataMASS>
  while (Len--){
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	1e5a      	subs	r2, r3, #1
 8001354:	603a      	str	r2, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f4      	bne.n	8001344 <ST7789_RamWrite+0x24>
  } 
	
  ST7789_Unselect();
 800135a:	f7ff fe5b 	bl	8001014 <ST7789_Unselect>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <ST7789_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
 void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	80fb      	strh	r3, [r7, #6]
 8001374:	4613      	mov	r3, r2
 8001376:	80bb      	strh	r3, [r7, #4]
	
  if (ColumnStart > ColumnEnd){
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	d82a      	bhi.n	80013d6 <ST7789_ColumnSet+0x6e>
    return;
  }
  
  if (ColumnEnd > ST7789_Width){
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <ST7789_ColumnSet+0x7c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	88ba      	ldrh	r2, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d827      	bhi.n	80013da <ST7789_ColumnSet+0x72>
    return;
  }
  
  ColumnStart += ST7789_X_Start;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <ST7789_ColumnSet+0x80>)
 800138c:	881a      	ldrh	r2, [r3, #0]
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4413      	add	r3, r2
 8001392:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += ST7789_X_Start;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <ST7789_ColumnSet+0x80>)
 8001396:	881a      	ldrh	r2, [r3, #0]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	80bb      	strh	r3, [r7, #4]
  
  ST7789_SendCmd(ST7789_CASET);
 800139e:	202a      	movs	r0, #42	; 0x2a
 80013a0:	f7ff fea2 	bl	80010e8 <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);  
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fec1 	bl	8001134 <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);  
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff febc 	bl	8001134 <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);  
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff feb5 	bl	8001134 <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);  
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff feb0 	bl	8001134 <ST7789_SendData>
 80013d4:	e002      	b.n	80013dc <ST7789_ColumnSet+0x74>
    return;
 80013d6:	bf00      	nop
 80013d8:	e000      	b.n	80013dc <ST7789_ColumnSet+0x74>
    return;
 80013da:	bf00      	nop
  
}
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000424 	.word	0x20000424
 80013e8:	20000420 	.word	0x20000420

080013ec <ST7789_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
 void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	80fb      	strh	r3, [r7, #6]
 80013f8:	4613      	mov	r3, r2
 80013fa:	80bb      	strh	r3, [r7, #4]
	
  if (RowStart > RowEnd){
 80013fc:	88fa      	ldrh	r2, [r7, #6]
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d82a      	bhi.n	800145a <ST7789_RowSet+0x6e>
    return;
  }
  
  if (RowEnd > ST7789_Height){
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <ST7789_RowSet+0x7c>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	88ba      	ldrh	r2, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	d827      	bhi.n	800145e <ST7789_RowSet+0x72>
    return;
  }
  
  RowStart += ST7789_Y_Start;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <ST7789_RowSet+0x80>)
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4413      	add	r3, r2
 8001416:	80fb      	strh	r3, [r7, #6]
  RowEnd += ST7789_Y_Start;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <ST7789_RowSet+0x80>)
 800141a:	881a      	ldrh	r2, [r3, #0]
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	80bb      	strh	r3, [r7, #4]
 
  ST7789_SendCmd(ST7789_RASET);
 8001422:	202b      	movs	r0, #43	; 0x2b
 8001424:	f7ff fe60 	bl	80010e8 <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);  
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fe7f 	bl	8001134 <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);  
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe7a 	bl	8001134 <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);  
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe73 	bl	8001134 <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);  
 800144e:	88bb      	ldrh	r3, [r7, #4]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe6e 	bl	8001134 <ST7789_SendData>
 8001458:	e002      	b.n	8001460 <ST7789_RowSet+0x74>
    return;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <ST7789_RowSet+0x74>
    return;
 800145e:	bf00      	nop

}
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000426 	.word	0x20000426
 800146c:	20000422 	.word	0x20000422

08001470 <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
 void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	
  int16_t TempValue = *pValue1;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	89fa      	ldrh	r2, [r7, #14]
 800148e:	801a      	strh	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <ST7789_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void ST7789_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	4604      	mov	r4, r0
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4623      	mov	r3, r4
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	4603      	mov	r3, r0
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	807b      	strh	r3, [r7, #2]
 80014b6:	4613      	mov	r3, r2
 80014b8:	803b      	strh	r3, [r7, #0]
	
  if (x1 > x2){
 80014ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dd05      	ble.n	80014d2 <ST7789_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 80014c6:	1cba      	adds	r2, r7, #2
 80014c8:	1dbb      	adds	r3, r7, #6
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffcf 	bl	8001470 <SwapInt16Values>
  }
  
  if (y1 > y2){
 80014d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dd05      	ble.n	80014ea <ST7789_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 80014de:	463a      	mov	r2, r7
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffc3 	bl	8001470 <SwapInt16Values>
  }
  
  ST7789_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 80014ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	b21c      	sxth	r4, r3
 8001504:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001508:	b29a      	uxth	r2, r3
 800150a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800150e:	b29b      	uxth	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	b21a      	sxth	r2, r3
 8001516:	8b3b      	ldrh	r3, [r7, #24]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4613      	mov	r3, r2
 800151c:	4622      	mov	r2, r4
 800151e:	f7ff fe7b 	bl	8001218 <ST7789_FillRect>
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <ST7789_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
 void ST7789_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800152a:	b590      	push	{r4, r7, lr}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	4604      	mov	r4, r0
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	461a      	mov	r2, r3
 8001538:	4623      	mov	r3, r4
 800153a:	80fb      	strh	r3, [r7, #6]
 800153c:	4603      	mov	r3, r0
 800153e:	80bb      	strh	r3, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	803b      	strh	r3, [r7, #0]
	
  const int16_t deltaX = abs(x2 - x1);
 8001548:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	bfb8      	it	lt
 8001556:	425b      	neglt	r3, r3
 8001558:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 800155a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800155e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	bfb8      	it	lt
 8001568:	425b      	neglt	r3, r3
 800156a:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 800156c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001574:	429a      	cmp	r2, r3
 8001576:	da01      	bge.n	800157c <ST7789_DrawLine_Slow+0x52>
 8001578:	2301      	movs	r3, #1
 800157a:	e001      	b.n	8001580 <ST7789_DrawLine_Slow+0x56>
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 8001582:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001586:	f9b7 3000 	ldrsh.w	r3, [r7]
 800158a:	429a      	cmp	r2, r3
 800158c:	da01      	bge.n	8001592 <ST7789_DrawLine_Slow+0x68>
 800158e:	2301      	movs	r3, #1
 8001590:	e001      	b.n	8001596 <ST7789_DrawLine_Slow+0x6c>
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8001598:	8aba      	ldrh	r2, [r7, #20]
 800159a:	8a7b      	ldrh	r3, [r7, #18]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	82fb      	strh	r3, [r7, #22]

  ST7789_DrawPixel(x2, y2, color);
 80015a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015a4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80015a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f8bd 	bl	800172c <ST7789_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 80015b2:	e02c      	b.n	800160e <ST7789_DrawLine_Slow+0xe4>
	  
    ST7789_DrawPixel(x1, y1, color);
 80015b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f8b4 	bl	800172c <ST7789_DrawPixel>
    const int16_t error2 = error * 2;
 80015c4:	8afb      	ldrh	r3, [r7, #22]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) {
 80015cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015d4:	425b      	negs	r3, r3
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dd09      	ble.n	80015ee <ST7789_DrawLine_Slow+0xc4>
		
      error -= deltaY;
 80015da:	8afa      	ldrh	r2, [r7, #22]
 80015dc:	8a7b      	ldrh	r3, [r7, #18]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 80015e4:	88fa      	ldrh	r2, [r7, #6]
 80015e6:	8a3b      	ldrh	r3, [r7, #16]
 80015e8:	4413      	add	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 80015ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	da09      	bge.n	800160e <ST7789_DrawLine_Slow+0xe4>
		
      error += deltaX;
 80015fa:	8afa      	ldrh	r2, [r7, #22]
 80015fc:	8abb      	ldrh	r3, [r7, #20]
 80015fe:	4413      	add	r3, r2
 8001600:	b29b      	uxth	r3, r3
 8001602:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 8001604:	88ba      	ldrh	r2, [r7, #4]
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	4413      	add	r3, r2
 800160a:	b29b      	uxth	r3, r3
 800160c:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 800160e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001612:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001616:	429a      	cmp	r2, r3
 8001618:	d1cc      	bne.n	80015b4 <ST7789_DrawLine_Slow+0x8a>
 800161a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800161e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001622:	429a      	cmp	r2, r3
 8001624:	d1c6      	bne.n	80015b4 <ST7789_DrawLine_Slow+0x8a>
    }
  }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <ST7789_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af02      	add	r7, sp, #8
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	80fb      	strh	r3, [r7, #6]
 8001642:	4603      	mov	r3, r0
 8001644:	80bb      	strh	r3, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	807b      	strh	r3, [r7, #2]
 800164a:	4613      	mov	r3, r2
 800164c:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 800164e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001656:	429a      	cmp	r2, r3
 8001658:	d129      	bne.n	80016ae <ST7789_DrawLine+0x7e>

    if (y1 > y2){
 800165a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800165e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001662:	429a      	cmp	r2, r3
 8001664:	dd11      	ble.n	800168a <ST7789_DrawLine+0x5a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 8001666:	88ba      	ldrh	r2, [r7, #4]
 8001668:	883b      	ldrh	r3, [r7, #0]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b29b      	uxth	r3, r3
 800166e:	3301      	adds	r3, #1
 8001670:	b29b      	uxth	r3, r3
 8001672:	b21a      	sxth	r2, r3
 8001674:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001678:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800167c:	8b3b      	ldrh	r3, [r7, #24]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	2201      	movs	r2, #1
 8001684:	f7ff fdc8 	bl	8001218 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}
	
    return;
 8001688:	e04c      	b.n	8001724 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 800168a:	883a      	ldrh	r2, [r7, #0]
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b29b      	uxth	r3, r3
 8001696:	b21a      	sxth	r2, r3
 8001698:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800169c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016a0:	8b3b      	ldrh	r3, [r7, #24]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	2201      	movs	r2, #1
 80016a8:	f7ff fdb6 	bl	8001218 <ST7789_FillRect>
    return;
 80016ac:	e03a      	b.n	8001724 <ST7789_DrawLine+0xf4>
  }
  
  if (y1 == y2){
 80016ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d127      	bne.n	800170a <ST7789_DrawLine+0xda>
    
    if (x1 > x2){
 80016ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dd10      	ble.n	80016e8 <ST7789_DrawLine+0xb8>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 80016c6:	88fa      	ldrh	r2, [r7, #6]
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016d8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	f7ff fd99 	bl	8001218 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}
	
    return;
 80016e6:	e01d      	b.n	8001724 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 80016e8:	887a      	ldrh	r2, [r7, #2]
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016fe:	8b3b      	ldrh	r3, [r7, #24]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	f7ff fd88 	bl	8001218 <ST7789_FillRect>
    return;
 8001708:	e00c      	b.n	8001724 <ST7789_DrawLine+0xf4>
  }
  
  ST7789_DrawLine_Slow(x1, y1, x2, y2, color);
 800170a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800170e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001712:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001716:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800171a:	8b3b      	ldrh	r3, [r7, #24]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4623      	mov	r3, r4
 8001720:	f7ff ff03 	bl	800152a <ST7789_DrawLine_Slow>
}
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
	...

0800172c <ST7789_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	460b      	mov	r3, r1
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	807b      	strh	r3, [r7, #2]
	
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db1b      	blt.n	800177e <ST7789_DrawPixel+0x52>
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <ST7789_DrawPixel+0x5c>)
 800174c:	8812      	ldrh	r2, [r2, #0]
 800174e:	4293      	cmp	r3, r2
 8001750:	da15      	bge.n	800177e <ST7789_DrawPixel+0x52>
 8001752:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db11      	blt.n	800177e <ST7789_DrawPixel+0x52>
 800175a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <ST7789_DrawPixel+0x60>)
 8001760:	8812      	ldrh	r2, [r2, #0]
 8001762:	4293      	cmp	r3, r2
 8001764:	da0b      	bge.n	800177e <ST7789_DrawPixel+0x52>
    return;
  }

  ST7789_SetWindow(x, y, x, y);
 8001766:	88f8      	ldrh	r0, [r7, #6]
 8001768:	88b9      	ldrh	r1, [r7, #4]
 800176a:	88fa      	ldrh	r2, [r7, #6]
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	f7ff fdb1 	bl	80012d4 <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 8001772:	1cbb      	adds	r3, r7, #2
 8001774:	2101      	movs	r1, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fdd2 	bl	8001320 <ST7789_RamWrite>
 800177c:	e000      	b.n	8001780 <ST7789_DrawPixel+0x54>
    return;
 800177e:	bf00      	nop
}
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000424 	.word	0x20000424
 800178c:	20000426 	.word	0x20000426

08001790 <ST7789_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void ST7789_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af02      	add	r7, sp, #8
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	80fb      	strh	r3, [r7, #6]
 80017a2:	4603      	mov	r3, r0
 80017a4:	80bb      	strh	r3, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	807b      	strh	r3, [r7, #2]
 80017aa:	4613      	mov	r3, r2
 80017ac:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  int y = radius;
 80017b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017b6:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 80017b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	f1c3 0301 	rsb	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
  int error = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 80017c8:	e075      	b.n	80018b6 <ST7789_DrawCircleFilled+0x126>
	  
    ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4413      	add	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	88ba      	ldrh	r2, [r7, #4]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b219      	sxth	r1, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4413      	add	r3, r2
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b21c      	sxth	r4, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	883b      	ldrh	r3, [r7, #0]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	4622      	mov	r2, r4
 8001802:	f7ff ff15 	bl	8001630 <ST7789_DrawLine>
    ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 8001806:	88fa      	ldrh	r2, [r7, #6]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	b29b      	uxth	r3, r3
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	b218      	sxth	r0, r3
 8001812:	88ba      	ldrh	r2, [r7, #4]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	b29b      	uxth	r3, r3
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	b219      	sxth	r1, r3
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	b29b      	uxth	r3, r3
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	b29b      	uxth	r3, r3
 8001828:	b21c      	sxth	r4, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	b29a      	uxth	r2, r3
 800182e:	88bb      	ldrh	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	b21a      	sxth	r2, r3
 8001836:	883b      	ldrh	r3, [r7, #0]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4613      	mov	r3, r2
 800183c:	4622      	mov	r2, r4
 800183e:	f7ff fef7 	bl	8001630 <ST7789_DrawLine>
    error = 2 * (delta + y) - 1;
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da0c      	bge.n	800186e <ST7789_DrawCircleFilled+0xde>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	dc09      	bgt.n	800186e <ST7789_DrawCircleFilled+0xde>
		
      ++x;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	3301      	adds	r3, #1
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
      continue;
 800186c:	e023      	b.n	80018b6 <ST7789_DrawCircleFilled+0x126>
    }
	
    error = 2 * (delta - x) - 1;
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	dd0d      	ble.n	800189c <ST7789_DrawCircleFilled+0x10c>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	dd0a      	ble.n	800189c <ST7789_DrawCircleFilled+0x10c>
		
      --y;
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	3b01      	subs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	f1c3 0301 	rsb	r3, r3, #1
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
      continue;
 800189a:	e00c      	b.n	80018b6 <ST7789_DrawCircleFilled+0x126>
    }
	
    ++x;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
    --y;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da86      	bge.n	80017ca <ST7789_DrawCircleFilled+0x3a>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}
	...

080018c8 <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	4603      	mov	r3, r0
 80018dc:	80bb      	strh	r3, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	807b      	strh	r3, [r7, #2]
 80018e2:	4613      	mov	r3, r2
 80018e4:	803b      	strh	r3, [r7, #0]
	
	uint32_t i, b, j;
	
	uint32_t X = x, Y = y;
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
	
	uint8_t xx, yy;
	
	if( multiplier < 1 ){
 80018ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <ST7789_DrawChar+0x34>
		multiplier = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}

	/* Check available space in LCD */
	if (ST7789_Width >= ( x + Font->FontWidth) || ST7789_Height >= ( y + Font->FontHeight)){
 80018fc:	4b90      	ldr	r3, [pc, #576]	; (8001b40 <ST7789_DrawChar+0x278>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	4413      	add	r3, r2
 800190a:	4299      	cmp	r1, r3
 800190c:	da09      	bge.n	8001922 <ST7789_DrawChar+0x5a>
 800190e:	4b8d      	ldr	r3, [pc, #564]	; (8001b44 <ST7789_DrawChar+0x27c>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001918:	7852      	ldrb	r2, [r2, #1]
 800191a:	4413      	add	r3, r2
 800191c:	4299      	cmp	r1, r3
 800191e:	f2c0 8154 	blt.w	8001bca <ST7789_DrawChar+0x302>

	
			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {		
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e149      	b.n	8001bbc <ST7789_DrawChar+0x2f4>
				
				if( ch < 127 ){			
 8001928:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800192c:	2b7e      	cmp	r3, #126	; 0x7e
 800192e:	d810      	bhi.n	8001952 <ST7789_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001938:	3b20      	subs	r3, #32
 800193a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800193c:	7849      	ldrb	r1, [r1, #1]
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4619      	mov	r1, r3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	440b      	add	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	e0b8      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch > 191 ){
 8001952:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001956:	2bbf      	cmp	r3, #191	; 0xbf
 8001958:	d910      	bls.n	800197c <ST7789_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом 
					// только кирилицу то нужно добавлять 95 если шрифт 
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 800195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001962:	3b60      	subs	r3, #96	; 0x60
 8001964:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001966:	7849      	ldrb	r1, [r1, #1]
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4619      	mov	r1, r3
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	440b      	add	r3, r1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	e0a3      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 800197c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001980:	2ba8      	cmp	r3, #168	; 0xa8
 8001982:	d110      	bne.n	80019a6 <ST7789_DrawChar+0xde>
					// 160 эллемент ( символ Ё ) 
					b = Font->data[( 160 ) * Font->FontHeight + i];
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	4619      	mov	r1, r3
 800198e:	460b      	mov	r3, r1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	015b      	lsls	r3, r3, #5
 8001996:	4619      	mov	r1, r3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	440b      	add	r3, r1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	e08e      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 80019a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019aa:	2bb8      	cmp	r3, #184	; 0xb8
 80019ac:	d111      	bne.n	80019d2 <ST7789_DrawChar+0x10a>
					// 161 эллемент  ( символ ё ) 
					b = Font->data[( 161 ) * Font->FontHeight + i];
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	4413      	add	r3, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	440b      	add	r3, r1
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	e078      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------
				
				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 80019d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019d6:	2baa      	cmp	r3, #170	; 0xaa
 80019d8:	d10f      	bne.n	80019fa <ST7789_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 80019da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	4619      	mov	r1, r3
 80019e4:	23a2      	movs	r3, #162	; 0xa2
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	440b      	add	r3, r1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	e064      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 80019fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019fe:	2baf      	cmp	r3, #175	; 0xaf
 8001a00:	d10f      	bne.n	8001a22 <ST7789_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	23a3      	movs	r3, #163	; 0xa3
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	440b      	add	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	e050      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 8001a22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a26:	2bb2      	cmp	r3, #178	; 0xb2
 8001a28:	d10f      	bne.n	8001a4a <ST7789_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	785b      	ldrb	r3, [r3, #1]
 8001a32:	4619      	mov	r1, r3
 8001a34:	23a4      	movs	r3, #164	; 0xa4
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	440b      	add	r3, r1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	e03c      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 8001a4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a4e:	2bb3      	cmp	r3, #179	; 0xb3
 8001a50:	d111      	bne.n	8001a76 <ST7789_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	785b      	ldrb	r3, [r3, #1]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0159      	lsls	r1, r3, #5
 8001a64:	440b      	add	r3, r1
 8001a66:	4619      	mov	r1, r3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	440b      	add	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	e026      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 8001a76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a7a:	2bba      	cmp	r3, #186	; 0xba
 8001a7c:	d10f      	bne.n	8001a9e <ST7789_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	4619      	mov	r1, r3
 8001a88:	23a6      	movs	r3, #166	; 0xa6
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	440b      	add	r3, r1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e012      	b.n	8001ac4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 8001a9e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001aa2:	2bbf      	cmp	r3, #191	; 0xbf
 8001aa4:	d10e      	bne.n	8001ac4 <ST7789_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	23a7      	movs	r3, #167	; 0xa7
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	440b      	add	r3, r1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------
			
				for (j = 0; j < Font->FontWidth; j++) {
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e068      	b.n	8001b9c <ST7789_DrawChar+0x2d4>
					
					if ((b << j) & 0x8000) {
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d028      	beq.n	8001b2c <ST7789_DrawChar+0x264>
						
						for (yy = 0; yy < multiplier; yy++){
 8001ada:	2300      	movs	r3, #0
 8001adc:	72bb      	strb	r3, [r7, #10]
 8001ade:	e01f      	b.n	8001b20 <ST7789_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	72fb      	strb	r3, [r7, #11]
 8001ae4:	e014      	b.n	8001b10 <ST7789_DrawChar+0x248>
									ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	7abb      	ldrb	r3, [r7, #10]
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff fe11 	bl	800172c <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	72fb      	strb	r3, [r7, #11]
 8001b10:	7afa      	ldrb	r2, [r7, #11]
 8001b12:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d3e5      	bcc.n	8001ae6 <ST7789_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 8001b1a:	7abb      	ldrb	r3, [r7, #10]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	72bb      	strb	r3, [r7, #10]
 8001b20:	7aba      	ldrb	r2, [r7, #10]
 8001b22:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3da      	bcc.n	8001ae0 <ST7789_DrawChar+0x218>
 8001b2a:	e02f      	b.n	8001b8c <ST7789_DrawChar+0x2c4>
							}
						}
						
					} 
					else if( TransparentBg ){
 8001b2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02b      	beq.n	8001b8c <ST7789_DrawChar+0x2c4>
						
						for (yy = 0; yy < multiplier; yy++){
 8001b34:	2300      	movs	r3, #0
 8001b36:	72bb      	strb	r3, [r7, #10]
 8001b38:	e023      	b.n	8001b82 <ST7789_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	72fb      	strb	r3, [r7, #11]
 8001b3e:	e018      	b.n	8001b72 <ST7789_DrawChar+0x2aa>
 8001b40:	20000424 	.word	0x20000424
 8001b44:	20000426 	.word	0x20000426
									ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b218      	sxth	r0, r3
 8001b56:	7abb      	ldrb	r3, [r7, #10]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	883a      	ldrh	r2, [r7, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff fde0 	bl	800172c <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	72fb      	strb	r3, [r7, #11]
 8001b72:	7afa      	ldrb	r2, [r7, #11]
 8001b74:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3e5      	bcc.n	8001b48 <ST7789_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8001b7c:	7abb      	ldrb	r3, [r7, #10]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	72bb      	strb	r3, [r7, #10]
 8001b82:	7aba      	ldrb	r2, [r7, #10]
 8001b84:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3d6      	bcc.n	8001b3a <ST7789_DrawChar+0x272>
							}
						}
						
					}
					X = X + multiplier;
 8001b8c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4413      	add	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d390      	bcc.n	8001aca <ST7789_DrawChar+0x202>
				}
				X = x;
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8001bac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {		
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	f4ff aeaf 	bcc.w	8001928 <ST7789_DrawChar+0x60>
			}
	}
}
 8001bca:	bf00      	nop
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	bf00      	nop

08001bd4 <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4623      	mov	r3, r4
 8001be4:	80fb      	strh	r3, [r7, #6]
 8001be6:	4603      	mov	r3, r0
 8001be8:	80bb      	strh	r3, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	803b      	strh	r3, [r7, #0]
	
	if( multiplier < 1 ){
 8001bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <ST7789_print+0x2c>
		multiplier = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8001c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c02:	f7fe faed 	bl	80001e0 <strlen>
 8001c06:	4603      	mov	r3, r0
 8001c08:	81bb      	strh	r3, [r7, #12]
	
	while (len--) {
 8001c0a:	e09c      	b.n	8001d46 <ST7789_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2bbf      	cmp	r3, #191	; 0xbf
 8001c12:	d977      	bls.n	8001d04 <ST7789_print+0x130>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2bd0      	cmp	r3, #208	; 0xd0
 8001c1a:	d002      	beq.n	8001c22 <ST7789_print+0x4e>
 8001c1c:	2bd1      	cmp	r3, #209	; 0xd1
 8001c1e:	d02c      	beq.n	8001c7a <ST7789_print+0xa6>
 8001c20:	e05b      	b.n	8001cda <ST7789_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	3301      	adds	r3, #1
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b8f      	cmp	r3, #143	; 0x8f
 8001c2e:	d908      	bls.n	8001c42 <ST7789_print+0x6e>
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2bbf      	cmp	r3, #191	; 0xbf
 8001c36:	d804      	bhi.n	8001c42 <ST7789_print+0x6e>
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3330      	adds	r3, #48	; 0x30
 8001c3e:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001c40:	e048      	b.n	8001cd4 <ST7789_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b81      	cmp	r3, #129	; 0x81
 8001c48:	d102      	bne.n	8001c50 <ST7789_print+0x7c>
 8001c4a:	23a8      	movs	r3, #168	; 0xa8
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e044      	b.n	8001cda <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b84      	cmp	r3, #132	; 0x84
 8001c56:	d102      	bne.n	8001c5e <ST7789_print+0x8a>
 8001c58:	23aa      	movs	r3, #170	; 0xaa
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e03d      	b.n	8001cda <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b86      	cmp	r3, #134	; 0x86
 8001c64:	d102      	bne.n	8001c6c <ST7789_print+0x98>
 8001c66:	23b2      	movs	r3, #178	; 0xb2
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e036      	b.n	8001cda <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b87      	cmp	r3, #135	; 0x87
 8001c72:	d12f      	bne.n	8001cd4 <ST7789_print+0x100>
 8001c74:	23af      	movs	r3, #175	; 0xaf
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e02f      	b.n	8001cda <ST7789_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	da08      	bge.n	8001c9c <ST7789_print+0xc8>
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b8f      	cmp	r3, #143	; 0x8f
 8001c90:	d804      	bhi.n	8001c9c <ST7789_print+0xc8>
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	3370      	adds	r3, #112	; 0x70
 8001c98:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001c9a:	e01d      	b.n	8001cd8 <ST7789_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b91      	cmp	r3, #145	; 0x91
 8001ca2:	d102      	bne.n	8001caa <ST7789_print+0xd6>
 8001ca4:	23b8      	movs	r3, #184	; 0xb8
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e017      	b.n	8001cda <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b94      	cmp	r3, #148	; 0x94
 8001cb0:	d102      	bne.n	8001cb8 <ST7789_print+0xe4>
 8001cb2:	23ba      	movs	r3, #186	; 0xba
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e010      	b.n	8001cda <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b96      	cmp	r3, #150	; 0x96
 8001cbe:	d102      	bne.n	8001cc6 <ST7789_print+0xf2>
 8001cc0:	23b3      	movs	r3, #179	; 0xb3
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e009      	b.n	8001cda <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b97      	cmp	r3, #151	; 0x97
 8001ccc:	d104      	bne.n	8001cd8 <ST7789_print+0x104>
 8001cce:	23bf      	movs	r3, #191	; 0xbf
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e002      	b.n	8001cda <ST7789_print+0x106>
					break;
 8001cd4:	bf00      	nop
 8001cd6:	e000      	b.n	8001cda <ST7789_print+0x106>
					break;
 8001cd8:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001cda:	89bb      	ldrh	r3, [r7, #12]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	81bb      	strh	r3, [r7, #12]
			
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8001ce0:	883c      	ldrh	r4, [r7, #0]
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	88b9      	ldrh	r1, [r7, #4]
 8001ce6:	88f8      	ldrh	r0, [r7, #6]
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	9303      	str	r3, [sp, #12]
 8001cec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	f7ff fde3 	bl	80018c8 <ST7789_DrawChar>
 8001d02:	e011      	b.n	8001d28 <ST7789_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	883c      	ldrh	r4, [r7, #0]
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	88b9      	ldrh	r1, [r7, #4]
 8001d0e:	88f8      	ldrh	r0, [r7, #6]
 8001d10:	9303      	str	r3, [sp, #12]
 8001d12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4623      	mov	r3, r4
 8001d24:	f7ff fdd0 	bl	80018c8 <ST7789_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	fb12 f303 	smulbb	r3, r2, r3
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	3301      	adds	r3, #1
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (len--) {
 8001d46:	89bb      	ldrh	r3, [r7, #12]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	81ba      	strh	r2, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f af5d 	bne.w	8001c0c <ST7789_print+0x38>
	}
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd90      	pop	{r4, r7, pc}

08001d5c <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
	
	ST7789_Select();
 8001d66:	f7ff f949 	bl	8000ffc <ST7789_Select>
	
	ST7789_SendCmd(ST7789_MADCTL);
 8001d6a:	2036      	movs	r0, #54	; 0x36
 8001d6c:	f7ff f9bc 	bl	80010e8 <ST7789_SendCmd>

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d85b      	bhi.n	8001e30 <ST7789_rotation+0xd4>
 8001d78:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <ST7789_rotation+0x24>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001db9 	.word	0x08001db9
 8001d88:	08001de1 	.word	0x08001de1
 8001d8c:	08001e09 	.word	0x08001e09
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_RGB);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff f9cf 	bl	8001134 <ST7789_SendData>
				ST7789_Width = 240;
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <ST7789_rotation+0xe4>)
 8001d98:	22f0      	movs	r2, #240	; 0xf0
 8001d9a:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <ST7789_rotation+0xe8>)
 8001d9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001da2:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <ST7789_rotation+0xec>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <ST7789_rotation+0xf0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fa17 	bl	80011e4 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001db6:	e03c      	b.n	8001e32 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001db8:	2060      	movs	r0, #96	; 0x60
 8001dba:	f7ff f9bb 	bl	8001134 <ST7789_SendData>
				ST7789_Width = 320;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <ST7789_rotation+0xe4>)
 8001dc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dc4:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;		
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <ST7789_rotation+0xe8>)
 8001dc8:	22f0      	movs	r2, #240	; 0xf0
 8001dca:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <ST7789_rotation+0xec>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <ST7789_rotation+0xf0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fa03 	bl	80011e4 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001dde:	e028      	b.n	8001e32 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001de0:	20c0      	movs	r0, #192	; 0xc0
 8001de2:	f7ff f9a7 	bl	8001134 <ST7789_SendData>
				ST7789_Width = 240;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <ST7789_rotation+0xe4>)
 8001de8:	22f0      	movs	r2, #240	; 0xf0
 8001dea:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <ST7789_rotation+0xe8>)
 8001dee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001df2:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <ST7789_rotation+0xec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <ST7789_rotation+0xf0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff f9ef 	bl	80011e4 <ST7789_FillScreen>
			#endif
			//==========================================================================
			
		 break;
 8001e06:	e014      	b.n	8001e32 <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001e08:	20a0      	movs	r0, #160	; 0xa0
 8001e0a:	f7ff f993 	bl	8001134 <ST7789_SendData>
				ST7789_Width = 320;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <ST7789_rotation+0xe4>)
 8001e10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e14:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <ST7789_rotation+0xe8>)
 8001e18:	22f0      	movs	r2, #240	; 0xf0
 8001e1a:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <ST7789_rotation+0xec>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <ST7789_rotation+0xf0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff f9db 	bl	80011e4 <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8001e2e:	e000      	b.n	8001e32 <ST7789_rotation+0xd6>
	   
	   default:
		 break;
 8001e30:	bf00      	nop
	  }
	  
	  ST7789_Unselect();
 8001e32:	f7ff f8ef 	bl	8001014 <ST7789_Unselect>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000424 	.word	0x20000424
 8001e44:	20000426 	.word	0x20000426
 8001e48:	20000420 	.word	0x20000420
 8001e4c:	20000422 	.word	0x20000422

08001e50 <ST7789_DrawFillRoundRect>:


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( заполненый )
//==============================================================================
void ST7789_DrawFillRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint16_t color) {
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	4604      	mov	r4, r0
 8001e58:	4608      	mov	r0, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	80fb      	strh	r3, [r7, #6]
 8001e62:	4603      	mov	r3, r0
 8001e64:	80bb      	strh	r3, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	803b      	strh	r3, [r7, #0]
	
	int16_t max_radius = ((width < height) ? width : height) / 2; // 1/2 minor axis
 8001e6e:	883a      	ldrh	r2, [r7, #0]
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	4293      	cmp	r3, r2
 8001e74:	bf28      	it	cs
 8001e76:	4613      	movcs	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	0fda      	lsrs	r2, r3, #31
 8001e7c:	4413      	add	r3, r2
 8001e7e:	105b      	asrs	r3, r3, #1
 8001e80:	81fb      	strh	r3, [r7, #14]
  if (cornerRadius > max_radius){
 8001e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dd01      	ble.n	8001e92 <ST7789_DrawFillRoundRect+0x42>
    cornerRadius = max_radius;
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	843b      	strh	r3, [r7, #32]
	}
	
  ST7789_DrawRectangleFilled(x + cornerRadius, y, x + cornerRadius + width - 2 * cornerRadius, y + height, color);
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	8c3b      	ldrh	r3, [r7, #32]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b218      	sxth	r0, r3
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	8c3b      	ldrh	r3, [r7, #32]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	8c3b      	ldrh	r3, [r7, #32]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b21c      	sxth	r4, r3
 8001eb6:	88ba      	ldrh	r2, [r7, #4]
 8001eb8:	883b      	ldrh	r3, [r7, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	4622      	mov	r2, r4
 8001ecc:	f7ff fae6 	bl	800149c <ST7789_DrawRectangleFilled>
  // draw four corners
  ST7789_DrawFillCircleHelper(x + width - cornerRadius - 1, y + cornerRadius, cornerRadius, 1, height - 2 * cornerRadius - 1, color);
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	8c3b      	ldrh	r3, [r7, #32]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b218      	sxth	r0, r3
 8001ee4:	88ba      	ldrh	r2, [r7, #4]
 8001ee6:	8c3b      	ldrh	r3, [r7, #32]
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b219      	sxth	r1, r3
 8001eee:	8c3b      	ldrh	r3, [r7, #32]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	883a      	ldrh	r2, [r7, #0]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001f04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f06:	9201      	str	r2, [sp, #4]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	f000 f820 	bl	8001f52 <ST7789_DrawFillCircleHelper>
  ST7789_DrawFillCircleHelper(x + cornerRadius, y + cornerRadius, cornerRadius, 2, height - 2 * cornerRadius - 1, color);
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	8c3b      	ldrh	r3, [r7, #32]
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	b218      	sxth	r0, r3
 8001f1c:	88ba      	ldrh	r2, [r7, #4]
 8001f1e:	8c3b      	ldrh	r3, [r7, #32]
 8001f20:	4413      	add	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	b219      	sxth	r1, r3
 8001f26:	8c3b      	ldrh	r3, [r7, #32]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	883a      	ldrh	r2, [r7, #0]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001f3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f3e:	9201      	str	r2, [sp, #4]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2302      	movs	r3, #2
 8001f44:	4622      	mov	r2, r4
 8001f46:	f000 f804 	bl	8001f52 <ST7789_DrawFillCircleHelper>
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}

08001f52 <ST7789_DrawFillCircleHelper>:
//==============================================================================

//==============================================================================
// Процедура рисования половины окружности ( правая или левая ) ( заполненый )
//==============================================================================
void ST7789_DrawFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8001f52:	b590      	push	{r4, r7, lr}
 8001f54:	b089      	sub	sp, #36	; 0x24
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	4604      	mov	r4, r0
 8001f5a:	4608      	mov	r0, r1
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4623      	mov	r3, r4
 8001f62:	80fb      	strh	r3, [r7, #6]
 8001f64:	4603      	mov	r3, r0
 8001f66:	80bb      	strh	r3, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	f1c3 0301 	rsb	r3, r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	461a      	mov	r2, r3
 8001f82:	03d2      	lsls	r2, r2, #15
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8001f98:	89fb      	ldrh	r3, [r7, #14]
 8001f9a:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8001f9c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 8001fa8:	e0d5      	b.n	8002156 <ST7789_DrawFillCircleHelper+0x204>
    if (f >= 0) {
 8001faa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0e      	blt.n	8001fd0 <ST7789_DrawFillCircleHelper+0x7e>
      y--;
 8001fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001fbe:	8a7b      	ldrh	r3, [r7, #18]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8001fc6:	8afa      	ldrh	r2, [r7, #22]
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001fd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001fdc:	8abb      	ldrh	r3, [r7, #20]
 8001fde:	3302      	adds	r3, #2
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001fe4:	8afa      	ldrh	r2, [r7, #22]
 8001fe6:	8abb      	ldrh	r3, [r7, #20]
 8001fe8:	4413      	add	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	82fb      	strh	r3, [r7, #22]

    if (x < (y + 1)) {
 8001fee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ff2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	db51      	blt.n	800209e <ST7789_DrawFillCircleHelper+0x14c>
      if (corners & 1){
 8001ffa:	787b      	ldrb	r3, [r7, #1]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <ST7789_DrawFillCircleHelper+0xfa>
        ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 - y - 1 + 2 * y + delta, color);
 8002004:	88fa      	ldrh	r2, [r7, #6]
 8002006:	8a3b      	ldrh	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	b218      	sxth	r0, r3
 800200e:	88ba      	ldrh	r2, [r7, #4]
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	b219      	sxth	r1, r3
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	8a3b      	ldrh	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	b21c      	sxth	r4, r3
 8002022:	88ba      	ldrh	r2, [r7, #4]
 8002024:	89fb      	ldrh	r3, [r7, #14]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	b29a      	uxth	r2, r3
 800202a:	89fb      	ldrh	r3, [r7, #14]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	b29b      	uxth	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	b29a      	uxth	r2, r3
 8002034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002036:	4413      	add	r3, r2
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29b      	uxth	r3, r3
 800203e:	b21a      	sxth	r2, r3
 8002040:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	4622      	mov	r2, r4
 8002048:	f7ff faf2 	bl	8001630 <ST7789_DrawLine>
			}
      if (corners & 2){
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d023      	beq.n	800209e <ST7789_DrawFillCircleHelper+0x14c>
        ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 - y - 1 + 2 * y + delta, color);
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	8a3b      	ldrh	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	b218      	sxth	r0, r3
 8002060:	88ba      	ldrh	r2, [r7, #4]
 8002062:	89fb      	ldrh	r3, [r7, #14]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	b29b      	uxth	r3, r3
 8002068:	b219      	sxth	r1, r3
 800206a:	88fa      	ldrh	r2, [r7, #6]
 800206c:	8a3b      	ldrh	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21c      	sxth	r4, r3
 8002074:	88ba      	ldrh	r2, [r7, #4]
 8002076:	89fb      	ldrh	r3, [r7, #14]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29a      	uxth	r2, r3
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	b29b      	uxth	r3, r3
 8002082:	4413      	add	r3, r2
 8002084:	b29a      	uxth	r2, r3
 8002086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002088:	4413      	add	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29b      	uxth	r3, r3
 8002090:	b21a      	sxth	r2, r3
 8002092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	4622      	mov	r2, r4
 800209a:	f7ff fac9 	bl	8001630 <ST7789_DrawLine>
			}
    }
    if (y != py) {
 800209e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d053      	beq.n	8002152 <ST7789_DrawFillCircleHelper+0x200>
      if (corners & 1){
 80020aa:	787b      	ldrb	r3, [r7, #1]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <ST7789_DrawFillCircleHelper+0x1aa>
        ST7789_DrawLine(x0 + py, y0 - px, x0 + py, y0 - px - 1 + 2 * px + delta, color);
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	4413      	add	r3, r2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b218      	sxth	r0, r3
 80020be:	88ba      	ldrh	r2, [r7, #4]
 80020c0:	89bb      	ldrh	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b219      	sxth	r1, r3
 80020c8:	88fa      	ldrh	r2, [r7, #6]
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	4413      	add	r3, r2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	b21c      	sxth	r4, r3
 80020d2:	88ba      	ldrh	r2, [r7, #4]
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	89bb      	ldrh	r3, [r7, #12]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020e6:	4413      	add	r3, r2
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	4622      	mov	r2, r4
 80020f8:	f7ff fa9a 	bl	8001630 <ST7789_DrawLine>
			}
      if (corners & 2){
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d023      	beq.n	800214e <ST7789_DrawFillCircleHelper+0x1fc>
        ST7789_DrawLine(x0 - py, y0 - px, x0 - py, y0 - px - 1 + 2 * px + delta, color);
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	897b      	ldrh	r3, [r7, #10]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	b29b      	uxth	r3, r3
 800210e:	b218      	sxth	r0, r3
 8002110:	88ba      	ldrh	r2, [r7, #4]
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29b      	uxth	r3, r3
 8002118:	b219      	sxth	r1, r3
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	897b      	ldrh	r3, [r7, #10]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	b21c      	sxth	r4, r3
 8002124:	88ba      	ldrh	r2, [r7, #4]
 8002126:	89bb      	ldrh	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b29a      	uxth	r2, r3
 800212c:	89bb      	ldrh	r3, [r7, #12]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	4413      	add	r3, r2
 8002134:	b29a      	uxth	r2, r3
 8002136:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002138:	4413      	add	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29b      	uxth	r3, r3
 8002140:	b21a      	sxth	r2, r3
 8002142:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	4622      	mov	r2, r4
 800214a:	f7ff fa71 	bl	8001630 <ST7789_DrawLine>
			}
			py = y;
 800214e:	89fb      	ldrh	r3, [r7, #14]
 8002150:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 8002152:	8a3b      	ldrh	r3, [r7, #16]
 8002154:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 8002156:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800215a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800215e:	429a      	cmp	r2, r3
 8002160:	f6ff af23 	blt.w	8001faa <ST7789_DrawFillCircleHelper+0x58>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
	...

08002170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_MspInit+0x54>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_MspInit+0x54>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_MspInit+0x54>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_MspInit+0x54>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_MspInit+0x54>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_MspInit+0x54>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	210f      	movs	r1, #15
 80021b2:	f06f 0001 	mvn.w	r0, #1
 80021b6:	f001 f84f 	bl	8003258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_ADC_MspInit+0x7c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d127      	bne.n	800223a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_ADC_MspInit+0x80>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <HAL_ADC_MspInit+0x80>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_ADC_MspInit+0x80>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_ADC_MspInit+0x80>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_ADC_MspInit+0x80>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_ADC_MspInit+0x80>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Thermistor_Pin|CH4_Pin;
 8002222:	2342      	movs	r3, #66	; 0x42
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002226:	2303      	movs	r3, #3
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_ADC_MspInit+0x84>)
 8002236:	f001 fb3f 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40012000 	.word	0x40012000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_CRC_MspInit+0x3c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10d      	bne.n	800227e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_CRC_MspInit+0x40>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_CRC_MspInit+0x40>)
 800226c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_CRC_MspInit+0x40>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023000 	.word	0x40023000
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_SPI_MspInit+0xe4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d15c      	bne.n	8002370 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_SPI_MspInit+0xe8>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a2f      	ldr	r2, [pc, #188]	; (800237c <HAL_SPI_MspInit+0xe8>)
 80022c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_SPI_MspInit+0xe8>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_SPI_MspInit+0xe8>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a28      	ldr	r2, [pc, #160]	; (800237c <HAL_SPI_MspInit+0xe8>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_SPI_MspInit+0xe8>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022ee:	23a0      	movs	r3, #160	; 0xa0
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fe:	2305      	movs	r3, #5
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	481d      	ldr	r0, [pc, #116]	; (8002380 <HAL_SPI_MspInit+0xec>)
 800230a:	f001 fad5 	bl	80038b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_SPI_MspInit+0xf4>)
 8002312:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002316:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800231a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 800232a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002336:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002346:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 800234a:	2200      	movs	r2, #0
 800234c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002350:	2200      	movs	r2, #0
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002356:	f000 ffc5 	bl	80032e4 <HAL_DMA_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002360:	f7fe fe28 	bl	8000fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 8002368:	649a      	str	r2, [r3, #72]	; 0x48
 800236a:	4a06      	ldr	r2, [pc, #24]	; (8002384 <HAL_SPI_MspInit+0xf0>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40013000 	.word	0x40013000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	20000238 	.word	0x20000238
 8002388:	40026440 	.word	0x40026440

0800238c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239c:	d115      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_TIM_Base_MspInit+0x48>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_TIM_Base_MspInit+0x48>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_TIM_Base_MspInit+0x48>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2105      	movs	r1, #5
 80023be:	201c      	movs	r0, #28
 80023c0:	f000 ff4a 	bl	8003258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c4:	201c      	movs	r0, #28
 80023c6:	f000 ff63 	bl	8003290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10d      	bne.n	8002406 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_TIM_PWM_MspInit+0x40>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_TIM_PWM_MspInit+0x40>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_TIM_PWM_MspInit+0x40>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40000400 	.word	0x40000400
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x94>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d133      	bne.n	80024a6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002476:	23c0      	movs	r3, #192	; 0xc0
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002486:	2302      	movs	r3, #2
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002492:	f001 fa11 	bl	80038b8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2105      	movs	r1, #5
 800249a:	201e      	movs	r0, #30
 800249c:	f000 fedc 	bl	8003258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024a0:	201e      	movs	r0, #30
 80024a2:	f000 fef5 	bl	8003290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	; 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40000800 	.word	0x40000800
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020400 	.word	0x40020400

080024bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <HAL_TIM_MspPostInit+0x68>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d11d      	bne.n	800251a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_TIM_MspPostInit+0x6c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <HAL_TIM_MspPostInit+0x6c>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_TIM_MspPostInit+0x6c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = M_EN_Pin;
 80024fa:	2310      	movs	r3, #16
 80024fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800250a:	2302      	movs	r3, #2
 800250c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M_EN_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <HAL_TIM_MspPostInit+0x70>)
 8002516:	f001 f9cf 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40000400 	.word	0x40000400
 8002528:	40023800 	.word	0x40023800
 800252c:	40020400 	.word	0x40020400

08002530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_InitTick+0xd0>)
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <HAL_InitTick+0xd0>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6453      	str	r3, [r2, #68]	; 0x44
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_InitTick+0xd0>)
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fa04 	bl	8005974 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800256c:	f003 f9ee 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 8002570:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_InitTick+0xd4>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	3b01      	subs	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_InitTick+0xd8>)
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_InitTick+0xdc>)
 8002584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_InitTick+0xd8>)
 8002588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_InitTick+0xd8>)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_InitTick+0xd8>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_InitTick+0xd8>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_InitTick+0xd8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80025a6:	4818      	ldr	r0, [pc, #96]	; (8002608 <HAL_InitTick+0xd8>)
 80025a8:	f003 fcb4 	bl	8005f14 <HAL_TIM_Base_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11b      	bne.n	80025f2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025ba:	4813      	ldr	r0, [pc, #76]	; (8002608 <HAL_InitTick+0xd8>)
 80025bc:	f003 fcfa 	bl	8005fb4 <HAL_TIM_Base_Start_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d111      	bne.n	80025f2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025ce:	2019      	movs	r0, #25
 80025d0:	f000 fe5e 	bl	8003290 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	d808      	bhi.n	80025ec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80025da:	2200      	movs	r2, #0
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	2019      	movs	r0, #25
 80025e0:	f000 fe3a 	bl	8003258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_InitTick+0xe0>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e002      	b.n	80025f2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	431bde83 	.word	0x431bde83
 8002608:	20000428 	.word	0x20000428
 800260c:	40010000 	.word	0x40010000
 8002610:	20000014 	.word	0x20000014

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <NMI_Handler+0x4>

0800261a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <MemManage_Handler+0x4>

08002626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <UsageFault_Handler+0x4>

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002646:	f003 fe0c 	bl	8006262 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000428 	.word	0x20000428

08002654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <TIM2_IRQHandler+0x10>)
 800265a:	f003 fe02 	bl	8006262 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000298 	.word	0x20000298

08002668 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <TIM4_IRQHandler+0x10>)
 800266e:	f003 fdf8 	bl	8006262 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000328 	.word	0x20000328

0800267c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <DMA2_Stream2_IRQHandler+0x10>)
 8002682:	f000 fedd 	bl	8003440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000238 	.word	0x20000238

08002690 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <OTG_FS_IRQHandler+0x10>)
 8002696:	f001 fbfc 	bl	8003e92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20006368 	.word	0x20006368

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f00b faa0 	bl	800dc18 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20020000 	.word	0x20020000
 8002704:	00000800 	.word	0x00000800
 8002708:	20000470 	.word	0x20000470
 800270c:	20006aa8 	.word	0x20006aa8

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <SystemInit+0x20>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <SystemInit+0x20>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273a:	490e      	ldr	r1, [pc, #56]	; (8002774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002750:	4c0b      	ldr	r4, [pc, #44]	; (8002780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800275e:	f7ff ffd7 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f00b fa5f 	bl	800dc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7fd ff15 	bl	8000594 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800276c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8002778:	08012228 	.word	0x08012228
  ldr r2, =_sbss
 800277c:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8002780:	20006aa4 	.word	0x20006aa4

08002784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC_IRQHandler>
	...

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <HAL_Init+0x40>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_Init+0x40>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_Init+0x40>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 fd46 	bl	8003242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b6:	200f      	movs	r0, #15
 80027b8:	f7ff feba 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027bc:	f7ff fcd8 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000018 	.word	0x20000018
 80027f0:	20000474 	.word	0x20000474

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000474 	.word	0x20000474

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff ffee 	bl	80027f4 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffde 	bl	80027f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000018 	.word	0x20000018

08002854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e033      	b.n	80028d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fca8 	bl	80021c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800289a:	f023 0302 	bic.w	r3, r3, #2
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f9d4 	bl	8002c54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
 80028c2:	e001      	b.n	80028c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d113      	bne.n	8002920 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	d10b      	bne.n	8002920 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e063      	b.n	80029e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002920:	f7ff ff68 	bl	80027f4 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002926:	e021      	b.n	800296c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d01d      	beq.n	800296c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <HAL_ADC_PollForConversion+0x6c>
 8002936:	f7ff ff5d 	bl	80027f4 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d212      	bcs.n	800296c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b02      	cmp	r3, #2
 8002952:	d00b      	beq.n	800296c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f043 0204 	orr.w	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03d      	b.n	80029e8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d1d6      	bne.n	8002928 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f06f 0212 	mvn.w	r2, #18
 8002982:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d123      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11f      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d111      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1c>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e113      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x244>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d925      	bls.n	8002a68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b1e      	subs	r3, #30
 8002a32:	2207      	movs	r2, #7
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	400a      	ands	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68d9      	ldr	r1, [r3, #12]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	4603      	mov	r3, r0
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4403      	add	r3, r0
 8002a5a:	3b1e      	subs	r3, #30
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	e022      	b.n	8002aae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6919      	ldr	r1, [r3, #16]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	400a      	ands	r2, r1
 8002a8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4403      	add	r3, r0
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d824      	bhi.n	8002b00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3b05      	subs	r3, #5
 8002ac8:	221f      	movs	r2, #31
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3b05      	subs	r3, #5
 8002af2:	fa00 f203 	lsl.w	r2, r0, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
 8002afe:	e04c      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d824      	bhi.n	8002b52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b23      	subs	r3, #35	; 0x23
 8002b1a:	221f      	movs	r2, #31
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43da      	mvns	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	400a      	ands	r2, r1
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b23      	subs	r3, #35	; 0x23
 8002b44:	fa00 f203 	lsl.w	r2, r0, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b50:	e023      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3b41      	subs	r3, #65	; 0x41
 8002b64:	221f      	movs	r2, #31
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b41      	subs	r3, #65	; 0x41
 8002b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_ADC_ConfigChannel+0x250>)
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <HAL_ADC_ConfigChannel+0x254>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d8>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b12      	cmp	r3, #18
 8002bae:	d10b      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_ADC_ConfigChannel+0x254>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d12b      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x23a>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_ADC_ConfigChannel+0x258>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b11      	cmp	r3, #17
 8002be2:	d122      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_ADC_ConfigChannel+0x258>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d111      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_ADC_ConfigChannel+0x25c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_ADC_ConfigChannel+0x260>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	0c9a      	lsrs	r2, r3, #18
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c1c:	e002      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40012300 	.word	0x40012300
 8002c44:	40012000 	.word	0x40012000
 8002c48:	10000012 	.word	0x10000012
 8002c4c:	20000010 	.word	0x20000010
 8002c50:	431bde83 	.word	0x431bde83

08002c54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5c:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <ADC_Init+0x1f0>)
 8002c5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	021a      	lsls	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <ADC_Init+0x1f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e00f      	b.n	8002d52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0202 	bic.w	r2, r2, #2
 8002d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6899      	ldr	r1, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7e1b      	ldrb	r3, [r3, #24]
 8002d6c:	005a      	lsls	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	3b01      	subs	r3, #1
 8002dac:	035a      	lsls	r2, r3, #13
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e007      	b.n	8002dc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	051a      	lsls	r2, r3, #20
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e0a:	025a      	lsls	r2, r3, #9
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6899      	ldr	r1, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	029a      	lsls	r2, r3, #10
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40012300 	.word	0x40012300
 8002e48:	0f000001 	.word	0x0f000001

08002e4c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADCEx_InjectedStart+0x22>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0aa      	b.n	8002fc4 <HAL_ADCEx_InjectedStart+0x178>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d018      	beq.n	8002eb6 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e94:	4b4e      	ldr	r3, [pc, #312]	; (8002fd0 <HAL_ADCEx_InjectedStart+0x184>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a4e      	ldr	r2, [pc, #312]	; (8002fd4 <HAL_ADCEx_InjectedStart+0x188>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9a      	lsrs	r2, r3, #18
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ea8:	e002      	b.n	8002eb0 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f9      	bne.n	8002eaa <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d172      	bne.n	8002faa <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f06f 0204 	mvn.w	r2, #4
 8002efa:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_ADCEx_InjectedStart+0x18c>)
 8002efe:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d124      	bne.n	8002f56 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d041      	beq.n	8002fc2 <HAL_ADCEx_InjectedStart+0x176>
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d03e      	beq.n	8002fc2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e035      	b.n	8002fc2 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <HAL_ADCEx_InjectedStart+0x190>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d11a      	bne.n	8002fc2 <HAL_ADCEx_InjectedStart+0x176>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_ADCEx_InjectedStart+0x176>
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d014      	beq.n	8002fc2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	20000010 	.word	0x20000010
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	40012300 	.word	0x40012300
 8002fdc:	40012000 	.word	0x40012000

08002fe0 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADCEx_InjectedStop+0x1a>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e037      	b.n	800306a <HAL_ADCEx_InjectedStop+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d120      	bne.n	8003050 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003018:	2b00      	cmp	r3, #0
 800301a:	d119      	bne.n	8003050 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d112      	bne.n	8003060 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	f043 0201 	orr.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800304e:	e007      	b.n	8003060 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0204 	mvn.w	r2, #4
 800308e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	3b01      	subs	r3, #1
 8003094:	2b03      	cmp	r3, #3
 8003096:	d81f      	bhi.n	80030d8 <HAL_ADCEx_InjectedGetValue+0x60>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_ADCEx_InjectedGetValue+0x28>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030cf 	.word	0x080030cf
 80030a4:	080030c5 	.word	0x080030c5
 80030a8:	080030bb 	.word	0x080030bb
 80030ac:	080030b1 	.word	0x080030b1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80030b8:	e00f      	b.n	80030da <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80030c2:	e00a      	b.n	80030da <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	60fb      	str	r3, [r7, #12]
    }
    break;
 80030cc:	e005      	b.n	80030da <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	60fb      	str	r3, [r7, #12]
    }
    break;
 80030d6:	e000      	b.n	80030da <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80030d8:	bf00      	nop
  }
  return tmp;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <__NVIC_SetPriorityGrouping+0x44>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <__NVIC_SetPriorityGrouping+0x44>)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	60d3      	str	r3, [r2, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <__NVIC_GetPriorityGrouping+0x18>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	f003 0307 	and.w	r3, r3, #7
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0b      	blt.n	8003176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	4907      	ldr	r1, [pc, #28]	; (8003184 <__NVIC_EnableIRQ+0x38>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2001      	movs	r0, #1
 800316e:	fa00 f202 	lsl.w	r2, r0, r2
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000e100 	.word	0xe000e100

08003188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db0a      	blt.n	80031b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	490c      	ldr	r1, [pc, #48]	; (80031d4 <__NVIC_SetPriority+0x4c>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	440b      	add	r3, r1
 80031ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b0:	e00a      	b.n	80031c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4908      	ldr	r1, [pc, #32]	; (80031d8 <__NVIC_SetPriority+0x50>)
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3b04      	subs	r3, #4
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	440b      	add	r3, r1
 80031c6:	761a      	strb	r2, [r3, #24]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf28      	it	cs
 80031fa:	2304      	movcs	r3, #4
 80031fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3304      	adds	r3, #4
 8003202:	2b06      	cmp	r3, #6
 8003204:	d902      	bls.n	800320c <NVIC_EncodePriority+0x30>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3b03      	subs	r3, #3
 800320a:	e000      	b.n	800320e <NVIC_EncodePriority+0x32>
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	401a      	ands	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43d9      	mvns	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	4313      	orrs	r3, r2
         );
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ff4c 	bl	80030e8 <__NVIC_SetPriorityGrouping>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800326a:	f7ff ff61 	bl	8003130 <__NVIC_GetPriorityGrouping>
 800326e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	6978      	ldr	r0, [r7, #20]
 8003276:	f7ff ffb1 	bl	80031dc <NVIC_EncodePriority>
 800327a:	4602      	mov	r2, r0
 800327c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff80 	bl	8003188 <__NVIC_SetPriority>
}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff54 	bl	800314c <__NVIC_EnableIRQ>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	795b      	ldrb	r3, [r3, #5]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe ffbe 	bl	8002250 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7ff fa80 	bl	80027f4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e099      	b.n	8003434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003320:	e00f      	b.n	8003342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003322:	f7ff fa67 	bl	80027f4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b05      	cmp	r3, #5
 800332e:	d908      	bls.n	8003342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2203      	movs	r2, #3
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e078      	b.n	8003434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e8      	bne.n	8003322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_DMA_Init+0x158>)
 800335c:	4013      	ands	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2b04      	cmp	r3, #4
 800339a:	d107      	bne.n	80033ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	4313      	orrs	r3, r2
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0307 	bic.w	r3, r3, #7
 80033c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d117      	bne.n	8003406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f9e9 	bl	80037c0 <DMA_CheckFifoParam>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003402:	2301      	movs	r3, #1
 8003404:	e016      	b.n	8003434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9a0 	bl	8003754 <DMA_CalcBaseAndBitshift>
 8003414:	4603      	mov	r3, r0
 8003416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	223f      	movs	r2, #63	; 0x3f
 800341e:	409a      	lsls	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	f010803f 	.word	0xf010803f

08003440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800344c:	4b8e      	ldr	r3, [pc, #568]	; (8003688 <HAL_DMA_IRQHandler+0x248>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a8e      	ldr	r2, [pc, #568]	; (800368c <HAL_DMA_IRQHandler+0x24c>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0a9b      	lsrs	r3, r3, #10
 8003458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	2208      	movs	r2, #8
 800346c:	409a      	lsls	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01a      	beq.n	80034ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0204 	bic.w	r2, r2, #4
 8003492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	2208      	movs	r2, #8
 800349a:	409a      	lsls	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	2201      	movs	r2, #1
 80034b2:	409a      	lsls	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d012      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	2201      	movs	r2, #1
 80034d0:	409a      	lsls	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f043 0202 	orr.w	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e6:	2204      	movs	r2, #4
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d012      	beq.n	8003518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	2204      	movs	r2, #4
 8003506:	409a      	lsls	r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	2210      	movs	r2, #16
 800351e:	409a      	lsls	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d043      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d03c      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	2210      	movs	r2, #16
 800353c:	409a      	lsls	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d018      	beq.n	8003582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d108      	bne.n	8003570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d024      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
 800356e:	e01f      	b.n	80035b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
 8003580:	e016      	b.n	80035b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0208 	bic.w	r2, r2, #8
 800359e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	2220      	movs	r2, #32
 80035b6:	409a      	lsls	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 808f 	beq.w	80036e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8087 	beq.w	80036e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	2220      	movs	r2, #32
 80035d8:	409a      	lsls	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d136      	bne.n	8003658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0216 	bic.w	r2, r2, #22
 80035f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <HAL_DMA_IRQHandler+0x1da>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0208 	bic.w	r2, r2, #8
 8003628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	223f      	movs	r2, #63	; 0x3f
 8003630:	409a      	lsls	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	2b00      	cmp	r3, #0
 800364c:	d07e      	beq.n	800374c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
        }
        return;
 8003656:	e079      	b.n	800374c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	2b00      	cmp	r3, #0
 800367a:	d031      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
 8003684:	e02c      	b.n	80036e0 <HAL_DMA_IRQHandler+0x2a0>
 8003686:	bf00      	nop
 8003688:	20000010 	.word	0x20000010
 800368c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
 80036a0:	e01e      	b.n	80036e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10f      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0210 	bic.w	r2, r2, #16
 80036be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d032      	beq.n	800374e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d022      	beq.n	800373a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2205      	movs	r2, #5
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3301      	adds	r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d307      	bcc.n	8003728 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f2      	bne.n	800370c <HAL_DMA_IRQHandler+0x2cc>
 8003726:	e000      	b.n	800372a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003728:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
 800374a:	e000      	b.n	800374e <HAL_DMA_IRQHandler+0x30e>
        return;
 800374c:	bf00      	nop
    }
  }
}
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3b10      	subs	r3, #16
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <DMA_CalcBaseAndBitshift+0x68>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d909      	bls.n	8003796 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	659a      	str	r2, [r3, #88]	; 0x58
 8003794:	e007      	b.n	80037a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	aaaaaaab 	.word	0xaaaaaaab
 80037bc:	0801217c 	.word	0x0801217c

080037c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11f      	bne.n	800381a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d856      	bhi.n	800388e <DMA_CheckFifoParam+0xce>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <DMA_CheckFifoParam+0x28>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	0800380b 	.word	0x0800380b
 80037f0:	080037f9 	.word	0x080037f9
 80037f4:	0800388f 	.word	0x0800388f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d046      	beq.n	8003892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003808:	e043      	b.n	8003892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003812:	d140      	bne.n	8003896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003818:	e03d      	b.n	8003896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	d121      	bne.n	8003868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d837      	bhi.n	800389a <DMA_CheckFifoParam+0xda>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <DMA_CheckFifoParam+0x70>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003841 	.word	0x08003841
 8003834:	08003847 	.word	0x08003847
 8003838:	08003841 	.word	0x08003841
 800383c:	08003859 	.word	0x08003859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e030      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d025      	beq.n	800389e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003856:	e022      	b.n	800389e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003860:	d11f      	bne.n	80038a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003866:	e01c      	b.n	80038a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d903      	bls.n	8003876 <DMA_CheckFifoParam+0xb6>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d003      	beq.n	800387c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003874:	e018      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      break;
 800387a:	e015      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e00b      	b.n	80038a6 <DMA_CheckFifoParam+0xe6>
      break;
 800388e:	bf00      	nop
 8003890:	e00a      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003892:	bf00      	nop
 8003894:	e008      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003896:	bf00      	nop
 8003898:	e006      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 800389a:	bf00      	nop
 800389c:	e004      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 80038a6:	bf00      	nop
    }
  } 
  
  return status; 
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e159      	b.n	8003b88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	f040 8148 	bne.w	8003b82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d005      	beq.n	800390a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003906:	2b02      	cmp	r3, #2
 8003908:	d130      	bne.n	800396c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003940:	2201      	movs	r2, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 0201 	and.w	r2, r3, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b03      	cmp	r3, #3
 8003976:	d017      	beq.n	80039a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d123      	bne.n	80039fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	08da      	lsrs	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3208      	adds	r2, #8
 80039bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220f      	movs	r2, #15
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	69b9      	ldr	r1, [r7, #24]
 80039f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a2 	beq.w	8003b82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b57      	ldr	r3, [pc, #348]	; (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4a56      	ldr	r2, [pc, #344]	; (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4e:	4b54      	ldr	r3, [pc, #336]	; (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a5a:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_GPIO_Init+0x2ec>)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	220f      	movs	r2, #15
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a49      	ldr	r2, [pc, #292]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x202>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a48      	ldr	r2, [pc, #288]	; (8003bac <HAL_GPIO_Init+0x2f4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x1fe>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a47      	ldr	r2, [pc, #284]	; (8003bb0 <HAL_GPIO_Init+0x2f8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x1fa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a46      	ldr	r2, [pc, #280]	; (8003bb4 <HAL_GPIO_Init+0x2fc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x1f6>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_GPIO_Init+0x300>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x1f2>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	e008      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003aaa:	2307      	movs	r3, #7
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e004      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003aba:	2300      	movs	r3, #0
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	f002 0203 	and.w	r2, r2, #3
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003acc:	4935      	ldr	r1, [pc, #212]	; (8003ba4 <HAL_GPIO_Init+0x2ec>)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ada:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003afe:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b04:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b7c:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	f67f aea2 	bls.w	80038d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40020000 	.word	0x40020000
 8003bac:	40020400 	.word	0x40020400
 8003bb0:	40020800 	.word	0x40020800
 8003bb4:	40020c00 	.word	0x40020c00
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40013c00 	.word	0x40013c00

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf4:	b08f      	sub	sp, #60	; 0x3c
 8003bf6:	af0a      	add	r7, sp, #40	; 0x28
 8003bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e10f      	b.n	8003e24 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f009 fcf0 	bl	800d604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2203      	movs	r2, #3
 8003c28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f003 fa05 	bl	8007052 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	687e      	ldr	r6, [r7, #4]
 8003c50:	466d      	mov	r5, sp
 8003c52:	f106 0410 	add.w	r4, r6, #16
 8003c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c66:	1d33      	adds	r3, r6, #4
 8003c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c6a:	6838      	ldr	r0, [r7, #0]
 8003c6c:	f003 f8dc 	bl	8006e28 <USB_CoreInit>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0d0      	b.n	8003e24 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 f9f3 	bl	8007074 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	e04a      	b.n	8003d2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	333d      	adds	r3, #61	; 0x3d
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	333c      	adds	r3, #60	; 0x3c
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	b298      	uxth	r0, r3
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3344      	adds	r3, #68	; 0x44
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3340      	adds	r3, #64	; 0x40
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3348      	adds	r3, #72	; 0x48
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	334c      	adds	r3, #76	; 0x4c
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3354      	adds	r3, #84	; 0x54
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	3301      	adds	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d3af      	bcc.n	8003c94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e044      	b.n	8003dc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003da8:	7bfa      	ldrb	r2, [r7, #15]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3b5      	bcc.n	8003d3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	687e      	ldr	r6, [r7, #4]
 8003dd6:	466d      	mov	r5, sp
 8003dd8:	f106 0410 	add.w	r4, r6, #16
 8003ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003de8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dec:	1d33      	adds	r3, r6, #4
 8003dee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	f003 f98b 	bl	800710c <USB_DevInit>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e00d      	b.n	8003e24 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f004 fada 	bl	80083d6 <USB_DevDisconnect>

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_PCD_Start+0x1c>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e020      	b.n	8003e8a <HAL_PCD_Start+0x5e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d109      	bne.n	8003e6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d005      	beq.n	8003e6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 f8dd 	bl	8007030 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f004 fa8a 	bl	8008394 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e92:	b590      	push	{r4, r7, lr}
 8003e94:	b08d      	sub	sp, #52	; 0x34
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f004 fb48 	bl	800853e <USB_GetMode>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f040 848a 	bne.w	80047ca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f004 faac 	bl	8008418 <USB_ReadInterrupts>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8480 	beq.w	80047c8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 fa99 	bl	8008418 <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d107      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f002 0202 	and.w	r2, r2, #2
 8003efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 fa87 	bl	8008418 <USB_ReadInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d161      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0210 	bic.w	r2, r2, #16
 8003f22:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	0c5b      	lsrs	r3, r3, #17
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d124      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d035      	beq.n	8003fc8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6a38      	ldr	r0, [r7, #32]
 8003f70:	f004 f8be 	bl	80080f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f80:	441a      	add	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f92:	441a      	add	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
 8003f98:	e016      	b.n	8003fc8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	0c5b      	lsrs	r3, r3, #17
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d110      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fac:	2208      	movs	r2, #8
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6a38      	ldr	r0, [r7, #32]
 8003fb2:	f004 f89d 	bl	80080f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fc2:	441a      	add	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0210 	orr.w	r2, r2, #16
 8003fd6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f004 fa1b 	bl	8008418 <USB_ReadInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fec:	f040 80a7 	bne.w	800413e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f004 fa20 	bl	800843e <USB_ReadDevAllOutEpInterrupt>
 8003ffe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004000:	e099      	b.n	8004136 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 808e 	beq.w	800412a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f004 fa44 	bl	80084a6 <USB_ReadDevOutEPInterrupt>
 800401e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004036:	461a      	mov	r2, r3
 8004038:	2301      	movs	r3, #1
 800403a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800403c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fec2 	bl	8004dc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00c      	beq.n	8004068 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	461a      	mov	r2, r3
 800405c:	2308      	movs	r3, #8
 800405e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 ff98 	bl	8004f98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	2310      	movs	r3, #16
 8004082:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d030      	beq.n	80040f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d109      	bne.n	80040ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	3304      	adds	r3, #4
 80040c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	78db      	ldrb	r3, [r3, #3]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d108      	bne.n	80040de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2200      	movs	r2, #0
 80040d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f009 fb8f 	bl	800d7fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	461a      	mov	r2, r3
 80040ec:	2302      	movs	r3, #2
 80040ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004106:	461a      	mov	r2, r3
 8004108:	2320      	movs	r3, #32
 800410a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	461a      	mov	r2, r3
 8004124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004128:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	3301      	adds	r3, #1
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f af62 	bne.w	8004002 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f004 f968 	bl	8008418 <USB_ReadInterrupts>
 8004148:	4603      	mov	r3, r0
 800414a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004152:	f040 80db 	bne.w	800430c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f004 f989 	bl	8008472 <USB_ReadDevAllInEpInterrupt>
 8004160:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004166:	e0cd      	b.n	8004304 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80c2 	beq.w	80042f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f004 f9af 	bl	80084e2 <USB_ReadDevInEPInterrupt>
 8004184:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d057      	beq.n	8004240 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	2201      	movs	r2, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69f9      	ldr	r1, [r7, #28]
 80041ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041b0:	4013      	ands	r3, r2
 80041b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	2301      	movs	r3, #1
 80041c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d132      	bne.n	8004234 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	334c      	adds	r3, #76	; 0x4c
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4403      	add	r3, r0
 80041ee:	3348      	adds	r3, #72	; 0x48
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4419      	add	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4403      	add	r3, r0
 8004202:	334c      	adds	r3, #76	; 0x4c
 8004204:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d113      	bne.n	8004234 <HAL_PCD_IRQHandler+0x3a2>
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	3354      	adds	r3, #84	; 0x54
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800422c:	461a      	mov	r2, r3
 800422e:	2101      	movs	r1, #1
 8004230:	f004 f9b6 	bl	80085a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	b2db      	uxtb	r3, r3
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f009 fa63 	bl	800d706 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	461a      	mov	r2, r3
 8004258:	2308      	movs	r3, #8
 800425a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004272:	461a      	mov	r2, r3
 8004274:	2310      	movs	r3, #16
 8004276:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	461a      	mov	r2, r3
 8004290:	2340      	movs	r3, #64	; 0x40
 8004292:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d023      	beq.n	80042e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800429e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042a0:	6a38      	ldr	r0, [r7, #32]
 80042a2:	f003 f897 	bl	80073d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3338      	adds	r3, #56	; 0x38
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	78db      	ldrb	r3, [r3, #3]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d108      	bne.n	80042d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f009 faa6 	bl	800d820 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	461a      	mov	r2, r3
 80042e2:	2302      	movs	r3, #2
 80042e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fcdb 	bl	8004cae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	3301      	adds	r3, #1
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	f47f af2e 	bne.w	8004168 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f004 f881 	bl	8008418 <USB_ReadInterrupts>
 8004316:	4603      	mov	r3, r0
 8004318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800431c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004320:	d122      	bne.n	8004368 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800433c:	2b01      	cmp	r3, #1
 800433e:	d108      	bne.n	8004352 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004348:	2100      	movs	r1, #0
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fec2 	bl	80050d4 <HAL_PCDEx_LPM_Callback>
 8004350:	e002      	b.n	8004358 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f009 fa44 	bl	800d7e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f004 f853 	bl	8008418 <USB_ReadInterrupts>
 8004372:	4603      	mov	r3, r0
 8004374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437c:	d112      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f009 fa00 	bl	800d794 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f004 f835 	bl	8008418 <USB_ReadInterrupts>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	f040 80b7 	bne.w	800452a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2110      	movs	r1, #16
 80043d6:	4618      	mov	r0, r3
 80043d8:	f002 fffc 	bl	80073d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e0:	e046      	b.n	8004470 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	461a      	mov	r2, r3
 80043f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004410:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004414:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004428:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004444:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004448:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004464:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004468:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	3301      	adds	r3, #1
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004476:	429a      	cmp	r2, r3
 8004478:	d3b3      	bcc.n	80043e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004488:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800448c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a6:	f043 030b 	orr.w	r3, r3, #11
 80044aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044bc:	f043 030b 	orr.w	r3, r3, #11
 80044c0:	6453      	str	r3, [r2, #68]	; 0x44
 80044c2:	e015      	b.n	80044f0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80044da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ea:	f043 030b 	orr.w	r3, r3, #11
 80044ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004502:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004514:	461a      	mov	r2, r3
 8004516:	f004 f843 	bl	80085a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f003 ff72 	bl	8008418 <USB_ReadInterrupts>
 8004534:	4603      	mov	r3, r0
 8004536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453e:	d124      	bne.n	800458a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f004 f808 	bl	800855a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f002 ffbd 	bl	80074ce <USB_GetDevSpeed>
 8004554:	4603      	mov	r3, r0
 8004556:	461a      	mov	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681c      	ldr	r4, [r3, #0]
 8004560:	f001 f9e8 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 8004564:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	4620      	mov	r0, r4
 8004570:	f002 fcbc 	bl	8006eec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f009 f8ee 	bl	800d756 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004588:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f003 ff42 	bl	8008418 <USB_ReadInterrupts>
 8004594:	4603      	mov	r3, r0
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d10a      	bne.n	80045b4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f009 f8cb 	bl	800d73a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f002 0208 	and.w	r2, r2, #8
 80045b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 ff2d 	bl	8008418 <USB_ReadInterrupts>
 80045be:	4603      	mov	r3, r0
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d122      	bne.n	800460e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045d4:	2301      	movs	r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
 80045d8:	e014      	b.n	8004604 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fb27 	bl	8004c4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	3301      	adds	r3, #1
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	429a      	cmp	r2, r3
 800460c:	d3e5      	bcc.n	80045da <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f003 ff00 	bl	8008418 <USB_ReadInterrupts>
 8004618:	4603      	mov	r3, r0
 800461a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800461e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004622:	d13b      	bne.n	800469c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004624:	2301      	movs	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	e02b      	b.n	8004682 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3340      	adds	r3, #64	; 0x40
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d115      	bne.n	800467c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004650:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004652:	2b00      	cmp	r3, #0
 8004654:	da12      	bge.n	800467c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	333f      	adds	r3, #63	; 0x3f
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fae8 	bl	8004c4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	3301      	adds	r3, #1
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004688:	429a      	cmp	r2, r3
 800468a:	d3ce      	bcc.n	800462a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800469a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f003 feb9 	bl	8008418 <USB_ReadInterrupts>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046b0:	d155      	bne.n	800475e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b2:	2301      	movs	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
 80046b6:	e045      	b.n	8004744 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d12e      	bne.n	800473e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da2b      	bge.n	800473e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80046f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d121      	bne.n	800473e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473a:	6053      	str	r3, [r2, #4]
            break;
 800473c:	e007      	b.n	800474e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	3301      	adds	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474a:	429a      	cmp	r2, r3
 800474c:	d3b4      	bcc.n	80046b8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800475c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 fe58 	bl	8008418 <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d10a      	bne.n	800478a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f009 f865 	bl	800d844 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f003 fe42 	bl	8008418 <USB_ReadInterrupts>
 8004794:	4603      	mov	r3, r0
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d115      	bne.n	80047ca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f009 f855 	bl	800d860 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	e000      	b.n	80047ca <HAL_PCD_IRQHandler+0x938>
      return;
 80047c8:	bf00      	nop
    }
  }
}
 80047ca:	3734      	adds	r7, #52	; 0x34
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}

080047d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_PCD_SetAddress+0x1a>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e013      	b.n	8004812 <HAL_PCD_SetAddress+0x42>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f003 fda0 	bl	8008348 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	4608      	mov	r0, r1
 8004824:	4611      	mov	r1, r2
 8004826:	461a      	mov	r2, r3
 8004828:	4603      	mov	r3, r0
 800482a:	70fb      	strb	r3, [r7, #3]
 800482c:	460b      	mov	r3, r1
 800482e:	803b      	strh	r3, [r7, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800483c:	2b00      	cmp	r3, #0
 800483e:	da0f      	bge.n	8004860 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	f003 020f 	and.w	r2, r3, #15
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	3338      	adds	r3, #56	; 0x38
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4413      	add	r3, r2
 8004854:	3304      	adds	r3, #4
 8004856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	705a      	strb	r2, [r3, #1]
 800485e:	e00f      	b.n	8004880 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 020f 	and.w	r2, r3, #15
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	3304      	adds	r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800488c:	883a      	ldrh	r2, [r7, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	78ba      	ldrb	r2, [r7, #2]
 8004896:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048aa:	78bb      	ldrb	r3, [r7, #2]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d102      	bne.n	80048b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_PCD_EP_Open+0xaa>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e00e      	b.n	80048e2 <HAL_PCD_EP_Open+0xc8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68f9      	ldr	r1, [r7, #12]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f002 fe20 	bl	8007518 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80048e0:	7afb      	ldrb	r3, [r7, #11]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da0f      	bge.n	800491e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	3338      	adds	r3, #56	; 0x38
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	3304      	adds	r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	705a      	strb	r2, [r3, #1]
 800491c:	e00f      	b.n	800493e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	f003 020f 	and.w	r2, r3, #15
 8004924:	4613      	mov	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4413      	add	r3, r2
 8004934:	3304      	adds	r3, #4
 8004936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_PCD_EP_Close+0x6e>
 8004954:	2302      	movs	r3, #2
 8004956:	e00e      	b.n	8004976 <HAL_PCD_EP_Close+0x8c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	4618      	mov	r0, r3
 8004968:	f002 fe5e 	bl	8007628 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	460b      	mov	r3, r1
 800498c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	f003 020f 	and.w	r2, r3, #15
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	3304      	adds	r3, #4
 80049a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c0:	7afb      	ldrb	r3, [r7, #11]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049da:	7afb      	ldrb	r3, [r7, #11]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6979      	ldr	r1, [r7, #20]
 80049f2:	f003 f93d 	bl	8007c70 <USB_EP0StartXfer>
 80049f6:	e008      	b.n	8004a0a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	6979      	ldr	r1, [r7, #20]
 8004a06:	f002 feeb 	bl	80077e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	460b      	mov	r3, r1
 8004a52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a54:	7afb      	ldrb	r3, [r7, #11]
 8004a56:	f003 020f 	and.w	r2, r3, #15
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	3338      	adds	r3, #56	; 0x38
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	3304      	adds	r3, #4
 8004a6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2201      	movs	r2, #1
 8004a82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a84:	7afb      	ldrb	r3, [r7, #11]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d102      	bne.n	8004a9e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6979      	ldr	r1, [r7, #20]
 8004ab6:	f003 f8db 	bl	8007c70 <USB_EP0StartXfer>
 8004aba:	e008      	b.n	8004ace <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6818      	ldr	r0, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	f002 fe89 	bl	80077e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	f003 020f 	and.w	r2, r3, #15
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d901      	bls.n	8004af6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e050      	b.n	8004b98 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da0f      	bge.n	8004b1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	f003 020f 	and.w	r2, r3, #15
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	3338      	adds	r3, #56	; 0x38
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	3304      	adds	r3, #4
 8004b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	705a      	strb	r2, [r3, #1]
 8004b1c:	e00d      	b.n	8004b3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	3304      	adds	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_PCD_EP_SetStall+0x82>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e01e      	b.n	8004b98 <HAL_PCD_EP_SetStall+0xc0>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f003 fb19 	bl	80081a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	b2d9      	uxtb	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f003 fd09 	bl	80085a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d901      	bls.n	8004bbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e042      	b.n	8004c44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da0f      	bge.n	8004be6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 020f 	and.w	r2, r3, #15
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3338      	adds	r3, #56	; 0x38
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	3304      	adds	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	705a      	strb	r2, [r3, #1]
 8004be4:	e00f      	b.n	8004c06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_PCD_EP_ClrStall+0x86>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e00e      	b.n	8004c44 <HAL_PCD_EP_ClrStall+0xa4>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f003 fb21 	bl	800827c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da0c      	bge.n	8004c7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	3338      	adds	r3, #56	; 0x38
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	3304      	adds	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e00c      	b.n	8004c94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	4413      	add	r3, r2
 8004c90:	3304      	adds	r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f003 f940 	bl	8007f20 <USB_EPStopXfer>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ca4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b08a      	sub	sp, #40	; 0x28
 8004cb2:	af02      	add	r7, sp, #8
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	3338      	adds	r3, #56	; 0x38
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1a      	ldr	r2, [r3, #32]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d901      	bls.n	8004ce6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06c      	b.n	8004dc0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d902      	bls.n	8004d02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3303      	adds	r3, #3
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d0a:	e02b      	b.n	8004d64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d902      	bls.n	8004d28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	3303      	adds	r3, #3
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6919      	ldr	r1, [r3, #16]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4603      	mov	r3, r0
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	f003 f994 	bl	8008074 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	441a      	add	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	441a      	add	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d809      	bhi.n	8004d8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d203      	bcs.n	8004d8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1be      	bne.n	8004d0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d811      	bhi.n	8004dbe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	2201      	movs	r2, #1
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	6939      	ldr	r1, [r7, #16]
 8004db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dba:	4013      	ands	r3, r2
 8004dbc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	333c      	adds	r3, #60	; 0x3c
 8004de0:	3304      	adds	r3, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d17b      	bne.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d015      	beq.n	8004e34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4a61      	ldr	r2, [pc, #388]	; (8004f90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f240 80b9 	bls.w	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80b3 	beq.w	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	e0a7      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	6093      	str	r3, [r2, #8]
 8004e50:	e098      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f040 8093 	bne.w	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4a4b      	ldr	r2, [pc, #300]	; (8004f90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d90f      	bls.n	8004e86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e82:	6093      	str	r3, [r2, #8]
 8004e84:	e07e      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	0159      	lsls	r1, r3, #5
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d114      	bne.n	8004ee8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	f003 fb64 	bl	80085a0 <USB_EP0_OutStart>
 8004ed8:	e006      	b.n	8004ee8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	441a      	add	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f008 fbee 	bl	800d6d0 <HAL_PCD_DataOutStageCallback>
 8004ef4:	e046      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d124      	bne.n	8004f48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	6093      	str	r3, [r2, #8]
 8004f1c:	e032      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	2320      	movs	r3, #32
 8004f38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f008 fbc5 	bl	800d6d0 <HAL_PCD_DataOutStageCallback>
 8004f46:	e01d      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d114      	bne.n	8004f78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f70:	461a      	mov	r2, r3
 8004f72:	2100      	movs	r1, #0
 8004f74:	f003 fb14 	bl	80085a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f008 fba6 	bl	800d6d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	4f54300a 	.word	0x4f54300a
 8004f94:	4f54310a 	.word	0x4f54310a

08004f98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	333c      	adds	r3, #60	; 0x3c
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <PCD_EP_OutSetupPacket_int+0x88>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d90e      	bls.n	8004fec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f008 fb5d 	bl	800d6ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d90c      	bls.n	8005014 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d108      	bne.n	8005014 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800500c:	461a      	mov	r2, r3
 800500e:	2101      	movs	r1, #1
 8005010:	f003 fac6 	bl	80085a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	4f54300a 	.word	0x4f54300a

08005024 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
 8005030:	4613      	mov	r3, r2
 8005032:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005042:	883b      	ldrh	r3, [r7, #0]
 8005044:	0419      	lsls	r1, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	430a      	orrs	r2, r1
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
 8005050:	e028      	b.n	80050a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e00d      	b.n	8005082 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	3340      	adds	r3, #64	; 0x40
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4413      	add	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	3301      	adds	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	3b01      	subs	r3, #1
 8005088:	429a      	cmp	r2, r3
 800508a:	d3ec      	bcc.n	8005066 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800508c:	883b      	ldrh	r3, [r7, #0]
 800508e:	0418      	lsls	r0, r3, #16
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	3b01      	subs	r3, #1
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4302      	orrs	r2, r0
 800509c:	3340      	adds	r3, #64	; 0x40
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e267      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d075      	beq.n	80051f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800510a:	4b88      	ldr	r3, [pc, #544]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b04      	cmp	r3, #4
 8005114:	d00c      	beq.n	8005130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005116:	4b85      	ldr	r3, [pc, #532]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800511e:	2b08      	cmp	r3, #8
 8005120:	d112      	bne.n	8005148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005122:	4b82      	ldr	r3, [pc, #520]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800512a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512e:	d10b      	bne.n	8005148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	4b7e      	ldr	r3, [pc, #504]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d05b      	beq.n	80051f4 <HAL_RCC_OscConfig+0x108>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d157      	bne.n	80051f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e242      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d106      	bne.n	8005160 <HAL_RCC_OscConfig+0x74>
 8005152:	4b76      	ldr	r3, [pc, #472]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a75      	ldr	r2, [pc, #468]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e01d      	b.n	800519c <HAL_RCC_OscConfig+0xb0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x98>
 800516a:	4b70      	ldr	r3, [pc, #448]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a6f      	ldr	r2, [pc, #444]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b6d      	ldr	r3, [pc, #436]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a6c      	ldr	r2, [pc, #432]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e00b      	b.n	800519c <HAL_RCC_OscConfig+0xb0>
 8005184:	4b69      	ldr	r3, [pc, #420]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a68      	ldr	r2, [pc, #416]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	4b66      	ldr	r3, [pc, #408]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a65      	ldr	r2, [pc, #404]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800519a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d013      	beq.n	80051cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fd fb26 	bl	80027f4 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ac:	f7fd fb22 	bl	80027f4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	; 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e207      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051be:	4b5b      	ldr	r3, [pc, #364]	; (800532c <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0xc0>
 80051ca:	e014      	b.n	80051f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd fb12 	bl	80027f4 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fd fb0e 	bl	80027f4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e1f3      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e6:	4b51      	ldr	r3, [pc, #324]	; (800532c <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0xe8>
 80051f2:	e000      	b.n	80051f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d063      	beq.n	80052ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005202:	4b4a      	ldr	r3, [pc, #296]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005216:	2b08      	cmp	r3, #8
 8005218:	d11c      	bne.n	8005254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800521a:	4b44      	ldr	r3, [pc, #272]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d116      	bne.n	8005254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005226:	4b41      	ldr	r3, [pc, #260]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_RCC_OscConfig+0x152>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d001      	beq.n	800523e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e1c7      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523e:	4b3b      	ldr	r3, [pc, #236]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4937      	ldr	r1, [pc, #220]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800524e:	4313      	orrs	r3, r2
 8005250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005252:	e03a      	b.n	80052ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d020      	beq.n	800529e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525c:	4b34      	ldr	r3, [pc, #208]	; (8005330 <HAL_RCC_OscConfig+0x244>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005262:	f7fd fac7 	bl	80027f4 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800526a:	f7fd fac3 	bl	80027f4 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e1a8      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527c:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005288:	4b28      	ldr	r3, [pc, #160]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4925      	ldr	r1, [pc, #148]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]
 800529c:	e015      	b.n	80052ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <HAL_RCC_OscConfig+0x244>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fd faa6 	bl	80027f4 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ac:	f7fd faa2 	bl	80027f4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e187      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d036      	beq.n	8005344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052de:	4b15      	ldr	r3, [pc, #84]	; (8005334 <HAL_RCC_OscConfig+0x248>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e4:	f7fd fa86 	bl	80027f4 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ec:	f7fd fa82 	bl	80027f4 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e167      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x200>
 800530a:	e01b      	b.n	8005344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCC_OscConfig+0x248>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005312:	f7fd fa6f 	bl	80027f4 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005318:	e00e      	b.n	8005338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531a:	f7fd fa6b 	bl	80027f4 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d907      	bls.n	8005338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e150      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
 800532c:	40023800 	.word	0x40023800
 8005330:	42470000 	.word	0x42470000
 8005334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005338:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ea      	bne.n	800531a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8097 	beq.w	8005480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005356:	4b81      	ldr	r3, [pc, #516]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	4b7d      	ldr	r3, [pc, #500]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a7c      	ldr	r2, [pc, #496]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800536c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b7a      	ldr	r3, [pc, #488]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b77      	ldr	r3, [pc, #476]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d118      	bne.n	80053c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538e:	4b74      	ldr	r3, [pc, #464]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a73      	ldr	r2, [pc, #460]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539a:	f7fd fa2b 	bl	80027f4 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a2:	f7fd fa27 	bl	80027f4 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e10c      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	4b6a      	ldr	r3, [pc, #424]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d106      	bne.n	80053d6 <HAL_RCC_OscConfig+0x2ea>
 80053c8:	4b64      	ldr	r3, [pc, #400]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4a63      	ldr	r2, [pc, #396]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	6713      	str	r3, [r2, #112]	; 0x70
 80053d4:	e01c      	b.n	8005410 <HAL_RCC_OscConfig+0x324>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x30c>
 80053de:	4b5f      	ldr	r3, [pc, #380]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4a5e      	ldr	r2, [pc, #376]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ea:	4b5c      	ldr	r3, [pc, #368]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4a5b      	ldr	r2, [pc, #364]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6713      	str	r3, [r2, #112]	; 0x70
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0x324>
 80053f8:	4b58      	ldr	r3, [pc, #352]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a57      	ldr	r2, [pc, #348]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
 8005404:	4b55      	ldr	r3, [pc, #340]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	4a54      	ldr	r2, [pc, #336]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800540a:	f023 0304 	bic.w	r3, r3, #4
 800540e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005418:	f7fd f9ec 	bl	80027f4 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541e:	e00a      	b.n	8005436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005420:	f7fd f9e8 	bl	80027f4 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e0cb      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005436:	4b49      	ldr	r3, [pc, #292]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ee      	beq.n	8005420 <HAL_RCC_OscConfig+0x334>
 8005442:	e014      	b.n	800546e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005444:	f7fd f9d6 	bl	80027f4 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544a:	e00a      	b.n	8005462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fd f9d2 	bl	80027f4 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e0b5      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005462:	4b3e      	ldr	r3, [pc, #248]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ee      	bne.n	800544c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	4a38      	ldr	r2, [pc, #224]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80a1 	beq.w	80055cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800548a:	4b34      	ldr	r3, [pc, #208]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b08      	cmp	r3, #8
 8005494:	d05c      	beq.n	8005550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d141      	bne.n	8005522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <HAL_RCC_OscConfig+0x478>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fd f9a6 	bl	80027f4 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fd f9a2 	bl	80027f4 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e087      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054be:	4b27      	ldr	r3, [pc, #156]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	3b01      	subs	r3, #1
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	491b      	ldr	r1, [pc, #108]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <HAL_RCC_OscConfig+0x478>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fd f97b 	bl	80027f4 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005502:	f7fd f977 	bl	80027f4 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e05c      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x416>
 8005520:	e054      	b.n	80055cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <HAL_RCC_OscConfig+0x478>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005528:	f7fd f964 	bl	80027f4 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005530:	f7fd f960 	bl	80027f4 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e045      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x444>
 800554e:	e03d      	b.n	80055cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d107      	bne.n	8005568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e038      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
 800555c:	40023800 	.word	0x40023800
 8005560:	40007000 	.word	0x40007000
 8005564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x4ec>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d028      	beq.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d121      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d11a      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800559e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d111      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	3b01      	subs	r3, #1
 80055b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0cc      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f0:	4b68      	ldr	r3, [pc, #416]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d90c      	bls.n	8005618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b65      	ldr	r3, [pc, #404]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b63      	ldr	r3, [pc, #396]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0b8      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005630:	4b59      	ldr	r3, [pc, #356]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4a58      	ldr	r2, [pc, #352]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800563a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005648:	4b53      	ldr	r3, [pc, #332]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4a52      	ldr	r2, [pc, #328]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005654:	4b50      	ldr	r3, [pc, #320]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	494d      	ldr	r1, [pc, #308]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d044      	beq.n	80056fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d119      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e07f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d003      	beq.n	800569a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005696:	2b03      	cmp	r3, #3
 8005698:	d107      	bne.n	80056aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569a:	4b3f      	ldr	r3, [pc, #252]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e06f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e067      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ba:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f023 0203 	bic.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4934      	ldr	r1, [pc, #208]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056cc:	f7fd f892 	bl	80027f4 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d4:	f7fd f88e 	bl	80027f4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e04f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 020c 	and.w	r2, r3, #12
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d1eb      	bne.n	80056d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056fc:	4b25      	ldr	r3, [pc, #148]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d20c      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570a:	4b22      	ldr	r3, [pc, #136]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b20      	ldr	r3, [pc, #128]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e032      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005730:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4916      	ldr	r1, [pc, #88]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	490e      	ldr	r1, [pc, #56]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005762:	f000 f821 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 8005766:	4602      	mov	r2, r0
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	490a      	ldr	r1, [pc, #40]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005774:	5ccb      	ldrb	r3, [r1, r3]
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc fed4 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40023c00 	.word	0x40023c00
 8005798:	40023800 	.word	0x40023800
 800579c:	08012164 	.word	0x08012164
 80057a0:	20000010 	.word	0x20000010
 80057a4:	20000014 	.word	0x20000014

080057a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ac:	b090      	sub	sp, #64	; 0x40
 80057ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	2300      	movs	r3, #0
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b8:	2300      	movs	r3, #0
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c0:	4b59      	ldr	r3, [pc, #356]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d00d      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0x40>
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	f200 80a1 	bhi.w	8005914 <HAL_RCC_GetSysClockFreq+0x16c>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x34>
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d003      	beq.n	80057e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057da:	e09b      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_GetSysClockFreq+0x184>)
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80057e0:	e09b      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e2:	4b53      	ldr	r3, [pc, #332]	; (8005930 <HAL_RCC_GetSysClockFreq+0x188>)
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057e6:	e098      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e8:	4b4f      	ldr	r3, [pc, #316]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057f2:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d028      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fe:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	099b      	lsrs	r3, r3, #6
 8005804:	2200      	movs	r2, #0
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	627a      	str	r2, [r7, #36]	; 0x24
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005810:	2100      	movs	r1, #0
 8005812:	4b47      	ldr	r3, [pc, #284]	; (8005930 <HAL_RCC_GetSysClockFreq+0x188>)
 8005814:	fb03 f201 	mul.w	r2, r3, r1
 8005818:	2300      	movs	r3, #0
 800581a:	fb00 f303 	mul.w	r3, r0, r3
 800581e:	4413      	add	r3, r2
 8005820:	4a43      	ldr	r2, [pc, #268]	; (8005930 <HAL_RCC_GetSysClockFreq+0x188>)
 8005822:	fba0 1202 	umull	r1, r2, r0, r2
 8005826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005828:	460a      	mov	r2, r1
 800582a:	62ba      	str	r2, [r7, #40]	; 0x28
 800582c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582e:	4413      	add	r3, r2
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	2200      	movs	r2, #0
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	61fa      	str	r2, [r7, #28]
 800583a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800583e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005842:	f7fa fd25 	bl	8000290 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4613      	mov	r3, r2
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584e:	e053      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005850:	4b35      	ldr	r3, [pc, #212]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	099b      	lsrs	r3, r3, #6
 8005856:	2200      	movs	r2, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	617a      	str	r2, [r7, #20]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005862:	f04f 0b00 	mov.w	fp, #0
 8005866:	4652      	mov	r2, sl
 8005868:	465b      	mov	r3, fp
 800586a:	f04f 0000 	mov.w	r0, #0
 800586e:	f04f 0100 	mov.w	r1, #0
 8005872:	0159      	lsls	r1, r3, #5
 8005874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005878:	0150      	lsls	r0, r2, #5
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	ebb2 080a 	subs.w	r8, r2, sl
 8005882:	eb63 090b 	sbc.w	r9, r3, fp
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005892:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005896:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800589a:	ebb2 0408 	subs.w	r4, r2, r8
 800589e:	eb63 0509 	sbc.w	r5, r3, r9
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	00eb      	lsls	r3, r5, #3
 80058ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b0:	00e2      	lsls	r2, r4, #3
 80058b2:	4614      	mov	r4, r2
 80058b4:	461d      	mov	r5, r3
 80058b6:	eb14 030a 	adds.w	r3, r4, sl
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	eb45 030b 	adc.w	r3, r5, fp
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ce:	4629      	mov	r1, r5
 80058d0:	028b      	lsls	r3, r1, #10
 80058d2:	4621      	mov	r1, r4
 80058d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058d8:	4621      	mov	r1, r4
 80058da:	028a      	lsls	r2, r1, #10
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	2200      	movs	r2, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	60fa      	str	r2, [r7, #12]
 80058e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ec:	f7fa fcd0 	bl	8000290 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005912:	e002      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCC_GetSysClockFreq+0x184>)
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800591c:	4618      	mov	r0, r3
 800591e:	3740      	adds	r7, #64	; 0x40
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800
 800592c:	00f42400 	.word	0x00f42400
 8005930:	017d7840 	.word	0x017d7840

08005934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <HAL_RCC_GetHCLKFreq+0x14>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000010 	.word	0x20000010

0800594c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005950:	f7ff fff0 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0b5b      	lsrs	r3, r3, #13
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	08012174 	.word	0x08012174

08005974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	220f      	movs	r2, #15
 8005982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005984:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <HAL_RCC_GetClockConfig+0x60>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0207 	and.w	r2, r3, #7
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40023c00 	.word	0x40023c00

080059d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e07b      	b.n	8005ae2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fa:	d009      	beq.n	8005a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	61da      	str	r2, [r3, #28]
 8005a02:	e005      	b.n	8005a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc fc32 	bl	8002294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	ea42 0103 	orr.w	r1, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f003 0104 	and.w	r1, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0210 	and.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b088      	sub	sp, #32
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_SPI_Transmit+0x22>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e126      	b.n	8005d5a <HAL_SPI_Transmit+0x270>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b14:	f7fc fe6e 	bl	80027f4 <HAL_GetTick>
 8005b18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b2e:	e10b      	b.n	8005d48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_SPI_Transmit+0x52>
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b40:	e102      	b.n	8005d48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2203      	movs	r2, #3
 8005b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b88:	d10f      	bne.n	8005baa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ba8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d007      	beq.n	8005bc8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd0:	d14b      	bne.n	8005c6a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_SPI_Transmit+0xf6>
 8005bda:	8afb      	ldrh	r3, [r7, #22]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d13e      	bne.n	8005c5e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	881a      	ldrh	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	1c9a      	adds	r2, r3, #2
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c04:	e02b      	b.n	8005c5e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d112      	bne.n	8005c3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	881a      	ldrh	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	1c9a      	adds	r2, r3, #2
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c38:	e011      	b.n	8005c5e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3a:	f7fc fddb 	bl	80027f4 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d803      	bhi.n	8005c52 <HAL_SPI_Transmit+0x168>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d102      	bne.n	8005c58 <HAL_SPI_Transmit+0x16e>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c5c:	e074      	b.n	8005d48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1ce      	bne.n	8005c06 <HAL_SPI_Transmit+0x11c>
 8005c68:	e04c      	b.n	8005d04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_Transmit+0x18e>
 8005c72:	8afb      	ldrh	r3, [r7, #22]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d140      	bne.n	8005cfa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c9e:	e02c      	b.n	8005cfa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d113      	bne.n	8005cd6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cd4:	e011      	b.n	8005cfa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd6:	f7fc fd8d 	bl	80027f4 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d803      	bhi.n	8005cee <HAL_SPI_Transmit+0x204>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d102      	bne.n	8005cf4 <HAL_SPI_Transmit+0x20a>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cf8:	e026      	b.n	8005d48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1cd      	bne.n	8005ca0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f8c1 	bl	8005e90 <SPI_EndRxTxTransaction>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e000      	b.n	8005d48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d58:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d70:	b2db      	uxtb	r3, r3
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d90:	f7fc fd30 	bl	80027f4 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005da0:	f7fc fd28 	bl	80027f4 <HAL_GetTick>
 8005da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	015b      	lsls	r3, r3, #5
 8005dac:	0d1b      	lsrs	r3, r3, #20
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005db6:	e054      	b.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d050      	beq.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc0:	f7fc fd18 	bl	80027f4 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d902      	bls.n	8005dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d13d      	bne.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dee:	d111      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df8:	d004      	beq.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e02:	d107      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1c:	d10f      	bne.n	8005e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e017      	b.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d19b      	bne.n	8005db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000010 	.word	0x20000010

08005e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e9c:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <SPI_EndRxTxTransaction+0x7c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <SPI_EndRxTxTransaction+0x80>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	0d5b      	lsrs	r3, r3, #21
 8005ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eba:	d112      	bne.n	8005ee2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2180      	movs	r1, #128	; 0x80
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ff5a 	bl	8005d80 <SPI_WaitFlagStateUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e00f      	b.n	8005f02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef8:	2b80      	cmp	r3, #128	; 0x80
 8005efa:	d0f2      	beq.n	8005ee2 <SPI_EndRxTxTransaction+0x52>
 8005efc:	e000      	b.n	8005f00 <SPI_EndRxTxTransaction+0x70>
        break;
 8005efe:	bf00      	nop
  }

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000010 	.word	0x20000010
 8005f10:	165e9f81 	.word	0x165e9f81

08005f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e041      	b.n	8005faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fc fa26 	bl	800238c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f000 fc40 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d001      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e044      	b.n	8006056 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <HAL_TIM_Base_Start_IT+0xb0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x6c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d013      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x6c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1a      	ldr	r2, [pc, #104]	; (8006068 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x6c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a19      	ldr	r2, [pc, #100]	; (800606c <HAL_TIM_Base_Start_IT+0xb8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x6c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a17      	ldr	r2, [pc, #92]	; (8006070 <HAL_TIM_Base_Start_IT+0xbc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x6c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a16      	ldr	r2, [pc, #88]	; (8006074 <HAL_TIM_Base_Start_IT+0xc0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d111      	bne.n	8006044 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b06      	cmp	r3, #6
 8006030:	d010      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0201 	orr.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006042:	e007      	b.n	8006054 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40010000 	.word	0x40010000
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40014000 	.word	0x40014000

08006078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e041      	b.n	800610e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fc f99a 	bl	80023d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f000 fb8e 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e097      	b.n	800625a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fc f96c 	bl	800241c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f000 fb34 	bl	80067d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006198:	f023 0303 	bic.w	r3, r3, #3
 800619c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	4313      	orrs	r3, r2
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061b6:	f023 030c 	bic.w	r3, r3, #12
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	4313      	orrs	r3, r2
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	011a      	lsls	r2, r3, #4
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	4313      	orrs	r3, r2
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061f4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061fc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	4313      	orrs	r3, r2
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d122      	bne.n	80062be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d11b      	bne.n	80062be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f06f 0202 	mvn.w	r2, #2
 800628e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa78 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 80062aa:	e005      	b.n	80062b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa6a 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa7b 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d122      	bne.n	8006312 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d11b      	bne.n	8006312 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0204 	mvn.w	r2, #4
 80062e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa4e 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 80062fe:	e005      	b.n	800630c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa40 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa51 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d122      	bne.n	8006366 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b08      	cmp	r3, #8
 800632c:	d11b      	bne.n	8006366 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f06f 0208 	mvn.w	r2, #8
 8006336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2204      	movs	r2, #4
 800633c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa24 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 8006352:	e005      	b.n	8006360 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fa16 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa27 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	2b10      	cmp	r3, #16
 8006372:	d122      	bne.n	80063ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b10      	cmp	r3, #16
 8006380:	d11b      	bne.n	80063ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f06f 0210 	mvn.w	r2, #16
 800638a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2208      	movs	r2, #8
 8006390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f9fa 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 80063a6:	e005      	b.n	80063b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f9ec 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9fd 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10e      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f06f 0201 	mvn.w	r2, #1
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fa fdd5 	bl	8000f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f0:	2b80      	cmp	r3, #128	; 0x80
 80063f2:	d10e      	bne.n	8006412 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fe:	2b80      	cmp	r3, #128	; 0x80
 8006400:	d107      	bne.n	8006412 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800640a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fd01 	bl	8006e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d10e      	bne.n	800643e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b40      	cmp	r3, #64	; 0x40
 800642c:	d107      	bne.n	800643e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f9c2 	bl	80067c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b20      	cmp	r3, #32
 800644a:	d10e      	bne.n	800646a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b20      	cmp	r3, #32
 8006458:	d107      	bne.n	800646a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f06f 0220 	mvn.w	r2, #32
 8006462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fccb 	bl	8006e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800648e:	2302      	movs	r3, #2
 8006490:	e0ae      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	f200 809f 	bhi.w	80065e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080065e1 	.word	0x080065e1
 80064b0:	080065e1 	.word	0x080065e1
 80064b4:	080065e1 	.word	0x080065e1
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	080065e1 	.word	0x080065e1
 80064c0:	080065e1 	.word	0x080065e1
 80064c4:	080065e1 	.word	0x080065e1
 80064c8:	0800655f 	.word	0x0800655f
 80064cc:	080065e1 	.word	0x080065e1
 80064d0:	080065e1 	.word	0x080065e1
 80064d4:	080065e1 	.word	0x080065e1
 80064d8:	0800659f 	.word	0x0800659f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f9f8 	bl	80068d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	619a      	str	r2, [r3, #24]
      break;
 800651a:	e064      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fa3e 	bl	80069a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6999      	ldr	r1, [r3, #24]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	619a      	str	r2, [r3, #24]
      break;
 800655c:	e043      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fa89 	bl	8006a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0204 	bic.w	r2, r2, #4
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	61da      	str	r2, [r3, #28]
      break;
 800659c:	e023      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fad3 	bl	8006b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69d9      	ldr	r1, [r3, #28]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	021a      	lsls	r2, r3, #8
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	61da      	str	r2, [r3, #28]
      break;
 80065de:	e002      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_TIM_ConfigClockSource+0x1c>
 8006610:	2302      	movs	r3, #2
 8006612:	e0b4      	b.n	800677e <HAL_TIM_ConfigClockSource+0x186>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800663a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664c:	d03e      	beq.n	80066cc <HAL_TIM_ConfigClockSource+0xd4>
 800664e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006652:	f200 8087 	bhi.w	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	f000 8086 	beq.w	800676a <HAL_TIM_ConfigClockSource+0x172>
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006662:	d87f      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006664:	2b70      	cmp	r3, #112	; 0x70
 8006666:	d01a      	beq.n	800669e <HAL_TIM_ConfigClockSource+0xa6>
 8006668:	2b70      	cmp	r3, #112	; 0x70
 800666a:	d87b      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 800666c:	2b60      	cmp	r3, #96	; 0x60
 800666e:	d050      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x11a>
 8006670:	2b60      	cmp	r3, #96	; 0x60
 8006672:	d877      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b50      	cmp	r3, #80	; 0x50
 8006676:	d03c      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006678:	2b50      	cmp	r3, #80	; 0x50
 800667a:	d873      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d058      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x13a>
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d86f      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d064      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	2b30      	cmp	r3, #48	; 0x30
 800668a:	d86b      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b20      	cmp	r3, #32
 800668e:	d060      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 8006690:	2b20      	cmp	r3, #32
 8006692:	d867      	bhi.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05c      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 8006698:	2b10      	cmp	r3, #16
 800669a:	d05a      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x15a>
 800669c:	e062      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6899      	ldr	r1, [r3, #8]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f000 fb19 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	609a      	str	r2, [r3, #8]
      break;
 80066ca:	e04f      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	6899      	ldr	r1, [r3, #8]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f000 fb02 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ee:	609a      	str	r2, [r3, #8]
      break;
 80066f0:	e03c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	f000 fa76 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2150      	movs	r1, #80	; 0x50
 800670a:	4618      	mov	r0, r3
 800670c:	f000 facf 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006710:	e02c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	461a      	mov	r2, r3
 8006720:	f000 fa95 	bl	8006c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2160      	movs	r1, #96	; 0x60
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fabf 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006730:	e01c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	461a      	mov	r2, r3
 8006740:	f000 fa56 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	4618      	mov	r0, r3
 800674c:	f000 faaf 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006750:	e00c      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f000 faa6 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006762:	e003      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
      break;
 8006768:	e000      	b.n	800676c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800676a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a34      	ldr	r2, [pc, #208]	; (80068bc <TIM_Base_SetConfig+0xe4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f6:	d00b      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <TIM_Base_SetConfig+0xe8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <TIM_Base_SetConfig+0xec>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <TIM_Base_SetConfig+0xf0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d108      	bne.n	8006822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a25      	ldr	r2, [pc, #148]	; (80068bc <TIM_Base_SetConfig+0xe4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d017      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a22      	ldr	r2, [pc, #136]	; (80068c0 <TIM_Base_SetConfig+0xe8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a21      	ldr	r2, [pc, #132]	; (80068c4 <TIM_Base_SetConfig+0xec>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <TIM_Base_SetConfig+0xf0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <TIM_Base_SetConfig+0xf4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <TIM_Base_SetConfig+0xf8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <TIM_Base_SetConfig+0xfc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a08      	ldr	r2, [pc, #32]	; (80068bc <TIM_Base_SetConfig+0xe4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d103      	bne.n	80068a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	615a      	str	r2, [r3, #20]
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0201 	bic.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 0302 	bic.w	r3, r3, #2
 8006920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <TIM_OC1_SetConfig+0xc8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d10c      	bne.n	800694e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0308 	bic.w	r3, r3, #8
 800693a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 0304 	bic.w	r3, r3, #4
 800694c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <TIM_OC1_SetConfig+0xc8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d111      	bne.n	800697a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800695c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	40010000 	.word	0x40010000

080069a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f023 0210 	bic.w	r2, r3, #16
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0320 	bic.w	r3, r3, #32
 80069ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1e      	ldr	r2, [pc, #120]	; (8006a78 <TIM_OC2_SetConfig+0xd4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d10d      	bne.n	8006a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <TIM_OC2_SetConfig+0xd4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d113      	bne.n	8006a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000

08006a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <TIM_OC3_SetConfig+0xd0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10d      	bne.n	8006af6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <TIM_OC3_SetConfig+0xd0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d113      	bne.n	8006b26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	621a      	str	r2, [r3, #32]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	40010000 	.word	0x40010000

08006b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	031b      	lsls	r3, r3, #12
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <TIM_OC4_SetConfig+0x9c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d109      	bne.n	8006bc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	019b      	lsls	r3, r3, #6
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010000 	.word	0x40010000

08006bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 030a 	bic.w	r3, r3, #10
 8006c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0210 	bic.w	r2, r3, #16
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f043 0307 	orr.w	r3, r3, #7
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e050      	b.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d018      	beq.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d88:	d013      	beq.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00e      	beq.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d004      	beq.n	8006db2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a13      	ldr	r2, [pc, #76]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d10c      	bne.n	8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40010000 	.word	0x40010000
 8006df0:	40000400 	.word	0x40000400
 8006df4:	40000800 	.word	0x40000800
 8006df8:	40000c00 	.word	0x40000c00
 8006dfc:	40014000 	.word	0x40014000

08006e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e28:	b084      	sub	sp, #16
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	f107 001c 	add.w	r0, r7, #28
 8006e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d122      	bne.n	8006e86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d105      	bne.n	8006e7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fbee 	bl	800865c <USB_CoreReset>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]
 8006e84:	e01a      	b.n	8006ebc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fbe2 	bl	800865c <USB_CoreReset>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38
 8006eae:	e005      	b.n	8006ebc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d10b      	bne.n	8006eda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f043 0206 	orr.w	r2, r3, #6
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f043 0220 	orr.w	r2, r3, #32
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ee6:	b004      	add	sp, #16
 8006ee8:	4770      	bx	lr
	...

08006eec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d165      	bne.n	8006fcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4a41      	ldr	r2, [pc, #260]	; (8007008 <USB_SetTurnaroundTime+0x11c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d906      	bls.n	8006f16 <USB_SetTurnaroundTime+0x2a>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4a40      	ldr	r2, [pc, #256]	; (800700c <USB_SetTurnaroundTime+0x120>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d202      	bcs.n	8006f16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f10:	230f      	movs	r3, #15
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	e062      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4a3c      	ldr	r2, [pc, #240]	; (800700c <USB_SetTurnaroundTime+0x120>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d306      	bcc.n	8006f2c <USB_SetTurnaroundTime+0x40>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4a3b      	ldr	r2, [pc, #236]	; (8007010 <USB_SetTurnaroundTime+0x124>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d202      	bcs.n	8006f2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f26:	230e      	movs	r3, #14
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	e057      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4a38      	ldr	r2, [pc, #224]	; (8007010 <USB_SetTurnaroundTime+0x124>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d306      	bcc.n	8006f42 <USB_SetTurnaroundTime+0x56>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4a37      	ldr	r2, [pc, #220]	; (8007014 <USB_SetTurnaroundTime+0x128>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d202      	bcs.n	8006f42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f3c:	230d      	movs	r3, #13
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e04c      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4a33      	ldr	r2, [pc, #204]	; (8007014 <USB_SetTurnaroundTime+0x128>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d306      	bcc.n	8006f58 <USB_SetTurnaroundTime+0x6c>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4a32      	ldr	r2, [pc, #200]	; (8007018 <USB_SetTurnaroundTime+0x12c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d802      	bhi.n	8006f58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f52:	230c      	movs	r3, #12
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	e041      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4a2f      	ldr	r2, [pc, #188]	; (8007018 <USB_SetTurnaroundTime+0x12c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d906      	bls.n	8006f6e <USB_SetTurnaroundTime+0x82>
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4a2e      	ldr	r2, [pc, #184]	; (800701c <USB_SetTurnaroundTime+0x130>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d802      	bhi.n	8006f6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f68:	230b      	movs	r3, #11
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	e036      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4a2a      	ldr	r2, [pc, #168]	; (800701c <USB_SetTurnaroundTime+0x130>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d906      	bls.n	8006f84 <USB_SetTurnaroundTime+0x98>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4a29      	ldr	r2, [pc, #164]	; (8007020 <USB_SetTurnaroundTime+0x134>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d802      	bhi.n	8006f84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f7e:	230a      	movs	r3, #10
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e02b      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4a26      	ldr	r2, [pc, #152]	; (8007020 <USB_SetTurnaroundTime+0x134>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d906      	bls.n	8006f9a <USB_SetTurnaroundTime+0xae>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4a25      	ldr	r2, [pc, #148]	; (8007024 <USB_SetTurnaroundTime+0x138>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d202      	bcs.n	8006f9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f94:	2309      	movs	r3, #9
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e020      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	4a21      	ldr	r2, [pc, #132]	; (8007024 <USB_SetTurnaroundTime+0x138>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d306      	bcc.n	8006fb0 <USB_SetTurnaroundTime+0xc4>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <USB_SetTurnaroundTime+0x13c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d802      	bhi.n	8006fb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006faa:	2308      	movs	r3, #8
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	e015      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <USB_SetTurnaroundTime+0x13c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d906      	bls.n	8006fc6 <USB_SetTurnaroundTime+0xda>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4a1c      	ldr	r2, [pc, #112]	; (800702c <USB_SetTurnaroundTime+0x140>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d202      	bcs.n	8006fc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006fc0:	2307      	movs	r3, #7
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	e00a      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006fc6:	2306      	movs	r3, #6
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e007      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006fd2:	2309      	movs	r3, #9
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	e001      	b.n	8006fdc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fd8:	2309      	movs	r3, #9
 8006fda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	029b      	lsls	r3, r3, #10
 8006ff0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	00d8acbf 	.word	0x00d8acbf
 800700c:	00e4e1c0 	.word	0x00e4e1c0
 8007010:	00f42400 	.word	0x00f42400
 8007014:	01067380 	.word	0x01067380
 8007018:	011a499f 	.word	0x011a499f
 800701c:	01312cff 	.word	0x01312cff
 8007020:	014ca43f 	.word	0x014ca43f
 8007024:	016e3600 	.word	0x016e3600
 8007028:	01a6ab1f 	.word	0x01a6ab1f
 800702c:	01e84800 	.word	0x01e84800

08007030 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f043 0201 	orr.w	r2, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 0201 	bic.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d115      	bne.n	80070c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070a2:	2001      	movs	r0, #1
 80070a4:	f7fb fbb2 	bl	800280c <HAL_Delay>
      ms++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 fa45 	bl	800853e <USB_GetMode>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d01e      	beq.n	80070f8 <USB_SetCurrentMode+0x84>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b31      	cmp	r3, #49	; 0x31
 80070be:	d9f0      	bls.n	80070a2 <USB_SetCurrentMode+0x2e>
 80070c0:	e01a      	b.n	80070f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d115      	bne.n	80070f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070d4:	2001      	movs	r0, #1
 80070d6:	f7fb fb99 	bl	800280c <HAL_Delay>
      ms++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fa2c 	bl	800853e <USB_GetMode>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <USB_SetCurrentMode+0x84>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b31      	cmp	r3, #49	; 0x31
 80070f0:	d9f0      	bls.n	80070d4 <USB_SetCurrentMode+0x60>
 80070f2:	e001      	b.n	80070f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e005      	b.n	8007104 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b32      	cmp	r3, #50	; 0x32
 80070fc:	d101      	bne.n	8007102 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800710c:	b084      	sub	sp, #16
 800710e:	b580      	push	{r7, lr}
 8007110:	b086      	sub	sp, #24
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800711a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	e009      	b.n	8007140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3340      	adds	r3, #64	; 0x40
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	2200      	movs	r2, #0
 8007138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3301      	adds	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2b0e      	cmp	r3, #14
 8007144:	d9f2      	bls.n	800712c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d11c      	bne.n	8007186 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800715a:	f043 0302 	orr.w	r3, r3, #2
 800715e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
 8007184:	e00b      	b.n	800719e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071a4:	461a      	mov	r2, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b0:	4619      	mov	r1, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b8:	461a      	mov	r2, r3
 80071ba:	680b      	ldr	r3, [r1, #0]
 80071bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10c      	bne.n	80071de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071ca:	2100      	movs	r1, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f965 	bl	800749c <USB_SetDevSpeed>
 80071d2:	e008      	b.n	80071e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071d4:	2101      	movs	r1, #1
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f960 	bl	800749c <USB_SetDevSpeed>
 80071dc:	e003      	b.n	80071e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071de:	2103      	movs	r1, #3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f95b 	bl	800749c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071e6:	2110      	movs	r1, #16
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f8f3 	bl	80073d4 <USB_FlushTxFifo>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f91f 	bl	800743c <USB_FlushRxFifo>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	461a      	mov	r2, r3
 8007210:	2300      	movs	r3, #0
 8007212:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721a:	461a      	mov	r2, r3
 800721c:	2300      	movs	r3, #0
 800721e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007226:	461a      	mov	r2, r3
 8007228:	2300      	movs	r3, #0
 800722a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800722c:	2300      	movs	r3, #0
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	e043      	b.n	80072ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007248:	d118      	bne.n	800727c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725c:	461a      	mov	r2, r3
 800725e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	e013      	b.n	800728e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007272:	461a      	mov	r2, r3
 8007274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e008      	b.n	800728e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	461a      	mov	r2, r3
 800729c:	2300      	movs	r3, #0
 800729e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	461a      	mov	r2, r3
 80072ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3301      	adds	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d3b7      	bcc.n	8007232 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	e043      	b.n	8007350 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072de:	d118      	bne.n	8007312 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	461a      	mov	r2, r3
 80072f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	e013      	b.n	8007324 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007308:	461a      	mov	r2, r3
 800730a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	e008      	b.n	8007324 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731e:	461a      	mov	r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	461a      	mov	r2, r3
 8007344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3301      	adds	r3, #1
 800734e:	613b      	str	r3, [r7, #16]
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	429a      	cmp	r2, r3
 8007356:	d3b7      	bcc.n	80072c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800736a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007378:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f043 0210 	orr.w	r2, r3, #16
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699a      	ldr	r2, [r3, #24]
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <USB_DevInit+0x2c4>)
 8007392:	4313      	orrs	r3, r2
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f043 0208 	orr.w	r2, r3, #8
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d107      	bne.n	80073c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073b8:	f043 0304 	orr.w	r3, r3, #4
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073cc:	b004      	add	sp, #16
 80073ce:	4770      	bx	lr
 80073d0:	803c3800 	.word	0x803c3800

080073d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a13      	ldr	r2, [pc, #76]	; (8007438 <USB_FlushTxFifo+0x64>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d901      	bls.n	80073f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e01b      	b.n	800742c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	daf2      	bge.n	80073e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	019b      	lsls	r3, r3, #6
 8007404:	f043 0220 	orr.w	r2, r3, #32
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4a08      	ldr	r2, [pc, #32]	; (8007438 <USB_FlushTxFifo+0x64>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e006      	b.n	800742c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b20      	cmp	r3, #32
 8007428:	d0f0      	beq.n	800740c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	00030d40 	.word	0x00030d40

0800743c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4a11      	ldr	r2, [pc, #68]	; (8007498 <USB_FlushRxFifo+0x5c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d901      	bls.n	800745a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e018      	b.n	800748c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	daf2      	bge.n	8007448 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2210      	movs	r2, #16
 800746a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3301      	adds	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4a08      	ldr	r2, [pc, #32]	; (8007498 <USB_FlushRxFifo+0x5c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d901      	bls.n	800747e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e006      	b.n	800748c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b10      	cmp	r3, #16
 8007488:	d0f0      	beq.n	800746c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	00030d40 	.word	0x00030d40

0800749c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074bc:	4313      	orrs	r3, r2
 80074be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b087      	sub	sp, #28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 0306 	and.w	r3, r3, #6
 80074e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d102      	bne.n	80074f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]
 80074f2:	e00a      	b.n	800750a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d002      	beq.n	8007500 <USB_GetDevSpeed+0x32>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b06      	cmp	r3, #6
 80074fe:	d102      	bne.n	8007506 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007500:	2302      	movs	r3, #2
 8007502:	75fb      	strb	r3, [r7, #23]
 8007504:	e001      	b.n	800750a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007506:	230f      	movs	r3, #15
 8007508:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
}
 800750c:	4618      	mov	r0, r3
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	785b      	ldrb	r3, [r3, #1]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d13a      	bne.n	80075aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	2101      	movs	r1, #1
 8007546:	fa01 f303 	lsl.w	r3, r1, r3
 800754a:	b29b      	uxth	r3, r3
 800754c:	68f9      	ldr	r1, [r7, #12]
 800754e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007552:	4313      	orrs	r3, r2
 8007554:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d155      	bne.n	8007618 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	791b      	ldrb	r3, [r3, #4]
 8007586:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007588:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	059b      	lsls	r3, r3, #22
 800758e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007590:	4313      	orrs	r3, r2
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	e036      	b.n	8007618 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b0:	69da      	ldr	r2, [r3, #28]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	2101      	movs	r1, #1
 80075bc:	fa01 f303 	lsl.w	r3, r1, r3
 80075c0:	041b      	lsls	r3, r3, #16
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d11a      	bne.n	8007618 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075fe:	430b      	orrs	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007616:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d161      	bne.n	8007708 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800765a:	d11f      	bne.n	800769c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800767a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800769a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	2101      	movs	r1, #1
 80076ae:	fa01 f303 	lsl.w	r3, r1, r3
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	68f9      	ldr	r1, [r7, #12]
 80076b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076bc:	4013      	ands	r3, r2
 80076be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	2101      	movs	r1, #1
 80076d2:	fa01 f303 	lsl.w	r3, r1, r3
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	43db      	mvns	r3, r3
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e0:	4013      	ands	r3, r2
 80076e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	0159      	lsls	r1, r3, #5
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	440b      	add	r3, r1
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	4619      	mov	r1, r3
 8007700:	4b35      	ldr	r3, [pc, #212]	; (80077d8 <USB_DeactivateEndpoint+0x1b0>)
 8007702:	4013      	ands	r3, r2
 8007704:	600b      	str	r3, [r1, #0]
 8007706:	e060      	b.n	80077ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800771a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800771e:	d11f      	bne.n	8007760 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800773e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800775e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	2101      	movs	r1, #1
 8007772:	fa01 f303 	lsl.w	r3, r1, r3
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	43db      	mvns	r3, r3
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007780:	4013      	ands	r3, r2
 8007782:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	69da      	ldr	r2, [r3, #28]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	2101      	movs	r1, #1
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	43db      	mvns	r3, r3
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a4:	4013      	ands	r3, r2
 80077a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	0159      	lsls	r1, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	440b      	add	r3, r1
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	4619      	mov	r1, r3
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <USB_DeactivateEndpoint+0x1b4>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	ec337800 	.word	0xec337800
 80077dc:	eff37800 	.word	0xeff37800

080077e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	; 0x28
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	f040 815c 	bne.w	8007aba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d132      	bne.n	8007870 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007824:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007828:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800782c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	0151      	lsls	r1, r2, #5
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	440a      	add	r2, r1
 8007844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800784c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	0151      	lsls	r1, r2, #5
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	440a      	add	r2, r1
 8007864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007868:	0cdb      	lsrs	r3, r3, #19
 800786a:	04db      	lsls	r3, r3, #19
 800786c:	6113      	str	r3, [r2, #16]
 800786e:	e074      	b.n	800795a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788a:	0cdb      	lsrs	r3, r3, #19
 800788c:	04db      	lsls	r3, r3, #19
 800788e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6999      	ldr	r1, [r3, #24]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	440b      	add	r3, r1
 80078cc:	1e59      	subs	r1, r3, #1
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078d8:	4b9d      	ldr	r3, [pc, #628]	; (8007b50 <USB_EPStartXfer+0x370>)
 80078da:	400b      	ands	r3, r1
 80078dc:	69b9      	ldr	r1, [r7, #24]
 80078de:	0148      	lsls	r0, r1, #5
 80078e0:	69f9      	ldr	r1, [r7, #28]
 80078e2:	4401      	add	r1, r0
 80078e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078e8:	4313      	orrs	r3, r2
 80078ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f8:	691a      	ldr	r2, [r3, #16]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007902:	69b9      	ldr	r1, [r7, #24]
 8007904:	0148      	lsls	r0, r1, #5
 8007906:	69f9      	ldr	r1, [r7, #28]
 8007908:	4401      	add	r1, r0
 800790a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800790e:	4313      	orrs	r3, r2
 8007910:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	791b      	ldrb	r3, [r3, #4]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d11f      	bne.n	800795a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	440a      	add	r2, r1
 8007930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007934:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007938:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007958:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d14b      	bne.n	80079f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	791b      	ldrb	r3, [r3, #4]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d128      	bne.n	80079d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d110      	bne.n	80079b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	e00f      	b.n	80079d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	e133      	b.n	8007c60 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	791b      	ldrb	r3, [r3, #4]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d015      	beq.n	8007a4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 811b 	beq.w	8007c60 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a40:	69f9      	ldr	r1, [r7, #28]
 8007a42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a46:	4313      	orrs	r3, r2
 8007a48:	634b      	str	r3, [r1, #52]	; 0x34
 8007a4a:	e109      	b.n	8007c60 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d110      	bne.n	8007a7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e00f      	b.n	8007a9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	69fa      	ldr	r2, [r7, #28]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6919      	ldr	r1, [r3, #16]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	781a      	ldrb	r2, [r3, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	b298      	uxth	r0, r3
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fade 	bl	8008074 <USB_WritePacket>
 8007ab8:	e0d2      	b.n	8007c60 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad4:	0cdb      	lsrs	r3, r3, #19
 8007ad6:	04db      	lsls	r3, r3, #19
 8007ad8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007afc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d126      	bne.n	8007b54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b12:	691a      	ldr	r2, [r3, #16]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b1c:	69b9      	ldr	r1, [r7, #24]
 8007b1e:	0148      	lsls	r0, r1, #5
 8007b20:	69f9      	ldr	r1, [r7, #28]
 8007b22:	4401      	add	r1, r0
 8007b24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b4a:	6113      	str	r3, [r2, #16]
 8007b4c:	e03a      	b.n	8007bc4 <USB_EPStartXfer+0x3e4>
 8007b4e:	bf00      	nop
 8007b50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	1e5a      	subs	r2, r3, #1
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b68:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	8afa      	ldrh	r2, [r7, #22]
 8007b70:	fb03 f202 	mul.w	r2, r3, r2
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	8afb      	ldrh	r3, [r7, #22]
 8007b88:	04d9      	lsls	r1, r3, #19
 8007b8a:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <USB_EPStartXfer+0x48c>)
 8007b8c:	400b      	ands	r3, r1
 8007b8e:	69b9      	ldr	r1, [r7, #24]
 8007b90:	0148      	lsls	r0, r1, #5
 8007b92:	69f9      	ldr	r1, [r7, #28]
 8007b94:	4401      	add	r1, r0
 8007b96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb4:	69b9      	ldr	r1, [r7, #24]
 8007bb6:	0148      	lsls	r0, r1, #5
 8007bb8:	69f9      	ldr	r1, [r7, #28]
 8007bba:	4401      	add	r1, r0
 8007bbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d10d      	bne.n	8007be6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6919      	ldr	r1, [r3, #16]
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	460a      	mov	r2, r1
 8007be4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	791b      	ldrb	r3, [r3, #4]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d128      	bne.n	8007c40 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d110      	bne.n	8007c20 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e00f      	b.n	8007c40 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	1ff80000 	.word	0x1ff80000

08007c70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	f040 80ce 	bne.w	8007e2e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d132      	bne.n	8007d00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	0151      	lsls	r1, r2, #5
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	440a      	add	r2, r1
 8007cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf8:	0cdb      	lsrs	r3, r3, #19
 8007cfa:	04db      	lsls	r3, r3, #19
 8007cfc:	6113      	str	r3, [r2, #16]
 8007cfe:	e04e      	b.n	8007d9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	0151      	lsls	r1, r2, #5
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	440a      	add	r2, r1
 8007d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1a:	0cdb      	lsrs	r3, r3, #19
 8007d1c:	04db      	lsls	r3, r3, #19
 8007d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d903      	bls.n	8007d58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d8e:	6939      	ldr	r1, [r7, #16]
 8007d90:	0148      	lsls	r0, r1, #5
 8007d92:	6979      	ldr	r1, [r7, #20]
 8007d94:	4401      	add	r1, r0
 8007d96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d11e      	bne.n	8007de2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d009      	beq.n	8007dc0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db8:	461a      	mov	r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	0151      	lsls	r1, r2, #5
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	440a      	add	r2, r1
 8007dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	e097      	b.n	8007f12 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 8083 	beq.w	8007f12 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e22:	6979      	ldr	r1, [r7, #20]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	634b      	str	r3, [r1, #52]	; 0x34
 8007e2c:	e071      	b.n	8007f12 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e48:	0cdb      	lsrs	r3, r3, #19
 8007e4a:	04db      	lsls	r3, r3, #19
 8007e4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec0:	6939      	ldr	r1, [r7, #16]
 8007ec2:	0148      	lsls	r0, r1, #5
 8007ec4:	6979      	ldr	r1, [r7, #20]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d10d      	bne.n	8007ef2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6919      	ldr	r1, [r3, #16]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eee:	460a      	mov	r2, r1
 8007ef0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d14a      	bne.n	8007fd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f56:	f040 8086 	bne.w	8008066 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	7812      	ldrb	r2, [r2, #0]
 8007f92:	0151      	lsls	r1, r2, #5
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	440a      	add	r2, r1
 8007f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d902      	bls.n	8007fb8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb6:	e056      	b.n	8008066 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd0:	d0e7      	beq.n	8007fa2 <USB_EPStopXfer+0x82>
 8007fd2:	e048      	b.n	8008066 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fec:	d13b      	bne.n	8008066 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	7812      	ldrb	r2, [r2, #0]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800800c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008010:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	7812      	ldrb	r2, [r2, #0]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008030:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008034:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3301      	adds	r3, #1
 800803a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008042:	4293      	cmp	r3, r2
 8008044:	d902      	bls.n	800804c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	75fb      	strb	r3, [r7, #23]
          break;
 800804a:	e00c      	b.n	8008066 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008064:	d0e7      	beq.n	8008036 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
}
 8008068:	4618      	mov	r0, r3
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008074:	b480      	push	{r7}
 8008076:	b089      	sub	sp, #36	; 0x24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4611      	mov	r1, r2
 8008080:	461a      	mov	r2, r3
 8008082:	460b      	mov	r3, r1
 8008084:	71fb      	strb	r3, [r7, #7]
 8008086:	4613      	mov	r3, r2
 8008088:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d123      	bne.n	80080e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800809a:	88bb      	ldrh	r3, [r7, #4]
 800809c:	3303      	adds	r3, #3
 800809e:	089b      	lsrs	r3, r3, #2
 80080a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080a2:	2300      	movs	r3, #0
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	e018      	b.n	80080da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	031a      	lsls	r2, r3, #12
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b4:	461a      	mov	r2, r3
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	3301      	adds	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	3301      	adds	r3, #1
 80080c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	3301      	adds	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	3301      	adds	r3, #1
 80080d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	3301      	adds	r3, #1
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d3e2      	bcc.n	80080a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3724      	adds	r7, #36	; 0x24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b08b      	sub	sp, #44	; 0x2c
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	089b      	lsrs	r3, r3, #2
 800810a:	b29b      	uxth	r3, r3
 800810c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008116:	2300      	movs	r3, #0
 8008118:	623b      	str	r3, [r7, #32]
 800811a:	e014      	b.n	8008146 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	601a      	str	r2, [r3, #0]
    pDest++;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	3301      	adds	r3, #1
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	3301      	adds	r3, #1
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	3301      	adds	r3, #1
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	3301      	adds	r3, #1
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	3301      	adds	r3, #1
 8008144:	623b      	str	r3, [r7, #32]
 8008146:	6a3a      	ldr	r2, [r7, #32]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	429a      	cmp	r2, r3
 800814c:	d3e6      	bcc.n	800811c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800814e:	8bfb      	ldrh	r3, [r7, #30]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01e      	beq.n	8008192 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815e:	461a      	mov	r2, r3
 8008160:	f107 0310 	add.w	r3, r7, #16
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	fa22 f303 	lsr.w	r3, r2, r3
 8008174:	b2da      	uxtb	r2, r3
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	701a      	strb	r2, [r3, #0]
      i++;
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	3301      	adds	r3, #1
 800817e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	3301      	adds	r3, #1
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008186:	8bfb      	ldrh	r3, [r7, #30]
 8008188:	3b01      	subs	r3, #1
 800818a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800818c:	8bfb      	ldrh	r3, [r7, #30]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1ea      	bne.n	8008168 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008194:	4618      	mov	r0, r3
 8008196:	372c      	adds	r7, #44	; 0x2c
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d12c      	bne.n	8008216 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	db12      	blt.n	80081f4 <USB_EPSetStall+0x54>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	0151      	lsls	r1, r2, #5
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	440a      	add	r2, r1
 800820a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800820e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	e02b      	b.n	800826e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	db12      	blt.n	800824e <USB_EPSetStall+0xae>
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00f      	beq.n	800824e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800824c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800826c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d128      	bne.n	80082ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	0151      	lsls	r1, r2, #5
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	440a      	add	r2, r1
 80082ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	791b      	ldrb	r3, [r3, #4]
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d003      	beq.n	80082c8 <USB_EPClearStall+0x4c>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d138      	bne.n	800833a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	0151      	lsls	r1, r2, #5
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	440a      	add	r2, r1
 80082de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	e027      	b.n	800833a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008308:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	791b      	ldrb	r3, [r3, #4]
 800830e:	2b03      	cmp	r3, #3
 8008310:	d003      	beq.n	800831a <USB_EPClearStall+0x9e>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	791b      	ldrb	r3, [r3, #4]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d10f      	bne.n	800833a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	0151      	lsls	r1, r2, #5
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	440a      	add	r2, r1
 8008330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008338:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008366:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800836a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	78fb      	ldrb	r3, [r7, #3]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800837c:	68f9      	ldr	r1, [r7, #12]
 800837e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008382:	4313      	orrs	r3, r2
 8008384:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083c2:	f023 0302 	bic.w	r3, r3, #2
 80083c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	4013      	ands	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008430:	68fb      	ldr	r3, [r7, #12]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	4013      	ands	r3, r2
 8008460:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	0c1b      	lsrs	r3, r3, #16
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	4013      	ands	r3, r2
 8008494:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	b29b      	uxth	r3, r3
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4013      	ands	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084d4:	68bb      	ldr	r3, [r7, #8]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b087      	sub	sp, #28
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	fa22 f303 	lsr.w	r3, r2, r3
 8008512:	01db      	lsls	r3, r3, #7
 8008514:	b2db      	uxtb	r3, r3
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4013      	ands	r3, r2
 800852e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008530:	68bb      	ldr	r3, [r7, #8]
}
 8008532:	4618      	mov	r0, r3
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0301 	and.w	r3, r3, #1
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008574:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008578:	f023 0307 	bic.w	r3, r3, #7
 800857c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800858c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008590:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	460b      	mov	r3, r1
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	333c      	adds	r3, #60	; 0x3c
 80085b6:	3304      	adds	r3, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4a26      	ldr	r2, [pc, #152]	; (8008658 <USB_EP0_OutStart+0xb8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d90a      	bls.n	80085da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d4:	d101      	bne.n	80085da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e037      	b.n	800864a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e0:	461a      	mov	r2, r3
 80085e2:	2300      	movs	r3, #0
 80085e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008608:	f043 0318 	orr.w	r3, r3, #24
 800860c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800861c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008620:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d10f      	bne.n	8008648 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008642:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	4f54300a 	.word	0x4f54300a

0800865c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3301      	adds	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a13      	ldr	r2, [pc, #76]	; (80086c0 <USB_CoreReset+0x64>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d901      	bls.n	800867a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e01b      	b.n	80086b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	daf2      	bge.n	8008668 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f043 0201 	orr.w	r2, r3, #1
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <USB_CoreReset+0x64>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d901      	bls.n	80086a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e006      	b.n	80086b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d0f0      	beq.n	8008692 <USB_CoreReset+0x36>

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	00030d40 	.word	0x00030d40

080086c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086d4:	f005 fa5c 	bl	800db90 <USBD_static_malloc>
 80086d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d109      	bne.n	80086f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	32b0      	adds	r2, #176	; 0xb0
 80086ea:	2100      	movs	r1, #0
 80086ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80086f0:	2302      	movs	r3, #2
 80086f2:	e0d4      	b.n	800889e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80086f4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80086f8:	2100      	movs	r1, #0
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f005 fac6 	bl	800dc8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32b0      	adds	r2, #176	; 0xb0
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	32b0      	adds	r2, #176	; 0xb0
 800871a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	7c1b      	ldrb	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d138      	bne.n	800879e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800872c:	4b5e      	ldr	r3, [pc, #376]	; (80088a8 <USBD_CDC_Init+0x1e4>)
 800872e:	7819      	ldrb	r1, [r3, #0]
 8008730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008734:	2202      	movs	r2, #2
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f005 f907 	bl	800d94a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800873c:	4b5a      	ldr	r3, [pc, #360]	; (80088a8 <USBD_CDC_Init+0x1e4>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	3324      	adds	r3, #36	; 0x24
 8008752:	2201      	movs	r2, #1
 8008754:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008756:	4b55      	ldr	r3, [pc, #340]	; (80088ac <USBD_CDC_Init+0x1e8>)
 8008758:	7819      	ldrb	r1, [r3, #0]
 800875a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800875e:	2202      	movs	r2, #2
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f005 f8f2 	bl	800d94a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008766:	4b51      	ldr	r3, [pc, #324]	; (80088ac <USBD_CDC_Init+0x1e8>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 020f 	and.w	r2, r3, #15
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800877e:	2201      	movs	r2, #1
 8008780:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008782:	4b4b      	ldr	r3, [pc, #300]	; (80088b0 <USBD_CDC_Init+0x1ec>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	f003 020f 	and.w	r2, r3, #15
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	3326      	adds	r3, #38	; 0x26
 8008798:	2210      	movs	r2, #16
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	e035      	b.n	800880a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800879e:	4b42      	ldr	r3, [pc, #264]	; (80088a8 <USBD_CDC_Init+0x1e4>)
 80087a0:	7819      	ldrb	r1, [r3, #0]
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	2202      	movs	r2, #2
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f005 f8cf 	bl	800d94a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087ac:	4b3e      	ldr	r3, [pc, #248]	; (80088a8 <USBD_CDC_Init+0x1e4>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	f003 020f 	and.w	r2, r3, #15
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	440b      	add	r3, r1
 80087c0:	3324      	adds	r3, #36	; 0x24
 80087c2:	2201      	movs	r2, #1
 80087c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087c6:	4b39      	ldr	r3, [pc, #228]	; (80088ac <USBD_CDC_Init+0x1e8>)
 80087c8:	7819      	ldrb	r1, [r3, #0]
 80087ca:	2340      	movs	r3, #64	; 0x40
 80087cc:	2202      	movs	r2, #2
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f005 f8bb 	bl	800d94a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087d4:	4b35      	ldr	r3, [pc, #212]	; (80088ac <USBD_CDC_Init+0x1e8>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	f003 020f 	and.w	r2, r3, #15
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087ec:	2201      	movs	r2, #1
 80087ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80087f0:	4b2f      	ldr	r3, [pc, #188]	; (80088b0 <USBD_CDC_Init+0x1ec>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	3326      	adds	r3, #38	; 0x26
 8008806:	2210      	movs	r2, #16
 8008808:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800880a:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <USBD_CDC_Init+0x1ec>)
 800880c:	7819      	ldrb	r1, [r3, #0]
 800880e:	2308      	movs	r3, #8
 8008810:	2203      	movs	r2, #3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f005 f899 	bl	800d94a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008818:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <USBD_CDC_Init+0x1ec>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f003 020f 	and.w	r2, r3, #15
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	3324      	adds	r3, #36	; 0x24
 800882e:	2201      	movs	r2, #1
 8008830:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	33b0      	adds	r3, #176	; 0xb0
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008868:	2302      	movs	r3, #2
 800886a:	e018      	b.n	800889e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	7c1b      	ldrb	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008874:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <USBD_CDC_Init+0x1e8>)
 8008876:	7819      	ldrb	r1, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800887e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f005 f950 	bl	800db28 <USBD_LL_PrepareReceive>
 8008888:	e008      	b.n	800889c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800888a:	4b08      	ldr	r3, [pc, #32]	; (80088ac <USBD_CDC_Init+0x1e8>)
 800888c:	7819      	ldrb	r1, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008894:	2340      	movs	r3, #64	; 0x40
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f005 f946 	bl	800db28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200000a3 	.word	0x200000a3
 80088ac:	200000a4 	.word	0x200000a4
 80088b0:	200000a5 	.word	0x200000a5

080088b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80088c0:	4b3a      	ldr	r3, [pc, #232]	; (80089ac <USBD_CDC_DeInit+0xf8>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f005 f865 	bl	800d996 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80088cc:	4b37      	ldr	r3, [pc, #220]	; (80089ac <USBD_CDC_DeInit+0xf8>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 020f 	and.w	r2, r3, #15
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	3324      	adds	r3, #36	; 0x24
 80088e2:	2200      	movs	r2, #0
 80088e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80088e6:	4b32      	ldr	r3, [pc, #200]	; (80089b0 <USBD_CDC_DeInit+0xfc>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f005 f852 	bl	800d996 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80088f2:	4b2f      	ldr	r3, [pc, #188]	; (80089b0 <USBD_CDC_DeInit+0xfc>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	f003 020f 	and.w	r2, r3, #15
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800890a:	2200      	movs	r2, #0
 800890c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800890e:	4b29      	ldr	r3, [pc, #164]	; (80089b4 <USBD_CDC_DeInit+0x100>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f005 f83e 	bl	800d996 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800891a:	4b26      	ldr	r3, [pc, #152]	; (80089b4 <USBD_CDC_DeInit+0x100>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	3324      	adds	r3, #36	; 0x24
 8008930:	2200      	movs	r2, #0
 8008932:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008934:	4b1f      	ldr	r3, [pc, #124]	; (80089b4 <USBD_CDC_DeInit+0x100>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 020f 	and.w	r2, r3, #15
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	3326      	adds	r3, #38	; 0x26
 800894a:	2200      	movs	r2, #0
 800894c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	32b0      	adds	r2, #176	; 0xb0
 8008958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01f      	beq.n	80089a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	33b0      	adds	r3, #176	; 0xb0
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	32b0      	adds	r2, #176	; 0xb0
 800897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008982:	4618      	mov	r0, r3
 8008984:	f005 f912 	bl	800dbac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	32b0      	adds	r2, #176	; 0xb0
 8008992:	2100      	movs	r1, #0
 8008994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	200000a3 	.word	0x200000a3
 80089b0:	200000a4 	.word	0x200000a4
 80089b4:	200000a5 	.word	0x200000a5

080089b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	32b0      	adds	r2, #176	; 0xb0
 80089cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e0bf      	b.n	8008b68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d050      	beq.n	8008a96 <USBD_CDC_Setup+0xde>
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	f040 80af 	bne.w	8008b58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	88db      	ldrh	r3, [r3, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d03a      	beq.n	8008a78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b25b      	sxtb	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	da1b      	bge.n	8008a44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	33b0      	adds	r3, #176	; 0xb0
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	88d2      	ldrh	r2, [r2, #6]
 8008a28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	88db      	ldrh	r3, [r3, #6]
 8008a2e:	2b07      	cmp	r3, #7
 8008a30:	bf28      	it	cs
 8008a32:	2307      	movcs	r3, #7
 8008a34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	89fa      	ldrh	r2, [r7, #14]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 fd89 	bl	800a554 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a42:	e090      	b.n	8008b66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	785a      	ldrb	r2, [r3, #1]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	2b3f      	cmp	r3, #63	; 0x3f
 8008a54:	d803      	bhi.n	8008a5e <USBD_CDC_Setup+0xa6>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	88db      	ldrh	r3, [r3, #6]
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	e000      	b.n	8008a60 <USBD_CDC_Setup+0xa8>
 8008a5e:	2240      	movs	r2, #64	; 0x40
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008a66:	6939      	ldr	r1, [r7, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008a6e:	461a      	mov	r2, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 fd9b 	bl	800a5ac <USBD_CtlPrepareRx>
      break;
 8008a76:	e076      	b.n	8008b66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	33b0      	adds	r3, #176	; 0xb0
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	7850      	ldrb	r0, [r2, #1]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	4798      	blx	r3
      break;
 8008a94:	e067      	b.n	8008b66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b0b      	cmp	r3, #11
 8008a9c:	d851      	bhi.n	8008b42 <USBD_CDC_Setup+0x18a>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <USBD_CDC_Setup+0xec>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008ad5 	.word	0x08008ad5
 8008aa8:	08008b51 	.word	0x08008b51
 8008aac:	08008b43 	.word	0x08008b43
 8008ab0:	08008b43 	.word	0x08008b43
 8008ab4:	08008b43 	.word	0x08008b43
 8008ab8:	08008b43 	.word	0x08008b43
 8008abc:	08008b43 	.word	0x08008b43
 8008ac0:	08008b43 	.word	0x08008b43
 8008ac4:	08008b43 	.word	0x08008b43
 8008ac8:	08008b43 	.word	0x08008b43
 8008acc:	08008aff 	.word	0x08008aff
 8008ad0:	08008b29 	.word	0x08008b29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d107      	bne.n	8008af0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ae0:	f107 030a 	add.w	r3, r7, #10
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fd33 	bl	800a554 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aee:	e032      	b.n	8008b56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f001 fcbd 	bl	800a472 <USBD_CtlError>
            ret = USBD_FAIL;
 8008af8:	2303      	movs	r3, #3
 8008afa:	75fb      	strb	r3, [r7, #23]
          break;
 8008afc:	e02b      	b.n	8008b56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d107      	bne.n	8008b1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b0a:	f107 030d 	add.w	r3, r7, #13
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fd1e 	bl	800a554 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b18:	e01d      	b.n	8008b56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 fca8 	bl	800a472 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b22:	2303      	movs	r3, #3
 8008b24:	75fb      	strb	r3, [r7, #23]
          break;
 8008b26:	e016      	b.n	8008b56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d00f      	beq.n	8008b54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 fc9b 	bl	800a472 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b40:	e008      	b.n	8008b54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fc94 	bl	800a472 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b4e:	e002      	b.n	8008b56 <USBD_CDC_Setup+0x19e>
          break;
 8008b50:	bf00      	nop
 8008b52:	e008      	b.n	8008b66 <USBD_CDC_Setup+0x1ae>
          break;
 8008b54:	bf00      	nop
      }
      break;
 8008b56:	e006      	b.n	8008b66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f001 fc89 	bl	800a472 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	75fb      	strb	r3, [r7, #23]
      break;
 8008b64:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32b0      	adds	r2, #176	; 0xb0
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e065      	b.n	8008c66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	32b0      	adds	r2, #176	; 0xb0
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	f003 020f 	and.w	r2, r3, #15
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	3318      	adds	r3, #24
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d02f      	beq.n	8008c24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	f003 020f 	and.w	r2, r3, #15
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	f003 010f 	and.w	r1, r3, #15
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	460b      	mov	r3, r1
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	440b      	add	r3, r1
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4403      	add	r3, r0
 8008bec:	3348      	adds	r3, #72	; 0x48
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d112      	bne.n	8008c24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	f003 020f 	and.w	r2, r3, #15
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	3318      	adds	r3, #24
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c16:	78f9      	ldrb	r1, [r7, #3]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f004 ff62 	bl	800dae6 <USBD_LL_Transmit>
 8008c22:	e01f      	b.n	8008c64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	33b0      	adds	r3, #176	; 0xb0
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d010      	beq.n	8008c64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	33b0      	adds	r3, #176	; 0xb0
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c60:	78fa      	ldrb	r2, [r7, #3]
 8008c62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	32b0      	adds	r2, #176	; 0xb0
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	32b0      	adds	r2, #176	; 0xb0
 8008c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e01a      	b.n	8008cd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f004 ff60 	bl	800db6a <USBD_LL_GetRxDataSize>
 8008caa:	4602      	mov	r2, r0
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	33b0      	adds	r3, #176	; 0xb0
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	32b0      	adds	r2, #176	; 0xb0
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e025      	b.n	8008d4c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	33b0      	adds	r3, #176	; 0xb0
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01a      	beq.n	8008d4a <USBD_CDC_EP0_RxReady+0x6c>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d1a:	2bff      	cmp	r3, #255	; 0xff
 8008d1c:	d015      	beq.n	8008d4a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	33b0      	adds	r3, #176	; 0xb0
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d36:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d3e:	b292      	uxth	r2, r2
 8008d40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	22ff      	movs	r2, #255	; 0xff
 8008d46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d5c:	2182      	movs	r1, #130	; 0x82
 8008d5e:	4818      	ldr	r0, [pc, #96]	; (8008dc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d60:	f000 fd4f 	bl	8009802 <USBD_GetEpDesc>
 8008d64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d66:	2101      	movs	r1, #1
 8008d68:	4815      	ldr	r0, [pc, #84]	; (8008dc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d6a:	f000 fd4a 	bl	8009802 <USBD_GetEpDesc>
 8008d6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d70:	2181      	movs	r1, #129	; 0x81
 8008d72:	4813      	ldr	r0, [pc, #76]	; (8008dc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d74:	f000 fd45 	bl	8009802 <USBD_GetEpDesc>
 8008d78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2210      	movs	r2, #16
 8008d84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d006      	beq.n	8008d9a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d94:	711a      	strb	r2, [r3, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d006      	beq.n	8008dae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008da8:	711a      	strb	r2, [r3, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2243      	movs	r2, #67	; 0x43
 8008db2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008db4:	4b02      	ldr	r3, [pc, #8]	; (8008dc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000060 	.word	0x20000060

08008dc4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008dcc:	2182      	movs	r1, #130	; 0x82
 8008dce:	4818      	ldr	r0, [pc, #96]	; (8008e30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008dd0:	f000 fd17 	bl	8009802 <USBD_GetEpDesc>
 8008dd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	4815      	ldr	r0, [pc, #84]	; (8008e30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008dda:	f000 fd12 	bl	8009802 <USBD_GetEpDesc>
 8008dde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008de0:	2181      	movs	r1, #129	; 0x81
 8008de2:	4813      	ldr	r0, [pc, #76]	; (8008e30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008de4:	f000 fd0d 	bl	8009802 <USBD_GetEpDesc>
 8008de8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2210      	movs	r2, #16
 8008df4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	711a      	strb	r2, [r3, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f042 0202 	orr.w	r2, r2, #2
 8008e08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d006      	beq.n	8008e1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	711a      	strb	r2, [r3, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f042 0202 	orr.w	r2, r2, #2
 8008e1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2243      	movs	r2, #67	; 0x43
 8008e22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000060 	.word	0x20000060

08008e34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e3c:	2182      	movs	r1, #130	; 0x82
 8008e3e:	4818      	ldr	r0, [pc, #96]	; (8008ea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e40:	f000 fcdf 	bl	8009802 <USBD_GetEpDesc>
 8008e44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e46:	2101      	movs	r1, #1
 8008e48:	4815      	ldr	r0, [pc, #84]	; (8008ea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e4a:	f000 fcda 	bl	8009802 <USBD_GetEpDesc>
 8008e4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e50:	2181      	movs	r1, #129	; 0x81
 8008e52:	4813      	ldr	r0, [pc, #76]	; (8008ea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e54:	f000 fcd5 	bl	8009802 <USBD_GetEpDesc>
 8008e58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2210      	movs	r2, #16
 8008e64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e74:	711a      	strb	r2, [r3, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d006      	beq.n	8008e8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e88:	711a      	strb	r2, [r3, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2243      	movs	r2, #67	; 0x43
 8008e92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000060 	.word	0x20000060

08008ea4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	220a      	movs	r2, #10
 8008eb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008eb2:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	2000001c 	.word	0x2000001c

08008ec4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e009      	b.n	8008eec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	33b0      	adds	r3, #176	; 0xb0
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	32b0      	adds	r2, #176	; 0xb0
 8008f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f12:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e008      	b.n	8008f30 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	32b0      	adds	r2, #176	; 0xb0
 8008f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e004      	b.n	8008f6a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	32b0      	adds	r2, #176	; 0xb0
 8008f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008f90:	2301      	movs	r3, #1
 8008f92:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	32b0      	adds	r2, #176	; 0xb0
 8008f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e025      	b.n	8008ff6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d11f      	bne.n	8008ff4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008fbc:	4b10      	ldr	r3, [pc, #64]	; (8009000 <USBD_CDC_TransmitPacket+0x88>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 020f 	and.w	r2, r3, #15
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4403      	add	r3, r0
 8008fd6:	3318      	adds	r3, #24
 8008fd8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008fda:	4b09      	ldr	r3, [pc, #36]	; (8009000 <USBD_CDC_TransmitPacket+0x88>)
 8008fdc:	7819      	ldrb	r1, [r3, #0]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f004 fd7b 	bl	800dae6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	200000a3 	.word	0x200000a3

08009004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	32b0      	adds	r2, #176	; 0xb0
 8009016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	32b0      	adds	r2, #176	; 0xb0
 8009026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800902e:	2303      	movs	r3, #3
 8009030:	e018      	b.n	8009064 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	7c1b      	ldrb	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800903a:	4b0c      	ldr	r3, [pc, #48]	; (800906c <USBD_CDC_ReceivePacket+0x68>)
 800903c:	7819      	ldrb	r1, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f004 fd6d 	bl	800db28 <USBD_LL_PrepareReceive>
 800904e:	e008      	b.n	8009062 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <USBD_CDC_ReceivePacket+0x68>)
 8009052:	7819      	ldrb	r1, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800905a:	2340      	movs	r3, #64	; 0x40
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f004 fd63 	bl	800db28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200000a4 	.word	0x200000a4

08009070 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	4613      	mov	r3, r2
 800907c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009084:	2303      	movs	r3, #3
 8009086:	e01f      	b.n	80090c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	79fa      	ldrb	r2, [r7, #7]
 80090ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f004 fbdd 	bl	800d87c <USBD_LL_Init>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e025      	b.n	8009134 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32ae      	adds	r2, #174	; 0xae
 80090fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00f      	beq.n	8009124 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32ae      	adds	r2, #174	; 0xae
 800910e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	f107 020e 	add.w	r2, r7, #14
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	4602      	mov	r2, r0
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f004 fbe5 	bl	800d914 <USBD_LL_Start>
 800914a:	4603      	mov	r3, r0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800915c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009180:	2b00      	cmp	r3, #0
 8009182:	d009      	beq.n	8009198 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	78fa      	ldrb	r2, [r7, #3]
 800918e:	4611      	mov	r1, r2
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	4798      	blx	r3
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	4611      	mov	r1, r2
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 f908 	bl	800a3fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80091fc:	461a      	mov	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800920a:	f003 031f 	and.w	r3, r3, #31
 800920e:	2b02      	cmp	r3, #2
 8009210:	d01a      	beq.n	8009248 <USBD_LL_SetupStage+0x72>
 8009212:	2b02      	cmp	r3, #2
 8009214:	d822      	bhi.n	800925c <USBD_LL_SetupStage+0x86>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <USBD_LL_SetupStage+0x4a>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d00a      	beq.n	8009234 <USBD_LL_SetupStage+0x5e>
 800921e:	e01d      	b.n	800925c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fb5f 	bl	80098ec <USBD_StdDevReq>
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]
      break;
 8009232:	e020      	b.n	8009276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fbc7 	bl	80099d0 <USBD_StdItfReq>
 8009242:	4603      	mov	r3, r0
 8009244:	73fb      	strb	r3, [r7, #15]
      break;
 8009246:	e016      	b.n	8009276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fc29 	bl	8009aa8 <USBD_StdEPReq>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]
      break;
 800925a:	e00c      	b.n	8009276 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009262:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009266:	b2db      	uxtb	r3, r3
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f004 fbb2 	bl	800d9d4 <USBD_LL_StallEP>
 8009270:	4603      	mov	r3, r0
 8009272:	73fb      	strb	r3, [r7, #15]
      break;
 8009274:	bf00      	nop
  }

  return ret;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	460b      	mov	r3, r1
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009292:	7afb      	ldrb	r3, [r7, #11]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d16e      	bne.n	8009376 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800929e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	f040 8098 	bne.w	80093dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d913      	bls.n	80092e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	4293      	cmp	r3, r2
 80092d0:	bf28      	it	cs
 80092d2:	4613      	movcs	r3, r2
 80092d4:	461a      	mov	r2, r3
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f001 f984 	bl	800a5e6 <USBD_CtlContinueRx>
 80092de:	e07d      	b.n	80093dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092e6:	f003 031f 	and.w	r3, r3, #31
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d014      	beq.n	8009318 <USBD_LL_DataOutStage+0x98>
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d81d      	bhi.n	800932e <USBD_LL_DataOutStage+0xae>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <USBD_LL_DataOutStage+0x7c>
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d003      	beq.n	8009302 <USBD_LL_DataOutStage+0x82>
 80092fa:	e018      	b.n	800932e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	75bb      	strb	r3, [r7, #22]
            break;
 8009300:	e018      	b.n	8009334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009308:	b2db      	uxtb	r3, r3
 800930a:	4619      	mov	r1, r3
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fa5e 	bl	80097ce <USBD_CoreFindIF>
 8009312:	4603      	mov	r3, r0
 8009314:	75bb      	strb	r3, [r7, #22]
            break;
 8009316:	e00d      	b.n	8009334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800931e:	b2db      	uxtb	r3, r3
 8009320:	4619      	mov	r1, r3
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fa60 	bl	80097e8 <USBD_CoreFindEP>
 8009328:	4603      	mov	r3, r0
 800932a:	75bb      	strb	r3, [r7, #22]
            break;
 800932c:	e002      	b.n	8009334 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	75bb      	strb	r3, [r7, #22]
            break;
 8009332:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009334:	7dbb      	ldrb	r3, [r7, #22]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d119      	bne.n	800936e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b03      	cmp	r3, #3
 8009344:	d113      	bne.n	800936e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009346:	7dba      	ldrb	r2, [r7, #22]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	32ae      	adds	r2, #174	; 0xae
 800934c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009356:	7dba      	ldrb	r2, [r7, #22]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800935e:	7dba      	ldrb	r2, [r7, #22]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	32ae      	adds	r2, #174	; 0xae
 8009364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f001 f94a 	bl	800a608 <USBD_CtlSendStatus>
 8009374:	e032      	b.n	80093dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009376:	7afb      	ldrb	r3, [r7, #11]
 8009378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937c:	b2db      	uxtb	r3, r3
 800937e:	4619      	mov	r1, r3
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fa31 	bl	80097e8 <USBD_CoreFindEP>
 8009386:	4603      	mov	r3, r0
 8009388:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800938a:	7dbb      	ldrb	r3, [r7, #22]
 800938c:	2bff      	cmp	r3, #255	; 0xff
 800938e:	d025      	beq.n	80093dc <USBD_LL_DataOutStage+0x15c>
 8009390:	7dbb      	ldrb	r3, [r7, #22]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d122      	bne.n	80093dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d117      	bne.n	80093d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093a2:	7dba      	ldrb	r2, [r7, #22]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	32ae      	adds	r2, #174	; 0xae
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00f      	beq.n	80093d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093b2:	7dba      	ldrb	r2, [r7, #22]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093ba:	7dba      	ldrb	r2, [r7, #22]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	32ae      	adds	r2, #174	; 0xae
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	7afa      	ldrb	r2, [r7, #11]
 80093c8:	4611      	mov	r1, r2
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	e000      	b.n	80093de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b086      	sub	sp, #24
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	460b      	mov	r3, r1
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d16f      	bne.n	80094da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3314      	adds	r3, #20
 80093fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009406:	2b02      	cmp	r3, #2
 8009408:	d15a      	bne.n	80094c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	689a      	ldr	r2, [r3, #8]
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	429a      	cmp	r2, r3
 8009414:	d914      	bls.n	8009440 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	689a      	ldr	r2, [r3, #8]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	461a      	mov	r2, r3
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f001 f8ac 	bl	800a58a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009432:	2300      	movs	r3, #0
 8009434:	2200      	movs	r2, #0
 8009436:	2100      	movs	r1, #0
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f004 fb75 	bl	800db28 <USBD_LL_PrepareReceive>
 800943e:	e03f      	b.n	80094c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	429a      	cmp	r2, r3
 800944a:	d11c      	bne.n	8009486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009454:	429a      	cmp	r2, r3
 8009456:	d316      	bcc.n	8009486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009462:	429a      	cmp	r2, r3
 8009464:	d20f      	bcs.n	8009486 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f001 f88d 	bl	800a58a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009478:	2300      	movs	r3, #0
 800947a:	2200      	movs	r2, #0
 800947c:	2100      	movs	r1, #0
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f004 fb52 	bl	800db28 <USBD_LL_PrepareReceive>
 8009484:	e01c      	b.n	80094c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b03      	cmp	r3, #3
 8009490:	d10f      	bne.n	80094b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094b2:	2180      	movs	r1, #128	; 0x80
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f004 fa8d 	bl	800d9d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f001 f8b7 	bl	800a62e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d03a      	beq.n	8009540 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f7ff fe42 	bl	8009154 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094d8:	e032      	b.n	8009540 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80094da:	7afb      	ldrb	r3, [r7, #11]
 80094dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	4619      	mov	r1, r3
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f97f 	bl	80097e8 <USBD_CoreFindEP>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	2bff      	cmp	r3, #255	; 0xff
 80094f2:	d025      	beq.n	8009540 <USBD_LL_DataInStage+0x15a>
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d122      	bne.n	8009540 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b03      	cmp	r3, #3
 8009504:	d11c      	bne.n	8009540 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009506:	7dfa      	ldrb	r2, [r7, #23]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	32ae      	adds	r2, #174	; 0xae
 800950c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d014      	beq.n	8009540 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009516:	7dfa      	ldrb	r2, [r7, #23]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800951e:	7dfa      	ldrb	r2, [r7, #23]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	32ae      	adds	r2, #174	; 0xae
 8009524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	7afa      	ldrb	r2, [r7, #11]
 800952c:	4611      	mov	r1, r2
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	4798      	blx	r3
 8009532:	4603      	mov	r3, r0
 8009534:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009536:	7dbb      	ldrb	r3, [r7, #22]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800953c:	7dbb      	ldrb	r3, [r7, #22]
 800953e:	e000      	b.n	8009542 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d014      	beq.n	80095b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00e      	beq.n	80095b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	6852      	ldr	r2, [r2, #4]
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	4611      	mov	r1, r2
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095ac:	2303      	movs	r3, #3
 80095ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	2200      	movs	r2, #0
 80095b4:	2100      	movs	r1, #0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f004 f9c7 	bl	800d94a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2240      	movs	r2, #64	; 0x40
 80095c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095cc:	2340      	movs	r3, #64	; 0x40
 80095ce:	2200      	movs	r2, #0
 80095d0:	2180      	movs	r1, #128	; 0x80
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f004 f9b9 	bl	800d94a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2240      	movs	r2, #64	; 0x40
 80095e2:	621a      	str	r2, [r3, #32]

  return ret;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961c:	b2da      	uxtb	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2204      	movs	r2, #4
 8009628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b04      	cmp	r3, #4
 800964c:	d106      	bne.n	800965c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009654:	b2da      	uxtb	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b03      	cmp	r3, #3
 800967c:	d110      	bne.n	80096a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	32ae      	adds	r2, #174	; 0xae
 80096c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e01c      	b.n	8009706 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d115      	bne.n	8009704 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	32ae      	adds	r2, #174	; 0xae
 80096e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	32ae      	adds	r2, #174	; 0xae
 80096f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	4611      	mov	r1, r2
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	460b      	mov	r3, r1
 8009718:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	32ae      	adds	r2, #174	; 0xae
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800972c:	2303      	movs	r3, #3
 800972e:	e01c      	b.n	800976a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b03      	cmp	r3, #3
 800973a:	d115      	bne.n	8009768 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	32ae      	adds	r2, #174	; 0xae
 8009746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	32ae      	adds	r2, #174	; 0xae
 800975a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	4611      	mov	r1, r2
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00e      	beq.n	80097c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6852      	ldr	r2, [r2, #4]
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	4611      	mov	r1, r2
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80097c0:	2303      	movs	r3, #3
 80097c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	460b      	mov	r3, r1
 80097d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b086      	sub	sp, #24
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	885b      	ldrh	r3, [r3, #2]
 800981e:	b29a      	uxth	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	429a      	cmp	r2, r3
 8009828:	d920      	bls.n	800986c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009832:	e013      	b.n	800985c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009834:	f107 030a 	add.w	r3, r7, #10
 8009838:	4619      	mov	r1, r3
 800983a:	6978      	ldr	r0, [r7, #20]
 800983c:	f000 f81b 	bl	8009876 <USBD_GetNextDesc>
 8009840:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	785b      	ldrb	r3, [r3, #1]
 8009846:	2b05      	cmp	r3, #5
 8009848:	d108      	bne.n	800985c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	789b      	ldrb	r3, [r3, #2]
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	429a      	cmp	r2, r3
 8009856:	d008      	beq.n	800986a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	885b      	ldrh	r3, [r3, #2]
 8009860:	b29a      	uxth	r2, r3
 8009862:	897b      	ldrh	r3, [r7, #10]
 8009864:	429a      	cmp	r2, r3
 8009866:	d8e5      	bhi.n	8009834 <USBD_GetEpDesc+0x32>
 8009868:	e000      	b.n	800986c <USBD_GetEpDesc+0x6a>
          break;
 800986a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800986c:	693b      	ldr	r3, [r7, #16]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	881a      	ldrh	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	4413      	add	r3, r2
 8009890:	b29a      	uxth	r2, r3
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	461a      	mov	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4413      	add	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098a2:	68fb      	ldr	r3, [r7, #12]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	3301      	adds	r3, #1
 80098c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098ce:	8a3b      	ldrh	r3, [r7, #16]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	b21a      	sxth	r2, r3
 80098d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098d8:	4313      	orrs	r3, r2
 80098da:	b21b      	sxth	r3, r3
 80098dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098de:	89fb      	ldrh	r3, [r7, #14]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009902:	2b40      	cmp	r3, #64	; 0x40
 8009904:	d005      	beq.n	8009912 <USBD_StdDevReq+0x26>
 8009906:	2b40      	cmp	r3, #64	; 0x40
 8009908:	d857      	bhi.n	80099ba <USBD_StdDevReq+0xce>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00f      	beq.n	800992e <USBD_StdDevReq+0x42>
 800990e:	2b20      	cmp	r3, #32
 8009910:	d153      	bne.n	80099ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	32ae      	adds	r2, #174	; 0xae
 800991c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
      break;
 800992c:	e04a      	b.n	80099c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	2b09      	cmp	r3, #9
 8009934:	d83b      	bhi.n	80099ae <USBD_StdDevReq+0xc2>
 8009936:	a201      	add	r2, pc, #4	; (adr r2, 800993c <USBD_StdDevReq+0x50>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	08009991 	.word	0x08009991
 8009940:	080099a5 	.word	0x080099a5
 8009944:	080099af 	.word	0x080099af
 8009948:	0800999b 	.word	0x0800999b
 800994c:	080099af 	.word	0x080099af
 8009950:	0800996f 	.word	0x0800996f
 8009954:	08009965 	.word	0x08009965
 8009958:	080099af 	.word	0x080099af
 800995c:	08009987 	.word	0x08009987
 8009960:	08009979 	.word	0x08009979
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fa3c 	bl	8009de4 <USBD_GetDescriptor>
          break;
 800996c:	e024      	b.n	80099b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fba1 	bl	800a0b8 <USBD_SetAddress>
          break;
 8009976:	e01f      	b.n	80099b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fbe0 	bl	800a140 <USBD_SetConfig>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
          break;
 8009984:	e018      	b.n	80099b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fc83 	bl	800a294 <USBD_GetConfig>
          break;
 800998e:	e013      	b.n	80099b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fcb4 	bl	800a300 <USBD_GetStatus>
          break;
 8009998:	e00e      	b.n	80099b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fce3 	bl	800a368 <USBD_SetFeature>
          break;
 80099a2:	e009      	b.n	80099b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fd07 	bl	800a3ba <USBD_ClrFeature>
          break;
 80099ac:	e004      	b.n	80099b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fd5e 	bl	800a472 <USBD_CtlError>
          break;
 80099b6:	bf00      	nop
      }
      break;
 80099b8:	e004      	b.n	80099c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fd58 	bl	800a472 <USBD_CtlError>
      break;
 80099c2:	bf00      	nop
  }

  return ret;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop

080099d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d005      	beq.n	80099f6 <USBD_StdItfReq+0x26>
 80099ea:	2b40      	cmp	r3, #64	; 0x40
 80099ec:	d852      	bhi.n	8009a94 <USBD_StdItfReq+0xc4>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <USBD_StdItfReq+0x26>
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d14e      	bne.n	8009a94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	3b01      	subs	r3, #1
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d840      	bhi.n	8009a86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	889b      	ldrh	r3, [r3, #4]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d836      	bhi.n	8009a7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	889b      	ldrh	r3, [r3, #4]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff fed9 	bl	80097ce <USBD_CoreFindIF>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	2bff      	cmp	r3, #255	; 0xff
 8009a24:	d01d      	beq.n	8009a62 <USBD_StdItfReq+0x92>
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d11a      	bne.n	8009a62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a2c:	7bba      	ldrb	r2, [r7, #14]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	32ae      	adds	r2, #174	; 0xae
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00f      	beq.n	8009a5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a3c:	7bba      	ldrb	r2, [r7, #14]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a44:	7bba      	ldrb	r2, [r7, #14]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	32ae      	adds	r2, #174	; 0xae
 8009a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	4798      	blx	r3
 8009a56:	4603      	mov	r3, r0
 8009a58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a5a:	e004      	b.n	8009a66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a60:	e001      	b.n	8009a66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009a62:	2303      	movs	r3, #3
 8009a64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	88db      	ldrh	r3, [r3, #6]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d110      	bne.n	8009a90 <USBD_StdItfReq+0xc0>
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10d      	bne.n	8009a90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fdc7 	bl	800a608 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a7a:	e009      	b.n	8009a90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fcf7 	bl	800a472 <USBD_CtlError>
          break;
 8009a84:	e004      	b.n	8009a90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fcf2 	bl	800a472 <USBD_CtlError>
          break;
 8009a8e:	e000      	b.n	8009a92 <USBD_StdItfReq+0xc2>
          break;
 8009a90:	bf00      	nop
      }
      break;
 8009a92:	e004      	b.n	8009a9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fceb 	bl	800a472 <USBD_CtlError>
      break;
 8009a9c:	bf00      	nop
  }

  return ret;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	889b      	ldrh	r3, [r3, #4]
 8009aba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ac4:	2b40      	cmp	r3, #64	; 0x40
 8009ac6:	d007      	beq.n	8009ad8 <USBD_StdEPReq+0x30>
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	f200 817f 	bhi.w	8009dcc <USBD_StdEPReq+0x324>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d02a      	beq.n	8009b28 <USBD_StdEPReq+0x80>
 8009ad2:	2b20      	cmp	r3, #32
 8009ad4:	f040 817a 	bne.w	8009dcc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff fe83 	bl	80097e8 <USBD_CoreFindEP>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ae6:	7b7b      	ldrb	r3, [r7, #13]
 8009ae8:	2bff      	cmp	r3, #255	; 0xff
 8009aea:	f000 8174 	beq.w	8009dd6 <USBD_StdEPReq+0x32e>
 8009aee:	7b7b      	ldrb	r3, [r7, #13]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f040 8170 	bne.w	8009dd6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009af6:	7b7a      	ldrb	r2, [r7, #13]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009afe:	7b7a      	ldrb	r2, [r7, #13]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	32ae      	adds	r2, #174	; 0xae
 8009b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8163 	beq.w	8009dd6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b10:	7b7a      	ldrb	r2, [r7, #13]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	32ae      	adds	r2, #174	; 0xae
 8009b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b26:	e156      	b.n	8009dd6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d008      	beq.n	8009b42 <USBD_StdEPReq+0x9a>
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	f300 8145 	bgt.w	8009dc0 <USBD_StdEPReq+0x318>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 809b 	beq.w	8009c72 <USBD_StdEPReq+0x1ca>
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d03c      	beq.n	8009bba <USBD_StdEPReq+0x112>
 8009b40:	e13e      	b.n	8009dc0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d002      	beq.n	8009b54 <USBD_StdEPReq+0xac>
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d016      	beq.n	8009b80 <USBD_StdEPReq+0xd8>
 8009b52:	e02c      	b.n	8009bae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00d      	beq.n	8009b76 <USBD_StdEPReq+0xce>
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	2b80      	cmp	r3, #128	; 0x80
 8009b5e:	d00a      	beq.n	8009b76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f003 ff35 	bl	800d9d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b6a:	2180      	movs	r1, #128	; 0x80
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f003 ff31 	bl	800d9d4 <USBD_LL_StallEP>
 8009b72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b74:	e020      	b.n	8009bb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fc7a 	bl	800a472 <USBD_CtlError>
              break;
 8009b7e:	e01b      	b.n	8009bb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	885b      	ldrh	r3, [r3, #2]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10e      	bne.n	8009ba6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00b      	beq.n	8009ba6 <USBD_StdEPReq+0xfe>
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b80      	cmp	r3, #128	; 0x80
 8009b92:	d008      	beq.n	8009ba6 <USBD_StdEPReq+0xfe>
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	88db      	ldrh	r3, [r3, #6]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f003 ff17 	bl	800d9d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fd2e 	bl	800a608 <USBD_CtlSendStatus>

              break;
 8009bac:	e004      	b.n	8009bb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fc5e 	bl	800a472 <USBD_CtlError>
              break;
 8009bb6:	bf00      	nop
          }
          break;
 8009bb8:	e107      	b.n	8009dca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d002      	beq.n	8009bcc <USBD_StdEPReq+0x124>
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d016      	beq.n	8009bf8 <USBD_StdEPReq+0x150>
 8009bca:	e04b      	b.n	8009c64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bcc:	7bbb      	ldrb	r3, [r7, #14]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00d      	beq.n	8009bee <USBD_StdEPReq+0x146>
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	2b80      	cmp	r3, #128	; 0x80
 8009bd6:	d00a      	beq.n	8009bee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f003 fef9 	bl	800d9d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009be2:	2180      	movs	r1, #128	; 0x80
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f003 fef5 	bl	800d9d4 <USBD_LL_StallEP>
 8009bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bec:	e040      	b.n	8009c70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fc3e 	bl	800a472 <USBD_CtlError>
              break;
 8009bf6:	e03b      	b.n	8009c70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	885b      	ldrh	r3, [r3, #2]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d136      	bne.n	8009c6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f003 feff 	bl	800da12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fcf7 	bl	800a608 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff fde2 	bl	80097e8 <USBD_CoreFindEP>
 8009c24:	4603      	mov	r3, r0
 8009c26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c28:	7b7b      	ldrb	r3, [r7, #13]
 8009c2a:	2bff      	cmp	r3, #255	; 0xff
 8009c2c:	d01f      	beq.n	8009c6e <USBD_StdEPReq+0x1c6>
 8009c2e:	7b7b      	ldrb	r3, [r7, #13]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d11c      	bne.n	8009c6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c34:	7b7a      	ldrb	r2, [r7, #13]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c3c:	7b7a      	ldrb	r2, [r7, #13]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	32ae      	adds	r2, #174	; 0xae
 8009c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d010      	beq.n	8009c6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c4c:	7b7a      	ldrb	r2, [r7, #13]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	32ae      	adds	r2, #174	; 0xae
 8009c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	4798      	blx	r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009c62:	e004      	b.n	8009c6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fc03 	bl	800a472 <USBD_CtlError>
              break;
 8009c6c:	e000      	b.n	8009c70 <USBD_StdEPReq+0x1c8>
              break;
 8009c6e:	bf00      	nop
          }
          break;
 8009c70:	e0ab      	b.n	8009dca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d002      	beq.n	8009c84 <USBD_StdEPReq+0x1dc>
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d032      	beq.n	8009ce8 <USBD_StdEPReq+0x240>
 8009c82:	e097      	b.n	8009db4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d007      	beq.n	8009c9a <USBD_StdEPReq+0x1f2>
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
 8009c8c:	2b80      	cmp	r3, #128	; 0x80
 8009c8e:	d004      	beq.n	8009c9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fbed 	bl	800a472 <USBD_CtlError>
                break;
 8009c98:	e091      	b.n	8009dbe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	da0b      	bge.n	8009cba <USBD_StdEPReq+0x212>
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	3310      	adds	r3, #16
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	e00b      	b.n	8009cd2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	4413      	add	r3, r2
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fc37 	bl	800a554 <USBD_CtlSendData>
              break;
 8009ce6:	e06a      	b.n	8009dbe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da11      	bge.n	8009d14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
 8009cf2:	f003 020f 	and.w	r2, r3, #15
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	440b      	add	r3, r1
 8009d02:	3324      	adds	r3, #36	; 0x24
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d117      	bne.n	8009d3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fbb0 	bl	800a472 <USBD_CtlError>
                  break;
 8009d12:	e054      	b.n	8009dbe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	f003 020f 	and.w	r2, r3, #15
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fb9d 	bl	800a472 <USBD_CtlError>
                  break;
 8009d38:	e041      	b.n	8009dbe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	da0b      	bge.n	8009d5a <USBD_StdEPReq+0x2b2>
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	3310      	adds	r3, #16
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	4413      	add	r3, r2
 8009d56:	3304      	adds	r3, #4
 8009d58:	e00b      	b.n	8009d72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d60:	4613      	mov	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	4413      	add	r3, r2
 8009d70:	3304      	adds	r3, #4
 8009d72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <USBD_StdEPReq+0x2d8>
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	2b80      	cmp	r3, #128	; 0x80
 8009d7e:	d103      	bne.n	8009d88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	e00e      	b.n	8009da6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f003 fe5f 	bl	800da50 <USBD_LL_IsStallEP>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2202      	movs	r2, #2
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fbd1 	bl	800a554 <USBD_CtlSendData>
              break;
 8009db2:	e004      	b.n	8009dbe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fb5b 	bl	800a472 <USBD_CtlError>
              break;
 8009dbc:	bf00      	nop
          }
          break;
 8009dbe:	e004      	b.n	8009dca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fb55 	bl	800a472 <USBD_CtlError>
          break;
 8009dc8:	bf00      	nop
      }
      break;
 8009dca:	e005      	b.n	8009dd8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fb4f 	bl	800a472 <USBD_CtlError>
      break;
 8009dd4:	e000      	b.n	8009dd8 <USBD_StdEPReq+0x330>
      break;
 8009dd6:	bf00      	nop
  }

  return ret;
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	885b      	ldrh	r3, [r3, #2]
 8009dfe:	0a1b      	lsrs	r3, r3, #8
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	3b01      	subs	r3, #1
 8009e04:	2b06      	cmp	r3, #6
 8009e06:	f200 8128 	bhi.w	800a05a <USBD_GetDescriptor+0x276>
 8009e0a:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <USBD_GetDescriptor+0x2c>)
 8009e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e10:	08009e2d 	.word	0x08009e2d
 8009e14:	08009e45 	.word	0x08009e45
 8009e18:	08009e85 	.word	0x08009e85
 8009e1c:	0800a05b 	.word	0x0800a05b
 8009e20:	0800a05b 	.word	0x0800a05b
 8009e24:	08009ffb 	.word	0x08009ffb
 8009e28:	0800a027 	.word	0x0800a027
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	7c12      	ldrb	r2, [r2, #16]
 8009e38:	f107 0108 	add.w	r1, r7, #8
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
 8009e40:	60f8      	str	r0, [r7, #12]
      break;
 8009e42:	e112      	b.n	800a06a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	7c1b      	ldrb	r3, [r3, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10d      	bne.n	8009e68 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e54:	f107 0208 	add.w	r2, r7, #8
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4798      	blx	r3
 8009e5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3301      	adds	r3, #1
 8009e62:	2202      	movs	r2, #2
 8009e64:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e66:	e100      	b.n	800a06a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	f107 0208 	add.w	r2, r7, #8
 8009e74:	4610      	mov	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	2202      	movs	r2, #2
 8009e80:	701a      	strb	r2, [r3, #0]
      break;
 8009e82:	e0f2      	b.n	800a06a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	885b      	ldrh	r3, [r3, #2]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	f200 80ac 	bhi.w	8009fe8 <USBD_GetDescriptor+0x204>
 8009e90:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <USBD_GetDescriptor+0xb4>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009eb1 	.word	0x08009eb1
 8009e9c:	08009ee5 	.word	0x08009ee5
 8009ea0:	08009f19 	.word	0x08009f19
 8009ea4:	08009f4d 	.word	0x08009f4d
 8009ea8:	08009f81 	.word	0x08009f81
 8009eac:	08009fb5 	.word	0x08009fb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	7c12      	ldrb	r2, [r2, #16]
 8009ec8:	f107 0108 	add.w	r1, r7, #8
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4798      	blx	r3
 8009ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed2:	e091      	b.n	8009ff8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 facb 	bl	800a472 <USBD_CtlError>
            err++;
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee2:	e089      	b.n	8009ff8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	7c12      	ldrb	r2, [r2, #16]
 8009efc:	f107 0108 	add.w	r1, r7, #8
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f06:	e077      	b.n	8009ff8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fab1 	bl	800a472 <USBD_CtlError>
            err++;
 8009f10:	7afb      	ldrb	r3, [r7, #11]
 8009f12:	3301      	adds	r3, #1
 8009f14:	72fb      	strb	r3, [r7, #11]
          break;
 8009f16:	e06f      	b.n	8009ff8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	7c12      	ldrb	r2, [r2, #16]
 8009f30:	f107 0108 	add.w	r1, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f3a:	e05d      	b.n	8009ff8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa97 	bl	800a472 <USBD_CtlError>
            err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
          break;
 8009f4a:	e055      	b.n	8009ff8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	7c12      	ldrb	r2, [r2, #16]
 8009f64:	f107 0108 	add.w	r1, r7, #8
 8009f68:	4610      	mov	r0, r2
 8009f6a:	4798      	blx	r3
 8009f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f6e:	e043      	b.n	8009ff8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa7d 	bl	800a472 <USBD_CtlError>
            err++;
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f7e:	e03b      	b.n	8009ff8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00b      	beq.n	8009fa4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	7c12      	ldrb	r2, [r2, #16]
 8009f98:	f107 0108 	add.w	r1, r7, #8
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4798      	blx	r3
 8009fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fa2:	e029      	b.n	8009ff8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fa63 	bl	800a472 <USBD_CtlError>
            err++;
 8009fac:	7afb      	ldrb	r3, [r7, #11]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fb2:	e021      	b.n	8009ff8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	7c12      	ldrb	r2, [r2, #16]
 8009fcc:	f107 0108 	add.w	r1, r7, #8
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fd6:	e00f      	b.n	8009ff8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fa49 	bl	800a472 <USBD_CtlError>
            err++;
 8009fe0:	7afb      	ldrb	r3, [r7, #11]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fe6:	e007      	b.n	8009ff8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fa41 	bl	800a472 <USBD_CtlError>
          err++;
 8009ff0:	7afb      	ldrb	r3, [r7, #11]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009ff6:	bf00      	nop
      }
      break;
 8009ff8:	e037      	b.n	800a06a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	7c1b      	ldrb	r3, [r3, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d109      	bne.n	800a016 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00a:	f107 0208 	add.w	r2, r7, #8
 800a00e:	4610      	mov	r0, r2
 800a010:	4798      	blx	r3
 800a012:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a014:	e029      	b.n	800a06a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fa2a 	bl	800a472 <USBD_CtlError>
        err++;
 800a01e:	7afb      	ldrb	r3, [r7, #11]
 800a020:	3301      	adds	r3, #1
 800a022:	72fb      	strb	r3, [r7, #11]
      break;
 800a024:	e021      	b.n	800a06a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	7c1b      	ldrb	r3, [r3, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10d      	bne.n	800a04a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a036:	f107 0208 	add.w	r2, r7, #8
 800a03a:	4610      	mov	r0, r2
 800a03c:	4798      	blx	r3
 800a03e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3301      	adds	r3, #1
 800a044:	2207      	movs	r2, #7
 800a046:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a048:	e00f      	b.n	800a06a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fa10 	bl	800a472 <USBD_CtlError>
        err++;
 800a052:	7afb      	ldrb	r3, [r7, #11]
 800a054:	3301      	adds	r3, #1
 800a056:	72fb      	strb	r3, [r7, #11]
      break;
 800a058:	e007      	b.n	800a06a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fa08 	bl	800a472 <USBD_CtlError>
      err++;
 800a062:	7afb      	ldrb	r3, [r7, #11]
 800a064:	3301      	adds	r3, #1
 800a066:	72fb      	strb	r3, [r7, #11]
      break;
 800a068:	bf00      	nop
  }

  if (err != 0U)
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d11e      	bne.n	800a0ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	88db      	ldrh	r3, [r3, #6]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d016      	beq.n	800a0a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a078:	893b      	ldrh	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00e      	beq.n	800a09c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	88da      	ldrh	r2, [r3, #6]
 800a082:	893b      	ldrh	r3, [r7, #8]
 800a084:	4293      	cmp	r3, r2
 800a086:	bf28      	it	cs
 800a088:	4613      	movcs	r3, r2
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a08e:	893b      	ldrh	r3, [r7, #8]
 800a090:	461a      	mov	r2, r3
 800a092:	68f9      	ldr	r1, [r7, #12]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fa5d 	bl	800a554 <USBD_CtlSendData>
 800a09a:	e009      	b.n	800a0b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f9e7 	bl	800a472 <USBD_CtlError>
 800a0a4:	e004      	b.n	800a0b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 faae 	bl	800a608 <USBD_CtlSendStatus>
 800a0ac:	e000      	b.n	800a0b0 <USBD_GetDescriptor+0x2cc>
    return;
 800a0ae:	bf00      	nop
  }
}
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop

0800a0b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	889b      	ldrh	r3, [r3, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d131      	bne.n	800a12e <USBD_SetAddress+0x76>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	88db      	ldrh	r3, [r3, #6]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d12d      	bne.n	800a12e <USBD_SetAddress+0x76>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	885b      	ldrh	r3, [r3, #2]
 800a0d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0d8:	d829      	bhi.n	800a12e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	885b      	ldrh	r3, [r3, #2]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d104      	bne.n	800a0fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f9bc 	bl	800a472 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0fa:	e01d      	b.n	800a138 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7bfa      	ldrb	r2, [r7, #15]
 800a100:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f003 fccd 	bl	800daa8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa7a 	bl	800a608 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a114:	7bfb      	ldrb	r3, [r7, #15]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2202      	movs	r2, #2
 800a11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	e009      	b.n	800a138 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a12c:	e004      	b.n	800a138 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f99e 	bl	800a472 <USBD_CtlError>
  }
}
 800a136:	bf00      	nop
 800a138:	bf00      	nop
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	885b      	ldrh	r3, [r3, #2]
 800a152:	b2da      	uxtb	r2, r3
 800a154:	4b4e      	ldr	r3, [pc, #312]	; (800a290 <USBD_SetConfig+0x150>)
 800a156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a158:	4b4d      	ldr	r3, [pc, #308]	; (800a290 <USBD_SetConfig+0x150>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d905      	bls.n	800a16c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f985 	bl	800a472 <USBD_CtlError>
    return USBD_FAIL;
 800a168:	2303      	movs	r3, #3
 800a16a:	e08c      	b.n	800a286 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b02      	cmp	r3, #2
 800a176:	d002      	beq.n	800a17e <USBD_SetConfig+0x3e>
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d029      	beq.n	800a1d0 <USBD_SetConfig+0x90>
 800a17c:	e075      	b.n	800a26a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a17e:	4b44      	ldr	r3, [pc, #272]	; (800a290 <USBD_SetConfig+0x150>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d020      	beq.n	800a1c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a186:	4b42      	ldr	r3, [pc, #264]	; (800a290 <USBD_SetConfig+0x150>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a190:	4b3f      	ldr	r3, [pc, #252]	; (800a290 <USBD_SetConfig+0x150>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7fe ffe7 	bl	800916a <USBD_SetClassConfig>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d008      	beq.n	800a1b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f962 	bl	800a472 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1b6:	e065      	b.n	800a284 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fa25 	bl	800a608 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1c6:	e05d      	b.n	800a284 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fa1d 	bl	800a608 <USBD_CtlSendStatus>
      break;
 800a1ce:	e059      	b.n	800a284 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1d0:	4b2f      	ldr	r3, [pc, #188]	; (800a290 <USBD_SetConfig+0x150>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d112      	bne.n	800a1fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a1e0:	4b2b      	ldr	r3, [pc, #172]	; (800a290 <USBD_SetConfig+0x150>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1ea:	4b29      	ldr	r3, [pc, #164]	; (800a290 <USBD_SetConfig+0x150>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7fe ffd6 	bl	80091a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa06 	bl	800a608 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1fc:	e042      	b.n	800a284 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a1fe:	4b24      	ldr	r3, [pc, #144]	; (800a290 <USBD_SetConfig+0x150>)
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d02a      	beq.n	800a262 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7fe ffc4 	bl	80091a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a21a:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <USBD_SetConfig+0x150>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a224:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <USBD_SetConfig+0x150>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7fe ff9d 	bl	800916a <USBD_SetClassConfig>
 800a230:	4603      	mov	r3, r0
 800a232:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a234:	7bfb      	ldrb	r3, [r7, #15]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00f      	beq.n	800a25a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f918 	bl	800a472 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	b2db      	uxtb	r3, r3
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fe ffa9 	bl	80091a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a258:	e014      	b.n	800a284 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f9d4 	bl	800a608 <USBD_CtlSendStatus>
      break;
 800a260:	e010      	b.n	800a284 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f9d0 	bl	800a608 <USBD_CtlSendStatus>
      break;
 800a268:	e00c      	b.n	800a284 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f900 	bl	800a472 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <USBD_SetConfig+0x150>)
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7fe ff92 	bl	80091a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a27e:	2303      	movs	r3, #3
 800a280:	73fb      	strb	r3, [r7, #15]
      break;
 800a282:	bf00      	nop
  }

  return ret;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000478 	.word	0x20000478

0800a294 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	88db      	ldrh	r3, [r3, #6]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d004      	beq.n	800a2b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f8e2 	bl	800a472 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2ae:	e023      	b.n	800a2f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	dc02      	bgt.n	800a2c2 <USBD_GetConfig+0x2e>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dc03      	bgt.n	800a2c8 <USBD_GetConfig+0x34>
 800a2c0:	e015      	b.n	800a2ee <USBD_GetConfig+0x5a>
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d00b      	beq.n	800a2de <USBD_GetConfig+0x4a>
 800a2c6:	e012      	b.n	800a2ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f93c 	bl	800a554 <USBD_CtlSendData>
        break;
 800a2dc:	e00c      	b.n	800a2f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f934 	bl	800a554 <USBD_CtlSendData>
        break;
 800a2ec:	e004      	b.n	800a2f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f8be 	bl	800a472 <USBD_CtlError>
        break;
 800a2f6:	bf00      	nop
}
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a310:	b2db      	uxtb	r3, r3
 800a312:	3b01      	subs	r3, #1
 800a314:	2b02      	cmp	r3, #2
 800a316:	d81e      	bhi.n	800a356 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	88db      	ldrh	r3, [r3, #6]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d004      	beq.n	800a32a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f8a5 	bl	800a472 <USBD_CtlError>
        break;
 800a328:	e01a      	b.n	800a360 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a336:	2b00      	cmp	r3, #0
 800a338:	d005      	beq.n	800a346 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f043 0202 	orr.w	r2, r3, #2
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	330c      	adds	r3, #12
 800a34a:	2202      	movs	r2, #2
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f900 	bl	800a554 <USBD_CtlSendData>
      break;
 800a354:	e004      	b.n	800a360 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f88a 	bl	800a472 <USBD_CtlError>
      break;
 800a35e:	bf00      	nop
  }
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	885b      	ldrh	r3, [r3, #2]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d107      	bne.n	800a38a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f940 	bl	800a608 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a388:	e013      	b.n	800a3b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d10b      	bne.n	800a3aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	889b      	ldrh	r3, [r3, #4]
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	b29b      	uxth	r3, r3
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f930 	bl	800a608 <USBD_CtlSendStatus>
}
 800a3a8:	e003      	b.n	800a3b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f860 	bl	800a472 <USBD_CtlError>
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d80b      	bhi.n	800a3ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	885b      	ldrh	r3, [r3, #2]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d10c      	bne.n	800a3f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f910 	bl	800a608 <USBD_CtlSendStatus>
      }
      break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f840 	bl	800a472 <USBD_CtlError>
      break;
 800a3f2:	e000      	b.n	800a3f6 <USBD_ClrFeature+0x3c>
      break;
 800a3f4:	bf00      	nop
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3301      	adds	r3, #1
 800a418:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	781a      	ldrb	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3301      	adds	r3, #1
 800a426:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7ff fa41 	bl	80098b0 <SWAPBYTE>
 800a42e:	4603      	mov	r3, r0
 800a430:	461a      	mov	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	3301      	adds	r3, #1
 800a43a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3301      	adds	r3, #1
 800a440:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff fa34 	bl	80098b0 <SWAPBYTE>
 800a448:	4603      	mov	r3, r0
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3301      	adds	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3301      	adds	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7ff fa27 	bl	80098b0 <SWAPBYTE>
 800a462:	4603      	mov	r3, r0
 800a464:	461a      	mov	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	80da      	strh	r2, [r3, #6]
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a47c:	2180      	movs	r1, #128	; 0x80
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f003 faa8 	bl	800d9d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a484:	2100      	movs	r1, #0
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f003 faa4 	bl	800d9d4 <USBD_LL_StallEP>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d036      	beq.n	800a518 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4ae:	6938      	ldr	r0, [r7, #16]
 800a4b0:	f000 f836 	bl	800a520 <USBD_GetLen>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	7812      	ldrb	r2, [r2, #0]
 800a4cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	2203      	movs	r2, #3
 800a4dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a4e4:	e013      	b.n	800a50e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	7812      	ldrb	r2, [r2, #0]
 800a4f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	613b      	str	r3, [r7, #16]
    idx++;
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	4413      	add	r3, r2
 800a504:	2200      	movs	r2, #0
 800a506:	701a      	strb	r2, [r3, #0]
    idx++;
 800a508:	7dfb      	ldrb	r3, [r7, #23]
 800a50a:	3301      	adds	r3, #1
 800a50c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e7      	bne.n	800a4e6 <USBD_GetString+0x52>
 800a516:	e000      	b.n	800a51a <USBD_GetString+0x86>
    return;
 800a518:	bf00      	nop
  }
}
 800a51a:	3718      	adds	r7, #24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a530:	e005      	b.n	800a53e <USBD_GetLen+0x1e>
  {
    len++;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	3301      	adds	r3, #1
 800a536:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	3301      	adds	r3, #1
 800a53c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1f5      	bne.n	800a532 <USBD_GetLen+0x12>
  }

  return len;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2202      	movs	r2, #2
 800a564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	2100      	movs	r1, #0
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f003 fab3 	bl	800dae6 <USBD_LL_Transmit>

  return USBD_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	2100      	movs	r1, #0
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f003 faa2 	bl	800dae6 <USBD_LL_Transmit>

  return USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2203      	movs	r2, #3
 800a5bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f003 faa6 	bl	800db28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f003 fa95 	bl	800db28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2204      	movs	r2, #4
 800a614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a618:	2300      	movs	r3, #0
 800a61a:	2200      	movs	r2, #0
 800a61c:	2100      	movs	r1, #0
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f003 fa61 	bl	800dae6 <USBD_LL_Transmit>

  return USBD_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2205      	movs	r2, #5
 800a63a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a63e:	2300      	movs	r3, #0
 800a640:	2200      	movs	r2, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f003 fa6f 	bl	800db28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <__NVIC_SetPriority>:
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a664:	2b00      	cmp	r3, #0
 800a666:	db0a      	blt.n	800a67e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <__NVIC_SetPriority+0x4c>)
 800a66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a672:	0112      	lsls	r2, r2, #4
 800a674:	b2d2      	uxtb	r2, r2
 800a676:	440b      	add	r3, r1
 800a678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a67c:	e00a      	b.n	800a694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	b2da      	uxtb	r2, r3
 800a682:	4908      	ldr	r1, [pc, #32]	; (800a6a4 <__NVIC_SetPriority+0x50>)
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	f003 030f 	and.w	r3, r3, #15
 800a68a:	3b04      	subs	r3, #4
 800a68c:	0112      	lsls	r2, r2, #4
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	440b      	add	r3, r1
 800a692:	761a      	strb	r2, [r3, #24]
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	e000e100 	.word	0xe000e100
 800a6a4:	e000ed00 	.word	0xe000ed00

0800a6a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <SysTick_Handler+0x1c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6b0:	f001 fd28 	bl	800c104 <xTaskGetSchedulerState>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d001      	beq.n	800a6be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6ba:	f002 fb0d 	bl	800ccd8 <xPortSysTickHandler>
  }
}
 800a6be:	bf00      	nop
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	e000e010 	.word	0xe000e010

0800a6c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	f06f 0004 	mvn.w	r0, #4
 800a6d2:	f7ff ffbf 	bl	800a654 <__NVIC_SetPriority>
#endif
}
 800a6d6:	bf00      	nop
 800a6d8:	bd80      	pop	{r7, pc}
	...

0800a6dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6e2:	f3ef 8305 	mrs	r3, IPSR
 800a6e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a6e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d003      	beq.n	800a6f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a6ee:	f06f 0305 	mvn.w	r3, #5
 800a6f2:	607b      	str	r3, [r7, #4]
 800a6f4:	e00c      	b.n	800a710 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a6f6:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <osKernelInitialize+0x44>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d105      	bne.n	800a70a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6fe:	4b08      	ldr	r3, [pc, #32]	; (800a720 <osKernelInitialize+0x44>)
 800a700:	2201      	movs	r2, #1
 800a702:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a704:	2300      	movs	r3, #0
 800a706:	607b      	str	r3, [r7, #4]
 800a708:	e002      	b.n	800a710 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295
 800a70e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a710:	687b      	ldr	r3, [r7, #4]
}
 800a712:	4618      	mov	r0, r3
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	2000047c 	.word	0x2000047c

0800a724 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a72a:	f3ef 8305 	mrs	r3, IPSR
 800a72e:	603b      	str	r3, [r7, #0]
  return(result);
 800a730:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a736:	f06f 0305 	mvn.w	r3, #5
 800a73a:	607b      	str	r3, [r7, #4]
 800a73c:	e010      	b.n	800a760 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a73e:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <osKernelStart+0x48>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d109      	bne.n	800a75a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a746:	f7ff ffbf 	bl	800a6c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a74a:	4b08      	ldr	r3, [pc, #32]	; (800a76c <osKernelStart+0x48>)
 800a74c:	2202      	movs	r2, #2
 800a74e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a750:	f001 f87c 	bl	800b84c <vTaskStartScheduler>
      stat = osOK;
 800a754:	2300      	movs	r3, #0
 800a756:	607b      	str	r3, [r7, #4]
 800a758:	e002      	b.n	800a760 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a75a:	f04f 33ff 	mov.w	r3, #4294967295
 800a75e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a760:	687b      	ldr	r3, [r7, #4]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	2000047c 	.word	0x2000047c

0800a770 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a770:	b580      	push	{r7, lr}
 800a772:	b08e      	sub	sp, #56	; 0x38
 800a774:	af04      	add	r7, sp, #16
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a780:	f3ef 8305 	mrs	r3, IPSR
 800a784:	617b      	str	r3, [r7, #20]
  return(result);
 800a786:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d17e      	bne.n	800a88a <osThreadNew+0x11a>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d07b      	beq.n	800a88a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a792:	2380      	movs	r3, #128	; 0x80
 800a794:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a796:	2318      	movs	r3, #24
 800a798:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a79a:	2300      	movs	r3, #0
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a79e:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d045      	beq.n	800a836 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <osThreadNew+0x48>
        name = attr->name;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d008      	beq.n	800a7de <osThreadNew+0x6e>
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	2b38      	cmp	r3, #56	; 0x38
 800a7d0:	d805      	bhi.n	800a7de <osThreadNew+0x6e>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <osThreadNew+0x72>
        return (NULL);
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e054      	b.n	800a88c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	089b      	lsrs	r3, r3, #2
 800a7f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00e      	beq.n	800a818 <osThreadNew+0xa8>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	2bbb      	cmp	r3, #187	; 0xbb
 800a800:	d90a      	bls.n	800a818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a806:	2b00      	cmp	r3, #0
 800a808:	d006      	beq.n	800a818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d002      	beq.n	800a818 <osThreadNew+0xa8>
        mem = 1;
 800a812:	2301      	movs	r3, #1
 800a814:	61bb      	str	r3, [r7, #24]
 800a816:	e010      	b.n	800a83a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10c      	bne.n	800a83a <osThreadNew+0xca>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d108      	bne.n	800a83a <osThreadNew+0xca>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <osThreadNew+0xca>
          mem = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	61bb      	str	r3, [r7, #24]
 800a834:	e001      	b.n	800a83a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d110      	bne.n	800a862 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a848:	9202      	str	r2, [sp, #8]
 800a84a:	9301      	str	r3, [sp, #4]
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6a3a      	ldr	r2, [r7, #32]
 800a854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 fe0c 	bl	800b474 <xTaskCreateStatic>
 800a85c:	4603      	mov	r3, r0
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	e013      	b.n	800a88a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d110      	bne.n	800a88a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	f107 0310 	add.w	r3, r7, #16
 800a870:	9301      	str	r3, [sp, #4]
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 fe57 	bl	800b52e <xTaskCreate>
 800a880:	4603      	mov	r3, r0
 800a882:	2b01      	cmp	r3, #1
 800a884:	d001      	beq.n	800a88a <osThreadNew+0x11a>
            hTask = NULL;
 800a886:	2300      	movs	r3, #0
 800a888:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a88a:	693b      	ldr	r3, [r7, #16]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3728      	adds	r7, #40	; 0x28
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a89c:	f3ef 8305 	mrs	r3, IPSR
 800a8a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <osDelay+0x1c>
    stat = osErrorISR;
 800a8a8:	f06f 0305 	mvn.w	r3, #5
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	e007      	b.n	800a8c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 ff92 	bl	800b7e4 <vTaskDelay>
    }
  }

  return (stat);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4a07      	ldr	r2, [pc, #28]	; (800a8f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a8dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	4a06      	ldr	r2, [pc, #24]	; (800a8fc <vApplicationGetIdleTaskMemory+0x30>)
 800a8e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2280      	movs	r2, #128	; 0x80
 800a8e8:	601a      	str	r2, [r3, #0]
}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	20000480 	.word	0x20000480
 800a8fc:	2000053c 	.word	0x2000053c

0800a900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4a07      	ldr	r2, [pc, #28]	; (800a92c <vApplicationGetTimerTaskMemory+0x2c>)
 800a910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	4a06      	ldr	r2, [pc, #24]	; (800a930 <vApplicationGetTimerTaskMemory+0x30>)
 800a916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a91e:	601a      	str	r2, [r3, #0]
}
 800a920:	bf00      	nop
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	2000073c 	.word	0x2000073c
 800a930:	200007f8 	.word	0x200007f8

0800a934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f103 0208 	add.w	r2, r3, #8
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f04f 32ff 	mov.w	r2, #4294967295
 800a94c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f103 0208 	add.w	r2, r3, #8
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f103 0208 	add.w	r2, r3, #8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	689a      	ldr	r2, [r3, #8]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	601a      	str	r2, [r3, #0]
}
 800a9ca:	bf00      	nop
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ec:	d103      	bne.n	800a9f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	e00c      	b.n	800aa10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	e002      	b.n	800aa04 <vListInsert+0x2e>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d2f6      	bcs.n	800a9fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	601a      	str	r2, [r3, #0]
}
 800aa3c:	bf00      	nop
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	6892      	ldr	r2, [r2, #8]
 800aa5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	6852      	ldr	r2, [r2, #4]
 800aa68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d103      	bne.n	800aa7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	1e5a      	subs	r2, r3, #1
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aac6:	f002 f875 	bl	800cbb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad2:	68f9      	ldr	r1, [r7, #12]
 800aad4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aad6:	fb01 f303 	mul.w	r3, r1, r3
 800aada:	441a      	add	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	68f9      	ldr	r1, [r7, #12]
 800aafa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aafc:	fb01 f303 	mul.w	r3, r1, r3
 800ab00:	441a      	add	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	22ff      	movs	r2, #255	; 0xff
 800ab0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	22ff      	movs	r2, #255	; 0xff
 800ab12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d114      	bne.n	800ab46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d01a      	beq.n	800ab5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3310      	adds	r3, #16
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 f929 	bl	800bd80 <xTaskRemoveFromEventList>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d012      	beq.n	800ab5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab34:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <xQueueGenericReset+0xcc>)
 800ab36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	e009      	b.n	800ab5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3310      	adds	r3, #16
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fef2 	bl	800a934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3324      	adds	r3, #36	; 0x24
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff feed 	bl	800a934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab5a:	f002 f85b 	bl	800cc14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab5e:	2301      	movs	r3, #1
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	e000ed04 	.word	0xe000ed04

0800ab6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08e      	sub	sp, #56	; 0x38
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10a      	bne.n	800ab96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <xQueueGenericCreateStatic+0x52>
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <xQueueGenericCreateStatic+0x56>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e000      	b.n	800abc4 <xQueueGenericCreateStatic+0x58>
 800abc2:	2300      	movs	r3, #0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	623b      	str	r3, [r7, #32]
}
 800abda:	bf00      	nop
 800abdc:	e7fe      	b.n	800abdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <xQueueGenericCreateStatic+0x7e>
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <xQueueGenericCreateStatic+0x82>
 800abea:	2301      	movs	r3, #1
 800abec:	e000      	b.n	800abf0 <xQueueGenericCreateStatic+0x84>
 800abee:	2300      	movs	r3, #0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	61fb      	str	r3, [r7, #28]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac0a:	2350      	movs	r3, #80	; 0x50
 800ac0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b50      	cmp	r3, #80	; 0x50
 800ac12:	d00a      	beq.n	800ac2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	61bb      	str	r3, [r7, #24]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	4613      	mov	r3, r2
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	68b9      	ldr	r1, [r7, #8]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f805 	bl	800ac5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3730      	adds	r7, #48	; 0x30
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d103      	bne.n	800ac78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	e002      	b.n	800ac7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	69b8      	ldr	r0, [r7, #24]
 800ac8e:	f7ff ff05 	bl	800aa9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	78fa      	ldrb	r2, [r7, #3]
 800ac96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac9a:	bf00      	nop
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08e      	sub	sp, #56	; 0x38
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acb2:	2300      	movs	r3, #0
 800acb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <xQueueGenericSend+0x32>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d103      	bne.n	800ace4 <xQueueGenericSend+0x40>
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <xQueueGenericSend+0x44>
 800ace4:	2301      	movs	r3, #1
 800ace6:	e000      	b.n	800acea <xQueueGenericSend+0x46>
 800ace8:	2300      	movs	r3, #0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <xQueueGenericSend+0x60>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d103      	bne.n	800ad12 <xQueueGenericSend+0x6e>
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <xQueueGenericSend+0x72>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <xQueueGenericSend+0x74>
 800ad16:	2300      	movs	r3, #0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10a      	bne.n	800ad32 <xQueueGenericSend+0x8e>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	623b      	str	r3, [r7, #32]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad32:	f001 f9e7 	bl	800c104 <xTaskGetSchedulerState>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <xQueueGenericSend+0x9e>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <xQueueGenericSend+0xa2>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <xQueueGenericSend+0xa4>
 800ad46:	2300      	movs	r3, #0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10a      	bne.n	800ad62 <xQueueGenericSend+0xbe>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	61fb      	str	r3, [r7, #28]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad62:	f001 ff27 	bl	800cbb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d302      	bcc.n	800ad78 <xQueueGenericSend+0xd4>
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d129      	bne.n	800adcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad7e:	f000 fa0b 	bl	800b198 <prvCopyDataToQueue>
 800ad82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d010      	beq.n	800adae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	3324      	adds	r3, #36	; 0x24
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 fff5 	bl	800bd80 <xTaskRemoveFromEventList>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d013      	beq.n	800adc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad9c:	4b3f      	ldr	r3, [pc, #252]	; (800ae9c <xQueueGenericSend+0x1f8>)
 800ad9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	e00a      	b.n	800adc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800adb4:	4b39      	ldr	r3, [pc, #228]	; (800ae9c <xQueueGenericSend+0x1f8>)
 800adb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800adc4:	f001 ff26 	bl	800cc14 <vPortExitCritical>
				return pdPASS;
 800adc8:	2301      	movs	r3, #1
 800adca:	e063      	b.n	800ae94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d103      	bne.n	800adda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800add2:	f001 ff1f 	bl	800cc14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800add6:	2300      	movs	r3, #0
 800add8:	e05c      	b.n	800ae94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	2b00      	cmp	r3, #0
 800adde:	d106      	bne.n	800adee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ade0:	f107 0314 	add.w	r3, r7, #20
 800ade4:	4618      	mov	r0, r3
 800ade6:	f001 f82f 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adea:	2301      	movs	r3, #1
 800adec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adee:	f001 ff11 	bl	800cc14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adf2:	f000 fd9b 	bl	800b92c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adf6:	f001 fedd 	bl	800cbb4 <vPortEnterCritical>
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae00:	b25b      	sxtb	r3, r3
 800ae02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae06:	d103      	bne.n	800ae10 <xQueueGenericSend+0x16c>
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae16:	b25b      	sxtb	r3, r3
 800ae18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1c:	d103      	bne.n	800ae26 <xQueueGenericSend+0x182>
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae26:	f001 fef5 	bl	800cc14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae2a:	1d3a      	adds	r2, r7, #4
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f001 f81e 	bl	800be74 <xTaskCheckForTimeOut>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d124      	bne.n	800ae88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae40:	f000 faa2 	bl	800b388 <prvIsQueueFull>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d018      	beq.n	800ae7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	3310      	adds	r3, #16
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	4611      	mov	r1, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 ff44 	bl	800bce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae5a:	f000 fa2d 	bl	800b2b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae5e:	f000 fd73 	bl	800b948 <xTaskResumeAll>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f47f af7c 	bne.w	800ad62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ae6a:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <xQueueGenericSend+0x1f8>)
 800ae6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	e772      	b.n	800ad62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae7e:	f000 fa1b 	bl	800b2b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae82:	f000 fd61 	bl	800b948 <xTaskResumeAll>
 800ae86:	e76c      	b.n	800ad62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae8a:	f000 fa15 	bl	800b2b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae8e:	f000 fd5b 	bl	800b948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3738      	adds	r7, #56	; 0x38
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b090      	sub	sp, #64	; 0x40
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d103      	bne.n	800aedc <xQueueGenericSendFromISR+0x3c>
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <xQueueGenericSendFromISR+0x40>
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <xQueueGenericSendFromISR+0x42>
 800aee0:	2300      	movs	r3, #0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10a      	bne.n	800aefc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d103      	bne.n	800af0a <xQueueGenericSendFromISR+0x6a>
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af06:	2b01      	cmp	r3, #1
 800af08:	d101      	bne.n	800af0e <xQueueGenericSendFromISR+0x6e>
 800af0a:	2301      	movs	r3, #1
 800af0c:	e000      	b.n	800af10 <xQueueGenericSendFromISR+0x70>
 800af0e:	2300      	movs	r3, #0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10a      	bne.n	800af2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	623b      	str	r3, [r7, #32]
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af2a:	f001 ff25 	bl	800cd78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af2e:	f3ef 8211 	mrs	r2, BASEPRI
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	61fa      	str	r2, [r7, #28]
 800af44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af52:	429a      	cmp	r2, r3
 800af54:	d302      	bcc.n	800af5c <xQueueGenericSendFromISR+0xbc>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d12f      	bne.n	800afbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	68b9      	ldr	r1, [r7, #8]
 800af70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af72:	f000 f911 	bl	800b198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7e:	d112      	bne.n	800afa6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	2b00      	cmp	r3, #0
 800af86:	d016      	beq.n	800afb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8a:	3324      	adds	r3, #36	; 0x24
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 fef7 	bl	800bd80 <xTaskRemoveFromEventList>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00e      	beq.n	800afb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00b      	beq.n	800afb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	e007      	b.n	800afb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800afa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800afaa:	3301      	adds	r3, #1
 800afac:	b2db      	uxtb	r3, r3
 800afae:	b25a      	sxtb	r2, r3
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800afb6:	2301      	movs	r3, #1
 800afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800afba:	e001      	b.n	800afc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800afbc:	2300      	movs	r3, #0
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800afca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800afcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3740      	adds	r7, #64	; 0x40
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08c      	sub	sp, #48	; 0x30
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10a      	bne.n	800b008 <xQueueReceive+0x30>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	623b      	str	r3, [r7, #32]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d103      	bne.n	800b016 <xQueueReceive+0x3e>
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <xQueueReceive+0x42>
 800b016:	2301      	movs	r3, #1
 800b018:	e000      	b.n	800b01c <xQueueReceive+0x44>
 800b01a:	2300      	movs	r3, #0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10a      	bne.n	800b036 <xQueueReceive+0x5e>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	61fb      	str	r3, [r7, #28]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b036:	f001 f865 	bl	800c104 <xTaskGetSchedulerState>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d102      	bne.n	800b046 <xQueueReceive+0x6e>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <xQueueReceive+0x72>
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <xQueueReceive+0x74>
 800b04a:	2300      	movs	r3, #0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10a      	bne.n	800b066 <xQueueReceive+0x8e>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	61bb      	str	r3, [r7, #24]
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b066:	f001 fda5 	bl	800cbb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	2b00      	cmp	r3, #0
 800b074:	d01f      	beq.n	800b0b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b07a:	f000 f8f7 	bl	800b26c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	1e5a      	subs	r2, r3, #1
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00f      	beq.n	800b0ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	3310      	adds	r3, #16
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fe74 	bl	800bd80 <xTaskRemoveFromEventList>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d007      	beq.n	800b0ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b09e:	4b3d      	ldr	r3, [pc, #244]	; (800b194 <xQueueReceive+0x1bc>)
 800b0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b0ae:	f001 fdb1 	bl	800cc14 <vPortExitCritical>
				return pdPASS;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e069      	b.n	800b18a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d103      	bne.n	800b0c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0bc:	f001 fdaa 	bl	800cc14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e062      	b.n	800b18a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d106      	bne.n	800b0d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0ca:	f107 0310 	add.w	r3, r7, #16
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 feba 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0d8:	f001 fd9c 	bl	800cc14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0dc:	f000 fc26 	bl	800b92c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0e0:	f001 fd68 	bl	800cbb4 <vPortEnterCritical>
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ea:	b25b      	sxtb	r3, r3
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f0:	d103      	bne.n	800b0fa <xQueueReceive+0x122>
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b100:	b25b      	sxtb	r3, r3
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b106:	d103      	bne.n	800b110 <xQueueReceive+0x138>
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b110:	f001 fd80 	bl	800cc14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b114:	1d3a      	adds	r2, r7, #4
 800b116:	f107 0310 	add.w	r3, r7, #16
 800b11a:	4611      	mov	r1, r2
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fea9 	bl	800be74 <xTaskCheckForTimeOut>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d123      	bne.n	800b170 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b12a:	f000 f917 	bl	800b35c <prvIsQueueEmpty>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d017      	beq.n	800b164 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	3324      	adds	r3, #36	; 0x24
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fdcf 	bl	800bce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b144:	f000 f8b8 	bl	800b2b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b148:	f000 fbfe 	bl	800b948 <xTaskResumeAll>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d189      	bne.n	800b066 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b152:	4b10      	ldr	r3, [pc, #64]	; (800b194 <xQueueReceive+0x1bc>)
 800b154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b158:	601a      	str	r2, [r3, #0]
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	e780      	b.n	800b066 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b166:	f000 f8a7 	bl	800b2b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b16a:	f000 fbed 	bl	800b948 <xTaskResumeAll>
 800b16e:	e77a      	b.n	800b066 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b172:	f000 f8a1 	bl	800b2b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b176:	f000 fbe7 	bl	800b948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b17a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b17c:	f000 f8ee 	bl	800b35c <prvIsQueueEmpty>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	f43f af6f 	beq.w	800b066 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3730      	adds	r7, #48	; 0x30
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	e000ed04 	.word	0xe000ed04

0800b198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10d      	bne.n	800b1d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d14d      	bne.n	800b25a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 ffbc 	bl	800c140 <xTaskPriorityDisinherit>
 800b1c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	609a      	str	r2, [r3, #8]
 800b1d0:	e043      	b.n	800b25a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d119      	bne.n	800b20c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6858      	ldr	r0, [r3, #4]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	f002 fd44 	bl	800dc70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f0:	441a      	add	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d32b      	bcc.n	800b25a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	605a      	str	r2, [r3, #4]
 800b20a:	e026      	b.n	800b25a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	68d8      	ldr	r0, [r3, #12]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b214:	461a      	mov	r2, r3
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	f002 fd2a 	bl	800dc70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b224:	425b      	negs	r3, r3
 800b226:	441a      	add	r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	68da      	ldr	r2, [r3, #12]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d207      	bcs.n	800b248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	689a      	ldr	r2, [r3, #8]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	425b      	negs	r3, r3
 800b242:	441a      	add	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d105      	bne.n	800b25a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	3b01      	subs	r3, #1
 800b258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b262:	697b      	ldr	r3, [r7, #20]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d018      	beq.n	800b2b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b286:	441a      	add	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68da      	ldr	r2, [r3, #12]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	429a      	cmp	r2, r3
 800b296:	d303      	bcc.n	800b2a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68d9      	ldr	r1, [r3, #12]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6838      	ldr	r0, [r7, #0]
 800b2ac:	f002 fce0 	bl	800dc70 <memcpy>
	}
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2c0:	f001 fc78 	bl	800cbb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2cc:	e011      	b.n	800b2f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d012      	beq.n	800b2fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3324      	adds	r3, #36	; 0x24
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 fd50 	bl	800bd80 <xTaskRemoveFromEventList>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2e6:	f000 fe27 	bl	800bf38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dce9      	bgt.n	800b2ce <prvUnlockQueue+0x16>
 800b2fa:	e000      	b.n	800b2fe <prvUnlockQueue+0x46>
					break;
 800b2fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	22ff      	movs	r2, #255	; 0xff
 800b302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b306:	f001 fc85 	bl	800cc14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b30a:	f001 fc53 	bl	800cbb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b316:	e011      	b.n	800b33c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d012      	beq.n	800b346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3310      	adds	r3, #16
 800b324:	4618      	mov	r0, r3
 800b326:	f000 fd2b 	bl	800bd80 <xTaskRemoveFromEventList>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b330:	f000 fe02 	bl	800bf38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	3b01      	subs	r3, #1
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b33c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b340:	2b00      	cmp	r3, #0
 800b342:	dce9      	bgt.n	800b318 <prvUnlockQueue+0x60>
 800b344:	e000      	b.n	800b348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	22ff      	movs	r2, #255	; 0xff
 800b34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b350:	f001 fc60 	bl	800cc14 <vPortExitCritical>
}
 800b354:	bf00      	nop
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b364:	f001 fc26 	bl	800cbb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d102      	bne.n	800b376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b370:	2301      	movs	r3, #1
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	e001      	b.n	800b37a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b37a:	f001 fc4b 	bl	800cc14 <vPortExitCritical>

	return xReturn;
 800b37e:	68fb      	ldr	r3, [r7, #12]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b390:	f001 fc10 	bl	800cbb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d102      	bne.n	800b3a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	e001      	b.n	800b3aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3aa:	f001 fc33 	bl	800cc14 <vPortExitCritical>

	return xReturn;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60fb      	str	r3, [r7, #12]
 800b3c6:	e014      	b.n	800b3f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3c8:	4a0f      	ldr	r2, [pc, #60]	; (800b408 <vQueueAddToRegistry+0x50>)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10b      	bne.n	800b3ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3d4:	490c      	ldr	r1, [pc, #48]	; (800b408 <vQueueAddToRegistry+0x50>)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3de:	4a0a      	ldr	r2, [pc, #40]	; (800b408 <vQueueAddToRegistry+0x50>)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3ea:	e006      	b.n	800b3fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b07      	cmp	r3, #7
 800b3f6:	d9e7      	bls.n	800b3c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3f8:	bf00      	nop
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20000bf8 	.word	0x20000bf8

0800b40c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b41c:	f001 fbca 	bl	800cbb4 <vPortEnterCritical>
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b426:	b25b      	sxtb	r3, r3
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42c:	d103      	bne.n	800b436 <vQueueWaitForMessageRestricted+0x2a>
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b43c:	b25b      	sxtb	r3, r3
 800b43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b442:	d103      	bne.n	800b44c <vQueueWaitForMessageRestricted+0x40>
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b44c:	f001 fbe2 	bl	800cc14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b454:	2b00      	cmp	r3, #0
 800b456:	d106      	bne.n	800b466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	3324      	adds	r3, #36	; 0x24
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	68b9      	ldr	r1, [r7, #8]
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fc61 	bl	800bd28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b466:	6978      	ldr	r0, [r7, #20]
 800b468:	f7ff ff26 	bl	800b2b8 <prvUnlockQueue>
	}
 800b46c:	bf00      	nop
 800b46e:	3718      	adds	r7, #24
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08e      	sub	sp, #56	; 0x38
 800b478:	af04      	add	r7, sp, #16
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
 800b480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	623b      	str	r3, [r7, #32]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10a      	bne.n	800b4ba <xTaskCreateStatic+0x46>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	61fb      	str	r3, [r7, #28]
}
 800b4b6:	bf00      	nop
 800b4b8:	e7fe      	b.n	800b4b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4ba:	23bc      	movs	r3, #188	; 0xbc
 800b4bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2bbc      	cmp	r3, #188	; 0xbc
 800b4c2:	d00a      	beq.n	800b4da <xTaskCreateStatic+0x66>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	61bb      	str	r3, [r7, #24]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d01e      	beq.n	800b520 <xTaskCreateStatic+0xac>
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01b      	beq.n	800b520 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9303      	str	r3, [sp, #12]
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	9302      	str	r3, [sp, #8]
 800b502:	f107 0314 	add.w	r3, r7, #20
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	68b9      	ldr	r1, [r7, #8]
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 f850 	bl	800b5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b51a:	f000 f8f3 	bl	800b704 <prvAddNewTaskToReadyList>
 800b51e:	e001      	b.n	800b524 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b524:	697b      	ldr	r3, [r7, #20]
	}
 800b526:	4618      	mov	r0, r3
 800b528:	3728      	adds	r7, #40	; 0x28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b08c      	sub	sp, #48	; 0x30
 800b532:	af04      	add	r7, sp, #16
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	603b      	str	r3, [r7, #0]
 800b53a:	4613      	mov	r3, r2
 800b53c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b53e:	88fb      	ldrh	r3, [r7, #6]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4618      	mov	r0, r3
 800b544:	f001 fc58 	bl	800cdf8 <pvPortMalloc>
 800b548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00e      	beq.n	800b56e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b550:	20bc      	movs	r0, #188	; 0xbc
 800b552:	f001 fc51 	bl	800cdf8 <pvPortMalloc>
 800b556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	631a      	str	r2, [r3, #48]	; 0x30
 800b564:	e005      	b.n	800b572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b566:	6978      	ldr	r0, [r7, #20]
 800b568:	f001 fd12 	bl	800cf90 <vPortFree>
 800b56c:	e001      	b.n	800b572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d017      	beq.n	800b5a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b580:	88fa      	ldrh	r2, [r7, #6]
 800b582:	2300      	movs	r3, #0
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	9302      	str	r3, [sp, #8]
 800b58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	68b9      	ldr	r1, [r7, #8]
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 f80e 	bl	800b5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b59c:	69f8      	ldr	r0, [r7, #28]
 800b59e:	f000 f8b1 	bl	800b704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	61bb      	str	r3, [r7, #24]
 800b5a6:	e002      	b.n	800b5ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3720      	adds	r7, #32
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	21a5      	movs	r1, #165	; 0xa5
 800b5d2:	f002 fb5b 	bl	800dc8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	f023 0307 	bic.w	r3, r3, #7
 800b5ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	617b      	str	r3, [r7, #20]
}
 800b60c:	bf00      	nop
 800b60e:	e7fe      	b.n	800b60e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d01f      	beq.n	800b656 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b616:	2300      	movs	r3, #0
 800b618:	61fb      	str	r3, [r7, #28]
 800b61a:	e012      	b.n	800b642 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	4413      	add	r3, r2
 800b622:	7819      	ldrb	r1, [r3, #0]
 800b624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	4413      	add	r3, r2
 800b62a:	3334      	adds	r3, #52	; 0x34
 800b62c:	460a      	mov	r2, r1
 800b62e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d006      	beq.n	800b64a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	3301      	adds	r3, #1
 800b640:	61fb      	str	r3, [r7, #28]
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	2b0f      	cmp	r3, #15
 800b646:	d9e9      	bls.n	800b61c <prvInitialiseNewTask+0x64>
 800b648:	e000      	b.n	800b64c <prvInitialiseNewTask+0x94>
			{
				break;
 800b64a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b654:	e003      	b.n	800b65e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	2b37      	cmp	r3, #55	; 0x37
 800b662:	d901      	bls.n	800b668 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b664:	2337      	movs	r3, #55	; 0x37
 800b666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b66c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	2200      	movs	r2, #0
 800b678:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	3304      	adds	r3, #4
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff f978 	bl	800a974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	3318      	adds	r3, #24
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff f973 	bl	800a974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	3354      	adds	r3, #84	; 0x54
 800b6b8:	2260      	movs	r2, #96	; 0x60
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f002 fae5 	bl	800dc8c <memset>
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	4a0c      	ldr	r2, [pc, #48]	; (800b6f8 <prvInitialiseNewTask+0x140>)
 800b6c6:	659a      	str	r2, [r3, #88]	; 0x58
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	4a0c      	ldr	r2, [pc, #48]	; (800b6fc <prvInitialiseNewTask+0x144>)
 800b6cc:	65da      	str	r2, [r3, #92]	; 0x5c
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	4a0b      	ldr	r2, [pc, #44]	; (800b700 <prvInitialiseNewTask+0x148>)
 800b6d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	68f9      	ldr	r1, [r7, #12]
 800b6d8:	69b8      	ldr	r0, [r7, #24]
 800b6da:	f001 f941 	bl	800c960 <pxPortInitialiseStack>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f0:	bf00      	nop
 800b6f2:	3720      	adds	r7, #32
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	080121a4 	.word	0x080121a4
 800b6fc:	080121c4 	.word	0x080121c4
 800b700:	08012184 	.word	0x08012184

0800b704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b70c:	f001 fa52 	bl	800cbb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b710:	4b2d      	ldr	r3, [pc, #180]	; (800b7c8 <prvAddNewTaskToReadyList+0xc4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3301      	adds	r3, #1
 800b716:	4a2c      	ldr	r2, [pc, #176]	; (800b7c8 <prvAddNewTaskToReadyList+0xc4>)
 800b718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b71a:	4b2c      	ldr	r3, [pc, #176]	; (800b7cc <prvAddNewTaskToReadyList+0xc8>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d109      	bne.n	800b736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b722:	4a2a      	ldr	r2, [pc, #168]	; (800b7cc <prvAddNewTaskToReadyList+0xc8>)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b728:	4b27      	ldr	r3, [pc, #156]	; (800b7c8 <prvAddNewTaskToReadyList+0xc4>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d110      	bne.n	800b752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b730:	f000 fc26 	bl	800bf80 <prvInitialiseTaskLists>
 800b734:	e00d      	b.n	800b752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b736:	4b26      	ldr	r3, [pc, #152]	; (800b7d0 <prvAddNewTaskToReadyList+0xcc>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d109      	bne.n	800b752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b73e:	4b23      	ldr	r3, [pc, #140]	; (800b7cc <prvAddNewTaskToReadyList+0xc8>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	429a      	cmp	r2, r3
 800b74a:	d802      	bhi.n	800b752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b74c:	4a1f      	ldr	r2, [pc, #124]	; (800b7cc <prvAddNewTaskToReadyList+0xc8>)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b752:	4b20      	ldr	r3, [pc, #128]	; (800b7d4 <prvAddNewTaskToReadyList+0xd0>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3301      	adds	r3, #1
 800b758:	4a1e      	ldr	r2, [pc, #120]	; (800b7d4 <prvAddNewTaskToReadyList+0xd0>)
 800b75a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b75c:	4b1d      	ldr	r3, [pc, #116]	; (800b7d4 <prvAddNewTaskToReadyList+0xd0>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b768:	4b1b      	ldr	r3, [pc, #108]	; (800b7d8 <prvAddNewTaskToReadyList+0xd4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d903      	bls.n	800b778 <prvAddNewTaskToReadyList+0x74>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	4a18      	ldr	r2, [pc, #96]	; (800b7d8 <prvAddNewTaskToReadyList+0xd4>)
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4a15      	ldr	r2, [pc, #84]	; (800b7dc <prvAddNewTaskToReadyList+0xd8>)
 800b786:	441a      	add	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3304      	adds	r3, #4
 800b78c:	4619      	mov	r1, r3
 800b78e:	4610      	mov	r0, r2
 800b790:	f7ff f8fd 	bl	800a98e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b794:	f001 fa3e 	bl	800cc14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b798:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <prvAddNewTaskToReadyList+0xcc>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00e      	beq.n	800b7be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7a0:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <prvAddNewTaskToReadyList+0xc8>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d207      	bcs.n	800b7be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7ae:	4b0c      	ldr	r3, [pc, #48]	; (800b7e0 <prvAddNewTaskToReadyList+0xdc>)
 800b7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	2000110c 	.word	0x2000110c
 800b7cc:	20000c38 	.word	0x20000c38
 800b7d0:	20001118 	.word	0x20001118
 800b7d4:	20001128 	.word	0x20001128
 800b7d8:	20001114 	.word	0x20001114
 800b7dc:	20000c3c 	.word	0x20000c3c
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d017      	beq.n	800b826 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7f6:	4b13      	ldr	r3, [pc, #76]	; (800b844 <vTaskDelay+0x60>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <vTaskDelay+0x30>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60bb      	str	r3, [r7, #8]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b814:	f000 f88a 	bl	800b92c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b818:	2100      	movs	r1, #0
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 fcfe 	bl	800c21c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b820:	f000 f892 	bl	800b948 <xTaskResumeAll>
 800b824:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d107      	bne.n	800b83c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <vTaskDelay+0x64>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b83c:	bf00      	nop
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20001134 	.word	0x20001134
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08a      	sub	sp, #40	; 0x28
 800b850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b85a:	463a      	mov	r2, r7
 800b85c:	1d39      	adds	r1, r7, #4
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	4618      	mov	r0, r3
 800b864:	f7ff f832 	bl	800a8cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	9202      	str	r2, [sp, #8]
 800b870:	9301      	str	r3, [sp, #4]
 800b872:	2300      	movs	r3, #0
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	2300      	movs	r3, #0
 800b878:	460a      	mov	r2, r1
 800b87a:	4924      	ldr	r1, [pc, #144]	; (800b90c <vTaskStartScheduler+0xc0>)
 800b87c:	4824      	ldr	r0, [pc, #144]	; (800b910 <vTaskStartScheduler+0xc4>)
 800b87e:	f7ff fdf9 	bl	800b474 <xTaskCreateStatic>
 800b882:	4603      	mov	r3, r0
 800b884:	4a23      	ldr	r2, [pc, #140]	; (800b914 <vTaskStartScheduler+0xc8>)
 800b886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b888:	4b22      	ldr	r3, [pc, #136]	; (800b914 <vTaskStartScheduler+0xc8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b890:	2301      	movs	r3, #1
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	e001      	b.n	800b89a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b896:	2300      	movs	r3, #0
 800b898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d102      	bne.n	800b8a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8a0:	f000 fd10 	bl	800c2c4 <xTimerCreateTimerTask>
 800b8a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d11b      	bne.n	800b8e4 <vTaskStartScheduler+0x98>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	613b      	str	r3, [r7, #16]
}
 800b8be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8c0:	4b15      	ldr	r3, [pc, #84]	; (800b918 <vTaskStartScheduler+0xcc>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3354      	adds	r3, #84	; 0x54
 800b8c6:	4a15      	ldr	r2, [pc, #84]	; (800b91c <vTaskStartScheduler+0xd0>)
 800b8c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8ca:	4b15      	ldr	r3, [pc, #84]	; (800b920 <vTaskStartScheduler+0xd4>)
 800b8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8d2:	4b14      	ldr	r3, [pc, #80]	; (800b924 <vTaskStartScheduler+0xd8>)
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8d8:	4b13      	ldr	r3, [pc, #76]	; (800b928 <vTaskStartScheduler+0xdc>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8de:	f001 f8c7 	bl	800ca70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8e2:	e00e      	b.n	800b902 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ea:	d10a      	bne.n	800b902 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	60fb      	str	r3, [r7, #12]
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <vTaskStartScheduler+0xb4>
}
 800b902:	bf00      	nop
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	0800e69c 	.word	0x0800e69c
 800b910:	0800bf51 	.word	0x0800bf51
 800b914:	20001130 	.word	0x20001130
 800b918:	20000c38 	.word	0x20000c38
 800b91c:	20000110 	.word	0x20000110
 800b920:	2000112c 	.word	0x2000112c
 800b924:	20001118 	.word	0x20001118
 800b928:	20001110 	.word	0x20001110

0800b92c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b92c:	b480      	push	{r7}
 800b92e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <vTaskSuspendAll+0x18>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3301      	adds	r3, #1
 800b936:	4a03      	ldr	r2, [pc, #12]	; (800b944 <vTaskSuspendAll+0x18>)
 800b938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b93a:	bf00      	nop
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	20001134 	.word	0x20001134

0800b948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b952:	2300      	movs	r3, #0
 800b954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b956:	4b42      	ldr	r3, [pc, #264]	; (800ba60 <xTaskResumeAll+0x118>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <xTaskResumeAll+0x2c>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	603b      	str	r3, [r7, #0]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b974:	f001 f91e 	bl	800cbb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b978:	4b39      	ldr	r3, [pc, #228]	; (800ba60 <xTaskResumeAll+0x118>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	4a38      	ldr	r2, [pc, #224]	; (800ba60 <xTaskResumeAll+0x118>)
 800b980:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b982:	4b37      	ldr	r3, [pc, #220]	; (800ba60 <xTaskResumeAll+0x118>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d162      	bne.n	800ba50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b98a:	4b36      	ldr	r3, [pc, #216]	; (800ba64 <xTaskResumeAll+0x11c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d05e      	beq.n	800ba50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b992:	e02f      	b.n	800b9f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b994:	4b34      	ldr	r3, [pc, #208]	; (800ba68 <xTaskResumeAll+0x120>)
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3318      	adds	r3, #24
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff f851 	bl	800aa48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff f84c 	bl	800aa48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ba6c <xTaskResumeAll+0x124>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d903      	bls.n	800b9c4 <xTaskResumeAll+0x7c>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c0:	4a2a      	ldr	r2, [pc, #168]	; (800ba6c <xTaskResumeAll+0x124>)
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4a27      	ldr	r2, [pc, #156]	; (800ba70 <xTaskResumeAll+0x128>)
 800b9d2:	441a      	add	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4610      	mov	r0, r2
 800b9dc:	f7fe ffd7 	bl	800a98e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e4:	4b23      	ldr	r3, [pc, #140]	; (800ba74 <xTaskResumeAll+0x12c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d302      	bcc.n	800b9f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b9ee:	4b22      	ldr	r3, [pc, #136]	; (800ba78 <xTaskResumeAll+0x130>)
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9f4:	4b1c      	ldr	r3, [pc, #112]	; (800ba68 <xTaskResumeAll+0x120>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1cb      	bne.n	800b994 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba02:	f000 fb5f 	bl	800c0c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba06:	4b1d      	ldr	r3, [pc, #116]	; (800ba7c <xTaskResumeAll+0x134>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d010      	beq.n	800ba34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba12:	f000 f847 	bl	800baa4 <xTaskIncrementTick>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba1c:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <xTaskResumeAll+0x130>)
 800ba1e:	2201      	movs	r2, #1
 800ba20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1f1      	bne.n	800ba12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba2e:	4b13      	ldr	r3, [pc, #76]	; (800ba7c <xTaskResumeAll+0x134>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba34:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <xTaskResumeAll+0x130>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d009      	beq.n	800ba50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba40:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <xTaskResumeAll+0x138>)
 800ba42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba50:	f001 f8e0 	bl	800cc14 <vPortExitCritical>

	return xAlreadyYielded;
 800ba54:	68bb      	ldr	r3, [r7, #8]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20001134 	.word	0x20001134
 800ba64:	2000110c 	.word	0x2000110c
 800ba68:	200010cc 	.word	0x200010cc
 800ba6c:	20001114 	.word	0x20001114
 800ba70:	20000c3c 	.word	0x20000c3c
 800ba74:	20000c38 	.word	0x20000c38
 800ba78:	20001120 	.word	0x20001120
 800ba7c:	2000111c 	.word	0x2000111c
 800ba80:	e000ed04 	.word	0xe000ed04

0800ba84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba8a:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <xTaskGetTickCount+0x1c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba90:	687b      	ldr	r3, [r7, #4]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20001110 	.word	0x20001110

0800baa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baaa:	2300      	movs	r3, #0
 800baac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baae:	4b4f      	ldr	r3, [pc, #316]	; (800bbec <xTaskIncrementTick+0x148>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f040 808f 	bne.w	800bbd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bab8:	4b4d      	ldr	r3, [pc, #308]	; (800bbf0 <xTaskIncrementTick+0x14c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bac0:	4a4b      	ldr	r2, [pc, #300]	; (800bbf0 <xTaskIncrementTick+0x14c>)
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d120      	bne.n	800bb0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bacc:	4b49      	ldr	r3, [pc, #292]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <xTaskIncrementTick+0x48>
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	603b      	str	r3, [r7, #0]
}
 800bae8:	bf00      	nop
 800baea:	e7fe      	b.n	800baea <xTaskIncrementTick+0x46>
 800baec:	4b41      	ldr	r3, [pc, #260]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60fb      	str	r3, [r7, #12]
 800baf2:	4b41      	ldr	r3, [pc, #260]	; (800bbf8 <xTaskIncrementTick+0x154>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a3f      	ldr	r2, [pc, #252]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	4a3f      	ldr	r2, [pc, #252]	; (800bbf8 <xTaskIncrementTick+0x154>)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	4b3e      	ldr	r3, [pc, #248]	; (800bbfc <xTaskIncrementTick+0x158>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3301      	adds	r3, #1
 800bb06:	4a3d      	ldr	r2, [pc, #244]	; (800bbfc <xTaskIncrementTick+0x158>)
 800bb08:	6013      	str	r3, [r2, #0]
 800bb0a:	f000 fadb 	bl	800c0c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb0e:	4b3c      	ldr	r3, [pc, #240]	; (800bc00 <xTaskIncrementTick+0x15c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d349      	bcc.n	800bbac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb18:	4b36      	ldr	r3, [pc, #216]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d104      	bne.n	800bb2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb22:	4b37      	ldr	r3, [pc, #220]	; (800bc00 <xTaskIncrementTick+0x15c>)
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	601a      	str	r2, [r3, #0]
					break;
 800bb2a:	e03f      	b.n	800bbac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb2c:	4b31      	ldr	r3, [pc, #196]	; (800bbf4 <xTaskIncrementTick+0x150>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d203      	bcs.n	800bb4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb44:	4a2e      	ldr	r2, [pc, #184]	; (800bc00 <xTaskIncrementTick+0x15c>)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb4a:	e02f      	b.n	800bbac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe ff79 	bl	800aa48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	3318      	adds	r3, #24
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe ff70 	bl	800aa48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6c:	4b25      	ldr	r3, [pc, #148]	; (800bc04 <xTaskIncrementTick+0x160>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d903      	bls.n	800bb7c <xTaskIncrementTick+0xd8>
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb78:	4a22      	ldr	r2, [pc, #136]	; (800bc04 <xTaskIncrementTick+0x160>)
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb80:	4613      	mov	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4a1f      	ldr	r2, [pc, #124]	; (800bc08 <xTaskIncrementTick+0x164>)
 800bb8a:	441a      	add	r2, r3
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4619      	mov	r1, r3
 800bb92:	4610      	mov	r0, r2
 800bb94:	f7fe fefb 	bl	800a98e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9c:	4b1b      	ldr	r3, [pc, #108]	; (800bc0c <xTaskIncrementTick+0x168>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d3b8      	bcc.n	800bb18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bba6:	2301      	movs	r3, #1
 800bba8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbaa:	e7b5      	b.n	800bb18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbac:	4b17      	ldr	r3, [pc, #92]	; (800bc0c <xTaskIncrementTick+0x168>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb2:	4915      	ldr	r1, [pc, #84]	; (800bc08 <xTaskIncrementTick+0x164>)
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	440b      	add	r3, r1
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d901      	bls.n	800bbc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbc8:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <xTaskIncrementTick+0x16c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d007      	beq.n	800bbe0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	e004      	b.n	800bbe0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbd6:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <xTaskIncrementTick+0x170>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	4a0d      	ldr	r2, [pc, #52]	; (800bc14 <xTaskIncrementTick+0x170>)
 800bbde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bbe0:	697b      	ldr	r3, [r7, #20]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20001134 	.word	0x20001134
 800bbf0:	20001110 	.word	0x20001110
 800bbf4:	200010c4 	.word	0x200010c4
 800bbf8:	200010c8 	.word	0x200010c8
 800bbfc:	20001124 	.word	0x20001124
 800bc00:	2000112c 	.word	0x2000112c
 800bc04:	20001114 	.word	0x20001114
 800bc08:	20000c3c 	.word	0x20000c3c
 800bc0c:	20000c38 	.word	0x20000c38
 800bc10:	20001120 	.word	0x20001120
 800bc14:	2000111c 	.word	0x2000111c

0800bc18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc1e:	4b2a      	ldr	r3, [pc, #168]	; (800bcc8 <vTaskSwitchContext+0xb0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc26:	4b29      	ldr	r3, [pc, #164]	; (800bccc <vTaskSwitchContext+0xb4>)
 800bc28:	2201      	movs	r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc2c:	e046      	b.n	800bcbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bc2e:	4b27      	ldr	r3, [pc, #156]	; (800bccc <vTaskSwitchContext+0xb4>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc34:	4b26      	ldr	r3, [pc, #152]	; (800bcd0 <vTaskSwitchContext+0xb8>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	60fb      	str	r3, [r7, #12]
 800bc3a:	e010      	b.n	800bc5e <vTaskSwitchContext+0x46>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	607b      	str	r3, [r7, #4]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <vTaskSwitchContext+0x3e>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	491d      	ldr	r1, [pc, #116]	; (800bcd4 <vTaskSwitchContext+0xbc>)
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	4613      	mov	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	440b      	add	r3, r1
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0e4      	beq.n	800bc3c <vTaskSwitchContext+0x24>
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	4613      	mov	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4a15      	ldr	r2, [pc, #84]	; (800bcd4 <vTaskSwitchContext+0xbc>)
 800bc7e:	4413      	add	r3, r2
 800bc80:	60bb      	str	r3, [r7, #8]
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	605a      	str	r2, [r3, #4]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	3308      	adds	r3, #8
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d104      	bne.n	800bca2 <vTaskSwitchContext+0x8a>
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	605a      	str	r2, [r3, #4]
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	4a0b      	ldr	r2, [pc, #44]	; (800bcd8 <vTaskSwitchContext+0xc0>)
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	4a08      	ldr	r2, [pc, #32]	; (800bcd0 <vTaskSwitchContext+0xb8>)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcb2:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <vTaskSwitchContext+0xc0>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3354      	adds	r3, #84	; 0x54
 800bcb8:	4a08      	ldr	r2, [pc, #32]	; (800bcdc <vTaskSwitchContext+0xc4>)
 800bcba:	6013      	str	r3, [r2, #0]
}
 800bcbc:	bf00      	nop
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	20001134 	.word	0x20001134
 800bccc:	20001120 	.word	0x20001120
 800bcd0:	20001114 	.word	0x20001114
 800bcd4:	20000c3c 	.word	0x20000c3c
 800bcd8:	20000c38 	.word	0x20000c38
 800bcdc:	20000110 	.word	0x20000110

0800bce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10a      	bne.n	800bd06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	60fb      	str	r3, [r7, #12]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd06:	4b07      	ldr	r3, [pc, #28]	; (800bd24 <vTaskPlaceOnEventList+0x44>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3318      	adds	r3, #24
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7fe fe61 	bl	800a9d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd14:	2101      	movs	r1, #1
 800bd16:	6838      	ldr	r0, [r7, #0]
 800bd18:	f000 fa80 	bl	800c21c <prvAddCurrentTaskToDelayedList>
}
 800bd1c:	bf00      	nop
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	20000c38 	.word	0x20000c38

0800bd28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10a      	bne.n	800bd50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	617b      	str	r3, [r7, #20]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd50:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <vTaskPlaceOnEventListRestricted+0x54>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3318      	adds	r3, #24
 800bd56:	4619      	mov	r1, r3
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7fe fe18 	bl	800a98e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd64:	f04f 33ff 	mov.w	r3, #4294967295
 800bd68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	68b8      	ldr	r0, [r7, #8]
 800bd6e:	f000 fa55 	bl	800c21c <prvAddCurrentTaskToDelayedList>
	}
 800bd72:	bf00      	nop
 800bd74:	3718      	adds	r7, #24
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20000c38 	.word	0x20000c38

0800bd80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10a      	bne.n	800bdac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	60fb      	str	r3, [r7, #12]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	3318      	adds	r3, #24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fe fe49 	bl	800aa48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdb6:	4b1e      	ldr	r3, [pc, #120]	; (800be30 <xTaskRemoveFromEventList+0xb0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d11d      	bne.n	800bdfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fe fe40 	bl	800aa48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdcc:	4b19      	ldr	r3, [pc, #100]	; (800be34 <xTaskRemoveFromEventList+0xb4>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d903      	bls.n	800bddc <xTaskRemoveFromEventList+0x5c>
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd8:	4a16      	ldr	r2, [pc, #88]	; (800be34 <xTaskRemoveFromEventList+0xb4>)
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4a13      	ldr	r2, [pc, #76]	; (800be38 <xTaskRemoveFromEventList+0xb8>)
 800bdea:	441a      	add	r2, r3
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe fdcb 	bl	800a98e <vListInsertEnd>
 800bdf8:	e005      	b.n	800be06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	3318      	adds	r3, #24
 800bdfe:	4619      	mov	r1, r3
 800be00:	480e      	ldr	r0, [pc, #56]	; (800be3c <xTaskRemoveFromEventList+0xbc>)
 800be02:	f7fe fdc4 	bl	800a98e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0a:	4b0d      	ldr	r3, [pc, #52]	; (800be40 <xTaskRemoveFromEventList+0xc0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	429a      	cmp	r2, r3
 800be12:	d905      	bls.n	800be20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be18:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <xTaskRemoveFromEventList+0xc4>)
 800be1a:	2201      	movs	r2, #1
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	e001      	b.n	800be24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be20:	2300      	movs	r3, #0
 800be22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be24:	697b      	ldr	r3, [r7, #20]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	20001134 	.word	0x20001134
 800be34:	20001114 	.word	0x20001114
 800be38:	20000c3c 	.word	0x20000c3c
 800be3c:	200010cc 	.word	0x200010cc
 800be40:	20000c38 	.word	0x20000c38
 800be44:	20001120 	.word	0x20001120

0800be48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be50:	4b06      	ldr	r3, [pc, #24]	; (800be6c <vTaskInternalSetTimeOutState+0x24>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be58:	4b05      	ldr	r3, [pc, #20]	; (800be70 <vTaskInternalSetTimeOutState+0x28>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	605a      	str	r2, [r3, #4]
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20001124 	.word	0x20001124
 800be70:	20001110 	.word	0x20001110

0800be74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	613b      	str	r3, [r7, #16]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	60fb      	str	r3, [r7, #12]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800beb6:	f000 fe7d 	bl	800cbb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800beba:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <xTaskCheckForTimeOut+0xbc>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d102      	bne.n	800beda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bed4:	2300      	movs	r3, #0
 800bed6:	61fb      	str	r3, [r7, #28]
 800bed8:	e023      	b.n	800bf22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	4b15      	ldr	r3, [pc, #84]	; (800bf34 <xTaskCheckForTimeOut+0xc0>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d007      	beq.n	800bef6 <xTaskCheckForTimeOut+0x82>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	429a      	cmp	r2, r3
 800beee:	d302      	bcc.n	800bef6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bef0:	2301      	movs	r3, #1
 800bef2:	61fb      	str	r3, [r7, #28]
 800bef4:	e015      	b.n	800bf22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	429a      	cmp	r2, r3
 800befe:	d20b      	bcs.n	800bf18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff ff9b 	bl	800be48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf12:	2300      	movs	r3, #0
 800bf14:	61fb      	str	r3, [r7, #28]
 800bf16:	e004      	b.n	800bf22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf22:	f000 fe77 	bl	800cc14 <vPortExitCritical>

	return xReturn;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	20001110 	.word	0x20001110
 800bf34:	20001124 	.word	0x20001124

0800bf38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf3c:	4b03      	ldr	r3, [pc, #12]	; (800bf4c <vTaskMissedYield+0x14>)
 800bf3e:	2201      	movs	r2, #1
 800bf40:	601a      	str	r2, [r3, #0]
}
 800bf42:	bf00      	nop
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	20001120 	.word	0x20001120

0800bf50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf58:	f000 f852 	bl	800c000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <prvIdleTask+0x28>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d9f9      	bls.n	800bf58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <prvIdleTask+0x2c>)
 800bf66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf74:	e7f0      	b.n	800bf58 <prvIdleTask+0x8>
 800bf76:	bf00      	nop
 800bf78:	20000c3c 	.word	0x20000c3c
 800bf7c:	e000ed04 	.word	0xe000ed04

0800bf80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf86:	2300      	movs	r3, #0
 800bf88:	607b      	str	r3, [r7, #4]
 800bf8a:	e00c      	b.n	800bfa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4a12      	ldr	r2, [pc, #72]	; (800bfe0 <prvInitialiseTaskLists+0x60>)
 800bf98:	4413      	add	r3, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe fcca 	bl	800a934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	607b      	str	r3, [r7, #4]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b37      	cmp	r3, #55	; 0x37
 800bfaa:	d9ef      	bls.n	800bf8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfac:	480d      	ldr	r0, [pc, #52]	; (800bfe4 <prvInitialiseTaskLists+0x64>)
 800bfae:	f7fe fcc1 	bl	800a934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfb2:	480d      	ldr	r0, [pc, #52]	; (800bfe8 <prvInitialiseTaskLists+0x68>)
 800bfb4:	f7fe fcbe 	bl	800a934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfb8:	480c      	ldr	r0, [pc, #48]	; (800bfec <prvInitialiseTaskLists+0x6c>)
 800bfba:	f7fe fcbb 	bl	800a934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfbe:	480c      	ldr	r0, [pc, #48]	; (800bff0 <prvInitialiseTaskLists+0x70>)
 800bfc0:	f7fe fcb8 	bl	800a934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfc4:	480b      	ldr	r0, [pc, #44]	; (800bff4 <prvInitialiseTaskLists+0x74>)
 800bfc6:	f7fe fcb5 	bl	800a934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfca:	4b0b      	ldr	r3, [pc, #44]	; (800bff8 <prvInitialiseTaskLists+0x78>)
 800bfcc:	4a05      	ldr	r2, [pc, #20]	; (800bfe4 <prvInitialiseTaskLists+0x64>)
 800bfce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <prvInitialiseTaskLists+0x7c>)
 800bfd2:	4a05      	ldr	r2, [pc, #20]	; (800bfe8 <prvInitialiseTaskLists+0x68>)
 800bfd4:	601a      	str	r2, [r3, #0]
}
 800bfd6:	bf00      	nop
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000c3c 	.word	0x20000c3c
 800bfe4:	2000109c 	.word	0x2000109c
 800bfe8:	200010b0 	.word	0x200010b0
 800bfec:	200010cc 	.word	0x200010cc
 800bff0:	200010e0 	.word	0x200010e0
 800bff4:	200010f8 	.word	0x200010f8
 800bff8:	200010c4 	.word	0x200010c4
 800bffc:	200010c8 	.word	0x200010c8

0800c000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c006:	e019      	b.n	800c03c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c008:	f000 fdd4 	bl	800cbb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c00c:	4b10      	ldr	r3, [pc, #64]	; (800c050 <prvCheckTasksWaitingTermination+0x50>)
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3304      	adds	r3, #4
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fd15 	bl	800aa48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c01e:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <prvCheckTasksWaitingTermination+0x54>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3b01      	subs	r3, #1
 800c024:	4a0b      	ldr	r2, [pc, #44]	; (800c054 <prvCheckTasksWaitingTermination+0x54>)
 800c026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c028:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <prvCheckTasksWaitingTermination+0x58>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	4a0a      	ldr	r2, [pc, #40]	; (800c058 <prvCheckTasksWaitingTermination+0x58>)
 800c030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c032:	f000 fdef 	bl	800cc14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f810 	bl	800c05c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c03c:	4b06      	ldr	r3, [pc, #24]	; (800c058 <prvCheckTasksWaitingTermination+0x58>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e1      	bne.n	800c008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	200010e0 	.word	0x200010e0
 800c054:	2000110c 	.word	0x2000110c
 800c058:	200010f4 	.word	0x200010f4

0800c05c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	3354      	adds	r3, #84	; 0x54
 800c068:	4618      	mov	r0, r3
 800c06a:	f001 feb9 	bl	800dde0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c074:	2b00      	cmp	r3, #0
 800c076:	d108      	bne.n	800c08a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 ff87 	bl	800cf90 <vPortFree>
				vPortFree( pxTCB );
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 ff84 	bl	800cf90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c088:	e018      	b.n	800c0bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c090:	2b01      	cmp	r3, #1
 800c092:	d103      	bne.n	800c09c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 ff7b 	bl	800cf90 <vPortFree>
	}
 800c09a:	e00f      	b.n	800c0bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d00a      	beq.n	800c0bc <prvDeleteTCB+0x60>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60fb      	str	r3, [r7, #12]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <prvDeleteTCB+0x5e>
	}
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0ca:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <prvResetNextTaskUnblockTime+0x38>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0d4:	4b0a      	ldr	r3, [pc, #40]	; (800c100 <prvResetNextTaskUnblockTime+0x3c>)
 800c0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0dc:	e008      	b.n	800c0f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0de:	4b07      	ldr	r3, [pc, #28]	; (800c0fc <prvResetNextTaskUnblockTime+0x38>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	4a04      	ldr	r2, [pc, #16]	; (800c100 <prvResetNextTaskUnblockTime+0x3c>)
 800c0ee:	6013      	str	r3, [r2, #0]
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	200010c4 	.word	0x200010c4
 800c100:	2000112c 	.word	0x2000112c

0800c104 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c10a:	4b0b      	ldr	r3, [pc, #44]	; (800c138 <xTaskGetSchedulerState+0x34>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d102      	bne.n	800c118 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c112:	2301      	movs	r3, #1
 800c114:	607b      	str	r3, [r7, #4]
 800c116:	e008      	b.n	800c12a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c118:	4b08      	ldr	r3, [pc, #32]	; (800c13c <xTaskGetSchedulerState+0x38>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c120:	2302      	movs	r3, #2
 800c122:	607b      	str	r3, [r7, #4]
 800c124:	e001      	b.n	800c12a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c126:	2300      	movs	r3, #0
 800c128:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c12a:	687b      	ldr	r3, [r7, #4]
	}
 800c12c:	4618      	mov	r0, r3
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	20001118 	.word	0x20001118
 800c13c:	20001134 	.word	0x20001134

0800c140 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d056      	beq.n	800c204 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c156:	4b2e      	ldr	r3, [pc, #184]	; (800c210 <xTaskPriorityDisinherit+0xd0>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d00a      	beq.n	800c176 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	60fb      	str	r3, [r7, #12]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10a      	bne.n	800c194 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	60bb      	str	r3, [r7, #8]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c198:	1e5a      	subs	r2, r3, #1
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d02c      	beq.n	800c204 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d128      	bne.n	800c204 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fc46 	bl	800aa48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d4:	4b0f      	ldr	r3, [pc, #60]	; (800c214 <xTaskPriorityDisinherit+0xd4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d903      	bls.n	800c1e4 <xTaskPriorityDisinherit+0xa4>
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	4a0c      	ldr	r2, [pc, #48]	; (800c214 <xTaskPriorityDisinherit+0xd4>)
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4a09      	ldr	r2, [pc, #36]	; (800c218 <xTaskPriorityDisinherit+0xd8>)
 800c1f2:	441a      	add	r2, r3
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	f7fe fbc7 	bl	800a98e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c200:	2301      	movs	r3, #1
 800c202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c204:	697b      	ldr	r3, [r7, #20]
	}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	20000c38 	.word	0x20000c38
 800c214:	20001114 	.word	0x20001114
 800c218:	20000c3c 	.word	0x20000c3c

0800c21c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c226:	4b21      	ldr	r3, [pc, #132]	; (800c2ac <prvAddCurrentTaskToDelayedList+0x90>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c22c:	4b20      	ldr	r3, [pc, #128]	; (800c2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	3304      	adds	r3, #4
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe fc08 	bl	800aa48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23e:	d10a      	bne.n	800c256 <prvAddCurrentTaskToDelayedList+0x3a>
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d007      	beq.n	800c256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c246:	4b1a      	ldr	r3, [pc, #104]	; (800c2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4619      	mov	r1, r3
 800c24e:	4819      	ldr	r0, [pc, #100]	; (800c2b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c250:	f7fe fb9d 	bl	800a98e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c254:	e026      	b.n	800c2a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4413      	add	r3, r2
 800c25c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c25e:	4b14      	ldr	r3, [pc, #80]	; (800c2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d209      	bcs.n	800c282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c26e:	4b12      	ldr	r3, [pc, #72]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	4b0f      	ldr	r3, [pc, #60]	; (800c2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3304      	adds	r3, #4
 800c278:	4619      	mov	r1, r3
 800c27a:	4610      	mov	r0, r2
 800c27c:	f7fe fbab 	bl	800a9d6 <vListInsert>
}
 800c280:	e010      	b.n	800c2a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c282:	4b0e      	ldr	r3, [pc, #56]	; (800c2bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4619      	mov	r1, r3
 800c28e:	4610      	mov	r0, r2
 800c290:	f7fe fba1 	bl	800a9d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c294:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d202      	bcs.n	800c2a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c29e:	4a08      	ldr	r2, [pc, #32]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	6013      	str	r3, [r2, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20001110 	.word	0x20001110
 800c2b0:	20000c38 	.word	0x20000c38
 800c2b4:	200010f8 	.word	0x200010f8
 800c2b8:	200010c8 	.word	0x200010c8
 800c2bc:	200010c4 	.word	0x200010c4
 800c2c0:	2000112c 	.word	0x2000112c

0800c2c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08a      	sub	sp, #40	; 0x28
 800c2c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2ce:	f000 fb07 	bl	800c8e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2d2:	4b1c      	ldr	r3, [pc, #112]	; (800c344 <xTimerCreateTimerTask+0x80>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d021      	beq.n	800c31e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2e2:	1d3a      	adds	r2, r7, #4
 800c2e4:	f107 0108 	add.w	r1, r7, #8
 800c2e8:	f107 030c 	add.w	r3, r7, #12
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fb07 	bl	800a900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2f2:	6879      	ldr	r1, [r7, #4]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	9202      	str	r2, [sp, #8]
 800c2fa:	9301      	str	r3, [sp, #4]
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	2300      	movs	r3, #0
 800c302:	460a      	mov	r2, r1
 800c304:	4910      	ldr	r1, [pc, #64]	; (800c348 <xTimerCreateTimerTask+0x84>)
 800c306:	4811      	ldr	r0, [pc, #68]	; (800c34c <xTimerCreateTimerTask+0x88>)
 800c308:	f7ff f8b4 	bl	800b474 <xTaskCreateStatic>
 800c30c:	4603      	mov	r3, r0
 800c30e:	4a10      	ldr	r2, [pc, #64]	; (800c350 <xTimerCreateTimerTask+0x8c>)
 800c310:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c312:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <xTimerCreateTimerTask+0x8c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c31a:	2301      	movs	r3, #1
 800c31c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	613b      	str	r3, [r7, #16]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c33a:	697b      	ldr	r3, [r7, #20]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3718      	adds	r7, #24
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20001168 	.word	0x20001168
 800c348:	0800e6a4 	.word	0x0800e6a4
 800c34c:	0800c489 	.word	0x0800c489
 800c350:	2000116c 	.word	0x2000116c

0800c354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08a      	sub	sp, #40	; 0x28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c362:	2300      	movs	r3, #0
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	623b      	str	r3, [r7, #32]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c382:	4b1a      	ldr	r3, [pc, #104]	; (800c3ec <xTimerGenericCommand+0x98>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d02a      	beq.n	800c3e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b05      	cmp	r3, #5
 800c39a:	dc18      	bgt.n	800c3ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c39c:	f7ff feb2 	bl	800c104 <xTaskGetSchedulerState>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d109      	bne.n	800c3ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3a6:	4b11      	ldr	r3, [pc, #68]	; (800c3ec <xTimerGenericCommand+0x98>)
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	f107 0110 	add.w	r1, r7, #16
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b2:	f7fe fc77 	bl	800aca4 <xQueueGenericSend>
 800c3b6:	6278      	str	r0, [r7, #36]	; 0x24
 800c3b8:	e012      	b.n	800c3e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3ba:	4b0c      	ldr	r3, [pc, #48]	; (800c3ec <xTimerGenericCommand+0x98>)
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	f107 0110 	add.w	r1, r7, #16
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f7fe fc6d 	bl	800aca4 <xQueueGenericSend>
 800c3ca:	6278      	str	r0, [r7, #36]	; 0x24
 800c3cc:	e008      	b.n	800c3e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3ce:	4b07      	ldr	r3, [pc, #28]	; (800c3ec <xTimerGenericCommand+0x98>)
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	f107 0110 	add.w	r1, r7, #16
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	f7fe fd61 	bl	800aea0 <xQueueGenericSendFromISR>
 800c3de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3728      	adds	r7, #40	; 0x28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20001168 	.word	0x20001168

0800c3f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3fa:	4b22      	ldr	r3, [pc, #136]	; (800c484 <prvProcessExpiredTimer+0x94>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	3304      	adds	r3, #4
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fe fb1d 	bl	800aa48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d022      	beq.n	800c462 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	699a      	ldr	r2, [r3, #24]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	18d1      	adds	r1, r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	6978      	ldr	r0, [r7, #20]
 800c42a:	f000 f8d1 	bl	800c5d0 <prvInsertTimerInActiveList>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d01f      	beq.n	800c474 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c434:	2300      	movs	r3, #0
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	2300      	movs	r3, #0
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	2100      	movs	r1, #0
 800c43e:	6978      	ldr	r0, [r7, #20]
 800c440:	f7ff ff88 	bl	800c354 <xTimerGenericCommand>
 800c444:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d113      	bne.n	800c474 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	60fb      	str	r3, [r7, #12]
}
 800c45e:	bf00      	nop
 800c460:	e7fe      	b.n	800c460 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c468:	f023 0301 	bic.w	r3, r3, #1
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	6a1b      	ldr	r3, [r3, #32]
 800c478:	6978      	ldr	r0, [r7, #20]
 800c47a:	4798      	blx	r3
}
 800c47c:	bf00      	nop
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20001160 	.word	0x20001160

0800c488 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c490:	f107 0308 	add.w	r3, r7, #8
 800c494:	4618      	mov	r0, r3
 800c496:	f000 f857 	bl	800c548 <prvGetNextExpireTime>
 800c49a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 f803 	bl	800c4ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4a6:	f000 f8d5 	bl	800c654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4aa:	e7f1      	b.n	800c490 <prvTimerTask+0x8>

0800c4ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4b6:	f7ff fa39 	bl	800b92c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4ba:	f107 0308 	add.w	r3, r7, #8
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f866 	bl	800c590 <prvSampleTimeNow>
 800c4c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d130      	bne.n	800c52e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10a      	bne.n	800c4e8 <prvProcessTimerOrBlockTask+0x3c>
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d806      	bhi.n	800c4e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4da:	f7ff fa35 	bl	800b948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4de:	68f9      	ldr	r1, [r7, #12]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7ff ff85 	bl	800c3f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4e6:	e024      	b.n	800c532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d008      	beq.n	800c500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <prvProcessTimerOrBlockTask+0x90>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d101      	bne.n	800c4fc <prvProcessTimerOrBlockTask+0x50>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e000      	b.n	800c4fe <prvProcessTimerOrBlockTask+0x52>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c500:	4b0f      	ldr	r3, [pc, #60]	; (800c540 <prvProcessTimerOrBlockTask+0x94>)
 800c502:	6818      	ldr	r0, [r3, #0]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	4619      	mov	r1, r3
 800c50e:	f7fe ff7d 	bl	800b40c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c512:	f7ff fa19 	bl	800b948 <xTaskResumeAll>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10a      	bne.n	800c532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c51c:	4b09      	ldr	r3, [pc, #36]	; (800c544 <prvProcessTimerOrBlockTask+0x98>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	f3bf 8f6f 	isb	sy
}
 800c52c:	e001      	b.n	800c532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c52e:	f7ff fa0b 	bl	800b948 <xTaskResumeAll>
}
 800c532:	bf00      	nop
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20001164 	.word	0x20001164
 800c540:	20001168 	.word	0x20001168
 800c544:	e000ed04 	.word	0xe000ed04

0800c548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c550:	4b0e      	ldr	r3, [pc, #56]	; (800c58c <prvGetNextExpireTime+0x44>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <prvGetNextExpireTime+0x16>
 800c55a:	2201      	movs	r2, #1
 800c55c:	e000      	b.n	800c560 <prvGetNextExpireTime+0x18>
 800c55e:	2200      	movs	r2, #0
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d105      	bne.n	800c578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c56c:	4b07      	ldr	r3, [pc, #28]	; (800c58c <prvGetNextExpireTime+0x44>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	e001      	b.n	800c57c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c57c:	68fb      	ldr	r3, [r7, #12]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20001160 	.word	0x20001160

0800c590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c598:	f7ff fa74 	bl	800ba84 <xTaskGetTickCount>
 800c59c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c59e:	4b0b      	ldr	r3, [pc, #44]	; (800c5cc <prvSampleTimeNow+0x3c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d205      	bcs.n	800c5b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5a8:	f000 f936 	bl	800c818 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	e002      	b.n	800c5ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5ba:	4a04      	ldr	r2, [pc, #16]	; (800c5cc <prvSampleTimeNow+0x3c>)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20001170 	.word	0x20001170

0800c5d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d812      	bhi.n	800c61c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	1ad2      	subs	r2, r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	429a      	cmp	r2, r3
 800c602:	d302      	bcc.n	800c60a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c604:	2301      	movs	r3, #1
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e01b      	b.n	800c642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c60a:	4b10      	ldr	r3, [pc, #64]	; (800c64c <prvInsertTimerInActiveList+0x7c>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3304      	adds	r3, #4
 800c612:	4619      	mov	r1, r3
 800c614:	4610      	mov	r0, r2
 800c616:	f7fe f9de 	bl	800a9d6 <vListInsert>
 800c61a:	e012      	b.n	800c642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d206      	bcs.n	800c632 <prvInsertTimerInActiveList+0x62>
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d302      	bcc.n	800c632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c62c:	2301      	movs	r3, #1
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	e007      	b.n	800c642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c632:	4b07      	ldr	r3, [pc, #28]	; (800c650 <prvInsertTimerInActiveList+0x80>)
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3304      	adds	r3, #4
 800c63a:	4619      	mov	r1, r3
 800c63c:	4610      	mov	r0, r2
 800c63e:	f7fe f9ca 	bl	800a9d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c642:	697b      	ldr	r3, [r7, #20]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20001164 	.word	0x20001164
 800c650:	20001160 	.word	0x20001160

0800c654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b08e      	sub	sp, #56	; 0x38
 800c658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c65a:	e0ca      	b.n	800c7f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	da18      	bge.n	800c694 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c662:	1d3b      	adds	r3, r7, #4
 800c664:	3304      	adds	r3, #4
 800c666:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10a      	bne.n	800c684 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	61fb      	str	r3, [r7, #28]
}
 800c680:	bf00      	nop
 800c682:	e7fe      	b.n	800c682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c68a:	6850      	ldr	r0, [r2, #4]
 800c68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c68e:	6892      	ldr	r2, [r2, #8]
 800c690:	4611      	mov	r1, r2
 800c692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f2c0 80aa 	blt.w	800c7f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d004      	beq.n	800c6b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe f9cb 	bl	800aa48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6b2:	463b      	mov	r3, r7
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff ff6b 	bl	800c590 <prvSampleTimeNow>
 800c6ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b09      	cmp	r3, #9
 800c6c0:	f200 8097 	bhi.w	800c7f2 <prvProcessReceivedCommands+0x19e>
 800c6c4:	a201      	add	r2, pc, #4	; (adr r2, 800c6cc <prvProcessReceivedCommands+0x78>)
 800c6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ca:	bf00      	nop
 800c6cc:	0800c6f5 	.word	0x0800c6f5
 800c6d0:	0800c6f5 	.word	0x0800c6f5
 800c6d4:	0800c6f5 	.word	0x0800c6f5
 800c6d8:	0800c769 	.word	0x0800c769
 800c6dc:	0800c77d 	.word	0x0800c77d
 800c6e0:	0800c7c7 	.word	0x0800c7c7
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c6f5 	.word	0x0800c6f5
 800c6ec:	0800c769 	.word	0x0800c769
 800c6f0:	0800c77d 	.word	0x0800c77d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6fa:	f043 0301 	orr.w	r3, r3, #1
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	18d1      	adds	r1, r2, r3
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c714:	f7ff ff5c 	bl	800c5d0 <prvInsertTimerInActiveList>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d069      	beq.n	800c7f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d05e      	beq.n	800c7f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	441a      	add	r2, r3
 800c73c:	2300      	movs	r3, #0
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	2300      	movs	r3, #0
 800c742:	2100      	movs	r1, #0
 800c744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c746:	f7ff fe05 	bl	800c354 <xTimerGenericCommand>
 800c74a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d14f      	bne.n	800c7f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	61bb      	str	r3, [r7, #24]
}
 800c764:	bf00      	nop
 800c766:	e7fe      	b.n	800c766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c76e:	f023 0301 	bic.w	r3, r3, #1
 800c772:	b2da      	uxtb	r2, r3
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c77a:	e03a      	b.n	800c7f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10a      	bne.n	800c7b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	617b      	str	r3, [r7, #20]
}
 800c7ae:	bf00      	nop
 800c7b0:	e7fe      	b.n	800c7b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	18d1      	adds	r1, r2, r3
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c0:	f7ff ff06 	bl	800c5d0 <prvInsertTimerInActiveList>
					break;
 800c7c4:	e015      	b.n	800c7f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7cc:	f003 0302 	and.w	r3, r3, #2
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d103      	bne.n	800c7dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d6:	f000 fbdb 	bl	800cf90 <vPortFree>
 800c7da:	e00a      	b.n	800c7f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7e2:	f023 0301 	bic.w	r3, r3, #1
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7ee:	e000      	b.n	800c7f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7f2:	4b08      	ldr	r3, [pc, #32]	; (800c814 <prvProcessReceivedCommands+0x1c0>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	1d39      	adds	r1, r7, #4
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe fbec 	bl	800afd8 <xQueueReceive>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	f47f af2a 	bne.w	800c65c <prvProcessReceivedCommands+0x8>
	}
}
 800c808:	bf00      	nop
 800c80a:	bf00      	nop
 800c80c:	3730      	adds	r7, #48	; 0x30
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20001168 	.word	0x20001168

0800c818 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c81e:	e048      	b.n	800c8b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c820:	4b2d      	ldr	r3, [pc, #180]	; (800c8d8 <prvSwitchTimerLists+0xc0>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c82a:	4b2b      	ldr	r3, [pc, #172]	; (800c8d8 <prvSwitchTimerLists+0xc0>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3304      	adds	r3, #4
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fe f905 	bl	800aa48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c84c:	f003 0304 	and.w	r3, r3, #4
 800c850:	2b00      	cmp	r3, #0
 800c852:	d02e      	beq.n	800c8b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	4413      	add	r3, r2
 800c85c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	429a      	cmp	r2, r3
 800c864:	d90e      	bls.n	800c884 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c872:	4b19      	ldr	r3, [pc, #100]	; (800c8d8 <prvSwitchTimerLists+0xc0>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	3304      	adds	r3, #4
 800c87a:	4619      	mov	r1, r3
 800c87c:	4610      	mov	r0, r2
 800c87e:	f7fe f8aa 	bl	800a9d6 <vListInsert>
 800c882:	e016      	b.n	800c8b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c884:	2300      	movs	r3, #0
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	2300      	movs	r3, #0
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	2100      	movs	r1, #0
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff fd60 	bl	800c354 <xTimerGenericCommand>
 800c894:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10a      	bne.n	800c8b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	603b      	str	r3, [r7, #0]
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8b2:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <prvSwitchTimerLists+0xc0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1b1      	bne.n	800c820 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8bc:	4b06      	ldr	r3, [pc, #24]	; (800c8d8 <prvSwitchTimerLists+0xc0>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8c2:	4b06      	ldr	r3, [pc, #24]	; (800c8dc <prvSwitchTimerLists+0xc4>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a04      	ldr	r2, [pc, #16]	; (800c8d8 <prvSwitchTimerLists+0xc0>)
 800c8c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8ca:	4a04      	ldr	r2, [pc, #16]	; (800c8dc <prvSwitchTimerLists+0xc4>)
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	6013      	str	r3, [r2, #0]
}
 800c8d0:	bf00      	nop
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20001160 	.word	0x20001160
 800c8dc:	20001164 	.word	0x20001164

0800c8e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8e6:	f000 f965 	bl	800cbb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8ea:	4b15      	ldr	r3, [pc, #84]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d120      	bne.n	800c934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8f2:	4814      	ldr	r0, [pc, #80]	; (800c944 <prvCheckForValidListAndQueue+0x64>)
 800c8f4:	f7fe f81e 	bl	800a934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8f8:	4813      	ldr	r0, [pc, #76]	; (800c948 <prvCheckForValidListAndQueue+0x68>)
 800c8fa:	f7fe f81b 	bl	800a934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8fe:	4b13      	ldr	r3, [pc, #76]	; (800c94c <prvCheckForValidListAndQueue+0x6c>)
 800c900:	4a10      	ldr	r2, [pc, #64]	; (800c944 <prvCheckForValidListAndQueue+0x64>)
 800c902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c904:	4b12      	ldr	r3, [pc, #72]	; (800c950 <prvCheckForValidListAndQueue+0x70>)
 800c906:	4a10      	ldr	r2, [pc, #64]	; (800c948 <prvCheckForValidListAndQueue+0x68>)
 800c908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c90a:	2300      	movs	r3, #0
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	4b11      	ldr	r3, [pc, #68]	; (800c954 <prvCheckForValidListAndQueue+0x74>)
 800c910:	4a11      	ldr	r2, [pc, #68]	; (800c958 <prvCheckForValidListAndQueue+0x78>)
 800c912:	2110      	movs	r1, #16
 800c914:	200a      	movs	r0, #10
 800c916:	f7fe f929 	bl	800ab6c <xQueueGenericCreateStatic>
 800c91a:	4603      	mov	r3, r0
 800c91c:	4a08      	ldr	r2, [pc, #32]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c91e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c920:	4b07      	ldr	r3, [pc, #28]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d005      	beq.n	800c934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c928:	4b05      	ldr	r3, [pc, #20]	; (800c940 <prvCheckForValidListAndQueue+0x60>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	490b      	ldr	r1, [pc, #44]	; (800c95c <prvCheckForValidListAndQueue+0x7c>)
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe fd42 	bl	800b3b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c934:	f000 f96e 	bl	800cc14 <vPortExitCritical>
}
 800c938:	bf00      	nop
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	20001168 	.word	0x20001168
 800c944:	20001138 	.word	0x20001138
 800c948:	2000114c 	.word	0x2000114c
 800c94c:	20001160 	.word	0x20001160
 800c950:	20001164 	.word	0x20001164
 800c954:	20001214 	.word	0x20001214
 800c958:	20001174 	.word	0x20001174
 800c95c:	0800e6ac 	.word	0x0800e6ac

0800c960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3b04      	subs	r3, #4
 800c970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3b04      	subs	r3, #4
 800c97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	f023 0201 	bic.w	r2, r3, #1
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3b04      	subs	r3, #4
 800c98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c990:	4a0c      	ldr	r2, [pc, #48]	; (800c9c4 <pxPortInitialiseStack+0x64>)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	3b14      	subs	r3, #20
 800c99a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3b04      	subs	r3, #4
 800c9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f06f 0202 	mvn.w	r2, #2
 800c9ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3b20      	subs	r3, #32
 800c9b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	0800c9c9 	.word	0x0800c9c9

0800c9c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9d2:	4b12      	ldr	r3, [pc, #72]	; (800ca1c <prvTaskExitError+0x54>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9da:	d00a      	beq.n	800c9f2 <prvTaskExitError+0x2a>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	60fb      	str	r3, [r7, #12]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <prvTaskExitError+0x28>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	60bb      	str	r3, [r7, #8]
}
 800ca04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca06:	bf00      	nop
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d0fc      	beq.n	800ca08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca0e:	bf00      	nop
 800ca10:	bf00      	nop
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	200000a8 	.word	0x200000a8

0800ca20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <pxCurrentTCBConst2>)
 800ca22:	6819      	ldr	r1, [r3, #0]
 800ca24:	6808      	ldr	r0, [r1, #0]
 800ca26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2a:	f380 8809 	msr	PSP, r0
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f04f 0000 	mov.w	r0, #0
 800ca36:	f380 8811 	msr	BASEPRI, r0
 800ca3a:	4770      	bx	lr
 800ca3c:	f3af 8000 	nop.w

0800ca40 <pxCurrentTCBConst2>:
 800ca40:	20000c38 	.word	0x20000c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop

0800ca48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca48:	4808      	ldr	r0, [pc, #32]	; (800ca6c <prvPortStartFirstTask+0x24>)
 800ca4a:	6800      	ldr	r0, [r0, #0]
 800ca4c:	6800      	ldr	r0, [r0, #0]
 800ca4e:	f380 8808 	msr	MSP, r0
 800ca52:	f04f 0000 	mov.w	r0, #0
 800ca56:	f380 8814 	msr	CONTROL, r0
 800ca5a:	b662      	cpsie	i
 800ca5c:	b661      	cpsie	f
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	df00      	svc	0
 800ca68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca6a:	bf00      	nop
 800ca6c:	e000ed08 	.word	0xe000ed08

0800ca70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca76:	4b46      	ldr	r3, [pc, #280]	; (800cb90 <xPortStartScheduler+0x120>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a46      	ldr	r2, [pc, #280]	; (800cb94 <xPortStartScheduler+0x124>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d10a      	bne.n	800ca96 <xPortStartScheduler+0x26>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	613b      	str	r3, [r7, #16]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca96:	4b3e      	ldr	r3, [pc, #248]	; (800cb90 <xPortStartScheduler+0x120>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a3f      	ldr	r2, [pc, #252]	; (800cb98 <xPortStartScheduler+0x128>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d10a      	bne.n	800cab6 <xPortStartScheduler+0x46>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	60fb      	str	r3, [r7, #12]
}
 800cab2:	bf00      	nop
 800cab4:	e7fe      	b.n	800cab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cab6:	4b39      	ldr	r3, [pc, #228]	; (800cb9c <xPortStartScheduler+0x12c>)
 800cab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	22ff      	movs	r2, #255	; 0xff
 800cac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cad0:	78fb      	ldrb	r3, [r7, #3]
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	4b31      	ldr	r3, [pc, #196]	; (800cba0 <xPortStartScheduler+0x130>)
 800cadc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cade:	4b31      	ldr	r3, [pc, #196]	; (800cba4 <xPortStartScheduler+0x134>)
 800cae0:	2207      	movs	r2, #7
 800cae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cae4:	e009      	b.n	800cafa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cae6:	4b2f      	ldr	r3, [pc, #188]	; (800cba4 <xPortStartScheduler+0x134>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	3b01      	subs	r3, #1
 800caec:	4a2d      	ldr	r2, [pc, #180]	; (800cba4 <xPortStartScheduler+0x134>)
 800caee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800caf0:	78fb      	ldrb	r3, [r7, #3]
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	005b      	lsls	r3, r3, #1
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cafa:	78fb      	ldrb	r3, [r7, #3]
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb02:	2b80      	cmp	r3, #128	; 0x80
 800cb04:	d0ef      	beq.n	800cae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb06:	4b27      	ldr	r3, [pc, #156]	; (800cba4 <xPortStartScheduler+0x134>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f1c3 0307 	rsb	r3, r3, #7
 800cb0e:	2b04      	cmp	r3, #4
 800cb10:	d00a      	beq.n	800cb28 <xPortStartScheduler+0xb8>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	60bb      	str	r3, [r7, #8]
}
 800cb24:	bf00      	nop
 800cb26:	e7fe      	b.n	800cb26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb28:	4b1e      	ldr	r3, [pc, #120]	; (800cba4 <xPortStartScheduler+0x134>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	4a1d      	ldr	r2, [pc, #116]	; (800cba4 <xPortStartScheduler+0x134>)
 800cb30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb32:	4b1c      	ldr	r3, [pc, #112]	; (800cba4 <xPortStartScheduler+0x134>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb3a:	4a1a      	ldr	r2, [pc, #104]	; (800cba4 <xPortStartScheduler+0x134>)
 800cb3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb46:	4b18      	ldr	r3, [pc, #96]	; (800cba8 <xPortStartScheduler+0x138>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a17      	ldr	r2, [pc, #92]	; (800cba8 <xPortStartScheduler+0x138>)
 800cb4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb52:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <xPortStartScheduler+0x138>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a14      	ldr	r2, [pc, #80]	; (800cba8 <xPortStartScheduler+0x138>)
 800cb58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb5e:	f000 f8dd 	bl	800cd1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb62:	4b12      	ldr	r3, [pc, #72]	; (800cbac <xPortStartScheduler+0x13c>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb68:	f000 f8fc 	bl	800cd64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb6c:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <xPortStartScheduler+0x140>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a0f      	ldr	r2, [pc, #60]	; (800cbb0 <xPortStartScheduler+0x140>)
 800cb72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb78:	f7ff ff66 	bl	800ca48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb7c:	f7ff f84c 	bl	800bc18 <vTaskSwitchContext>
	prvTaskExitError();
 800cb80:	f7ff ff22 	bl	800c9c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	e000ed00 	.word	0xe000ed00
 800cb94:	410fc271 	.word	0x410fc271
 800cb98:	410fc270 	.word	0x410fc270
 800cb9c:	e000e400 	.word	0xe000e400
 800cba0:	20001264 	.word	0x20001264
 800cba4:	20001268 	.word	0x20001268
 800cba8:	e000ed20 	.word	0xe000ed20
 800cbac:	200000a8 	.word	0x200000a8
 800cbb0:	e000ef34 	.word	0xe000ef34

0800cbb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	607b      	str	r3, [r7, #4]
}
 800cbcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cbce:	4b0f      	ldr	r3, [pc, #60]	; (800cc0c <vPortEnterCritical+0x58>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	4a0d      	ldr	r2, [pc, #52]	; (800cc0c <vPortEnterCritical+0x58>)
 800cbd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cbd8:	4b0c      	ldr	r3, [pc, #48]	; (800cc0c <vPortEnterCritical+0x58>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d10f      	bne.n	800cc00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cbe0:	4b0b      	ldr	r3, [pc, #44]	; (800cc10 <vPortEnterCritical+0x5c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <vPortEnterCritical+0x4c>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	603b      	str	r3, [r7, #0]
}
 800cbfc:	bf00      	nop
 800cbfe:	e7fe      	b.n	800cbfe <vPortEnterCritical+0x4a>
	}
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	200000a8 	.word	0x200000a8
 800cc10:	e000ed04 	.word	0xe000ed04

0800cc14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc1a:	4b12      	ldr	r3, [pc, #72]	; (800cc64 <vPortExitCritical+0x50>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10a      	bne.n	800cc38 <vPortExitCritical+0x24>
	__asm volatile
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	f383 8811 	msr	BASEPRI, r3
 800cc2a:	f3bf 8f6f 	isb	sy
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	607b      	str	r3, [r7, #4]
}
 800cc34:	bf00      	nop
 800cc36:	e7fe      	b.n	800cc36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc38:	4b0a      	ldr	r3, [pc, #40]	; (800cc64 <vPortExitCritical+0x50>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	4a09      	ldr	r2, [pc, #36]	; (800cc64 <vPortExitCritical+0x50>)
 800cc40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc42:	4b08      	ldr	r3, [pc, #32]	; (800cc64 <vPortExitCritical+0x50>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d105      	bne.n	800cc56 <vPortExitCritical+0x42>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	f383 8811 	msr	BASEPRI, r3
}
 800cc54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc56:	bf00      	nop
 800cc58:	370c      	adds	r7, #12
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	200000a8 	.word	0x200000a8
	...

0800cc70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc70:	f3ef 8009 	mrs	r0, PSP
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	4b15      	ldr	r3, [pc, #84]	; (800ccd0 <pxCurrentTCBConst>)
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	f01e 0f10 	tst.w	lr, #16
 800cc80:	bf08      	it	eq
 800cc82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8a:	6010      	str	r0, [r2, #0]
 800cc8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc94:	f380 8811 	msr	BASEPRI, r0
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f7fe ffba 	bl	800bc18 <vTaskSwitchContext>
 800cca4:	f04f 0000 	mov.w	r0, #0
 800cca8:	f380 8811 	msr	BASEPRI, r0
 800ccac:	bc09      	pop	{r0, r3}
 800ccae:	6819      	ldr	r1, [r3, #0]
 800ccb0:	6808      	ldr	r0, [r1, #0]
 800ccb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb6:	f01e 0f10 	tst.w	lr, #16
 800ccba:	bf08      	it	eq
 800ccbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ccc0:	f380 8809 	msr	PSP, r0
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	f3af 8000 	nop.w

0800ccd0 <pxCurrentTCBConst>:
 800ccd0:	20000c38 	.word	0x20000c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop

0800ccd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	607b      	str	r3, [r7, #4]
}
 800ccf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccf2:	f7fe fed7 	bl	800baa4 <xTaskIncrementTick>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccfc:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <xPortSysTickHandler+0x40>)
 800ccfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	2300      	movs	r3, #0
 800cd06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	f383 8811 	msr	BASEPRI, r3
}
 800cd0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	e000ed04 	.word	0xe000ed04

0800cd1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd20:	4b0b      	ldr	r3, [pc, #44]	; (800cd50 <vPortSetupTimerInterrupt+0x34>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd26:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <vPortSetupTimerInterrupt+0x38>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	; (800cd58 <vPortSetupTimerInterrupt+0x3c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a0a      	ldr	r2, [pc, #40]	; (800cd5c <vPortSetupTimerInterrupt+0x40>)
 800cd32:	fba2 2303 	umull	r2, r3, r2, r3
 800cd36:	099b      	lsrs	r3, r3, #6
 800cd38:	4a09      	ldr	r2, [pc, #36]	; (800cd60 <vPortSetupTimerInterrupt+0x44>)
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd3e:	4b04      	ldr	r3, [pc, #16]	; (800cd50 <vPortSetupTimerInterrupt+0x34>)
 800cd40:	2207      	movs	r2, #7
 800cd42:	601a      	str	r2, [r3, #0]
}
 800cd44:	bf00      	nop
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	e000e010 	.word	0xe000e010
 800cd54:	e000e018 	.word	0xe000e018
 800cd58:	20000010 	.word	0x20000010
 800cd5c:	10624dd3 	.word	0x10624dd3
 800cd60:	e000e014 	.word	0xe000e014

0800cd64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd74 <vPortEnableVFP+0x10>
 800cd68:	6801      	ldr	r1, [r0, #0]
 800cd6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd6e:	6001      	str	r1, [r0, #0]
 800cd70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd72:	bf00      	nop
 800cd74:	e000ed88 	.word	0xe000ed88

0800cd78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd7e:	f3ef 8305 	mrs	r3, IPSR
 800cd82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b0f      	cmp	r3, #15
 800cd88:	d914      	bls.n	800cdb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd8a:	4a17      	ldr	r2, [pc, #92]	; (800cde8 <vPortValidateInterruptPriority+0x70>)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4413      	add	r3, r2
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd94:	4b15      	ldr	r3, [pc, #84]	; (800cdec <vPortValidateInterruptPriority+0x74>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	7afa      	ldrb	r2, [r7, #11]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d20a      	bcs.n	800cdb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	607b      	str	r3, [r7, #4]
}
 800cdb0:	bf00      	nop
 800cdb2:	e7fe      	b.n	800cdb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cdb4:	4b0e      	ldr	r3, [pc, #56]	; (800cdf0 <vPortValidateInterruptPriority+0x78>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdbc:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <vPortValidateInterruptPriority+0x7c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d90a      	bls.n	800cdda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	603b      	str	r3, [r7, #0]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <vPortValidateInterruptPriority+0x60>
	}
 800cdda:	bf00      	nop
 800cddc:	3714      	adds	r7, #20
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	e000e3f0 	.word	0xe000e3f0
 800cdec:	20001264 	.word	0x20001264
 800cdf0:	e000ed0c 	.word	0xe000ed0c
 800cdf4:	20001268 	.word	0x20001268

0800cdf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	; 0x28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce00:	2300      	movs	r3, #0
 800ce02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce04:	f7fe fd92 	bl	800b92c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce08:	4b5b      	ldr	r3, [pc, #364]	; (800cf78 <pvPortMalloc+0x180>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce10:	f000 f920 	bl	800d054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce14:	4b59      	ldr	r3, [pc, #356]	; (800cf7c <pvPortMalloc+0x184>)
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f040 8093 	bne.w	800cf48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d01d      	beq.n	800ce64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce28:	2208      	movs	r2, #8
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f003 0307 	and.w	r3, r3, #7
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d014      	beq.n	800ce64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f023 0307 	bic.w	r3, r3, #7
 800ce40:	3308      	adds	r3, #8
 800ce42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00a      	beq.n	800ce64 <pvPortMalloc+0x6c>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	617b      	str	r3, [r7, #20]
}
 800ce60:	bf00      	nop
 800ce62:	e7fe      	b.n	800ce62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d06e      	beq.n	800cf48 <pvPortMalloc+0x150>
 800ce6a:	4b45      	ldr	r3, [pc, #276]	; (800cf80 <pvPortMalloc+0x188>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d869      	bhi.n	800cf48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce74:	4b43      	ldr	r3, [pc, #268]	; (800cf84 <pvPortMalloc+0x18c>)
 800ce76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce78:	4b42      	ldr	r3, [pc, #264]	; (800cf84 <pvPortMalloc+0x18c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce7e:	e004      	b.n	800ce8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d903      	bls.n	800ce9c <pvPortMalloc+0xa4>
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1f1      	bne.n	800ce80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce9c:	4b36      	ldr	r3, [pc, #216]	; (800cf78 <pvPortMalloc+0x180>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d050      	beq.n	800cf48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2208      	movs	r2, #8
 800ceac:	4413      	add	r3, r2
 800ceae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	2308      	movs	r3, #8
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d91f      	bls.n	800cf08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	f003 0307 	and.w	r3, r3, #7
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00a      	beq.n	800cef0 <pvPortMalloc+0xf8>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	613b      	str	r3, [r7, #16]
}
 800ceec:	bf00      	nop
 800ceee:	e7fe      	b.n	800ceee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	1ad2      	subs	r2, r2, r3
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf02:	69b8      	ldr	r0, [r7, #24]
 800cf04:	f000 f908 	bl	800d118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf08:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <pvPortMalloc+0x188>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	4a1b      	ldr	r2, [pc, #108]	; (800cf80 <pvPortMalloc+0x188>)
 800cf14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf16:	4b1a      	ldr	r3, [pc, #104]	; (800cf80 <pvPortMalloc+0x188>)
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	4b1b      	ldr	r3, [pc, #108]	; (800cf88 <pvPortMalloc+0x190>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d203      	bcs.n	800cf2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf22:	4b17      	ldr	r3, [pc, #92]	; (800cf80 <pvPortMalloc+0x188>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a18      	ldr	r2, [pc, #96]	; (800cf88 <pvPortMalloc+0x190>)
 800cf28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	4b13      	ldr	r3, [pc, #76]	; (800cf7c <pvPortMalloc+0x184>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	431a      	orrs	r2, r3
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf3e:	4b13      	ldr	r3, [pc, #76]	; (800cf8c <pvPortMalloc+0x194>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3301      	adds	r3, #1
 800cf44:	4a11      	ldr	r2, [pc, #68]	; (800cf8c <pvPortMalloc+0x194>)
 800cf46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf48:	f7fe fcfe 	bl	800b948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00a      	beq.n	800cf6c <pvPortMalloc+0x174>
	__asm volatile
 800cf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	60fb      	str	r3, [r7, #12]
}
 800cf68:	bf00      	nop
 800cf6a:	e7fe      	b.n	800cf6a <pvPortMalloc+0x172>
	return pvReturn;
 800cf6c:	69fb      	ldr	r3, [r7, #28]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3728      	adds	r7, #40	; 0x28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20004e74 	.word	0x20004e74
 800cf7c:	20004e88 	.word	0x20004e88
 800cf80:	20004e78 	.word	0x20004e78
 800cf84:	20004e6c 	.word	0x20004e6c
 800cf88:	20004e7c 	.word	0x20004e7c
 800cf8c:	20004e80 	.word	0x20004e80

0800cf90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d04d      	beq.n	800d03e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfa2:	2308      	movs	r3, #8
 800cfa4:	425b      	negs	r3, r3
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	4b24      	ldr	r3, [pc, #144]	; (800d048 <vPortFree+0xb8>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4013      	ands	r3, r2
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <vPortFree+0x44>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	60fb      	str	r3, [r7, #12]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <vPortFree+0x62>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	60bb      	str	r3, [r7, #8]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	685a      	ldr	r2, [r3, #4]
 800cff6:	4b14      	ldr	r3, [pc, #80]	; (800d048 <vPortFree+0xb8>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4013      	ands	r3, r2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d01e      	beq.n	800d03e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d11a      	bne.n	800d03e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	685a      	ldr	r2, [r3, #4]
 800d00c:	4b0e      	ldr	r3, [pc, #56]	; (800d048 <vPortFree+0xb8>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	43db      	mvns	r3, r3
 800d012:	401a      	ands	r2, r3
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d018:	f7fe fc88 	bl	800b92c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <vPortFree+0xbc>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4413      	add	r3, r2
 800d026:	4a09      	ldr	r2, [pc, #36]	; (800d04c <vPortFree+0xbc>)
 800d028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d02a:	6938      	ldr	r0, [r7, #16]
 800d02c:	f000 f874 	bl	800d118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d030:	4b07      	ldr	r3, [pc, #28]	; (800d050 <vPortFree+0xc0>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3301      	adds	r3, #1
 800d036:	4a06      	ldr	r2, [pc, #24]	; (800d050 <vPortFree+0xc0>)
 800d038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d03a:	f7fe fc85 	bl	800b948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d03e:	bf00      	nop
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20004e88 	.word	0x20004e88
 800d04c:	20004e78 	.word	0x20004e78
 800d050:	20004e84 	.word	0x20004e84

0800d054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d05a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d060:	4b27      	ldr	r3, [pc, #156]	; (800d100 <prvHeapInit+0xac>)
 800d062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00c      	beq.n	800d088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3307      	adds	r3, #7
 800d072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0307 	bic.w	r3, r3, #7
 800d07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	4a1f      	ldr	r2, [pc, #124]	; (800d100 <prvHeapInit+0xac>)
 800d084:	4413      	add	r3, r2
 800d086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d08c:	4a1d      	ldr	r2, [pc, #116]	; (800d104 <prvHeapInit+0xb0>)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d092:	4b1c      	ldr	r3, [pc, #112]	; (800d104 <prvHeapInit+0xb0>)
 800d094:	2200      	movs	r2, #0
 800d096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	4413      	add	r3, r2
 800d09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0a0:	2208      	movs	r2, #8
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	1a9b      	subs	r3, r3, r2
 800d0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f023 0307 	bic.w	r3, r3, #7
 800d0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4a15      	ldr	r2, [pc, #84]	; (800d108 <prvHeapInit+0xb4>)
 800d0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0b6:	4b14      	ldr	r3, [pc, #80]	; (800d108 <prvHeapInit+0xb4>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0be:	4b12      	ldr	r3, [pc, #72]	; (800d108 <prvHeapInit+0xb4>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	1ad2      	subs	r2, r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0d4:	4b0c      	ldr	r3, [pc, #48]	; (800d108 <prvHeapInit+0xb4>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	4a0a      	ldr	r2, [pc, #40]	; (800d10c <prvHeapInit+0xb8>)
 800d0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	4a09      	ldr	r2, [pc, #36]	; (800d110 <prvHeapInit+0xbc>)
 800d0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0ec:	4b09      	ldr	r3, [pc, #36]	; (800d114 <prvHeapInit+0xc0>)
 800d0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0f2:	601a      	str	r2, [r3, #0]
}
 800d0f4:	bf00      	nop
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	2000126c 	.word	0x2000126c
 800d104:	20004e6c 	.word	0x20004e6c
 800d108:	20004e74 	.word	0x20004e74
 800d10c:	20004e7c 	.word	0x20004e7c
 800d110:	20004e78 	.word	0x20004e78
 800d114:	20004e88 	.word	0x20004e88

0800d118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d120:	4b28      	ldr	r3, [pc, #160]	; (800d1c4 <prvInsertBlockIntoFreeList+0xac>)
 800d122:	60fb      	str	r3, [r7, #12]
 800d124:	e002      	b.n	800d12c <prvInsertBlockIntoFreeList+0x14>
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	429a      	cmp	r2, r3
 800d134:	d8f7      	bhi.n	800d126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	4413      	add	r3, r2
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	429a      	cmp	r2, r3
 800d146:	d108      	bne.n	800d15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	441a      	add	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	441a      	add	r2, r3
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d118      	bne.n	800d1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	4b15      	ldr	r3, [pc, #84]	; (800d1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	429a      	cmp	r2, r3
 800d178:	d00d      	beq.n	800d196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	441a      	add	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	e008      	b.n	800d1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d196:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	e003      	b.n	800d1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d002      	beq.n	800d1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	20004e6c 	.word	0x20004e6c
 800d1c8:	20004e74 	.word	0x20004e74

0800d1cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	4912      	ldr	r1, [pc, #72]	; (800d21c <MX_USB_DEVICE_Init+0x50>)
 800d1d4:	4812      	ldr	r0, [pc, #72]	; (800d220 <MX_USB_DEVICE_Init+0x54>)
 800d1d6:	f7fb ff4b 	bl	8009070 <USBD_Init>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1e0:	f7f3 fee8 	bl	8000fb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d1e4:	490f      	ldr	r1, [pc, #60]	; (800d224 <MX_USB_DEVICE_Init+0x58>)
 800d1e6:	480e      	ldr	r0, [pc, #56]	; (800d220 <MX_USB_DEVICE_Init+0x54>)
 800d1e8:	f7fb ff72 	bl	80090d0 <USBD_RegisterClass>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d1f2:	f7f3 fedf 	bl	8000fb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d1f6:	490c      	ldr	r1, [pc, #48]	; (800d228 <MX_USB_DEVICE_Init+0x5c>)
 800d1f8:	4809      	ldr	r0, [pc, #36]	; (800d220 <MX_USB_DEVICE_Init+0x54>)
 800d1fa:	f7fb fe63 	bl	8008ec4 <USBD_CDC_RegisterInterface>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d204:	f7f3 fed6 	bl	8000fb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d208:	4805      	ldr	r0, [pc, #20]	; (800d220 <MX_USB_DEVICE_Init+0x54>)
 800d20a:	f7fb ff97 	bl	800913c <USBD_Start>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d214:	f7f3 fece 	bl	8000fb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d218:	bf00      	nop
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	200000c0 	.word	0x200000c0
 800d220:	20004e8c 	.word	0x20004e8c
 800d224:	20000028 	.word	0x20000028
 800d228:	200000ac 	.word	0x200000ac

0800d22c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d230:	2200      	movs	r2, #0
 800d232:	4905      	ldr	r1, [pc, #20]	; (800d248 <CDC_Init_FS+0x1c>)
 800d234:	4805      	ldr	r0, [pc, #20]	; (800d24c <CDC_Init_FS+0x20>)
 800d236:	f7fb fe5f 	bl	8008ef8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d23a:	4905      	ldr	r1, [pc, #20]	; (800d250 <CDC_Init_FS+0x24>)
 800d23c:	4803      	ldr	r0, [pc, #12]	; (800d24c <CDC_Init_FS+0x20>)
 800d23e:	f7fb fe7d 	bl	8008f3c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800d242:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800d244:	4618      	mov	r0, r3
 800d246:	bd80      	pop	{r7, pc}
 800d248:	20005968 	.word	0x20005968
 800d24c:	20004e8c 	.word	0x20004e8c
 800d250:	20005168 	.word	0x20005168

0800d254 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800d254:	b480      	push	{r7}
 800d256:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800d258:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	4603      	mov	r3, r0
 800d26c:	6039      	str	r1, [r7, #0]
 800d26e:	71fb      	strb	r3, [r7, #7]
 800d270:	4613      	mov	r3, r2
 800d272:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	2b23      	cmp	r3, #35	; 0x23
 800d278:	d84a      	bhi.n	800d310 <CDC_Control_FS+0xac>
 800d27a:	a201      	add	r2, pc, #4	; (adr r2, 800d280 <CDC_Control_FS+0x1c>)
 800d27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d280:	0800d311 	.word	0x0800d311
 800d284:	0800d311 	.word	0x0800d311
 800d288:	0800d311 	.word	0x0800d311
 800d28c:	0800d311 	.word	0x0800d311
 800d290:	0800d311 	.word	0x0800d311
 800d294:	0800d311 	.word	0x0800d311
 800d298:	0800d311 	.word	0x0800d311
 800d29c:	0800d311 	.word	0x0800d311
 800d2a0:	0800d311 	.word	0x0800d311
 800d2a4:	0800d311 	.word	0x0800d311
 800d2a8:	0800d311 	.word	0x0800d311
 800d2ac:	0800d311 	.word	0x0800d311
 800d2b0:	0800d311 	.word	0x0800d311
 800d2b4:	0800d311 	.word	0x0800d311
 800d2b8:	0800d311 	.word	0x0800d311
 800d2bc:	0800d311 	.word	0x0800d311
 800d2c0:	0800d311 	.word	0x0800d311
 800d2c4:	0800d311 	.word	0x0800d311
 800d2c8:	0800d311 	.word	0x0800d311
 800d2cc:	0800d311 	.word	0x0800d311
 800d2d0:	0800d311 	.word	0x0800d311
 800d2d4:	0800d311 	.word	0x0800d311
 800d2d8:	0800d311 	.word	0x0800d311
 800d2dc:	0800d311 	.word	0x0800d311
 800d2e0:	0800d311 	.word	0x0800d311
 800d2e4:	0800d311 	.word	0x0800d311
 800d2e8:	0800d311 	.word	0x0800d311
 800d2ec:	0800d311 	.word	0x0800d311
 800d2f0:	0800d311 	.word	0x0800d311
 800d2f4:	0800d311 	.word	0x0800d311
 800d2f8:	0800d311 	.word	0x0800d311
 800d2fc:	0800d311 	.word	0x0800d311
 800d300:	0800d311 	.word	0x0800d311
 800d304:	0800d311 	.word	0x0800d311
 800d308:	0800d311 	.word	0x0800d311
 800d30c:	0800d311 	.word	0x0800d311
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800d310:	bf00      	nop
	}

	return (USBD_OK);
 800d312:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d32a:	6879      	ldr	r1, [r7, #4]
 800d32c:	480f      	ldr	r0, [pc, #60]	; (800d36c <CDC_Receive_FS+0x4c>)
 800d32e:	f7fb fe05 	bl	8008f3c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d332:	480e      	ldr	r0, [pc, #56]	; (800d36c <CDC_Receive_FS+0x4c>)
 800d334:	f7fb fe66 	bl	8009004 <USBD_CDC_ReceivePacket>

	memset(USB_Buff, '\0', 64);  // clear the buffer
 800d338:	2240      	movs	r2, #64	; 0x40
 800d33a:	2100      	movs	r1, #0
 800d33c:	480c      	ldr	r0, [pc, #48]	; (800d370 <CDC_Receive_FS+0x50>)
 800d33e:	f000 fca5 	bl	800dc8c <memset>
	uint8_t len = (uint8_t) *Len;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	73fb      	strb	r3, [r7, #15]
	memcpy(USB_Buff, Buf, len);  // copy the data to the buffer
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	461a      	mov	r2, r3
 800d34c:	6879      	ldr	r1, [r7, #4]
 800d34e:	4808      	ldr	r0, [pc, #32]	; (800d370 <CDC_Receive_FS+0x50>)
 800d350:	f000 fc8e 	bl	800dc70 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800d354:	7bfb      	ldrb	r3, [r7, #15]
 800d356:	461a      	mov	r2, r3
 800d358:	2100      	movs	r1, #0
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fc96 	bl	800dc8c <memset>

	return (USBD_OK);
 800d360:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20004e8c 	.word	0x20004e8c
 800d370:	200003e0 	.word	0x200003e0

0800d374 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d38a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800d396:	2301      	movs	r3, #1
 800d398:	e00b      	b.n	800d3b2 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d39a:	887b      	ldrh	r3, [r7, #2]
 800d39c:	461a      	mov	r2, r3
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	4806      	ldr	r0, [pc, #24]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d3a2:	f7fb fda9 	bl	8008ef8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3a6:	4805      	ldr	r0, [pc, #20]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d3a8:	f7fb fde6 	bl	8008f78 <USBD_CDC_TransmitPacket>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20004e8c 	.word	0x20004e8c

0800d3c0 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800d3c0:	b480      	push	{r7}
 800d3c2:	b087      	sub	sp, #28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800d3d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	371c      	adds	r7, #28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
	...

0800d3e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	6039      	str	r1, [r7, #0]
 800d3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2212      	movs	r2, #18
 800d3f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d3f6:	4b03      	ldr	r3, [pc, #12]	; (800d404 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	200000dc 	.word	0x200000dc

0800d408 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	6039      	str	r1, [r7, #0]
 800d412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2204      	movs	r2, #4
 800d418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d41a:	4b03      	ldr	r3, [pc, #12]	; (800d428 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr
 800d428:	200000f0 	.word	0x200000f0

0800d42c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	4603      	mov	r3, r0
 800d434:	6039      	str	r1, [r7, #0]
 800d436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d105      	bne.n	800d44a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	4907      	ldr	r1, [pc, #28]	; (800d460 <USBD_FS_ProductStrDescriptor+0x34>)
 800d442:	4808      	ldr	r0, [pc, #32]	; (800d464 <USBD_FS_ProductStrDescriptor+0x38>)
 800d444:	f7fd f826 	bl	800a494 <USBD_GetString>
 800d448:	e004      	b.n	800d454 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	4904      	ldr	r1, [pc, #16]	; (800d460 <USBD_FS_ProductStrDescriptor+0x34>)
 800d44e:	4805      	ldr	r0, [pc, #20]	; (800d464 <USBD_FS_ProductStrDescriptor+0x38>)
 800d450:	f7fd f820 	bl	800a494 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d454:	4b02      	ldr	r3, [pc, #8]	; (800d460 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d456:	4618      	mov	r0, r3
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	20006168 	.word	0x20006168
 800d464:	0800e6b4 	.word	0x0800e6b4

0800d468 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	4603      	mov	r3, r0
 800d470:	6039      	str	r1, [r7, #0]
 800d472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	4904      	ldr	r1, [pc, #16]	; (800d488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d478:	4804      	ldr	r0, [pc, #16]	; (800d48c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d47a:	f7fd f80b 	bl	800a494 <USBD_GetString>
  return USBD_StrDesc;
 800d47e:	4b02      	ldr	r3, [pc, #8]	; (800d488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20006168 	.word	0x20006168
 800d48c:	0800e6c0 	.word	0x0800e6c0

0800d490 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	221a      	movs	r2, #26
 800d4a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d4a2:	f000 f843 	bl	800d52c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d4a6:	4b02      	ldr	r3, [pc, #8]	; (800d4b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	200000f4 	.word	0x200000f4

0800d4b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	6039      	str	r1, [r7, #0]
 800d4be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d105      	bne.n	800d4d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	4907      	ldr	r1, [pc, #28]	; (800d4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4ca:	4808      	ldr	r0, [pc, #32]	; (800d4ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4cc:	f7fc ffe2 	bl	800a494 <USBD_GetString>
 800d4d0:	e004      	b.n	800d4dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	4904      	ldr	r1, [pc, #16]	; (800d4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4d6:	4805      	ldr	r0, [pc, #20]	; (800d4ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4d8:	f7fc ffdc 	bl	800a494 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4dc:	4b02      	ldr	r3, [pc, #8]	; (800d4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20006168 	.word	0x20006168
 800d4ec:	0800e6d4 	.word	0x0800e6d4

0800d4f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	6039      	str	r1, [r7, #0]
 800d4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d105      	bne.n	800d50e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	4907      	ldr	r1, [pc, #28]	; (800d524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d506:	4808      	ldr	r0, [pc, #32]	; (800d528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d508:	f7fc ffc4 	bl	800a494 <USBD_GetString>
 800d50c:	e004      	b.n	800d518 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	4904      	ldr	r1, [pc, #16]	; (800d524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d512:	4805      	ldr	r0, [pc, #20]	; (800d528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d514:	f7fc ffbe 	bl	800a494 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d518:	4b02      	ldr	r3, [pc, #8]	; (800d524 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20006168 	.word	0x20006168
 800d528:	0800e6e0 	.word	0x0800e6e0

0800d52c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d532:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <Get_SerialNum+0x44>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d538:	4b0e      	ldr	r3, [pc, #56]	; (800d574 <Get_SerialNum+0x48>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d53e:	4b0e      	ldr	r3, [pc, #56]	; (800d578 <Get_SerialNum+0x4c>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4413      	add	r3, r2
 800d54a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d009      	beq.n	800d566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d552:	2208      	movs	r2, #8
 800d554:	4909      	ldr	r1, [pc, #36]	; (800d57c <Get_SerialNum+0x50>)
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 f814 	bl	800d584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d55c:	2204      	movs	r2, #4
 800d55e:	4908      	ldr	r1, [pc, #32]	; (800d580 <Get_SerialNum+0x54>)
 800d560:	68b8      	ldr	r0, [r7, #8]
 800d562:	f000 f80f 	bl	800d584 <IntToUnicode>
  }
}
 800d566:	bf00      	nop
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	1fff7a10 	.word	0x1fff7a10
 800d574:	1fff7a14 	.word	0x1fff7a14
 800d578:	1fff7a18 	.word	0x1fff7a18
 800d57c:	200000f6 	.word	0x200000f6
 800d580:	20000106 	.word	0x20000106

0800d584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d584:	b480      	push	{r7}
 800d586:	b087      	sub	sp, #28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	4613      	mov	r3, r2
 800d590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d592:	2300      	movs	r3, #0
 800d594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d596:	2300      	movs	r3, #0
 800d598:	75fb      	strb	r3, [r7, #23]
 800d59a:	e027      	b.n	800d5ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	0f1b      	lsrs	r3, r3, #28
 800d5a0:	2b09      	cmp	r3, #9
 800d5a2:	d80b      	bhi.n	800d5bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	0f1b      	lsrs	r3, r3, #28
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	7dfb      	ldrb	r3, [r7, #23]
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	440b      	add	r3, r1
 800d5b4:	3230      	adds	r2, #48	; 0x30
 800d5b6:	b2d2      	uxtb	r2, r2
 800d5b8:	701a      	strb	r2, [r3, #0]
 800d5ba:	e00a      	b.n	800d5d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	0f1b      	lsrs	r3, r3, #28
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	440b      	add	r3, r1
 800d5cc:	3237      	adds	r2, #55	; 0x37
 800d5ce:	b2d2      	uxtb	r2, r2
 800d5d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	011b      	lsls	r3, r3, #4
 800d5d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d5d8:	7dfb      	ldrb	r3, [r7, #23]
 800d5da:	005b      	lsls	r3, r3, #1
 800d5dc:	3301      	adds	r3, #1
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d5e6:	7dfb      	ldrb	r3, [r7, #23]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	75fb      	strb	r3, [r7, #23]
 800d5ec:	7dfa      	ldrb	r2, [r7, #23]
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d3d3      	bcc.n	800d59c <IntToUnicode+0x18>
  }
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop
 800d5f8:	371c      	adds	r7, #28
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
	...

0800d604 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08a      	sub	sp, #40	; 0x28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d60c:	f107 0314 	add.w	r3, r7, #20
 800d610:	2200      	movs	r2, #0
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	605a      	str	r2, [r3, #4]
 800d616:	609a      	str	r2, [r3, #8]
 800d618:	60da      	str	r2, [r3, #12]
 800d61a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d624:	d13a      	bne.n	800d69c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d626:	2300      	movs	r3, #0
 800d628:	613b      	str	r3, [r7, #16]
 800d62a:	4b1e      	ldr	r3, [pc, #120]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62e:	4a1d      	ldr	r2, [pc, #116]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d630:	f043 0301 	orr.w	r3, r3, #1
 800d634:	6313      	str	r3, [r2, #48]	; 0x30
 800d636:	4b1b      	ldr	r3, [pc, #108]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63a:	f003 0301 	and.w	r3, r3, #1
 800d63e:	613b      	str	r3, [r7, #16]
 800d640:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d642:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d648:	2302      	movs	r3, #2
 800d64a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d64c:	2300      	movs	r3, #0
 800d64e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d650:	2303      	movs	r3, #3
 800d652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d654:	230a      	movs	r3, #10
 800d656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d658:	f107 0314 	add.w	r3, r7, #20
 800d65c:	4619      	mov	r1, r3
 800d65e:	4812      	ldr	r0, [pc, #72]	; (800d6a8 <HAL_PCD_MspInit+0xa4>)
 800d660:	f7f6 f92a 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d664:	4b0f      	ldr	r3, [pc, #60]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d668:	4a0e      	ldr	r2, [pc, #56]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d66e:	6353      	str	r3, [r2, #52]	; 0x34
 800d670:	2300      	movs	r3, #0
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	4b0b      	ldr	r3, [pc, #44]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d678:	4a0a      	ldr	r2, [pc, #40]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d67a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d67e:	6453      	str	r3, [r2, #68]	; 0x44
 800d680:	4b08      	ldr	r3, [pc, #32]	; (800d6a4 <HAL_PCD_MspInit+0xa0>)
 800d682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d688:	60fb      	str	r3, [r7, #12]
 800d68a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d68c:	2200      	movs	r2, #0
 800d68e:	2105      	movs	r1, #5
 800d690:	2043      	movs	r0, #67	; 0x43
 800d692:	f7f5 fde1 	bl	8003258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d696:	2043      	movs	r0, #67	; 0x43
 800d698:	f7f5 fdfa 	bl	8003290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d69c:	bf00      	nop
 800d69e:	3728      	adds	r7, #40	; 0x28
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	40023800 	.word	0x40023800
 800d6a8:	40020000 	.word	0x40020000

0800d6ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	4610      	mov	r0, r2
 800d6c4:	f7fb fd87 	bl	80091d6 <USBD_LL_SetupStage>
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d6e2:	78fa      	ldrb	r2, [r7, #3]
 800d6e4:	6879      	ldr	r1, [r7, #4]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	00db      	lsls	r3, r3, #3
 800d6ea:	4413      	add	r3, r2
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	440b      	add	r3, r1
 800d6f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	78fb      	ldrb	r3, [r7, #3]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f7fb fdc1 	bl	8009280 <USBD_LL_DataOutStage>
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b082      	sub	sp, #8
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	460b      	mov	r3, r1
 800d710:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d718:	78fa      	ldrb	r2, [r7, #3]
 800d71a:	6879      	ldr	r1, [r7, #4]
 800d71c:	4613      	mov	r3, r2
 800d71e:	00db      	lsls	r3, r3, #3
 800d720:	4413      	add	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	440b      	add	r3, r1
 800d726:	334c      	adds	r3, #76	; 0x4c
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	78fb      	ldrb	r3, [r7, #3]
 800d72c:	4619      	mov	r1, r3
 800d72e:	f7fb fe5a 	bl	80093e6 <USBD_LL_DataInStage>
}
 800d732:	bf00      	nop
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fb ff8e 	bl	800966a <USBD_LL_SOF>
}
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d75e:	2301      	movs	r3, #1
 800d760:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	2b02      	cmp	r3, #2
 800d768:	d001      	beq.n	800d76e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d76a:	f7f3 fc23 	bl	8000fb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d774:	7bfa      	ldrb	r2, [r7, #15]
 800d776:	4611      	mov	r1, r2
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fb ff38 	bl	80095ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d784:	4618      	mov	r0, r3
 800d786:	f7fb fee0 	bl	800954a <USBD_LL_Reset>
}
 800d78a:	bf00      	nop
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
	...

0800d794 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fb ff33 	bl	800960e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	6812      	ldr	r2, [r2, #0]
 800d7b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7ba:	f043 0301 	orr.w	r3, r3, #1
 800d7be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6a1b      	ldr	r3, [r3, #32]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7c8:	4b04      	ldr	r3, [pc, #16]	; (800d7dc <HAL_PCD_SuspendCallback+0x48>)
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	4a03      	ldr	r2, [pc, #12]	; (800d7dc <HAL_PCD_SuspendCallback+0x48>)
 800d7ce:	f043 0306 	orr.w	r3, r3, #6
 800d7d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	e000ed00 	.word	0xe000ed00

0800d7e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fb ff23 	bl	800963a <USBD_LL_Resume>
}
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	460b      	mov	r3, r1
 800d806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d80e:	78fa      	ldrb	r2, [r7, #3]
 800d810:	4611      	mov	r1, r2
 800d812:	4618      	mov	r0, r3
 800d814:	f7fb ff7b 	bl	800970e <USBD_LL_IsoOUTIncomplete>
}
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	460b      	mov	r3, r1
 800d82a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d832:	78fa      	ldrb	r2, [r7, #3]
 800d834:	4611      	mov	r1, r2
 800d836:	4618      	mov	r0, r3
 800d838:	f7fb ff37 	bl	80096aa <USBD_LL_IsoINIncomplete>
}
 800d83c:	bf00      	nop
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d852:	4618      	mov	r0, r3
 800d854:	f7fb ff8d 	bl	8009772 <USBD_LL_DevConnected>
}
 800d858:	bf00      	nop
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fb ff8a 	bl	8009788 <USBD_LL_DevDisconnected>
}
 800d874:	bf00      	nop
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d13c      	bne.n	800d906 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d88c:	4a20      	ldr	r2, [pc, #128]	; (800d910 <USBD_LL_Init+0x94>)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4a1e      	ldr	r2, [pc, #120]	; (800d910 <USBD_LL_Init+0x94>)
 800d898:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d89c:	4b1c      	ldr	r3, [pc, #112]	; (800d910 <USBD_LL_Init+0x94>)
 800d89e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d8a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d8a4:	4b1a      	ldr	r3, [pc, #104]	; (800d910 <USBD_LL_Init+0x94>)
 800d8a6:	2204      	movs	r2, #4
 800d8a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d8aa:	4b19      	ldr	r3, [pc, #100]	; (800d910 <USBD_LL_Init+0x94>)
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d8b0:	4b17      	ldr	r3, [pc, #92]	; (800d910 <USBD_LL_Init+0x94>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d8b6:	4b16      	ldr	r3, [pc, #88]	; (800d910 <USBD_LL_Init+0x94>)
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d8bc:	4b14      	ldr	r3, [pc, #80]	; (800d910 <USBD_LL_Init+0x94>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d8c2:	4b13      	ldr	r3, [pc, #76]	; (800d910 <USBD_LL_Init+0x94>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d8c8:	4b11      	ldr	r3, [pc, #68]	; (800d910 <USBD_LL_Init+0x94>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d8ce:	4b10      	ldr	r3, [pc, #64]	; (800d910 <USBD_LL_Init+0x94>)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <USBD_LL_Init+0x94>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d8da:	480d      	ldr	r0, [pc, #52]	; (800d910 <USBD_LL_Init+0x94>)
 800d8dc:	f7f6 f989 	bl	8003bf2 <HAL_PCD_Init>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d001      	beq.n	800d8ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d8e6:	f7f3 fb65 	bl	8000fb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d8ea:	2180      	movs	r1, #128	; 0x80
 800d8ec:	4808      	ldr	r0, [pc, #32]	; (800d910 <USBD_LL_Init+0x94>)
 800d8ee:	f7f7 fbe0 	bl	80050b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d8f2:	2240      	movs	r2, #64	; 0x40
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	4806      	ldr	r0, [pc, #24]	; (800d910 <USBD_LL_Init+0x94>)
 800d8f8:	f7f7 fb94 	bl	8005024 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d8fc:	2280      	movs	r2, #128	; 0x80
 800d8fe:	2101      	movs	r1, #1
 800d900:	4803      	ldr	r0, [pc, #12]	; (800d910 <USBD_LL_Init+0x94>)
 800d902:	f7f7 fb8f 	bl	8005024 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	20006368 	.word	0x20006368

0800d914 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d91c:	2300      	movs	r3, #0
 800d91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d920:	2300      	movs	r3, #0
 800d922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7f6 fa7e 	bl	8003e2c <HAL_PCD_Start>
 800d930:	4603      	mov	r3, r0
 800d932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d934:	7bfb      	ldrb	r3, [r7, #15]
 800d936:	4618      	mov	r0, r3
 800d938:	f000 f942 	bl	800dbc0 <USBD_Get_USB_Status>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d940:	7bbb      	ldrb	r3, [r7, #14]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b084      	sub	sp, #16
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	4608      	mov	r0, r1
 800d954:	4611      	mov	r1, r2
 800d956:	461a      	mov	r2, r3
 800d958:	4603      	mov	r3, r0
 800d95a:	70fb      	strb	r3, [r7, #3]
 800d95c:	460b      	mov	r3, r1
 800d95e:	70bb      	strb	r3, [r7, #2]
 800d960:	4613      	mov	r3, r2
 800d962:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d972:	78bb      	ldrb	r3, [r7, #2]
 800d974:	883a      	ldrh	r2, [r7, #0]
 800d976:	78f9      	ldrb	r1, [r7, #3]
 800d978:	f7f6 ff4f 	bl	800481a <HAL_PCD_EP_Open>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	4618      	mov	r0, r3
 800d984:	f000 f91c 	bl	800dbc0 <USBD_Get_USB_Status>
 800d988:	4603      	mov	r3, r0
 800d98a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b084      	sub	sp, #16
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9b0:	78fa      	ldrb	r2, [r7, #3]
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7f6 ff98 	bl	80048ea <HAL_PCD_EP_Close>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 f8fd 	bl	800dbc0 <USBD_Get_USB_Status>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9ee:	78fa      	ldrb	r2, [r7, #3]
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f7 f870 	bl	8004ad8 <HAL_PCD_EP_SetStall>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 f8de 	bl	800dbc0 <USBD_Get_USB_Status>
 800da04:	4603      	mov	r3, r0
 800da06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da08:	7bbb      	ldrb	r3, [r7, #14]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b084      	sub	sp, #16
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	460b      	mov	r3, r1
 800da1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da1e:	2300      	movs	r3, #0
 800da20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da2c:	78fa      	ldrb	r2, [r7, #3]
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f7f7 f8b5 	bl	8004ba0 <HAL_PCD_EP_ClrStall>
 800da36:	4603      	mov	r3, r0
 800da38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f000 f8bf 	bl	800dbc0 <USBD_Get_USB_Status>
 800da42:	4603      	mov	r3, r0
 800da44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da46:	7bbb      	ldrb	r3, [r7, #14]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	da0b      	bge.n	800da84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da6c:	78fb      	ldrb	r3, [r7, #3]
 800da6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da72:	68f9      	ldr	r1, [r7, #12]
 800da74:	4613      	mov	r3, r2
 800da76:	00db      	lsls	r3, r3, #3
 800da78:	4413      	add	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	440b      	add	r3, r1
 800da7e:	333e      	adds	r3, #62	; 0x3e
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	e00b      	b.n	800da9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da84:	78fb      	ldrb	r3, [r7, #3]
 800da86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da8a:	68f9      	ldr	r1, [r7, #12]
 800da8c:	4613      	mov	r3, r2
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	4413      	add	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	440b      	add	r3, r1
 800da96:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800da9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dac2:	78fa      	ldrb	r2, [r7, #3]
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7f6 fe82 	bl	80047d0 <HAL_PCD_SetAddress>
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 f874 	bl	800dbc0 <USBD_Get_USB_Status>
 800dad8:	4603      	mov	r3, r0
 800dada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b086      	sub	sp, #24
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	603b      	str	r3, [r7, #0]
 800daf2:	460b      	mov	r3, r1
 800daf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db04:	7af9      	ldrb	r1, [r7, #11]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	f7f6 ff9b 	bl	8004a44 <HAL_PCD_EP_Transmit>
 800db0e:	4603      	mov	r3, r0
 800db10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db12:	7dfb      	ldrb	r3, [r7, #23]
 800db14:	4618      	mov	r0, r3
 800db16:	f000 f853 	bl	800dbc0 <USBD_Get_USB_Status>
 800db1a:	4603      	mov	r3, r0
 800db1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db1e:	7dbb      	ldrb	r3, [r7, #22]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	607a      	str	r2, [r7, #4]
 800db32:	603b      	str	r3, [r7, #0]
 800db34:	460b      	mov	r3, r1
 800db36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db46:	7af9      	ldrb	r1, [r7, #11]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	f7f6 ff17 	bl	800497e <HAL_PCD_EP_Receive>
 800db50:	4603      	mov	r3, r0
 800db52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db54:	7dfb      	ldrb	r3, [r7, #23]
 800db56:	4618      	mov	r0, r3
 800db58:	f000 f832 	bl	800dbc0 <USBD_Get_USB_Status>
 800db5c:	4603      	mov	r3, r0
 800db5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db60:	7dbb      	ldrb	r3, [r7, #22]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3718      	adds	r7, #24
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b082      	sub	sp, #8
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	460b      	mov	r3, r1
 800db74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db7c:	78fa      	ldrb	r2, [r7, #3]
 800db7e:	4611      	mov	r1, r2
 800db80:	4618      	mov	r0, r3
 800db82:	f7f6 ff47 	bl	8004a14 <HAL_PCD_EP_GetRxCount>
 800db86:	4603      	mov	r3, r0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800db98:	4b03      	ldr	r3, [pc, #12]	; (800dba8 <USBD_static_malloc+0x18>)
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	20006874 	.word	0x20006874

0800dbac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]

}
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	2b03      	cmp	r3, #3
 800dbd2:	d817      	bhi.n	800dc04 <USBD_Get_USB_Status+0x44>
 800dbd4:	a201      	add	r2, pc, #4	; (adr r2, 800dbdc <USBD_Get_USB_Status+0x1c>)
 800dbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbda:	bf00      	nop
 800dbdc:	0800dbed 	.word	0x0800dbed
 800dbe0:	0800dbf3 	.word	0x0800dbf3
 800dbe4:	0800dbf9 	.word	0x0800dbf9
 800dbe8:	0800dbff 	.word	0x0800dbff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dbec:	2300      	movs	r3, #0
 800dbee:	73fb      	strb	r3, [r7, #15]
    break;
 800dbf0:	e00b      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	73fb      	strb	r3, [r7, #15]
    break;
 800dbf6:	e008      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	73fb      	strb	r3, [r7, #15]
    break;
 800dbfc:	e005      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	73fb      	strb	r3, [r7, #15]
    break;
 800dc02:	e002      	b.n	800dc0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc04:	2303      	movs	r3, #3
 800dc06:	73fb      	strb	r3, [r7, #15]
    break;
 800dc08:	bf00      	nop
  }
  return usb_status;
 800dc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3714      	adds	r7, #20
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <__errno>:
 800dc18:	4b01      	ldr	r3, [pc, #4]	; (800dc20 <__errno+0x8>)
 800dc1a:	6818      	ldr	r0, [r3, #0]
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	20000110 	.word	0x20000110

0800dc24 <__libc_init_array>:
 800dc24:	b570      	push	{r4, r5, r6, lr}
 800dc26:	4d0d      	ldr	r5, [pc, #52]	; (800dc5c <__libc_init_array+0x38>)
 800dc28:	4c0d      	ldr	r4, [pc, #52]	; (800dc60 <__libc_init_array+0x3c>)
 800dc2a:	1b64      	subs	r4, r4, r5
 800dc2c:	10a4      	asrs	r4, r4, #2
 800dc2e:	2600      	movs	r6, #0
 800dc30:	42a6      	cmp	r6, r4
 800dc32:	d109      	bne.n	800dc48 <__libc_init_array+0x24>
 800dc34:	4d0b      	ldr	r5, [pc, #44]	; (800dc64 <__libc_init_array+0x40>)
 800dc36:	4c0c      	ldr	r4, [pc, #48]	; (800dc68 <__libc_init_array+0x44>)
 800dc38:	f000 fcf8 	bl	800e62c <_init>
 800dc3c:	1b64      	subs	r4, r4, r5
 800dc3e:	10a4      	asrs	r4, r4, #2
 800dc40:	2600      	movs	r6, #0
 800dc42:	42a6      	cmp	r6, r4
 800dc44:	d105      	bne.n	800dc52 <__libc_init_array+0x2e>
 800dc46:	bd70      	pop	{r4, r5, r6, pc}
 800dc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc4c:	4798      	blx	r3
 800dc4e:	3601      	adds	r6, #1
 800dc50:	e7ee      	b.n	800dc30 <__libc_init_array+0xc>
 800dc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc56:	4798      	blx	r3
 800dc58:	3601      	adds	r6, #1
 800dc5a:	e7f2      	b.n	800dc42 <__libc_init_array+0x1e>
 800dc5c:	08012220 	.word	0x08012220
 800dc60:	08012220 	.word	0x08012220
 800dc64:	08012220 	.word	0x08012220
 800dc68:	08012224 	.word	0x08012224

0800dc6c <__retarget_lock_acquire_recursive>:
 800dc6c:	4770      	bx	lr

0800dc6e <__retarget_lock_release_recursive>:
 800dc6e:	4770      	bx	lr

0800dc70 <memcpy>:
 800dc70:	440a      	add	r2, r1
 800dc72:	4291      	cmp	r1, r2
 800dc74:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc78:	d100      	bne.n	800dc7c <memcpy+0xc>
 800dc7a:	4770      	bx	lr
 800dc7c:	b510      	push	{r4, lr}
 800dc7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc86:	4291      	cmp	r1, r2
 800dc88:	d1f9      	bne.n	800dc7e <memcpy+0xe>
 800dc8a:	bd10      	pop	{r4, pc}

0800dc8c <memset>:
 800dc8c:	4402      	add	r2, r0
 800dc8e:	4603      	mov	r3, r0
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d100      	bne.n	800dc96 <memset+0xa>
 800dc94:	4770      	bx	lr
 800dc96:	f803 1b01 	strb.w	r1, [r3], #1
 800dc9a:	e7f9      	b.n	800dc90 <memset+0x4>

0800dc9c <sbrk_aligned>:
 800dc9c:	b570      	push	{r4, r5, r6, lr}
 800dc9e:	4e0e      	ldr	r6, [pc, #56]	; (800dcd8 <sbrk_aligned+0x3c>)
 800dca0:	460c      	mov	r4, r1
 800dca2:	6831      	ldr	r1, [r6, #0]
 800dca4:	4605      	mov	r5, r0
 800dca6:	b911      	cbnz	r1, 800dcae <sbrk_aligned+0x12>
 800dca8:	f000 f8f6 	bl	800de98 <_sbrk_r>
 800dcac:	6030      	str	r0, [r6, #0]
 800dcae:	4621      	mov	r1, r4
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	f000 f8f1 	bl	800de98 <_sbrk_r>
 800dcb6:	1c43      	adds	r3, r0, #1
 800dcb8:	d00a      	beq.n	800dcd0 <sbrk_aligned+0x34>
 800dcba:	1cc4      	adds	r4, r0, #3
 800dcbc:	f024 0403 	bic.w	r4, r4, #3
 800dcc0:	42a0      	cmp	r0, r4
 800dcc2:	d007      	beq.n	800dcd4 <sbrk_aligned+0x38>
 800dcc4:	1a21      	subs	r1, r4, r0
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f000 f8e6 	bl	800de98 <_sbrk_r>
 800dccc:	3001      	adds	r0, #1
 800dcce:	d101      	bne.n	800dcd4 <sbrk_aligned+0x38>
 800dcd0:	f04f 34ff 	mov.w	r4, #4294967295
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	bd70      	pop	{r4, r5, r6, pc}
 800dcd8:	20006a9c 	.word	0x20006a9c

0800dcdc <_malloc_r>:
 800dcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce0:	1ccd      	adds	r5, r1, #3
 800dce2:	f025 0503 	bic.w	r5, r5, #3
 800dce6:	3508      	adds	r5, #8
 800dce8:	2d0c      	cmp	r5, #12
 800dcea:	bf38      	it	cc
 800dcec:	250c      	movcc	r5, #12
 800dcee:	2d00      	cmp	r5, #0
 800dcf0:	4607      	mov	r7, r0
 800dcf2:	db01      	blt.n	800dcf8 <_malloc_r+0x1c>
 800dcf4:	42a9      	cmp	r1, r5
 800dcf6:	d905      	bls.n	800dd04 <_malloc_r+0x28>
 800dcf8:	230c      	movs	r3, #12
 800dcfa:	603b      	str	r3, [r7, #0]
 800dcfc:	2600      	movs	r6, #0
 800dcfe:	4630      	mov	r0, r6
 800dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd04:	4e2e      	ldr	r6, [pc, #184]	; (800ddc0 <_malloc_r+0xe4>)
 800dd06:	f000 f8f7 	bl	800def8 <__malloc_lock>
 800dd0a:	6833      	ldr	r3, [r6, #0]
 800dd0c:	461c      	mov	r4, r3
 800dd0e:	bb34      	cbnz	r4, 800dd5e <_malloc_r+0x82>
 800dd10:	4629      	mov	r1, r5
 800dd12:	4638      	mov	r0, r7
 800dd14:	f7ff ffc2 	bl	800dc9c <sbrk_aligned>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	d14d      	bne.n	800ddba <_malloc_r+0xde>
 800dd1e:	6834      	ldr	r4, [r6, #0]
 800dd20:	4626      	mov	r6, r4
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	d140      	bne.n	800dda8 <_malloc_r+0xcc>
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	4631      	mov	r1, r6
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	eb04 0803 	add.w	r8, r4, r3
 800dd30:	f000 f8b2 	bl	800de98 <_sbrk_r>
 800dd34:	4580      	cmp	r8, r0
 800dd36:	d13a      	bne.n	800ddae <_malloc_r+0xd2>
 800dd38:	6821      	ldr	r1, [r4, #0]
 800dd3a:	3503      	adds	r5, #3
 800dd3c:	1a6d      	subs	r5, r5, r1
 800dd3e:	f025 0503 	bic.w	r5, r5, #3
 800dd42:	3508      	adds	r5, #8
 800dd44:	2d0c      	cmp	r5, #12
 800dd46:	bf38      	it	cc
 800dd48:	250c      	movcc	r5, #12
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	4638      	mov	r0, r7
 800dd4e:	f7ff ffa5 	bl	800dc9c <sbrk_aligned>
 800dd52:	3001      	adds	r0, #1
 800dd54:	d02b      	beq.n	800ddae <_malloc_r+0xd2>
 800dd56:	6823      	ldr	r3, [r4, #0]
 800dd58:	442b      	add	r3, r5
 800dd5a:	6023      	str	r3, [r4, #0]
 800dd5c:	e00e      	b.n	800dd7c <_malloc_r+0xa0>
 800dd5e:	6822      	ldr	r2, [r4, #0]
 800dd60:	1b52      	subs	r2, r2, r5
 800dd62:	d41e      	bmi.n	800dda2 <_malloc_r+0xc6>
 800dd64:	2a0b      	cmp	r2, #11
 800dd66:	d916      	bls.n	800dd96 <_malloc_r+0xba>
 800dd68:	1961      	adds	r1, r4, r5
 800dd6a:	42a3      	cmp	r3, r4
 800dd6c:	6025      	str	r5, [r4, #0]
 800dd6e:	bf18      	it	ne
 800dd70:	6059      	strne	r1, [r3, #4]
 800dd72:	6863      	ldr	r3, [r4, #4]
 800dd74:	bf08      	it	eq
 800dd76:	6031      	streq	r1, [r6, #0]
 800dd78:	5162      	str	r2, [r4, r5]
 800dd7a:	604b      	str	r3, [r1, #4]
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	f104 060b 	add.w	r6, r4, #11
 800dd82:	f000 f8bf 	bl	800df04 <__malloc_unlock>
 800dd86:	f026 0607 	bic.w	r6, r6, #7
 800dd8a:	1d23      	adds	r3, r4, #4
 800dd8c:	1af2      	subs	r2, r6, r3
 800dd8e:	d0b6      	beq.n	800dcfe <_malloc_r+0x22>
 800dd90:	1b9b      	subs	r3, r3, r6
 800dd92:	50a3      	str	r3, [r4, r2]
 800dd94:	e7b3      	b.n	800dcfe <_malloc_r+0x22>
 800dd96:	6862      	ldr	r2, [r4, #4]
 800dd98:	42a3      	cmp	r3, r4
 800dd9a:	bf0c      	ite	eq
 800dd9c:	6032      	streq	r2, [r6, #0]
 800dd9e:	605a      	strne	r2, [r3, #4]
 800dda0:	e7ec      	b.n	800dd7c <_malloc_r+0xa0>
 800dda2:	4623      	mov	r3, r4
 800dda4:	6864      	ldr	r4, [r4, #4]
 800dda6:	e7b2      	b.n	800dd0e <_malloc_r+0x32>
 800dda8:	4634      	mov	r4, r6
 800ddaa:	6876      	ldr	r6, [r6, #4]
 800ddac:	e7b9      	b.n	800dd22 <_malloc_r+0x46>
 800ddae:	230c      	movs	r3, #12
 800ddb0:	603b      	str	r3, [r7, #0]
 800ddb2:	4638      	mov	r0, r7
 800ddb4:	f000 f8a6 	bl	800df04 <__malloc_unlock>
 800ddb8:	e7a1      	b.n	800dcfe <_malloc_r+0x22>
 800ddba:	6025      	str	r5, [r4, #0]
 800ddbc:	e7de      	b.n	800dd7c <_malloc_r+0xa0>
 800ddbe:	bf00      	nop
 800ddc0:	20006a98 	.word	0x20006a98

0800ddc4 <cleanup_glue>:
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	6809      	ldr	r1, [r1, #0]
 800ddca:	4605      	mov	r5, r0
 800ddcc:	b109      	cbz	r1, 800ddd2 <cleanup_glue+0xe>
 800ddce:	f7ff fff9 	bl	800ddc4 <cleanup_glue>
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddda:	f000 b899 	b.w	800df10 <_free_r>
	...

0800dde0 <_reclaim_reent>:
 800dde0:	4b2c      	ldr	r3, [pc, #176]	; (800de94 <_reclaim_reent+0xb4>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4283      	cmp	r3, r0
 800dde6:	b570      	push	{r4, r5, r6, lr}
 800dde8:	4604      	mov	r4, r0
 800ddea:	d051      	beq.n	800de90 <_reclaim_reent+0xb0>
 800ddec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ddee:	b143      	cbz	r3, 800de02 <_reclaim_reent+0x22>
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d14a      	bne.n	800de8c <_reclaim_reent+0xac>
 800ddf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf8:	6819      	ldr	r1, [r3, #0]
 800ddfa:	b111      	cbz	r1, 800de02 <_reclaim_reent+0x22>
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f000 f887 	bl	800df10 <_free_r>
 800de02:	6961      	ldr	r1, [r4, #20]
 800de04:	b111      	cbz	r1, 800de0c <_reclaim_reent+0x2c>
 800de06:	4620      	mov	r0, r4
 800de08:	f000 f882 	bl	800df10 <_free_r>
 800de0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800de0e:	b111      	cbz	r1, 800de16 <_reclaim_reent+0x36>
 800de10:	4620      	mov	r0, r4
 800de12:	f000 f87d 	bl	800df10 <_free_r>
 800de16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de18:	b111      	cbz	r1, 800de20 <_reclaim_reent+0x40>
 800de1a:	4620      	mov	r0, r4
 800de1c:	f000 f878 	bl	800df10 <_free_r>
 800de20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de22:	b111      	cbz	r1, 800de2a <_reclaim_reent+0x4a>
 800de24:	4620      	mov	r0, r4
 800de26:	f000 f873 	bl	800df10 <_free_r>
 800de2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de2c:	b111      	cbz	r1, 800de34 <_reclaim_reent+0x54>
 800de2e:	4620      	mov	r0, r4
 800de30:	f000 f86e 	bl	800df10 <_free_r>
 800de34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800de36:	b111      	cbz	r1, 800de3e <_reclaim_reent+0x5e>
 800de38:	4620      	mov	r0, r4
 800de3a:	f000 f869 	bl	800df10 <_free_r>
 800de3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800de40:	b111      	cbz	r1, 800de48 <_reclaim_reent+0x68>
 800de42:	4620      	mov	r0, r4
 800de44:	f000 f864 	bl	800df10 <_free_r>
 800de48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de4a:	b111      	cbz	r1, 800de52 <_reclaim_reent+0x72>
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 f85f 	bl	800df10 <_free_r>
 800de52:	69a3      	ldr	r3, [r4, #24]
 800de54:	b1e3      	cbz	r3, 800de90 <_reclaim_reent+0xb0>
 800de56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800de58:	4620      	mov	r0, r4
 800de5a:	4798      	blx	r3
 800de5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800de5e:	b1b9      	cbz	r1, 800de90 <_reclaim_reent+0xb0>
 800de60:	4620      	mov	r0, r4
 800de62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de66:	f7ff bfad 	b.w	800ddc4 <cleanup_glue>
 800de6a:	5949      	ldr	r1, [r1, r5]
 800de6c:	b941      	cbnz	r1, 800de80 <_reclaim_reent+0xa0>
 800de6e:	3504      	adds	r5, #4
 800de70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de72:	2d80      	cmp	r5, #128	; 0x80
 800de74:	68d9      	ldr	r1, [r3, #12]
 800de76:	d1f8      	bne.n	800de6a <_reclaim_reent+0x8a>
 800de78:	4620      	mov	r0, r4
 800de7a:	f000 f849 	bl	800df10 <_free_r>
 800de7e:	e7ba      	b.n	800ddf6 <_reclaim_reent+0x16>
 800de80:	680e      	ldr	r6, [r1, #0]
 800de82:	4620      	mov	r0, r4
 800de84:	f000 f844 	bl	800df10 <_free_r>
 800de88:	4631      	mov	r1, r6
 800de8a:	e7ef      	b.n	800de6c <_reclaim_reent+0x8c>
 800de8c:	2500      	movs	r5, #0
 800de8e:	e7ef      	b.n	800de70 <_reclaim_reent+0x90>
 800de90:	bd70      	pop	{r4, r5, r6, pc}
 800de92:	bf00      	nop
 800de94:	20000110 	.word	0x20000110

0800de98 <_sbrk_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4d06      	ldr	r5, [pc, #24]	; (800deb4 <_sbrk_r+0x1c>)
 800de9c:	2300      	movs	r3, #0
 800de9e:	4604      	mov	r4, r0
 800dea0:	4608      	mov	r0, r1
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	f7f4 fbfe 	bl	80026a4 <_sbrk>
 800dea8:	1c43      	adds	r3, r0, #1
 800deaa:	d102      	bne.n	800deb2 <_sbrk_r+0x1a>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	b103      	cbz	r3, 800deb2 <_sbrk_r+0x1a>
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	bd38      	pop	{r3, r4, r5, pc}
 800deb4:	20006aa0 	.word	0x20006aa0

0800deb8 <siprintf>:
 800deb8:	b40e      	push	{r1, r2, r3}
 800deba:	b500      	push	{lr}
 800debc:	b09c      	sub	sp, #112	; 0x70
 800debe:	ab1d      	add	r3, sp, #116	; 0x74
 800dec0:	9002      	str	r0, [sp, #8]
 800dec2:	9006      	str	r0, [sp, #24]
 800dec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dec8:	4809      	ldr	r0, [pc, #36]	; (800def0 <siprintf+0x38>)
 800deca:	9107      	str	r1, [sp, #28]
 800decc:	9104      	str	r1, [sp, #16]
 800dece:	4909      	ldr	r1, [pc, #36]	; (800def4 <siprintf+0x3c>)
 800ded0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded4:	9105      	str	r1, [sp, #20]
 800ded6:	6800      	ldr	r0, [r0, #0]
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	a902      	add	r1, sp, #8
 800dedc:	f000 f8c0 	bl	800e060 <_svfiprintf_r>
 800dee0:	9b02      	ldr	r3, [sp, #8]
 800dee2:	2200      	movs	r2, #0
 800dee4:	701a      	strb	r2, [r3, #0]
 800dee6:	b01c      	add	sp, #112	; 0x70
 800dee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800deec:	b003      	add	sp, #12
 800deee:	4770      	bx	lr
 800def0:	20000110 	.word	0x20000110
 800def4:	ffff0208 	.word	0xffff0208

0800def8 <__malloc_lock>:
 800def8:	4801      	ldr	r0, [pc, #4]	; (800df00 <__malloc_lock+0x8>)
 800defa:	f7ff beb7 	b.w	800dc6c <__retarget_lock_acquire_recursive>
 800defe:	bf00      	nop
 800df00:	20006a94 	.word	0x20006a94

0800df04 <__malloc_unlock>:
 800df04:	4801      	ldr	r0, [pc, #4]	; (800df0c <__malloc_unlock+0x8>)
 800df06:	f7ff beb2 	b.w	800dc6e <__retarget_lock_release_recursive>
 800df0a:	bf00      	nop
 800df0c:	20006a94 	.word	0x20006a94

0800df10 <_free_r>:
 800df10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df12:	2900      	cmp	r1, #0
 800df14:	d044      	beq.n	800dfa0 <_free_r+0x90>
 800df16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df1a:	9001      	str	r0, [sp, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f1a1 0404 	sub.w	r4, r1, #4
 800df22:	bfb8      	it	lt
 800df24:	18e4      	addlt	r4, r4, r3
 800df26:	f7ff ffe7 	bl	800def8 <__malloc_lock>
 800df2a:	4a1e      	ldr	r2, [pc, #120]	; (800dfa4 <_free_r+0x94>)
 800df2c:	9801      	ldr	r0, [sp, #4]
 800df2e:	6813      	ldr	r3, [r2, #0]
 800df30:	b933      	cbnz	r3, 800df40 <_free_r+0x30>
 800df32:	6063      	str	r3, [r4, #4]
 800df34:	6014      	str	r4, [r2, #0]
 800df36:	b003      	add	sp, #12
 800df38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df3c:	f7ff bfe2 	b.w	800df04 <__malloc_unlock>
 800df40:	42a3      	cmp	r3, r4
 800df42:	d908      	bls.n	800df56 <_free_r+0x46>
 800df44:	6825      	ldr	r5, [r4, #0]
 800df46:	1961      	adds	r1, r4, r5
 800df48:	428b      	cmp	r3, r1
 800df4a:	bf01      	itttt	eq
 800df4c:	6819      	ldreq	r1, [r3, #0]
 800df4e:	685b      	ldreq	r3, [r3, #4]
 800df50:	1949      	addeq	r1, r1, r5
 800df52:	6021      	streq	r1, [r4, #0]
 800df54:	e7ed      	b.n	800df32 <_free_r+0x22>
 800df56:	461a      	mov	r2, r3
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	b10b      	cbz	r3, 800df60 <_free_r+0x50>
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	d9fa      	bls.n	800df56 <_free_r+0x46>
 800df60:	6811      	ldr	r1, [r2, #0]
 800df62:	1855      	adds	r5, r2, r1
 800df64:	42a5      	cmp	r5, r4
 800df66:	d10b      	bne.n	800df80 <_free_r+0x70>
 800df68:	6824      	ldr	r4, [r4, #0]
 800df6a:	4421      	add	r1, r4
 800df6c:	1854      	adds	r4, r2, r1
 800df6e:	42a3      	cmp	r3, r4
 800df70:	6011      	str	r1, [r2, #0]
 800df72:	d1e0      	bne.n	800df36 <_free_r+0x26>
 800df74:	681c      	ldr	r4, [r3, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	6053      	str	r3, [r2, #4]
 800df7a:	4421      	add	r1, r4
 800df7c:	6011      	str	r1, [r2, #0]
 800df7e:	e7da      	b.n	800df36 <_free_r+0x26>
 800df80:	d902      	bls.n	800df88 <_free_r+0x78>
 800df82:	230c      	movs	r3, #12
 800df84:	6003      	str	r3, [r0, #0]
 800df86:	e7d6      	b.n	800df36 <_free_r+0x26>
 800df88:	6825      	ldr	r5, [r4, #0]
 800df8a:	1961      	adds	r1, r4, r5
 800df8c:	428b      	cmp	r3, r1
 800df8e:	bf04      	itt	eq
 800df90:	6819      	ldreq	r1, [r3, #0]
 800df92:	685b      	ldreq	r3, [r3, #4]
 800df94:	6063      	str	r3, [r4, #4]
 800df96:	bf04      	itt	eq
 800df98:	1949      	addeq	r1, r1, r5
 800df9a:	6021      	streq	r1, [r4, #0]
 800df9c:	6054      	str	r4, [r2, #4]
 800df9e:	e7ca      	b.n	800df36 <_free_r+0x26>
 800dfa0:	b003      	add	sp, #12
 800dfa2:	bd30      	pop	{r4, r5, pc}
 800dfa4:	20006a98 	.word	0x20006a98

0800dfa8 <__ssputs_r>:
 800dfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfac:	688e      	ldr	r6, [r1, #8]
 800dfae:	429e      	cmp	r6, r3
 800dfb0:	4682      	mov	sl, r0
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	4690      	mov	r8, r2
 800dfb6:	461f      	mov	r7, r3
 800dfb8:	d838      	bhi.n	800e02c <__ssputs_r+0x84>
 800dfba:	898a      	ldrh	r2, [r1, #12]
 800dfbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfc0:	d032      	beq.n	800e028 <__ssputs_r+0x80>
 800dfc2:	6825      	ldr	r5, [r4, #0]
 800dfc4:	6909      	ldr	r1, [r1, #16]
 800dfc6:	eba5 0901 	sub.w	r9, r5, r1
 800dfca:	6965      	ldr	r5, [r4, #20]
 800dfcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	444b      	add	r3, r9
 800dfd8:	106d      	asrs	r5, r5, #1
 800dfda:	429d      	cmp	r5, r3
 800dfdc:	bf38      	it	cc
 800dfde:	461d      	movcc	r5, r3
 800dfe0:	0553      	lsls	r3, r2, #21
 800dfe2:	d531      	bpl.n	800e048 <__ssputs_r+0xa0>
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	f7ff fe79 	bl	800dcdc <_malloc_r>
 800dfea:	4606      	mov	r6, r0
 800dfec:	b950      	cbnz	r0, 800e004 <__ssputs_r+0x5c>
 800dfee:	230c      	movs	r3, #12
 800dff0:	f8ca 3000 	str.w	r3, [sl]
 800dff4:	89a3      	ldrh	r3, [r4, #12]
 800dff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dffa:	81a3      	strh	r3, [r4, #12]
 800dffc:	f04f 30ff 	mov.w	r0, #4294967295
 800e000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e004:	6921      	ldr	r1, [r4, #16]
 800e006:	464a      	mov	r2, r9
 800e008:	f7ff fe32 	bl	800dc70 <memcpy>
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e016:	81a3      	strh	r3, [r4, #12]
 800e018:	6126      	str	r6, [r4, #16]
 800e01a:	6165      	str	r5, [r4, #20]
 800e01c:	444e      	add	r6, r9
 800e01e:	eba5 0509 	sub.w	r5, r5, r9
 800e022:	6026      	str	r6, [r4, #0]
 800e024:	60a5      	str	r5, [r4, #8]
 800e026:	463e      	mov	r6, r7
 800e028:	42be      	cmp	r6, r7
 800e02a:	d900      	bls.n	800e02e <__ssputs_r+0x86>
 800e02c:	463e      	mov	r6, r7
 800e02e:	6820      	ldr	r0, [r4, #0]
 800e030:	4632      	mov	r2, r6
 800e032:	4641      	mov	r1, r8
 800e034:	f000 faa8 	bl	800e588 <memmove>
 800e038:	68a3      	ldr	r3, [r4, #8]
 800e03a:	1b9b      	subs	r3, r3, r6
 800e03c:	60a3      	str	r3, [r4, #8]
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	4433      	add	r3, r6
 800e042:	6023      	str	r3, [r4, #0]
 800e044:	2000      	movs	r0, #0
 800e046:	e7db      	b.n	800e000 <__ssputs_r+0x58>
 800e048:	462a      	mov	r2, r5
 800e04a:	f000 fab7 	bl	800e5bc <_realloc_r>
 800e04e:	4606      	mov	r6, r0
 800e050:	2800      	cmp	r0, #0
 800e052:	d1e1      	bne.n	800e018 <__ssputs_r+0x70>
 800e054:	6921      	ldr	r1, [r4, #16]
 800e056:	4650      	mov	r0, sl
 800e058:	f7ff ff5a 	bl	800df10 <_free_r>
 800e05c:	e7c7      	b.n	800dfee <__ssputs_r+0x46>
	...

0800e060 <_svfiprintf_r>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	4698      	mov	r8, r3
 800e066:	898b      	ldrh	r3, [r1, #12]
 800e068:	061b      	lsls	r3, r3, #24
 800e06a:	b09d      	sub	sp, #116	; 0x74
 800e06c:	4607      	mov	r7, r0
 800e06e:	460d      	mov	r5, r1
 800e070:	4614      	mov	r4, r2
 800e072:	d50e      	bpl.n	800e092 <_svfiprintf_r+0x32>
 800e074:	690b      	ldr	r3, [r1, #16]
 800e076:	b963      	cbnz	r3, 800e092 <_svfiprintf_r+0x32>
 800e078:	2140      	movs	r1, #64	; 0x40
 800e07a:	f7ff fe2f 	bl	800dcdc <_malloc_r>
 800e07e:	6028      	str	r0, [r5, #0]
 800e080:	6128      	str	r0, [r5, #16]
 800e082:	b920      	cbnz	r0, 800e08e <_svfiprintf_r+0x2e>
 800e084:	230c      	movs	r3, #12
 800e086:	603b      	str	r3, [r7, #0]
 800e088:	f04f 30ff 	mov.w	r0, #4294967295
 800e08c:	e0d1      	b.n	800e232 <_svfiprintf_r+0x1d2>
 800e08e:	2340      	movs	r3, #64	; 0x40
 800e090:	616b      	str	r3, [r5, #20]
 800e092:	2300      	movs	r3, #0
 800e094:	9309      	str	r3, [sp, #36]	; 0x24
 800e096:	2320      	movs	r3, #32
 800e098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0a0:	2330      	movs	r3, #48	; 0x30
 800e0a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e24c <_svfiprintf_r+0x1ec>
 800e0a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0aa:	f04f 0901 	mov.w	r9, #1
 800e0ae:	4623      	mov	r3, r4
 800e0b0:	469a      	mov	sl, r3
 800e0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b6:	b10a      	cbz	r2, 800e0bc <_svfiprintf_r+0x5c>
 800e0b8:	2a25      	cmp	r2, #37	; 0x25
 800e0ba:	d1f9      	bne.n	800e0b0 <_svfiprintf_r+0x50>
 800e0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e0c0:	d00b      	beq.n	800e0da <_svfiprintf_r+0x7a>
 800e0c2:	465b      	mov	r3, fp
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	f7ff ff6d 	bl	800dfa8 <__ssputs_r>
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	f000 80aa 	beq.w	800e228 <_svfiprintf_r+0x1c8>
 800e0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0d6:	445a      	add	r2, fp
 800e0d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e0da:	f89a 3000 	ldrb.w	r3, [sl]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 80a2 	beq.w	800e228 <_svfiprintf_r+0x1c8>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0ee:	f10a 0a01 	add.w	sl, sl, #1
 800e0f2:	9304      	str	r3, [sp, #16]
 800e0f4:	9307      	str	r3, [sp, #28]
 800e0f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e0fc:	4654      	mov	r4, sl
 800e0fe:	2205      	movs	r2, #5
 800e100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e104:	4851      	ldr	r0, [pc, #324]	; (800e24c <_svfiprintf_r+0x1ec>)
 800e106:	f7f2 f873 	bl	80001f0 <memchr>
 800e10a:	9a04      	ldr	r2, [sp, #16]
 800e10c:	b9d8      	cbnz	r0, 800e146 <_svfiprintf_r+0xe6>
 800e10e:	06d0      	lsls	r0, r2, #27
 800e110:	bf44      	itt	mi
 800e112:	2320      	movmi	r3, #32
 800e114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e118:	0711      	lsls	r1, r2, #28
 800e11a:	bf44      	itt	mi
 800e11c:	232b      	movmi	r3, #43	; 0x2b
 800e11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e122:	f89a 3000 	ldrb.w	r3, [sl]
 800e126:	2b2a      	cmp	r3, #42	; 0x2a
 800e128:	d015      	beq.n	800e156 <_svfiprintf_r+0xf6>
 800e12a:	9a07      	ldr	r2, [sp, #28]
 800e12c:	4654      	mov	r4, sl
 800e12e:	2000      	movs	r0, #0
 800e130:	f04f 0c0a 	mov.w	ip, #10
 800e134:	4621      	mov	r1, r4
 800e136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e13a:	3b30      	subs	r3, #48	; 0x30
 800e13c:	2b09      	cmp	r3, #9
 800e13e:	d94e      	bls.n	800e1de <_svfiprintf_r+0x17e>
 800e140:	b1b0      	cbz	r0, 800e170 <_svfiprintf_r+0x110>
 800e142:	9207      	str	r2, [sp, #28]
 800e144:	e014      	b.n	800e170 <_svfiprintf_r+0x110>
 800e146:	eba0 0308 	sub.w	r3, r0, r8
 800e14a:	fa09 f303 	lsl.w	r3, r9, r3
 800e14e:	4313      	orrs	r3, r2
 800e150:	9304      	str	r3, [sp, #16]
 800e152:	46a2      	mov	sl, r4
 800e154:	e7d2      	b.n	800e0fc <_svfiprintf_r+0x9c>
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	1d19      	adds	r1, r3, #4
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	9103      	str	r1, [sp, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	bfbb      	ittet	lt
 800e162:	425b      	neglt	r3, r3
 800e164:	f042 0202 	orrlt.w	r2, r2, #2
 800e168:	9307      	strge	r3, [sp, #28]
 800e16a:	9307      	strlt	r3, [sp, #28]
 800e16c:	bfb8      	it	lt
 800e16e:	9204      	strlt	r2, [sp, #16]
 800e170:	7823      	ldrb	r3, [r4, #0]
 800e172:	2b2e      	cmp	r3, #46	; 0x2e
 800e174:	d10c      	bne.n	800e190 <_svfiprintf_r+0x130>
 800e176:	7863      	ldrb	r3, [r4, #1]
 800e178:	2b2a      	cmp	r3, #42	; 0x2a
 800e17a:	d135      	bne.n	800e1e8 <_svfiprintf_r+0x188>
 800e17c:	9b03      	ldr	r3, [sp, #12]
 800e17e:	1d1a      	adds	r2, r3, #4
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	9203      	str	r2, [sp, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	bfb8      	it	lt
 800e188:	f04f 33ff 	movlt.w	r3, #4294967295
 800e18c:	3402      	adds	r4, #2
 800e18e:	9305      	str	r3, [sp, #20]
 800e190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e25c <_svfiprintf_r+0x1fc>
 800e194:	7821      	ldrb	r1, [r4, #0]
 800e196:	2203      	movs	r2, #3
 800e198:	4650      	mov	r0, sl
 800e19a:	f7f2 f829 	bl	80001f0 <memchr>
 800e19e:	b140      	cbz	r0, 800e1b2 <_svfiprintf_r+0x152>
 800e1a0:	2340      	movs	r3, #64	; 0x40
 800e1a2:	eba0 000a 	sub.w	r0, r0, sl
 800e1a6:	fa03 f000 	lsl.w	r0, r3, r0
 800e1aa:	9b04      	ldr	r3, [sp, #16]
 800e1ac:	4303      	orrs	r3, r0
 800e1ae:	3401      	adds	r4, #1
 800e1b0:	9304      	str	r3, [sp, #16]
 800e1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1b6:	4826      	ldr	r0, [pc, #152]	; (800e250 <_svfiprintf_r+0x1f0>)
 800e1b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1bc:	2206      	movs	r2, #6
 800e1be:	f7f2 f817 	bl	80001f0 <memchr>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d038      	beq.n	800e238 <_svfiprintf_r+0x1d8>
 800e1c6:	4b23      	ldr	r3, [pc, #140]	; (800e254 <_svfiprintf_r+0x1f4>)
 800e1c8:	bb1b      	cbnz	r3, 800e212 <_svfiprintf_r+0x1b2>
 800e1ca:	9b03      	ldr	r3, [sp, #12]
 800e1cc:	3307      	adds	r3, #7
 800e1ce:	f023 0307 	bic.w	r3, r3, #7
 800e1d2:	3308      	adds	r3, #8
 800e1d4:	9303      	str	r3, [sp, #12]
 800e1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d8:	4433      	add	r3, r6
 800e1da:	9309      	str	r3, [sp, #36]	; 0x24
 800e1dc:	e767      	b.n	800e0ae <_svfiprintf_r+0x4e>
 800e1de:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	2001      	movs	r0, #1
 800e1e6:	e7a5      	b.n	800e134 <_svfiprintf_r+0xd4>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	3401      	adds	r4, #1
 800e1ec:	9305      	str	r3, [sp, #20]
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	f04f 0c0a 	mov.w	ip, #10
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1fa:	3a30      	subs	r2, #48	; 0x30
 800e1fc:	2a09      	cmp	r2, #9
 800e1fe:	d903      	bls.n	800e208 <_svfiprintf_r+0x1a8>
 800e200:	2b00      	cmp	r3, #0
 800e202:	d0c5      	beq.n	800e190 <_svfiprintf_r+0x130>
 800e204:	9105      	str	r1, [sp, #20]
 800e206:	e7c3      	b.n	800e190 <_svfiprintf_r+0x130>
 800e208:	fb0c 2101 	mla	r1, ip, r1, r2
 800e20c:	4604      	mov	r4, r0
 800e20e:	2301      	movs	r3, #1
 800e210:	e7f0      	b.n	800e1f4 <_svfiprintf_r+0x194>
 800e212:	ab03      	add	r3, sp, #12
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	462a      	mov	r2, r5
 800e218:	4b0f      	ldr	r3, [pc, #60]	; (800e258 <_svfiprintf_r+0x1f8>)
 800e21a:	a904      	add	r1, sp, #16
 800e21c:	4638      	mov	r0, r7
 800e21e:	f3af 8000 	nop.w
 800e222:	1c42      	adds	r2, r0, #1
 800e224:	4606      	mov	r6, r0
 800e226:	d1d6      	bne.n	800e1d6 <_svfiprintf_r+0x176>
 800e228:	89ab      	ldrh	r3, [r5, #12]
 800e22a:	065b      	lsls	r3, r3, #25
 800e22c:	f53f af2c 	bmi.w	800e088 <_svfiprintf_r+0x28>
 800e230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e232:	b01d      	add	sp, #116	; 0x74
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	ab03      	add	r3, sp, #12
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	462a      	mov	r2, r5
 800e23e:	4b06      	ldr	r3, [pc, #24]	; (800e258 <_svfiprintf_r+0x1f8>)
 800e240:	a904      	add	r1, sp, #16
 800e242:	4638      	mov	r0, r7
 800e244:	f000 f87a 	bl	800e33c <_printf_i>
 800e248:	e7eb      	b.n	800e222 <_svfiprintf_r+0x1c2>
 800e24a:	bf00      	nop
 800e24c:	080121e4 	.word	0x080121e4
 800e250:	080121ee 	.word	0x080121ee
 800e254:	00000000 	.word	0x00000000
 800e258:	0800dfa9 	.word	0x0800dfa9
 800e25c:	080121ea 	.word	0x080121ea

0800e260 <_printf_common>:
 800e260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e264:	4616      	mov	r6, r2
 800e266:	4699      	mov	r9, r3
 800e268:	688a      	ldr	r2, [r1, #8]
 800e26a:	690b      	ldr	r3, [r1, #16]
 800e26c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e270:	4293      	cmp	r3, r2
 800e272:	bfb8      	it	lt
 800e274:	4613      	movlt	r3, r2
 800e276:	6033      	str	r3, [r6, #0]
 800e278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e27c:	4607      	mov	r7, r0
 800e27e:	460c      	mov	r4, r1
 800e280:	b10a      	cbz	r2, 800e286 <_printf_common+0x26>
 800e282:	3301      	adds	r3, #1
 800e284:	6033      	str	r3, [r6, #0]
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	0699      	lsls	r1, r3, #26
 800e28a:	bf42      	ittt	mi
 800e28c:	6833      	ldrmi	r3, [r6, #0]
 800e28e:	3302      	addmi	r3, #2
 800e290:	6033      	strmi	r3, [r6, #0]
 800e292:	6825      	ldr	r5, [r4, #0]
 800e294:	f015 0506 	ands.w	r5, r5, #6
 800e298:	d106      	bne.n	800e2a8 <_printf_common+0x48>
 800e29a:	f104 0a19 	add.w	sl, r4, #25
 800e29e:	68e3      	ldr	r3, [r4, #12]
 800e2a0:	6832      	ldr	r2, [r6, #0]
 800e2a2:	1a9b      	subs	r3, r3, r2
 800e2a4:	42ab      	cmp	r3, r5
 800e2a6:	dc26      	bgt.n	800e2f6 <_printf_common+0x96>
 800e2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2ac:	1e13      	subs	r3, r2, #0
 800e2ae:	6822      	ldr	r2, [r4, #0]
 800e2b0:	bf18      	it	ne
 800e2b2:	2301      	movne	r3, #1
 800e2b4:	0692      	lsls	r2, r2, #26
 800e2b6:	d42b      	bmi.n	800e310 <_printf_common+0xb0>
 800e2b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2bc:	4649      	mov	r1, r9
 800e2be:	4638      	mov	r0, r7
 800e2c0:	47c0      	blx	r8
 800e2c2:	3001      	adds	r0, #1
 800e2c4:	d01e      	beq.n	800e304 <_printf_common+0xa4>
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	68e5      	ldr	r5, [r4, #12]
 800e2ca:	6832      	ldr	r2, [r6, #0]
 800e2cc:	f003 0306 	and.w	r3, r3, #6
 800e2d0:	2b04      	cmp	r3, #4
 800e2d2:	bf08      	it	eq
 800e2d4:	1aad      	subeq	r5, r5, r2
 800e2d6:	68a3      	ldr	r3, [r4, #8]
 800e2d8:	6922      	ldr	r2, [r4, #16]
 800e2da:	bf0c      	ite	eq
 800e2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2e0:	2500      	movne	r5, #0
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	bfc4      	itt	gt
 800e2e6:	1a9b      	subgt	r3, r3, r2
 800e2e8:	18ed      	addgt	r5, r5, r3
 800e2ea:	2600      	movs	r6, #0
 800e2ec:	341a      	adds	r4, #26
 800e2ee:	42b5      	cmp	r5, r6
 800e2f0:	d11a      	bne.n	800e328 <_printf_common+0xc8>
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	e008      	b.n	800e308 <_printf_common+0xa8>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	4652      	mov	r2, sl
 800e2fa:	4649      	mov	r1, r9
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	47c0      	blx	r8
 800e300:	3001      	adds	r0, #1
 800e302:	d103      	bne.n	800e30c <_printf_common+0xac>
 800e304:	f04f 30ff 	mov.w	r0, #4294967295
 800e308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e30c:	3501      	adds	r5, #1
 800e30e:	e7c6      	b.n	800e29e <_printf_common+0x3e>
 800e310:	18e1      	adds	r1, r4, r3
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	2030      	movs	r0, #48	; 0x30
 800e316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e31a:	4422      	add	r2, r4
 800e31c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e324:	3302      	adds	r3, #2
 800e326:	e7c7      	b.n	800e2b8 <_printf_common+0x58>
 800e328:	2301      	movs	r3, #1
 800e32a:	4622      	mov	r2, r4
 800e32c:	4649      	mov	r1, r9
 800e32e:	4638      	mov	r0, r7
 800e330:	47c0      	blx	r8
 800e332:	3001      	adds	r0, #1
 800e334:	d0e6      	beq.n	800e304 <_printf_common+0xa4>
 800e336:	3601      	adds	r6, #1
 800e338:	e7d9      	b.n	800e2ee <_printf_common+0x8e>
	...

0800e33c <_printf_i>:
 800e33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e340:	7e0f      	ldrb	r7, [r1, #24]
 800e342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e344:	2f78      	cmp	r7, #120	; 0x78
 800e346:	4691      	mov	r9, r2
 800e348:	4680      	mov	r8, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	469a      	mov	sl, r3
 800e34e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e352:	d807      	bhi.n	800e364 <_printf_i+0x28>
 800e354:	2f62      	cmp	r7, #98	; 0x62
 800e356:	d80a      	bhi.n	800e36e <_printf_i+0x32>
 800e358:	2f00      	cmp	r7, #0
 800e35a:	f000 80d8 	beq.w	800e50e <_printf_i+0x1d2>
 800e35e:	2f58      	cmp	r7, #88	; 0x58
 800e360:	f000 80a3 	beq.w	800e4aa <_printf_i+0x16e>
 800e364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e36c:	e03a      	b.n	800e3e4 <_printf_i+0xa8>
 800e36e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e372:	2b15      	cmp	r3, #21
 800e374:	d8f6      	bhi.n	800e364 <_printf_i+0x28>
 800e376:	a101      	add	r1, pc, #4	; (adr r1, 800e37c <_printf_i+0x40>)
 800e378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e37c:	0800e3d5 	.word	0x0800e3d5
 800e380:	0800e3e9 	.word	0x0800e3e9
 800e384:	0800e365 	.word	0x0800e365
 800e388:	0800e365 	.word	0x0800e365
 800e38c:	0800e365 	.word	0x0800e365
 800e390:	0800e365 	.word	0x0800e365
 800e394:	0800e3e9 	.word	0x0800e3e9
 800e398:	0800e365 	.word	0x0800e365
 800e39c:	0800e365 	.word	0x0800e365
 800e3a0:	0800e365 	.word	0x0800e365
 800e3a4:	0800e365 	.word	0x0800e365
 800e3a8:	0800e4f5 	.word	0x0800e4f5
 800e3ac:	0800e419 	.word	0x0800e419
 800e3b0:	0800e4d7 	.word	0x0800e4d7
 800e3b4:	0800e365 	.word	0x0800e365
 800e3b8:	0800e365 	.word	0x0800e365
 800e3bc:	0800e517 	.word	0x0800e517
 800e3c0:	0800e365 	.word	0x0800e365
 800e3c4:	0800e419 	.word	0x0800e419
 800e3c8:	0800e365 	.word	0x0800e365
 800e3cc:	0800e365 	.word	0x0800e365
 800e3d0:	0800e4df 	.word	0x0800e4df
 800e3d4:	682b      	ldr	r3, [r5, #0]
 800e3d6:	1d1a      	adds	r2, r3, #4
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	602a      	str	r2, [r5, #0]
 800e3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e0a3      	b.n	800e530 <_printf_i+0x1f4>
 800e3e8:	6820      	ldr	r0, [r4, #0]
 800e3ea:	6829      	ldr	r1, [r5, #0]
 800e3ec:	0606      	lsls	r6, r0, #24
 800e3ee:	f101 0304 	add.w	r3, r1, #4
 800e3f2:	d50a      	bpl.n	800e40a <_printf_i+0xce>
 800e3f4:	680e      	ldr	r6, [r1, #0]
 800e3f6:	602b      	str	r3, [r5, #0]
 800e3f8:	2e00      	cmp	r6, #0
 800e3fa:	da03      	bge.n	800e404 <_printf_i+0xc8>
 800e3fc:	232d      	movs	r3, #45	; 0x2d
 800e3fe:	4276      	negs	r6, r6
 800e400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e404:	485e      	ldr	r0, [pc, #376]	; (800e580 <_printf_i+0x244>)
 800e406:	230a      	movs	r3, #10
 800e408:	e019      	b.n	800e43e <_printf_i+0x102>
 800e40a:	680e      	ldr	r6, [r1, #0]
 800e40c:	602b      	str	r3, [r5, #0]
 800e40e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e412:	bf18      	it	ne
 800e414:	b236      	sxthne	r6, r6
 800e416:	e7ef      	b.n	800e3f8 <_printf_i+0xbc>
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	6820      	ldr	r0, [r4, #0]
 800e41c:	1d19      	adds	r1, r3, #4
 800e41e:	6029      	str	r1, [r5, #0]
 800e420:	0601      	lsls	r1, r0, #24
 800e422:	d501      	bpl.n	800e428 <_printf_i+0xec>
 800e424:	681e      	ldr	r6, [r3, #0]
 800e426:	e002      	b.n	800e42e <_printf_i+0xf2>
 800e428:	0646      	lsls	r6, r0, #25
 800e42a:	d5fb      	bpl.n	800e424 <_printf_i+0xe8>
 800e42c:	881e      	ldrh	r6, [r3, #0]
 800e42e:	4854      	ldr	r0, [pc, #336]	; (800e580 <_printf_i+0x244>)
 800e430:	2f6f      	cmp	r7, #111	; 0x6f
 800e432:	bf0c      	ite	eq
 800e434:	2308      	moveq	r3, #8
 800e436:	230a      	movne	r3, #10
 800e438:	2100      	movs	r1, #0
 800e43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e43e:	6865      	ldr	r5, [r4, #4]
 800e440:	60a5      	str	r5, [r4, #8]
 800e442:	2d00      	cmp	r5, #0
 800e444:	bfa2      	ittt	ge
 800e446:	6821      	ldrge	r1, [r4, #0]
 800e448:	f021 0104 	bicge.w	r1, r1, #4
 800e44c:	6021      	strge	r1, [r4, #0]
 800e44e:	b90e      	cbnz	r6, 800e454 <_printf_i+0x118>
 800e450:	2d00      	cmp	r5, #0
 800e452:	d04d      	beq.n	800e4f0 <_printf_i+0x1b4>
 800e454:	4615      	mov	r5, r2
 800e456:	fbb6 f1f3 	udiv	r1, r6, r3
 800e45a:	fb03 6711 	mls	r7, r3, r1, r6
 800e45e:	5dc7      	ldrb	r7, [r0, r7]
 800e460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e464:	4637      	mov	r7, r6
 800e466:	42bb      	cmp	r3, r7
 800e468:	460e      	mov	r6, r1
 800e46a:	d9f4      	bls.n	800e456 <_printf_i+0x11a>
 800e46c:	2b08      	cmp	r3, #8
 800e46e:	d10b      	bne.n	800e488 <_printf_i+0x14c>
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	07de      	lsls	r6, r3, #31
 800e474:	d508      	bpl.n	800e488 <_printf_i+0x14c>
 800e476:	6923      	ldr	r3, [r4, #16]
 800e478:	6861      	ldr	r1, [r4, #4]
 800e47a:	4299      	cmp	r1, r3
 800e47c:	bfde      	ittt	le
 800e47e:	2330      	movle	r3, #48	; 0x30
 800e480:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e484:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e488:	1b52      	subs	r2, r2, r5
 800e48a:	6122      	str	r2, [r4, #16]
 800e48c:	f8cd a000 	str.w	sl, [sp]
 800e490:	464b      	mov	r3, r9
 800e492:	aa03      	add	r2, sp, #12
 800e494:	4621      	mov	r1, r4
 800e496:	4640      	mov	r0, r8
 800e498:	f7ff fee2 	bl	800e260 <_printf_common>
 800e49c:	3001      	adds	r0, #1
 800e49e:	d14c      	bne.n	800e53a <_printf_i+0x1fe>
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a4:	b004      	add	sp, #16
 800e4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4aa:	4835      	ldr	r0, [pc, #212]	; (800e580 <_printf_i+0x244>)
 800e4ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e4b0:	6829      	ldr	r1, [r5, #0]
 800e4b2:	6823      	ldr	r3, [r4, #0]
 800e4b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e4b8:	6029      	str	r1, [r5, #0]
 800e4ba:	061d      	lsls	r5, r3, #24
 800e4bc:	d514      	bpl.n	800e4e8 <_printf_i+0x1ac>
 800e4be:	07df      	lsls	r7, r3, #31
 800e4c0:	bf44      	itt	mi
 800e4c2:	f043 0320 	orrmi.w	r3, r3, #32
 800e4c6:	6023      	strmi	r3, [r4, #0]
 800e4c8:	b91e      	cbnz	r6, 800e4d2 <_printf_i+0x196>
 800e4ca:	6823      	ldr	r3, [r4, #0]
 800e4cc:	f023 0320 	bic.w	r3, r3, #32
 800e4d0:	6023      	str	r3, [r4, #0]
 800e4d2:	2310      	movs	r3, #16
 800e4d4:	e7b0      	b.n	800e438 <_printf_i+0xfc>
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	f043 0320 	orr.w	r3, r3, #32
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	2378      	movs	r3, #120	; 0x78
 800e4e0:	4828      	ldr	r0, [pc, #160]	; (800e584 <_printf_i+0x248>)
 800e4e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e4e6:	e7e3      	b.n	800e4b0 <_printf_i+0x174>
 800e4e8:	0659      	lsls	r1, r3, #25
 800e4ea:	bf48      	it	mi
 800e4ec:	b2b6      	uxthmi	r6, r6
 800e4ee:	e7e6      	b.n	800e4be <_printf_i+0x182>
 800e4f0:	4615      	mov	r5, r2
 800e4f2:	e7bb      	b.n	800e46c <_printf_i+0x130>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	6826      	ldr	r6, [r4, #0]
 800e4f8:	6961      	ldr	r1, [r4, #20]
 800e4fa:	1d18      	adds	r0, r3, #4
 800e4fc:	6028      	str	r0, [r5, #0]
 800e4fe:	0635      	lsls	r5, r6, #24
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	d501      	bpl.n	800e508 <_printf_i+0x1cc>
 800e504:	6019      	str	r1, [r3, #0]
 800e506:	e002      	b.n	800e50e <_printf_i+0x1d2>
 800e508:	0670      	lsls	r0, r6, #25
 800e50a:	d5fb      	bpl.n	800e504 <_printf_i+0x1c8>
 800e50c:	8019      	strh	r1, [r3, #0]
 800e50e:	2300      	movs	r3, #0
 800e510:	6123      	str	r3, [r4, #16]
 800e512:	4615      	mov	r5, r2
 800e514:	e7ba      	b.n	800e48c <_printf_i+0x150>
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	1d1a      	adds	r2, r3, #4
 800e51a:	602a      	str	r2, [r5, #0]
 800e51c:	681d      	ldr	r5, [r3, #0]
 800e51e:	6862      	ldr	r2, [r4, #4]
 800e520:	2100      	movs	r1, #0
 800e522:	4628      	mov	r0, r5
 800e524:	f7f1 fe64 	bl	80001f0 <memchr>
 800e528:	b108      	cbz	r0, 800e52e <_printf_i+0x1f2>
 800e52a:	1b40      	subs	r0, r0, r5
 800e52c:	6060      	str	r0, [r4, #4]
 800e52e:	6863      	ldr	r3, [r4, #4]
 800e530:	6123      	str	r3, [r4, #16]
 800e532:	2300      	movs	r3, #0
 800e534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e538:	e7a8      	b.n	800e48c <_printf_i+0x150>
 800e53a:	6923      	ldr	r3, [r4, #16]
 800e53c:	462a      	mov	r2, r5
 800e53e:	4649      	mov	r1, r9
 800e540:	4640      	mov	r0, r8
 800e542:	47d0      	blx	sl
 800e544:	3001      	adds	r0, #1
 800e546:	d0ab      	beq.n	800e4a0 <_printf_i+0x164>
 800e548:	6823      	ldr	r3, [r4, #0]
 800e54a:	079b      	lsls	r3, r3, #30
 800e54c:	d413      	bmi.n	800e576 <_printf_i+0x23a>
 800e54e:	68e0      	ldr	r0, [r4, #12]
 800e550:	9b03      	ldr	r3, [sp, #12]
 800e552:	4298      	cmp	r0, r3
 800e554:	bfb8      	it	lt
 800e556:	4618      	movlt	r0, r3
 800e558:	e7a4      	b.n	800e4a4 <_printf_i+0x168>
 800e55a:	2301      	movs	r3, #1
 800e55c:	4632      	mov	r2, r6
 800e55e:	4649      	mov	r1, r9
 800e560:	4640      	mov	r0, r8
 800e562:	47d0      	blx	sl
 800e564:	3001      	adds	r0, #1
 800e566:	d09b      	beq.n	800e4a0 <_printf_i+0x164>
 800e568:	3501      	adds	r5, #1
 800e56a:	68e3      	ldr	r3, [r4, #12]
 800e56c:	9903      	ldr	r1, [sp, #12]
 800e56e:	1a5b      	subs	r3, r3, r1
 800e570:	42ab      	cmp	r3, r5
 800e572:	dcf2      	bgt.n	800e55a <_printf_i+0x21e>
 800e574:	e7eb      	b.n	800e54e <_printf_i+0x212>
 800e576:	2500      	movs	r5, #0
 800e578:	f104 0619 	add.w	r6, r4, #25
 800e57c:	e7f5      	b.n	800e56a <_printf_i+0x22e>
 800e57e:	bf00      	nop
 800e580:	080121f5 	.word	0x080121f5
 800e584:	08012206 	.word	0x08012206

0800e588 <memmove>:
 800e588:	4288      	cmp	r0, r1
 800e58a:	b510      	push	{r4, lr}
 800e58c:	eb01 0402 	add.w	r4, r1, r2
 800e590:	d902      	bls.n	800e598 <memmove+0x10>
 800e592:	4284      	cmp	r4, r0
 800e594:	4623      	mov	r3, r4
 800e596:	d807      	bhi.n	800e5a8 <memmove+0x20>
 800e598:	1e43      	subs	r3, r0, #1
 800e59a:	42a1      	cmp	r1, r4
 800e59c:	d008      	beq.n	800e5b0 <memmove+0x28>
 800e59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5a6:	e7f8      	b.n	800e59a <memmove+0x12>
 800e5a8:	4402      	add	r2, r0
 800e5aa:	4601      	mov	r1, r0
 800e5ac:	428a      	cmp	r2, r1
 800e5ae:	d100      	bne.n	800e5b2 <memmove+0x2a>
 800e5b0:	bd10      	pop	{r4, pc}
 800e5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5ba:	e7f7      	b.n	800e5ac <memmove+0x24>

0800e5bc <_realloc_r>:
 800e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c0:	4680      	mov	r8, r0
 800e5c2:	4614      	mov	r4, r2
 800e5c4:	460e      	mov	r6, r1
 800e5c6:	b921      	cbnz	r1, 800e5d2 <_realloc_r+0x16>
 800e5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	f7ff bb85 	b.w	800dcdc <_malloc_r>
 800e5d2:	b92a      	cbnz	r2, 800e5e0 <_realloc_r+0x24>
 800e5d4:	f7ff fc9c 	bl	800df10 <_free_r>
 800e5d8:	4625      	mov	r5, r4
 800e5da:	4628      	mov	r0, r5
 800e5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e0:	f000 f81b 	bl	800e61a <_malloc_usable_size_r>
 800e5e4:	4284      	cmp	r4, r0
 800e5e6:	4607      	mov	r7, r0
 800e5e8:	d802      	bhi.n	800e5f0 <_realloc_r+0x34>
 800e5ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e5ee:	d812      	bhi.n	800e616 <_realloc_r+0x5a>
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	4640      	mov	r0, r8
 800e5f4:	f7ff fb72 	bl	800dcdc <_malloc_r>
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d0ed      	beq.n	800e5da <_realloc_r+0x1e>
 800e5fe:	42bc      	cmp	r4, r7
 800e600:	4622      	mov	r2, r4
 800e602:	4631      	mov	r1, r6
 800e604:	bf28      	it	cs
 800e606:	463a      	movcs	r2, r7
 800e608:	f7ff fb32 	bl	800dc70 <memcpy>
 800e60c:	4631      	mov	r1, r6
 800e60e:	4640      	mov	r0, r8
 800e610:	f7ff fc7e 	bl	800df10 <_free_r>
 800e614:	e7e1      	b.n	800e5da <_realloc_r+0x1e>
 800e616:	4635      	mov	r5, r6
 800e618:	e7df      	b.n	800e5da <_realloc_r+0x1e>

0800e61a <_malloc_usable_size_r>:
 800e61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e61e:	1f18      	subs	r0, r3, #4
 800e620:	2b00      	cmp	r3, #0
 800e622:	bfbc      	itt	lt
 800e624:	580b      	ldrlt	r3, [r1, r0]
 800e626:	18c0      	addlt	r0, r0, r3
 800e628:	4770      	bx	lr
	...

0800e62c <_init>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	bf00      	nop
 800e630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e632:	bc08      	pop	{r3}
 800e634:	469e      	mov	lr, r3
 800e636:	4770      	bx	lr

0800e638 <_fini>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	bf00      	nop
 800e63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63e:	bc08      	pop	{r3}
 800e640:	469e      	mov	lr, r3
 800e642:	4770      	bx	lr
