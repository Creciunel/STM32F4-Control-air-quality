
XCUBDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010aa0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f24  08010c40  08010c40  00020c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b64  08014b64  000302e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014b64  08014b64  00024b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b6c  08014b6c  000302e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b6c  08014b6c  00024b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b70  08014b70  00024b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08014b74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eac  200002e0  08014e54  000302e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000218c  08014e54  0003218c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8f1  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f40  00000000  00000000  0004ac01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0004eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  000501e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c12e  00000000  00000000  000516a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c21f  00000000  00000000  0006d7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009efb4  00000000  00000000  000899ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001289a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007588  00000000  00000000  001289f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0012ff7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00130048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e0 	.word	0x200002e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010c28 	.word	0x08010c28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e4 	.word	0x200002e4
 80001dc:	08010c28 	.word	0x08010c28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ConvertToTemperature>:
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

float ConvertToTemperature(uint16_t raw) {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
	Vout = (raw) * (Vsupply / 4095); //4095 �' 12 bit resolution of the blue pill
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa8d 	bl	8000534 <__aeabi_i2d>
 800101a:	a350      	add	r3, pc, #320	; (adr r3, 800115c <ConvertToTemperature+0x154>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff faf2 	bl	8000608 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fde4 	bl	8000bf8 <__aeabi_d2f>
 8001030:	4603      	mov	r3, r0
 8001032:	4a45      	ldr	r2, [pc, #276]	; (8001148 <ConvertToTemperature+0x140>)
 8001034:	6013      	str	r3, [r2, #0]

	R_NTC = (Vout * R_10k) / (Vsupply - Vout); //calculating the resistance of the thermistor
 8001036:	4b44      	ldr	r3, [pc, #272]	; (8001148 <ConvertToTemperature+0x140>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800114c <ConvertToTemperature+0x144>
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	ee17 0a90 	vmov	r0, s15
 8001048:	f7ff fa86 	bl	8000558 <__aeabi_f2d>
 800104c:	4604      	mov	r4, r0
 800104e:	460d      	mov	r5, r1
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <ConvertToTemperature+0x140>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa7f 	bl	8000558 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	a130      	add	r1, pc, #192	; (adr r1, 8001120 <ConvertToTemperature+0x118>)
 8001060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001064:	f7ff f918 	bl	8000298 <__aeabi_dsub>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4620      	mov	r0, r4
 800106e:	4629      	mov	r1, r5
 8001070:	f7ff fbf4 	bl	800085c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fdbc 	bl	8000bf8 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4a33      	ldr	r2, [pc, #204]	; (8001150 <ConvertToTemperature+0x148>)
 8001084:	6013      	str	r3, [r2, #0]

	Temp_K = (T0 * B_param) / (T0 * log(R_NTC / R_10k) + B_param); //Temperature in Kelvin
 8001086:	4b32      	ldr	r3, [pc, #200]	; (8001150 <ConvertToTemperature+0x148>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800114c <ConvertToTemperature+0x144>
 8001090:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001094:	ee16 0a90 	vmov	r0, s13
 8001098:	f7ff fa5e 	bl	8000558 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	ec43 2b10 	vmov	d0, r2, r3
 80010a4:	f00a fee0 	bl	800be68 <log>
 80010a8:	ec51 0b10 	vmov	r0, r1, d0
 80010ac:	a31e      	add	r3, pc, #120	; (adr r3, 8001128 <ConvertToTemperature+0x120>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff faa9 	bl	8000608 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	a31c      	add	r3, pc, #112	; (adr r3, 8001130 <ConvertToTemperature+0x128>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff f8ea 	bl	800029c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	a11a      	add	r1, pc, #104	; (adr r1, 8001138 <ConvertToTemperature+0x130>)
 80010ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010d2:	f7ff fbc3 	bl	800085c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd8b 	bl	8000bf8 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <ConvertToTemperature+0x14c>)
 80010e6:	6013      	str	r3, [r2, #0]
	Temp_C = Temp_K - 273.15; //converting into Celsius
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <ConvertToTemperature+0x14c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa33 	bl	8000558 <__aeabi_f2d>
 80010f2:	a313      	add	r3, pc, #76	; (adr r3, 8001140 <ConvertToTemperature+0x138>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff f8ce 	bl	8000298 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd78 	bl	8000bf8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <ConvertToTemperature+0x150>)
 800110c:	6013      	str	r3, [r2, #0]
	return Temp_C;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <ConvertToTemperature+0x150>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	ee07 3a90 	vmov	s15, r3
}
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bdb0      	pop	{r4, r5, r7, pc}
 8001120:	66666666 	.word	0x66666666
 8001124:	400a6666 	.word	0x400a6666
 8001128:	66666666 	.word	0x66666666
 800112c:	4072a266 	.word	0x4072a266
 8001130:	00000000 	.word	0x00000000
 8001134:	40ace800 	.word	0x40ace800
 8001138:	00000000 	.word	0x00000000
 800113c:	4130d533 	.word	0x4130d533
 8001140:	66666666 	.word	0x66666666
 8001144:	40711266 	.word	0x40711266
 8001148:	200004f8 	.word	0x200004f8
 800114c:	4619c000 	.word	0x4619c000
 8001150:	200004fc 	.word	0x200004fc
 8001154:	20000500 	.word	0x20000500
 8001158:	20000504 	.word	0x20000504
 800115c:	e734d9b4 	.word	0xe734d9b4
 8001160:	3f4a680c 	.word	0x3f4a680c

08001164 <setSpeed>:

void setSpeed(uint8_t speed) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	//				Start Motor
	TIM3->CCR1 = speed; // enable pin
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <setSpeed+0x2c>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(M_IN1_GPIO_Port, M_IN1_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2108      	movs	r1, #8
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <setSpeed+0x30>)
 800117a:	f003 faa9 	bl	80046d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_IN2_GPIO_Port, M_IN2_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2120      	movs	r1, #32
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <setSpeed+0x30>)
 8001184:	f003 faa4 	bl	80046d0 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40000400 	.word	0x40000400
 8001194:	40020400 	.word	0x40020400

08001198 <printToDisplay>:

void printToDisplay(float celsius, uint8_t ch4, uint32_t speed) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af04      	add	r7, sp, #16
 800119e:	ed87 0a03 	vstr	s0, [r7, #12]
 80011a2:	4603      	mov	r3, r0
 80011a4:	6079      	str	r1, [r7, #4]
 80011a6:	72fb      	strb	r3, [r7, #11]

	char str[20];
	static uint8_t flag = 0;

	if (flag == 0) {
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <printToDisplay+0x104>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d111      	bne.n	80011d4 <printToDisplay+0x3c>
		ST7789_print(20, 10, ST7789_WHITE, ST7789_BLACK, 0, &Font_11x18, 1,
 80011b0:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <printToDisplay+0x108>)
 80011b2:	9303      	str	r3, [sp, #12]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <printToDisplay+0x10c>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2300      	movs	r3, #0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	210a      	movs	r1, #10
 80011c8:	2014      	movs	r0, #20
 80011ca:	f001 fd37 	bl	8002c3c <ST7789_print>
				"Temperature Cels & CH4 %");
		flag = 1;
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <printToDisplay+0x104>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
	}

	ST7789_DrawCircleFilled(75, 120, 70, ST7789_BLUE);
 80011d4:	231f      	movs	r3, #31
 80011d6:	2246      	movs	r2, #70	; 0x46
 80011d8:	2178      	movs	r1, #120	; 0x78
 80011da:	204b      	movs	r0, #75	; 0x4b
 80011dc:	f001 fb0c 	bl	80027f8 <ST7789_DrawCircleFilled>
	ST7789_DrawCircleFilled(245, 120, 70, ST7789_BLUE);
 80011e0:	231f      	movs	r3, #31
 80011e2:	2246      	movs	r2, #70	; 0x46
 80011e4:	2178      	movs	r1, #120	; 0x78
 80011e6:	20f5      	movs	r0, #245	; 0xf5
 80011e8:	f001 fb06 	bl	80027f8 <ST7789_DrawCircleFilled>
	ST7789_DrawFillRoundRect(100, 200, 120, 30, 2, RGB565(0, 204, 204));
 80011ec:	f240 6379 	movw	r3, #1657	; 0x679
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	2302      	movs	r3, #2
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	231e      	movs	r3, #30
 80011f8:	2278      	movs	r2, #120	; 0x78
 80011fa:	21c8      	movs	r1, #200	; 0xc8
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f001 fe5b 	bl	8002eb8 <ST7789_DrawFillRoundRect>

	sprintf(str, "%.2f", celsius);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff f9a8 	bl	8000558 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	f107 0014 	add.w	r0, r7, #20
 8001210:	4925      	ldr	r1, [pc, #148]	; (80012a8 <printToDisplay+0x110>)
 8001212:	f00b fedf 	bl	800cfd4 <siprintf>
	ST7789_print(35, 110, ST7789_WHITE, ST7789_BLACK, 0, &Font_16x26, 1, str);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	9303      	str	r3, [sp, #12]
 800121c:	2301      	movs	r3, #1
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <printToDisplay+0x114>)
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	2300      	movs	r3, #0
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122e:	216e      	movs	r1, #110	; 0x6e
 8001230:	2023      	movs	r0, #35	; 0x23
 8001232:	f001 fd03 	bl	8002c3c <ST7789_print>

	sprintf(str, "%i", ch4);
 8001236:	7afa      	ldrb	r2, [r7, #11]
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	491c      	ldr	r1, [pc, #112]	; (80012b0 <printToDisplay+0x118>)
 800123e:	4618      	mov	r0, r3
 8001240:	f00b fec8 	bl	800cfd4 <siprintf>
	ST7789_print(225, 110, ST7789_WHITE, ST7789_BLACK, 0, &Font_16x26, 1, str);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	9303      	str	r3, [sp, #12]
 800124a:	2301      	movs	r3, #1
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <printToDisplay+0x114>)
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	2300      	movs	r3, #0
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2300      	movs	r3, #0
 8001258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125c:	216e      	movs	r1, #110	; 0x6e
 800125e:	20e1      	movs	r0, #225	; 0xe1
 8001260:	f001 fcec 	bl	8002c3c <ST7789_print>

	sprintf(str, "%li", speed);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4912      	ldr	r1, [pc, #72]	; (80012b4 <printToDisplay+0x11c>)
 800126c:	4618      	mov	r0, r3
 800126e:	f00b feb1 	bl	800cfd4 <siprintf>
	ST7789_print(110, 210, ST7789_WHITE, ST7789_BLACK, 0, &Font_11x18, 1, str);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	2301      	movs	r3, #1
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <printToDisplay+0x10c>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2300      	movs	r3, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2300      	movs	r3, #0
 8001286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128a:	21d2      	movs	r1, #210	; 0xd2
 800128c:	206e      	movs	r0, #110	; 0x6e
 800128e:	f001 fcd5 	bl	8002c3c <ST7789_print>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000514 	.word	0x20000514
 80012a0:	08010c40 	.word	0x08010c40
 80012a4:	20000000 	.word	0x20000000
 80012a8:	08010c5c 	.word	0x08010c5c
 80012ac:	20000008 	.word	0x20000008
 80012b0:	08010c64 	.word	0x08010c64
 80012b4:	08010c68 	.word	0x08010c68

080012b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b093      	sub	sp, #76	; 0x4c
 80012bc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012be:	f001 ff8b 	bl	80031d8 <HAL_Init>

	/* USER CODE BEGIN Init */
	count = 0;
 80012c2:	4b51      	ldr	r3, [pc, #324]	; (8001408 <main+0x150>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
	lastCount = 0;
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <main+0x154>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012ce:	f000 f8ad 	bl	800142c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	T = HAL_GetTick();
 80012d2:	f001 ffb7 	bl	8003244 <HAL_GetTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <main+0x158>)
 80012da:	6013      	str	r3, [r2, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012dc:	f000 faa6 	bl	800182c <MX_GPIO_Init>
	MX_DMA_Init();
 80012e0:	f000 fa7c 	bl	80017dc <MX_DMA_Init>
	MX_CRC_Init();
 80012e4:	f000 f96c 	bl	80015c0 <MX_CRC_Init>
	MX_SPI1_Init();
 80012e8:	f000 f97e 	bl	80015e8 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80012ec:	f00a f8ac 	bl	800b448 <MX_USB_DEVICE_Init>
	MX_TIM2_Init();
 80012f0:	f000 f9b0 	bl	8001654 <MX_TIM2_Init>
	MX_ADC1_Init();
 80012f4:	f000 f902 	bl	80014fc <MX_ADC1_Init>
	MX_TIM3_Init();
 80012f8:	f000 f9fa 	bl	80016f0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
//  set Timer
	HAL_TIM_Base_Start_IT(&htim2);
 80012fc:	4845      	ldr	r0, [pc, #276]	; (8001414 <main+0x15c>)
 80012fe:	f005 fd19 	bl	8006d34 <HAL_TIM_Base_Start_IT>
//	Set PWM on Timer
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001302:	2100      	movs	r1, #0
 8001304:	4844      	ldr	r0, [pc, #272]	; (8001418 <main+0x160>)
 8001306:	f005 fdd1 	bl	8006eac <HAL_TIM_PWM_Start>

	ST7789_Init();
 800130a:	f000 fe8d 	bl	8002028 <ST7789_Init>
	ST7789_rotation(2);
 800130e:	2002      	movs	r0, #2
 8001310:	f001 fd58 	bl	8002dc4 <ST7789_rotation>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_ADC_Start_DMA(&hadc1, raw, 2); // start adc in DMA mode
 8001314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001318:	2202      	movs	r2, #2
 800131a:	4619      	mov	r1, r3
 800131c:	483f      	ldr	r0, [pc, #252]	; (800141c <main+0x164>)
 800131e:	f002 f805 	bl	800332c <HAL_ADC_Start_DMA>
		if (HAL_GetTick() > T + OFFSET) {
 8001322:	f001 ff8f 	bl	8003244 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <main+0x158>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001330:	429a      	cmp	r2, r3
 8001332:	d965      	bls.n	8001400 <main+0x148>

			cels = ConvertToTemperature((uint16_t) raw[0]);
 8001334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe65 	bl	8001008 <ConvertToTemperature>
 800133e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

			sprintf(msg, "%.2f - %i - %li\r\n ", cels,
 8001342:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001344:	f7ff f908 	bl	8000558 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
					(uint8_t) ((float) (raw[1] * 100 / MAXBITPER4V)), speed);
 800134c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	fb00 f101 	mul.w	r1, r0, r1
 8001354:	0889      	lsrs	r1, r1, #2
 8001356:	4832      	ldr	r0, [pc, #200]	; (8001420 <main+0x168>)
 8001358:	fba0 0101 	umull	r0, r1, r0, r1
 800135c:	0a09      	lsrs	r1, r1, #8
 800135e:	ee07 1a90 	vmov	s15, r1
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	edc7 7a01 	vstr	s15, [r7, #4]
 800136e:	7939      	ldrb	r1, [r7, #4]
 8001370:	b2c9      	uxtb	r1, r1
			sprintf(msg, "%.2f - %i - %li\r\n ", cels,
 8001372:	460c      	mov	r4, r1
 8001374:	492b      	ldr	r1, [pc, #172]	; (8001424 <main+0x16c>)
 8001376:	6809      	ldr	r1, [r1, #0]
 8001378:	f107 000c 	add.w	r0, r7, #12
 800137c:	9101      	str	r1, [sp, #4]
 800137e:	9400      	str	r4, [sp, #0]
 8001380:	4929      	ldr	r1, [pc, #164]	; (8001428 <main+0x170>)
 8001382:	f00b fe27 	bl	800cfd4 <siprintf>

			CDC_Transmit_FS((uint8_t*) msg, strlen((char*) msg));
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff28 	bl	80001e0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f00a f912 	bl	800b5c4 <CDC_Transmit_FS>

			printToDisplay(cels,
					(uint8_t) ((float) (raw[1] * 100 / MAXBITPER4V)), speed);
 80013a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a2:	2264      	movs	r2, #100	; 0x64
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <main+0x168>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
			printToDisplay(cels,
 80013ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013be:	edc7 7a01 	vstr	s15, [r7, #4]
 80013c2:	793b      	ldrb	r3, [r7, #4]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <main+0x16c>)
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80013d2:	f7ff fee1 	bl	8001198 <printToDisplay>

			if (cels > 24.00f) {
 80013d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013da:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	dd03      	ble.n	80013f0 <main+0x138>
				setSpeed(70); //from 0 to 100
 80013e8:	2046      	movs	r0, #70	; 0x46
 80013ea:	f7ff febb 	bl	8001164 <setSpeed>
 80013ee:	e002      	b.n	80013f6 <main+0x13e>
			} else {
				setSpeed(0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff feb7 	bl	8001164 <setSpeed>
			}
			T = HAL_GetTick();
 80013f6:	f001 ff25 	bl	8003244 <HAL_GetTick>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <main+0x158>)
 80013fe:	6013      	str	r3, [r2, #0]
		}

		HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 ff2b 	bl	800325c <HAL_Delay>
		HAL_ADC_Start_DMA(&hadc1, raw, 2); // start adc in DMA mode
 8001406:	e785      	b.n	8001314 <main+0x5c>
 8001408:	2000050c 	.word	0x2000050c
 800140c:	20000510 	.word	0x20000510
 8001410:	200004f4 	.word	0x200004f4
 8001414:	20000464 	.word	0x20000464
 8001418:	200004ac 	.word	0x200004ac
 800141c:	200002fc 	.word	0x200002fc
 8001420:	50050051 	.word	0x50050051
 8001424:	20000508 	.word	0x20000508
 8001428:	08010c6c 	.word	0x08010c6c

0800142c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f00a ff42 	bl	800c2c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <SystemClock_Config+0xc8>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <SystemClock_Config+0xc8>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <SystemClock_Config+0xc8>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <SystemClock_Config+0xcc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <SystemClock_Config+0xcc>)
 8001476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <SystemClock_Config+0xcc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 800149c:	230f      	movs	r3, #15
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80014a0:	2390      	movs	r3, #144	; 0x90
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014a4:	2304      	movs	r3, #4
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80014a8:	2305      	movs	r3, #5
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fbbd 	bl	8005c30 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x94>
		Error_Handler();
 80014bc:	f000 fa8e 	bl	80019dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fe1f 	bl	8006120 <HAL_RCC_ClockConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xc0>
		Error_Handler();
 80014e8:	f000 fa78 	bl	80019dc <Error_Handler>
	}
}
 80014ec:	bf00      	nop
 80014ee:	3750      	adds	r7, #80	; 0x50
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001502:	463b      	mov	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001510:	4a29      	ldr	r2, [pc, #164]	; (80015b8 <MX_ADC1_Init+0xbc>)
 8001512:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_ADC1_Init+0xb8>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001522:	2201      	movs	r2, #1
 8001524:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001528:	2201      	movs	r2, #1
 800152a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_ADC1_Init+0xb8>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001536:	2200      	movs	r2, #0
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_ADC1_Init+0xb8>)
 800153c:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <MX_ADC1_Init+0xc0>)
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001548:	2202      	movs	r2, #2
 800154a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_ADC1_Init+0xb8>)
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_ADC1_Init+0xb8>)
 8001556:	2201      	movs	r2, #1
 8001558:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800155a:	4816      	ldr	r0, [pc, #88]	; (80015b4 <MX_ADC1_Init+0xb8>)
 800155c:	f001 fea2 	bl	80032a4 <HAL_ADC_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001566:	f000 fa39 	bl	80019dc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800156a:	2301      	movs	r3, #1
 800156c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800156e:	2301      	movs	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001572:	2301      	movs	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001576:	463b      	mov	r3, r7
 8001578:	4619      	mov	r1, r3
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <MX_ADC1_Init+0xb8>)
 800157c:	f001 ffe4 	bl	8003548 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001586:	f000 fa29 	bl	80019dc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 800158a:	2306      	movs	r3, #6
 800158c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800158e:	2302      	movs	r3, #2
 8001590:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001592:	2302      	movs	r3, #2
 8001594:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_ADC1_Init+0xb8>)
 800159c:	f001 ffd4 	bl	8003548 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC1_Init+0xae>
		Error_Handler();
 80015a6:	f000 fa19 	bl	80019dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002fc 	.word	0x200002fc
 80015b8:	40012000 	.word	0x40012000
 80015bc:	0f000001 	.word	0x0f000001

080015c0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_CRC_Init+0x20>)
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <MX_CRC_Init+0x24>)
 80015c8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_CRC_Init+0x20>)
 80015cc:	f002 fb4e 	bl	8003c6c <HAL_CRC_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_CRC_Init+0x1a>
		Error_Handler();
 80015d6:	f000 fa01 	bl	80019dc <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	40023000 	.word	0x40023000

080015e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_SPI1_Init+0x64>)
 80015ee:	4a18      	ldr	r2, [pc, #96]	; (8001650 <MX_SPI1_Init+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_SPI1_Init+0x64>)
 80015f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_SPI1_Init+0x64>)
 8001608:	2202      	movs	r2, #2
 800160a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_SPI1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_SPI1_Init+0x64>)
 8001614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001618:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_SPI1_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_SPI1_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_SPI1_Init+0x64>)
 8001634:	220a      	movs	r2, #10
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_SPI1_Init+0x64>)
 800163a:	f004 ff6f 	bl	800651c <HAL_SPI_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001644:	f000 f9ca 	bl	80019dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200003ac 	.word	0x200003ac
 8001650:	40013000 	.word	0x40013000

08001654 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_TIM2_Init+0x94>)
 8001672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001676:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60 - 1;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <MX_TIM2_Init+0x94>)
 800167a:	223b      	movs	r2, #59	; 0x3b
 800167c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM2_Init+0x94>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000000 - 1;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_TIM2_Init+0x94>)
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <MX_TIM2_Init+0x98>)
 8001688:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_TIM2_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_TIM2_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <MX_TIM2_Init+0x94>)
 8001698:	f005 fafc 	bl	8006c94 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x52>
		Error_Handler();
 80016a2:	f000 f99b 	bl	80019dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	4619      	mov	r1, r3
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_TIM2_Init+0x94>)
 80016b4:	f005 fe74 	bl	80073a0 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x6e>
		Error_Handler();
 80016be:	f000 f98d 	bl	80019dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <MX_TIM2_Init+0x94>)
 80016d0:	f006 fa22 	bl	8007b18 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80016da:	f000 f97f 	bl	80019dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000464 	.word	0x20000464
 80016ec:	000f423f 	.word	0x000f423f

080016f0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001722:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <MX_TIM3_Init+0xe8>)
 8001724:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 60 - 1;
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001728:	223b      	movs	r2, #59	; 0x3b
 800172a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <MX_TIM3_Init+0xe4>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100 - 1;
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001734:	2263      	movs	r2, #99	; 0x63
 8001736:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <MX_TIM3_Init+0xe4>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001744:	4823      	ldr	r0, [pc, #140]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001746:	f005 faa5 	bl	8006c94 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0x64>
		Error_Handler();
 8001750:	f000 f944 	bl	80019dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	4619      	mov	r1, r3
 8001760:	481c      	ldr	r0, [pc, #112]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001762:	f005 fe1d 	bl	80073a0 <HAL_TIM_ConfigClockSource>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x80>
		Error_Handler();
 800176c:	f000 f936 	bl	80019dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001770:	4818      	ldr	r0, [pc, #96]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001772:	f005 fb41 	bl	8006df8 <HAL_TIM_PWM_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x90>
		Error_Handler();
 800177c:	f000 f92e 	bl	80019dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4619      	mov	r1, r3
 800178e:	4811      	ldr	r0, [pc, #68]	; (80017d4 <MX_TIM3_Init+0xe4>)
 8001790:	f006 f9c2 	bl	8007b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 800179a:	f000 f91f 	bl	80019dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179e:	2360      	movs	r3, #96	; 0x60
 80017a0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4807      	ldr	r0, [pc, #28]	; (80017d4 <MX_TIM3_Init+0xe4>)
 80017b6:	f005 fd31 	bl	800721c <HAL_TIM_PWM_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM3_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80017c0:	f000 f90c 	bl	80019dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <MX_TIM3_Init+0xe4>)
 80017c6:	f000 fa9f 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 80017ca:	bf00      	nop
 80017cc:	3738      	adds	r7, #56	; 0x38
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200004ac 	.word	0x200004ac
 80017d8:	40000400 	.word	0x40000400

080017dc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_DMA_Init+0x4c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <MX_DMA_Init+0x4c>)
 80017ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <MX_DMA_Init+0x4c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2038      	movs	r0, #56	; 0x38
 8001804:	f002 fa08 	bl	8003c18 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001808:	2038      	movs	r0, #56	; 0x38
 800180a:	f002 fa21 	bl	8003c50 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	203a      	movs	r0, #58	; 0x3a
 8001814:	f002 fa00 	bl	8003c18 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001818:	203a      	movs	r0, #58	; 0x3a
 800181a:	f002 fa19 	bl	8003c50 <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <MX_GPIO_Init+0x124>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a41      	ldr	r2, [pc, #260]	; (8001950 <MX_GPIO_Init+0x124>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <MX_GPIO_Init+0x124>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <MX_GPIO_Init+0x124>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a3a      	ldr	r2, [pc, #232]	; (8001950 <MX_GPIO_Init+0x124>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <MX_GPIO_Init+0x124>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <MX_GPIO_Init+0x124>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <MX_GPIO_Init+0x124>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <MX_GPIO_Init+0x124>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <MX_GPIO_Init+0x124>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <MX_GPIO_Init+0x124>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <MX_GPIO_Init+0x124>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b8:	4826      	ldr	r0, [pc, #152]	; (8001954 <MX_GPIO_Init+0x128>)
 80018ba:	f002 ff09 	bl	80046d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RST_Pin | DC_Pin | CS_Pin | M_IN1_Pin | M_IN2_Pin,
 80018be:	2200      	movs	r2, #0
 80018c0:	212f      	movs	r1, #47	; 0x2f
 80018c2:	4825      	ldr	r0, [pc, #148]	; (8001958 <MX_GPIO_Init+0x12c>)
 80018c4:	f002 ff04 	bl	80046d0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	481c      	ldr	r0, [pc, #112]	; (8001954 <MX_GPIO_Init+0x128>)
 80018e2:	f002 fd71 	bl	80043c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RST_Pin DC_Pin CS_Pin */
	GPIO_InitStruct.Pin = RST_Pin | DC_Pin | CS_Pin;
 80018e6:	2307      	movs	r3, #7
 80018e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	2302      	movs	r3, #2
 80018f4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <MX_GPIO_Init+0x12c>)
 80018fe:	f002 fd63 	bl	80043c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : M_IN1_Pin M_IN2_Pin */
	GPIO_InitStruct.Pin = M_IN1_Pin | M_IN2_Pin;
 8001902:	2328      	movs	r3, #40	; 0x28
 8001904:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <MX_GPIO_Init+0x12c>)
 800191a:	f002 fd55 	bl	80043c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : M_SPEED_Pin */
	GPIO_InitStruct.Pin = M_SPEED_Pin;
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001926:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(M_SPEED_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <MX_GPIO_Init+0x12c>)
 8001934:	f002 fd48 	bl	80043c8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2017      	movs	r0, #23
 800193e:	f002 f96b 	bl	8003c18 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001942:	2017      	movs	r0, #23
 8001944:	f002 f984 	bl	8003c50 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40020800 	.word	0x40020800
 8001958:	40020400 	.word	0x40020400

0800195c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	d104      	bne.n	8001976 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		count++;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_GPIO_EXTI_Callback+0x28>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_GPIO_EXTI_Callback+0x28>)
 8001974:	6013      	str	r3, [r2, #0]
	}
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000050c 	.word	0x2000050c

08001988 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800199a:	f001 fc3f 	bl	800321c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a6:	d10d      	bne.n	80019c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
//		count /= 2;
		speed = count - lastCount;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019b4:	6013      	str	r3, [r2, #0]
		lastCount = count;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019bc:	6013      	str	r3, [r2, #0]
		count = 0;
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END Callback 1 */
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40010000 	.word	0x40010000
 80019d0:	2000050c 	.word	0x2000050c
 80019d4:	20000510 	.word	0x20000510
 80019d8:	20000508 	.word	0x20000508

080019dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a33      	ldr	r2, [pc, #204]	; (8001b24 <HAL_ADC_MspInit+0xec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d15f      	bne.n	8001b1a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <HAL_ADC_MspInit+0xf0>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <HAL_ADC_MspInit+0xf0>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <HAL_ADC_MspInit+0xf0>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_ADC_MspInit+0xf0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <HAL_ADC_MspInit+0xf0>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_ADC_MspInit+0xf0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001a92:	2342      	movs	r3, #66	; 0x42
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a96:	2303      	movs	r3, #3
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4821      	ldr	r0, [pc, #132]	; (8001b2c <HAL_ADC_MspInit+0xf4>)
 8001aa6:	f002 fc8f 	bl	80043c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <HAL_ADC_MspInit+0xfc>)
 8001aae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001ad4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ad8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001ae8:	2204      	movs	r2, #4
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001aee:	2203      	movs	r2, #3
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001afe:	480c      	ldr	r0, [pc, #48]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001b00:	f002 f8d0 	bl	8003ca4 <HAL_DMA_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001b0a:	f7ff ff67 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
 8001b14:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_ADC_MspInit+0xf8>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40012000 	.word	0x40012000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	20000344 	.word	0x20000344
 8001b34:	40026410 	.word	0x40026410

08001b38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_CRC_MspInit+0x3c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10d      	bne.n	8001b66 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_CRC_MspInit+0x40>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023000 	.word	0x40023000
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a38      	ldr	r2, [pc, #224]	; (8001c7c <HAL_SPI_MspInit+0x100>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d16a      	bne.n	8001c74 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <HAL_SPI_MspInit+0x104>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a36      	ldr	r2, [pc, #216]	; (8001c80 <HAL_SPI_MspInit+0x104>)
 8001ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_SPI_MspInit+0x104>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_SPI_MspInit+0x104>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_SPI_MspInit+0x104>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_SPI_MspInit+0x104>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bd6:	23a0      	movs	r3, #160	; 0xa0
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be6:	2305      	movs	r3, #5
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4824      	ldr	r0, [pc, #144]	; (8001c84 <HAL_SPI_MspInit+0x108>)
 8001bf2:	f002 fbe9 	bl	80043c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_SPI_MspInit+0x110>)
 8001bfa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001bfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c02:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c16:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c32:	2204      	movs	r2, #4
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c38:	2203      	movs	r2, #3
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c4a:	f002 f82b 	bl	8003ca4 <HAL_DMA_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 8001c54:	f7ff fec2 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c5c:	649a      	str	r2, [r3, #72]	; 0x48
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_SPI_MspInit+0x10c>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2023      	movs	r0, #35	; 0x23
 8001c6a:	f001 ffd5 	bl	8003c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c6e:	2023      	movs	r0, #35	; 0x23
 8001c70:	f001 ffee 	bl	8003c50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40013000 	.word	0x40013000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20000404 	.word	0x20000404
 8001c8c:	40026440 	.word	0x40026440

08001c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d116      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201c      	movs	r0, #28
 8001cc4:	f001 ffa8 	bl	8003c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc8:	201c      	movs	r0, #28
 8001cca:	f001 ffc1 	bl	8003c50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cce:	e012      	b.n	8001cf6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_TIM_Base_MspInit+0x74>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40000400 	.word	0x40000400

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_TIM_MspPostInit+0x68>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11d      	bne.n	8001d66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = M_EN_Pin;
 8001d46:	2310      	movs	r3, #16
 8001d48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M_EN_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_TIM_MspPostInit+0x70>)
 8001d62:	f002 fb31 	bl	80043c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020400 	.word	0x40020400

08001d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08c      	sub	sp, #48	; 0x30
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_InitTick+0xd0>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_InitTick+0xd0>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_InitTick+0xd0>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001da8:	f107 020c 	add.w	r2, r7, #12
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 fb80 	bl	80064b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001db8:	f004 fb6a 	bl	8006490 <HAL_RCC_GetPCLK2Freq>
 8001dbc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_InitTick+0xd4>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_InitTick+0xd8>)
 8001dce:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_InitTick+0xdc>)
 8001dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_InitTick+0xd8>)
 8001dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_InitTick+0xd8>)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_InitTick+0xd8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_InitTick+0xd8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_InitTick+0xd8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001df2:	4818      	ldr	r0, [pc, #96]	; (8001e54 <HAL_InitTick+0xd8>)
 8001df4:	f004 ff4e 	bl	8006c94 <HAL_TIM_Base_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d11b      	bne.n	8001e3e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e06:	4813      	ldr	r0, [pc, #76]	; (8001e54 <HAL_InitTick+0xd8>)
 8001e08:	f004 ff94 	bl	8006d34 <HAL_TIM_Base_Start_IT>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d111      	bne.n	8001e3e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e1a:	2019      	movs	r0, #25
 8001e1c:	f001 ff18 	bl	8003c50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	d808      	bhi.n	8001e38 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e26:	2200      	movs	r2, #0
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f001 fef4 	bl	8003c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_InitTick+0xe0>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e002      	b.n	8001e3e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3730      	adds	r7, #48	; 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	20000518 	.word	0x20000518
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	20000014 	.word	0x20000014

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M_SPEED_Pin);
 8001eba:	2040      	movs	r0, #64	; 0x40
 8001ebc:	f002 fc22 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ec0:	2040      	movs	r0, #64	; 0x40
 8001ec2:	f002 fc1f 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ed2:	f005 f89b 	bl	800700c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000518 	.word	0x20000518

08001ee0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <TIM2_IRQHandler+0x10>)
 8001ee6:	f005 f891 	bl	800700c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000464 	.word	0x20000464

08001ef4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <SPI1_IRQHandler+0x10>)
 8001efa:	f004 fcd5 	bl	80068a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200003ac 	.word	0x200003ac

08001f08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <DMA2_Stream0_IRQHandler+0x10>)
 8001f0e:	f001 fff1 	bl	8003ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000344 	.word	0x20000344

08001f1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA2_Stream2_IRQHandler+0x10>)
 8001f22:	f001 ffe7 	bl	8003ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000404 	.word	0x20000404

08001f30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <OTG_FS_IRQHandler+0x10>)
 8001f36:	f002 fd4d 	bl	80049d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20001a50 	.word	0x20001a50

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f00a f97c 	bl	800c270 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20020000 	.word	0x20020000
 8001fa4:	00000800 	.word	0x00000800
 8001fa8:	20000560 	.word	0x20000560
 8001fac:	20002190 	.word	0x20002190

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff0:	4c0b      	ldr	r4, [pc, #44]	; (8002020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ffe:	f7ff ffd7 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002002:	f00a f93b 	bl	800c27c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7ff f957 	bl	80012b8 <main>
  bx  lr    
 800200a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800200c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002018:	08014b74 	.word	0x08014b74
  ldr r2, =_sbss
 800201c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002020:	2000218c 	.word	0x2000218c

08002024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC_IRQHandler>
	...

08002028 <ST7789_Init>:
	  
	  
//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	
	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);	
 800202c:	20c8      	movs	r0, #200	; 0xc8
 800202e:	f001 f915 	bl	800325c <HAL_Delay>

	ST7789_Width = ST7789_WIDTH;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <ST7789_Init+0x30>)
 8002034:	22f0      	movs	r2, #240	; 0xf0
 8002036:	801a      	strh	r2, [r3, #0]
	ST7789_Height = ST7789_HEIGHT;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <ST7789_Init+0x34>)
 800203a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800203e:	801a      	strh	r2, [r3, #0]


    ST7789_Select();
 8002040:	f000 f810 	bl	8002064 <ST7789_Select>
	
    ST7789_HardReset(); 
 8002044:	f000 f870 	bl	8002128 <ST7789_HardReset>
    ST7789_ExecuteCommandList(init_cmds);
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <ST7789_Init+0x38>)
 800204a:	f000 f823 	bl	8002094 <ST7789_ExecuteCommandList>
	
    ST7789_Unselect();
 800204e:	f000 f815 	bl	800207c <ST7789_Unselect>

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000568 	.word	0x20000568
 800205c:	2000056a 	.word	0x2000056a
 8002060:	08014694 	.word	0x08014694

08002064 <ST7789_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Select(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	2104      	movs	r1, #4
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <ST7789_Select+0x14>)
 800206e:	f002 fb2f 	bl	80046d0 <HAL_GPIO_WritePin>
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40020400 	.word	0x40020400

0800207c <ST7789_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
void ST7789_Unselect(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
	
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7789_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	2104      	movs	r1, #4
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <ST7789_Unselect+0x14>)
 8002086:	f002 fb23 	bl	80046d0 <HAL_GPIO_WritePin>
			#endif
			//-----------------------------------------------------
	
	#endif
	
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40020400 	.word	0x40020400

08002094 <ST7789_ExecuteCommandList>:


//==============================================================================
// Процедура отправки данных для инициализации дисплея
//==============================================================================
 void ST7789_ExecuteCommandList(const uint8_t *addr) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80020a6:	e034      	b.n	8002112 <ST7789_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	72fb      	strb	r3, [r7, #11]
        ST7789_SendCmd(cmd);
 80020b2:	7afb      	ldrb	r3, [r7, #11]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f84b 	bl	8002150 <ST7789_SendCmd>

        numArgs = *addr++;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80020c4:	7abb      	ldrb	r3, [r7, #10]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80020d6:	7abb      	ldrb	r3, [r7, #10]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <ST7789_ExecuteCommandList+0x5a>
            ST7789_SendDataMASS((uint8_t*)addr, numArgs);
 80020dc:	7abb      	ldrb	r3, [r7, #10]
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f875 	bl	80021d0 <ST7789_SendDataMASS>
            addr += numArgs;
 80020e6:	7abb      	ldrb	r3, [r7, #10]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80020ee:	89bb      	ldrh	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00e      	beq.n	8002112 <ST7789_ExecuteCommandList+0x7e>
            ms = *addr++;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80020fe:	89bb      	ldrh	r3, [r7, #12]
 8002100:	2bff      	cmp	r3, #255	; 0xff
 8002102:	d102      	bne.n	800210a <ST7789_ExecuteCommandList+0x76>
 8002104:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002108:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800210a:	89bb      	ldrh	r3, [r7, #12]
 800210c:	4618      	mov	r0, r3
 800210e:	f001 f8a5 	bl	800325c <HAL_Delay>
    while(numCommands--) {
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	73fa      	strb	r2, [r7, #15]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1c5      	bne.n	80020a8 <ST7789_ExecuteCommandList+0x14>
        }
    }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <ST7789_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void ST7789_HardReset(void){
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	2101      	movs	r1, #1
 8002130:	4806      	ldr	r0, [pc, #24]	; (800214c <ST7789_HardReset+0x24>)
 8002132:	f002 facd 	bl	80046d0 <HAL_GPIO_WritePin>
	HAL_Delay(20);	
 8002136:	2014      	movs	r0, #20
 8002138:	f001 f890 	bl	800325c <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	2101      	movs	r1, #1
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <ST7789_HardReset+0x24>)
 8002142:	f002 fac5 	bl	80046d0 <HAL_GPIO_WritePin>
	
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40020400 	.word	0x40020400

08002150 <ST7789_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline void ST7789_SendCmd(uint8_t Cmd){	
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
		
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7789_SPI_HAL
	
		 // pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2102      	movs	r1, #2
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <ST7789_SendCmd+0x44>)
 8002160:	f002 fab6 	bl	80046d0 <HAL_GPIO_WritePin>
					 
		 HAL_SPI_Transmit(&ST7789_SPI_HAL, &Cmd, 1, HAL_MAX_DELAY);
 8002164:	1df9      	adds	r1, r7, #7
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	2201      	movs	r2, #1
 800216c:	480a      	ldr	r0, [pc, #40]	; (8002198 <ST7789_SendCmd+0x48>)
 800216e:	f004 fa5e 	bl	800662e <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8002172:	bf00      	nop
 8002174:	4808      	ldr	r0, [pc, #32]	; (8002198 <ST7789_SendCmd+0x48>)
 8002176:	f004 fca1 	bl	8006abc <HAL_SPI_GetState>
 800217a:	4603      	mov	r3, r0
 800217c:	2b01      	cmp	r3, #1
 800217e:	d1f9      	bne.n	8002174 <ST7789_SendCmd+0x24>
				
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	2102      	movs	r1, #2
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <ST7789_SendCmd+0x44>)
 8002186:	f002 faa3 	bl	80046d0 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
	
	#endif
	//-----------------------------------------------------------------------------------

}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020400 	.word	0x40020400
 8002198:	200003ac 	.word	0x200003ac

0800219c <ST7789_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline void ST7789_SendData(uint8_t Data ){
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
	
		HAL_SPI_Transmit(&ST7789_SPI_HAL, &Data, 1, HAL_MAX_DELAY);
 80021a6:	1df9      	adds	r1, r7, #7
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	2201      	movs	r2, #1
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <ST7789_SendData+0x30>)
 80021b0:	f004 fa3d 	bl	800662e <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 80021b4:	bf00      	nop
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <ST7789_SendData+0x30>)
 80021b8:	f004 fc80 	bl	8006abc <HAL_SPI_GetState>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d1f9      	bne.n	80021b6 <ST7789_SendData+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 80021c2:	bf00      	nop
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200003ac 	.word	0x200003ac

080021d0 <ST7789_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
	
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL
		
		if( buff_size <= 0xFFFF ){
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d21a      	bcs.n	8002218 <ST7789_SendDataMASS+0x48>
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4816      	ldr	r0, [pc, #88]	; (8002248 <ST7789_SendDataMASS+0x78>)
 80021ee:	f004 fa1e 	bl	800662e <HAL_SPI_Transmit>
 80021f2:	e01d      	b.n	8002230 <ST7789_SendDataMASS+0x60>
		}
		else{
			while( buff_size > 0xFFFF ){
				HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, 0xFFFF, HAL_MAX_DELAY);
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
 80021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4812      	ldr	r0, [pc, #72]	; (8002248 <ST7789_SendDataMASS+0x78>)
 8002200:	f004 fa15 	bl	800662e <HAL_SPI_Transmit>
				buff_size-=0xFFFF;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800220a:	3bff      	subs	r3, #255	; 0xff
 800220c:	603b      	str	r3, [r7, #0]
				buff+=0xFFFF;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002214:	33ff      	adds	r3, #255	; 0xff
 8002216:	607b      	str	r3, [r7, #4]
			while( buff_size > 0xFFFF ){
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d2e9      	bcs.n	80021f4 <ST7789_SendDataMASS+0x24>
			}
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b29a      	uxth	r2, r3
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <ST7789_SendDataMASS+0x78>)
 800222c:	f004 f9ff 	bl	800662e <HAL_SPI_Transmit>
		}
		
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8002230:	bf00      	nop
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <ST7789_SendDataMASS+0x78>)
 8002234:	f004 fc42 	bl	8006abc <HAL_SPI_GetState>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d1f9      	bne.n	8002232 <ST7789_SendDataMASS+0x62>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------

}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200003ac 	.word	0x200003ac

0800224c <ST7789_FillScreen>:


//==============================================================================
// Процедура закрашивает экран цветом color
//==============================================================================
void ST7789_FillScreen(uint16_t color){
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af02      	add	r7, sp, #8
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
	
  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <ST7789_FillScreen+0x2c>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b21a      	sxth	r2, r3
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <ST7789_FillScreen+0x30>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b219      	sxth	r1, r3
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	460b      	mov	r3, r1
 8002268:	2100      	movs	r1, #0
 800226a:	2000      	movs	r0, #0
 800226c:	f000 f808 	bl	8002280 <ST7789_FillRect>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000568 	.word	0x20000568
 800227c:	2000056a 	.word	0x2000056a

08002280 <ST7789_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4604      	mov	r4, r0
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4623      	mov	r3, r4
 8002290:	80fb      	strh	r3, [r7, #6]
 8002292:	4603      	mov	r3, r0
 8002294:	80bb      	strh	r3, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]
 800229a:	4613      	mov	r3, r2
 800229c:	803b      	strh	r3, [r7, #0]
	
  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 800229e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a2:	4a24      	ldr	r2, [pc, #144]	; (8002334 <ST7789_FillRect+0xb4>)
 80022a4:	8812      	ldrh	r2, [r2, #0]
 80022a6:	4293      	cmp	r3, r2
 80022a8:	da40      	bge.n	800232c <ST7789_FillRect+0xac>
 80022aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022ae:	4a22      	ldr	r2, [pc, #136]	; (8002338 <ST7789_FillRect+0xb8>)
 80022b0:	8812      	ldrh	r2, [r2, #0]
 80022b2:	4293      	cmp	r3, r2
 80022b4:	da3a      	bge.n	800232c <ST7789_FillRect+0xac>
	  return;
  }
  
  if ((x + w) > ST7789_Width){	  
 80022b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022be:	4413      	add	r3, r2
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <ST7789_FillRect+0xb4>)
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	dd05      	ble.n	80022d4 <ST7789_FillRect+0x54>
	  w = ST7789_Width - x;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <ST7789_FillRect+0xb4>)
 80022ca:	881a      	ldrh	r2, [r3, #0]
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	807b      	strh	r3, [r7, #2]
  }
  
  if ((y + h) > ST7789_Height){
 80022d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80022d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022dc:	4413      	add	r3, r2
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <ST7789_FillRect+0xb8>)
 80022e0:	8812      	ldrh	r2, [r2, #0]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dd05      	ble.n	80022f2 <ST7789_FillRect+0x72>
	  h = ST7789_Height - y;
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <ST7789_FillRect+0xb8>)
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	803b      	strh	r3, [r7, #0]
  }
  
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 80022f2:	88f8      	ldrh	r0, [r7, #6]
 80022f4:	88b9      	ldrh	r1, [r7, #4]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4413      	add	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29c      	uxth	r4, r3
 8002302:	88ba      	ldrh	r2, [r7, #4]
 8002304:	883b      	ldrh	r3, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29b      	uxth	r3, r3
 800230e:	4622      	mov	r2, r4
 8002310:	f000 f814 	bl	800233c <ST7789_SetWindow>
  
//  for (uint32_t i = 0; i < (h * w); i++){
//	  ST7789_RamWrite(&color, 1);
//  }
		
  ST7789_RamWrite(&color, (h * w)); 
 8002314:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002318:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	4619      	mov	r1, r3
 8002322:	f107 0018 	add.w	r0, r7, #24
 8002326:	f000 f82f 	bl	8002388 <ST7789_RamWrite>
 800232a:	e000      	b.n	800232e <ST7789_FillRect+0xae>
	  return;
 800232c:	bf00      	nop
}
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	20000568 	.word	0x20000568
 8002338:	2000056a 	.word	0x2000056a

0800233c <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4604      	mov	r4, r0
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4623      	mov	r3, r4
 800234c:	80fb      	strh	r3, [r7, #6]
 800234e:	4603      	mov	r3, r0
 8002350:	80bb      	strh	r3, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	803b      	strh	r3, [r7, #0]
	
	ST7789_Select();
 800235a:	f7ff fe83 	bl	8002064 <ST7789_Select>
	
	ST7789_ColumnSet(x0, x1);
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f833 	bl	80023d0 <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 800236a:	883a      	ldrh	r2, [r7, #0]
 800236c:	88bb      	ldrh	r3, [r7, #4]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f86f 	bl	8002454 <ST7789_RowSet>
	
	// write to RAM
	ST7789_SendCmd(ST7789_RAMWR);
 8002376:	202c      	movs	r0, #44	; 0x2c
 8002378:	f7ff feea 	bl	8002150 <ST7789_SendCmd>
	
	ST7789_Unselect();
 800237c:	f7ff fe7e 	bl	800207c <ST7789_Unselect>
	
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}

08002388 <ST7789_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
void ST7789_RamWrite(uint16_t *pBuff, uint32_t Len){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	
  ST7789_Select();
 8002392:	f7ff fe67 	bl	8002064 <ST7789_Select>
	
  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	737b      	strb	r3, [r7, #13]
	
  while (Len--){
 80023aa:	e005      	b.n	80023b8 <ST7789_RamWrite+0x30>
//    ST7789_SendData( buff[0] );  
//    ST7789_SendData( buff[1] );
	  ST7789_SendDataMASS( buff, 2);
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	2102      	movs	r1, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff0c 	bl	80021d0 <ST7789_SendDataMASS>
  while (Len--){
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	603a      	str	r2, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f4      	bne.n	80023ac <ST7789_RamWrite+0x24>
  } 
	
  ST7789_Unselect();
 80023c2:	f7ff fe5b 	bl	800207c <ST7789_Unselect>
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <ST7789_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
 void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	460a      	mov	r2, r1
 80023da:	80fb      	strh	r3, [r7, #6]
 80023dc:	4613      	mov	r3, r2
 80023de:	80bb      	strh	r3, [r7, #4]
	
  if (ColumnStart > ColumnEnd){
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	88bb      	ldrh	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d82a      	bhi.n	800243e <ST7789_ColumnSet+0x6e>
    return;
  }
  
  if (ColumnEnd > ST7789_Width){
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <ST7789_ColumnSet+0x7c>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	88ba      	ldrh	r2, [r7, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d827      	bhi.n	8002442 <ST7789_ColumnSet+0x72>
    return;
  }
  
  ColumnStart += ST7789_X_Start;
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <ST7789_ColumnSet+0x80>)
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	4413      	add	r3, r2
 80023fa:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += ST7789_X_Start;
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <ST7789_ColumnSet+0x80>)
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	88bb      	ldrh	r3, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	80bb      	strh	r3, [r7, #4]
  
  ST7789_SendCmd(ST7789_CASET);
 8002406:	202a      	movs	r0, #42	; 0x2a
 8002408:	f7ff fea2 	bl	8002150 <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);  
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	b29b      	uxth	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fec1 	bl	800219c <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);  
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff febc 	bl	800219c <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);  
 8002424:	88bb      	ldrh	r3, [r7, #4]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff feb5 	bl	800219c <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);  
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff feb0 	bl	800219c <ST7789_SendData>
 800243c:	e002      	b.n	8002444 <ST7789_ColumnSet+0x74>
    return;
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <ST7789_ColumnSet+0x74>
    return;
 8002442:	bf00      	nop
  
}
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000568 	.word	0x20000568
 8002450:	20000564 	.word	0x20000564

08002454 <ST7789_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
 void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	460a      	mov	r2, r1
 800245e:	80fb      	strh	r3, [r7, #6]
 8002460:	4613      	mov	r3, r2
 8002462:	80bb      	strh	r3, [r7, #4]
	
  if (RowStart > RowEnd){
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	88bb      	ldrh	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d82a      	bhi.n	80024c2 <ST7789_RowSet+0x6e>
    return;
  }
  
  if (RowEnd > ST7789_Height){
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <ST7789_RowSet+0x7c>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	88ba      	ldrh	r2, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	d827      	bhi.n	80024c6 <ST7789_RowSet+0x72>
    return;
  }
  
  RowStart += ST7789_Y_Start;
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <ST7789_RowSet+0x80>)
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4413      	add	r3, r2
 800247e:	80fb      	strh	r3, [r7, #6]
  RowEnd += ST7789_Y_Start;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <ST7789_RowSet+0x80>)
 8002482:	881a      	ldrh	r2, [r3, #0]
 8002484:	88bb      	ldrh	r3, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	80bb      	strh	r3, [r7, #4]
 
  ST7789_SendCmd(ST7789_RASET);
 800248a:	202b      	movs	r0, #43	; 0x2b
 800248c:	f7ff fe60 	bl	8002150 <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);  
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fe7f 	bl	800219c <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);  
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fe7a 	bl	800219c <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);  
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fe73 	bl	800219c <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);  
 80024b6:	88bb      	ldrh	r3, [r7, #4]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe6e 	bl	800219c <ST7789_SendData>
 80024c0:	e002      	b.n	80024c8 <ST7789_RowSet+0x74>
    return;
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <ST7789_RowSet+0x74>
    return;
 80024c6:	bf00      	nop

}
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000056a 	.word	0x2000056a
 80024d4:	20000566 	.word	0x20000566

080024d8 <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
 void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	
  int16_t TempValue = *pValue1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	89fa      	ldrh	r2, [r7, #14]
 80024f6:	801a      	strh	r2, [r3, #0]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <ST7789_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void ST7789_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af02      	add	r7, sp, #8
 800250a:	4604      	mov	r4, r0
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4623      	mov	r3, r4
 8002514:	80fb      	strh	r3, [r7, #6]
 8002516:	4603      	mov	r3, r0
 8002518:	80bb      	strh	r3, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
 800251e:	4613      	mov	r3, r2
 8002520:	803b      	strh	r3, [r7, #0]
	
  if (x1 > x2){
 8002522:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002526:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800252a:	429a      	cmp	r2, r3
 800252c:	dd05      	ble.n	800253a <ST7789_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 800252e:	1cba      	adds	r2, r7, #2
 8002530:	1dbb      	adds	r3, r7, #6
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ffcf 	bl	80024d8 <SwapInt16Values>
  }
  
  if (y1 > y2){
 800253a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800253e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002542:	429a      	cmp	r2, r3
 8002544:	dd05      	ble.n	8002552 <ST7789_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 8002546:	463a      	mov	r2, r7
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ffc3 	bl	80024d8 <SwapInt16Values>
  }
  
  ST7789_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 8002552:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002556:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800255a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800255e:	b29a      	uxth	r2, r3
 8002560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002564:	b29b      	uxth	r3, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	b29b      	uxth	r3, r3
 800256a:	b21c      	sxth	r4, r3
 800256c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002570:	b29a      	uxth	r2, r3
 8002572:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002576:	b29b      	uxth	r3, r3
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	b29b      	uxth	r3, r3
 800257c:	b21a      	sxth	r2, r3
 800257e:	8b3b      	ldrh	r3, [r7, #24]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	4622      	mov	r2, r4
 8002586:	f7ff fe7b 	bl	8002280 <ST7789_FillRect>
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}

08002592 <ST7789_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
 void ST7789_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8002592:	b590      	push	{r4, r7, lr}
 8002594:	b087      	sub	sp, #28
 8002596:	af00      	add	r7, sp, #0
 8002598:	4604      	mov	r4, r0
 800259a:	4608      	mov	r0, r1
 800259c:	4611      	mov	r1, r2
 800259e:	461a      	mov	r2, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	80fb      	strh	r3, [r7, #6]
 80025a4:	4603      	mov	r3, r0
 80025a6:	80bb      	strh	r3, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	803b      	strh	r3, [r7, #0]
	
  const int16_t deltaX = abs(x2 - x1);
 80025b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bfb8      	it	lt
 80025be:	425b      	neglt	r3, r3
 80025c0:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80025c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80025c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfb8      	it	lt
 80025d0:	425b      	neglt	r3, r3
 80025d2:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 80025d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025dc:	429a      	cmp	r2, r3
 80025de:	da01      	bge.n	80025e4 <ST7789_DrawLine_Slow+0x52>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e001      	b.n	80025e8 <ST7789_DrawLine_Slow+0x56>
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 80025ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80025ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	da01      	bge.n	80025fa <ST7789_DrawLine_Slow+0x68>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e001      	b.n	80025fe <ST7789_DrawLine_Slow+0x6c>
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8002600:	8aba      	ldrh	r2, [r7, #20]
 8002602:	8a7b      	ldrh	r3, [r7, #18]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	b29b      	uxth	r3, r3
 8002608:	82fb      	strh	r3, [r7, #22]

  ST7789_DrawPixel(x2, y2, color);
 800260a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800260c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002610:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f8bd 	bl	8002794 <ST7789_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 800261a:	e02c      	b.n	8002676 <ST7789_DrawLine_Slow+0xe4>
	  
    ST7789_DrawPixel(x1, y1, color);
 800261c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800261e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f8b4 	bl	8002794 <ST7789_DrawPixel>
    const int16_t error2 = error * 2;
 800262c:	8afb      	ldrh	r3, [r7, #22]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) {
 8002634:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800263c:	425b      	negs	r3, r3
 800263e:	429a      	cmp	r2, r3
 8002640:	dd09      	ble.n	8002656 <ST7789_DrawLine_Slow+0xc4>
		
      error -= deltaY;
 8002642:	8afa      	ldrh	r2, [r7, #22]
 8002644:	8a7b      	ldrh	r3, [r7, #18]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	8a3b      	ldrh	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 8002656:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800265a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	da09      	bge.n	8002676 <ST7789_DrawLine_Slow+0xe4>
		
      error += deltaX;
 8002662:	8afa      	ldrh	r2, [r7, #22]
 8002664:	8abb      	ldrh	r3, [r7, #20]
 8002666:	4413      	add	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 800266c:	88ba      	ldrh	r2, [r7, #4]
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	4413      	add	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 8002676:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800267a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800267e:	429a      	cmp	r2, r3
 8002680:	d1cc      	bne.n	800261c <ST7789_DrawLine_Slow+0x8a>
 8002682:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002686:	f9b7 3000 	ldrsh.w	r3, [r7]
 800268a:	429a      	cmp	r2, r3
 800268c:	d1c6      	bne.n	800261c <ST7789_DrawLine_Slow+0x8a>
    }
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}

08002698 <ST7789_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b085      	sub	sp, #20
 800269c:	af02      	add	r7, sp, #8
 800269e:	4604      	mov	r4, r0
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4623      	mov	r3, r4
 80026a8:	80fb      	strh	r3, [r7, #6]
 80026aa:	4603      	mov	r3, r0
 80026ac:	80bb      	strh	r3, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	807b      	strh	r3, [r7, #2]
 80026b2:	4613      	mov	r3, r2
 80026b4:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 80026b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d129      	bne.n	8002716 <ST7789_DrawLine+0x7e>

    if (y1 > y2){
 80026c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80026c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dd11      	ble.n	80026f2 <ST7789_DrawLine+0x5a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 80026ce:	88ba      	ldrh	r2, [r7, #4]
 80026d0:	883b      	ldrh	r3, [r7, #0]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b21a      	sxth	r2, r3
 80026dc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80026e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80026e4:	8b3b      	ldrh	r3, [r7, #24]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	2201      	movs	r2, #1
 80026ec:	f7ff fdc8 	bl	8002280 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}
	
    return;
 80026f0:	e04c      	b.n	800278c <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 80026f2:	883a      	ldrh	r2, [r7, #0]
 80026f4:	88bb      	ldrh	r3, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	b21a      	sxth	r2, r3
 8002700:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002704:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002708:	8b3b      	ldrh	r3, [r7, #24]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	2201      	movs	r2, #1
 8002710:	f7ff fdb6 	bl	8002280 <ST7789_FillRect>
    return;
 8002714:	e03a      	b.n	800278c <ST7789_DrawLine+0xf4>
  }
  
  if (y1 == y2){
 8002716:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800271a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800271e:	429a      	cmp	r2, r3
 8002720:	d127      	bne.n	8002772 <ST7789_DrawLine+0xda>
    
    if (x1 > x2){
 8002722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002726:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800272a:	429a      	cmp	r2, r3
 800272c:	dd10      	ble.n	8002750 <ST7789_DrawLine+0xb8>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	b29b      	uxth	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	b29b      	uxth	r3, r3
 800273a:	b21a      	sxth	r2, r3
 800273c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002740:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002744:	8b3b      	ldrh	r3, [r7, #24]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2301      	movs	r3, #1
 800274a:	f7ff fd99 	bl	8002280 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}
	
    return;
 800274e:	e01d      	b.n	800278c <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	b29b      	uxth	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	b21a      	sxth	r2, r3
 800275e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002762:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002766:	8b3b      	ldrh	r3, [r7, #24]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	f7ff fd88 	bl	8002280 <ST7789_FillRect>
    return;
 8002770:	e00c      	b.n	800278c <ST7789_DrawLine+0xf4>
  }
  
  ST7789_DrawLine_Slow(x1, y1, x2, y2, color);
 8002772:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002776:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800277a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800277e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002782:	8b3b      	ldrh	r3, [r7, #24]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	4623      	mov	r3, r4
 8002788:	f7ff ff03 	bl	8002592 <ST7789_DrawLine_Slow>
}
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bd90      	pop	{r4, r7, pc}
	...

08002794 <ST7789_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
 800279e:	460b      	mov	r3, r1
 80027a0:	80bb      	strh	r3, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	807b      	strh	r3, [r7, #2]
	
  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 80027a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db1b      	blt.n	80027e6 <ST7789_DrawPixel+0x52>
 80027ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <ST7789_DrawPixel+0x5c>)
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	da15      	bge.n	80027e6 <ST7789_DrawPixel+0x52>
 80027ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db11      	blt.n	80027e6 <ST7789_DrawPixel+0x52>
 80027c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <ST7789_DrawPixel+0x60>)
 80027c8:	8812      	ldrh	r2, [r2, #0]
 80027ca:	4293      	cmp	r3, r2
 80027cc:	da0b      	bge.n	80027e6 <ST7789_DrawPixel+0x52>
    return;
  }

  ST7789_SetWindow(x, y, x, y);
 80027ce:	88f8      	ldrh	r0, [r7, #6]
 80027d0:	88b9      	ldrh	r1, [r7, #4]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	88bb      	ldrh	r3, [r7, #4]
 80027d6:	f7ff fdb1 	bl	800233c <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 80027da:	1cbb      	adds	r3, r7, #2
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fdd2 	bl	8002388 <ST7789_RamWrite>
 80027e4:	e000      	b.n	80027e8 <ST7789_DrawPixel+0x54>
    return;
 80027e6:	bf00      	nop
}
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000568 	.word	0x20000568
 80027f4:	2000056a 	.word	0x2000056a

080027f8 <ST7789_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void ST7789_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	4604      	mov	r4, r0
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4623      	mov	r3, r4
 8002808:	80fb      	strh	r3, [r7, #6]
 800280a:	4603      	mov	r3, r0
 800280c:	80bb      	strh	r3, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	807b      	strh	r3, [r7, #2]
 8002812:	4613      	mov	r3, r2
 8002814:	803b      	strh	r3, [r7, #0]
	
  int x = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  int y = radius;
 800281a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800281e:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 8002820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	f1c3 0301 	rsb	r3, r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
  int error = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 8002830:	e075      	b.n	800291e <ST7789_DrawCircleFilled+0x126>
	  
    ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	b29a      	uxth	r2, r3
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	4413      	add	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	b218      	sxth	r0, r3
 800283e:	88ba      	ldrh	r2, [r7, #4]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	b29b      	uxth	r3, r3
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	b29b      	uxth	r3, r3
 8002848:	b219      	sxth	r1, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	b29a      	uxth	r2, r3
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	4413      	add	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	b21c      	sxth	r4, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	b29a      	uxth	r2, r3
 800285a:	88bb      	ldrh	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	b21a      	sxth	r2, r3
 8002862:	883b      	ldrh	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	4622      	mov	r2, r4
 800286a:	f7ff ff15 	bl	8002698 <ST7789_DrawLine>
    ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	b29b      	uxth	r3, r3
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	b29b      	uxth	r3, r3
 8002878:	b218      	sxth	r0, r3
 800287a:	88ba      	ldrh	r2, [r7, #4]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	b29b      	uxth	r3, r3
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	b29b      	uxth	r3, r3
 8002884:	b219      	sxth	r1, r3
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	b29b      	uxth	r3, r3
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b29b      	uxth	r3, r3
 8002890:	b21c      	sxth	r4, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	b29a      	uxth	r2, r3
 8002896:	88bb      	ldrh	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	b29b      	uxth	r3, r3
 800289c:	b21a      	sxth	r2, r3
 800289e:	883b      	ldrh	r3, [r7, #0]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	4622      	mov	r2, r4
 80028a6:	f7ff fef7 	bl	8002698 <ST7789_DrawLine>
    error = 2 * (delta + y) - 1;
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da0c      	bge.n	80028d6 <ST7789_DrawCircleFilled+0xde>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dc09      	bgt.n	80028d6 <ST7789_DrawCircleFilled+0xde>
		
      ++x;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3301      	adds	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	3301      	adds	r3, #1
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4413      	add	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
      continue;
 80028d4:	e023      	b.n	800291e <ST7789_DrawCircleFilled+0x126>
    }
	
    error = 2 * (delta - x) - 1;
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) {
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dd0d      	ble.n	8002904 <ST7789_DrawCircleFilled+0x10c>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dd0a      	ble.n	8002904 <ST7789_DrawCircleFilled+0x10c>
		
      --y;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	f1c3 0301 	rsb	r3, r3, #1
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
      continue;
 8002902:	e00c      	b.n	800291e <ST7789_DrawCircleFilled+0x126>
    }
	
    ++x;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
    --y;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	3b01      	subs	r3, #1
 800291c:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da86      	bge.n	8002832 <ST7789_DrawCircleFilled+0x3a>
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
	...

08002930 <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	4604      	mov	r4, r0
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4623      	mov	r3, r4
 8002940:	80fb      	strh	r3, [r7, #6]
 8002942:	4603      	mov	r3, r0
 8002944:	80bb      	strh	r3, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	807b      	strh	r3, [r7, #2]
 800294a:	4613      	mov	r3, r2
 800294c:	803b      	strh	r3, [r7, #0]
	
	uint32_t i, b, j;
	
	uint32_t X = x, Y = y;
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]
	
	uint8_t xx, yy;
	
	if( multiplier < 1 ){
 8002956:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <ST7789_DrawChar+0x34>
		multiplier = 1;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}

	/* Check available space in LCD */
	if (ST7789_Width >= ( x + Font->FontWidth) || ST7789_Height >= ( y + Font->FontHeight)){
 8002964:	4b90      	ldr	r3, [pc, #576]	; (8002ba8 <ST7789_DrawChar+0x278>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	4413      	add	r3, r2
 8002972:	4299      	cmp	r1, r3
 8002974:	da09      	bge.n	800298a <ST7789_DrawChar+0x5a>
 8002976:	4b8d      	ldr	r3, [pc, #564]	; (8002bac <ST7789_DrawChar+0x27c>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	88bb      	ldrh	r3, [r7, #4]
 800297e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002980:	7852      	ldrb	r2, [r2, #1]
 8002982:	4413      	add	r3, r2
 8002984:	4299      	cmp	r1, r3
 8002986:	f2c0 8154 	blt.w	8002c32 <ST7789_DrawChar+0x302>

	
			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {		
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e149      	b.n	8002c24 <ST7789_DrawChar+0x2f4>
				
				if( ch < 127 ){			
 8002990:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002994:	2b7e      	cmp	r3, #126	; 0x7e
 8002996:	d810      	bhi.n	80029ba <ST7789_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80029a0:	3b20      	subs	r3, #32
 80029a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029a4:	7849      	ldrb	r1, [r1, #1]
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4619      	mov	r1, r3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	440b      	add	r3, r1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	e0b8      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch > 191 ){
 80029ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80029be:	2bbf      	cmp	r3, #191	; 0xbf
 80029c0:	d910      	bls.n	80029e4 <ST7789_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом 
					// только кирилицу то нужно добавлять 95 если шрифт 
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80029ca:	3b60      	subs	r3, #96	; 0x60
 80029cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029ce:	7849      	ldrb	r1, [r1, #1]
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	440b      	add	r3, r1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e0a3      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 80029e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80029e8:	2ba8      	cmp	r3, #168	; 0xa8
 80029ea:	d110      	bne.n	8002a0e <ST7789_DrawChar+0xde>
					// 160 эллемент ( символ Ё ) 
					b = Font->data[( 160 ) * Font->FontHeight + i];
 80029ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	4619      	mov	r1, r3
 80029f6:	460b      	mov	r3, r1
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	015b      	lsls	r3, r3, #5
 80029fe:	4619      	mov	r1, r3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	440b      	add	r3, r1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e08e      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				
				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8002a0e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a12:	2bb8      	cmp	r3, #184	; 0xb8
 8002a14:	d111      	bne.n	8002a3a <ST7789_DrawChar+0x10a>
					// 161 эллемент  ( символ ё ) 
					b = Font->data[( 161 ) * Font->FontHeight + i];
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	4413      	add	r3, r2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	440b      	add	r3, r1
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e078      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------
				
				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 8002a3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a3e:	2baa      	cmp	r3, #170	; 0xaa
 8002a40:	d10f      	bne.n	8002a62 <ST7789_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	785b      	ldrb	r3, [r3, #1]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	23a2      	movs	r3, #162	; 0xa2
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	440b      	add	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e064      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 8002a62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a66:	2baf      	cmp	r3, #175	; 0xaf
 8002a68:	d10f      	bne.n	8002a8a <ST7789_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	785b      	ldrb	r3, [r3, #1]
 8002a72:	4619      	mov	r1, r3
 8002a74:	23a3      	movs	r3, #163	; 0xa3
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	440b      	add	r3, r1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e050      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 8002a8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a8e:	2bb2      	cmp	r3, #178	; 0xb2
 8002a90:	d10f      	bne.n	8002ab2 <ST7789_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	23a4      	movs	r3, #164	; 0xa4
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	440b      	add	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e03c      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 8002ab2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ab6:	2bb3      	cmp	r3, #179	; 0xb3
 8002ab8:	d111      	bne.n	8002ade <ST7789_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0159      	lsls	r1, r3, #5
 8002acc:	440b      	add	r3, r1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	440b      	add	r3, r1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	e026      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 8002ade:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ae2:	2bba      	cmp	r3, #186	; 0xba
 8002ae4:	d10f      	bne.n	8002b06 <ST7789_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	4619      	mov	r1, r3
 8002af0:	23a6      	movs	r3, #166	; 0xa6
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	440b      	add	r3, r1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e012      	b.n	8002b2c <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 8002b06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002b0a:	2bbf      	cmp	r3, #191	; 0xbf
 8002b0c:	d10e      	bne.n	8002b2c <ST7789_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	4619      	mov	r1, r3
 8002b18:	23a7      	movs	r3, #167	; 0xa7
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4619      	mov	r1, r3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	440b      	add	r3, r1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------
			
				for (j = 0; j < Font->FontWidth; j++) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e068      	b.n	8002c04 <ST7789_DrawChar+0x2d4>
					
					if ((b << j) & 0x8000) {
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d028      	beq.n	8002b94 <ST7789_DrawChar+0x264>
						
						for (yy = 0; yy < multiplier; yy++){
 8002b42:	2300      	movs	r3, #0
 8002b44:	72bb      	strb	r3, [r7, #10]
 8002b46:	e01f      	b.n	8002b88 <ST7789_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 8002b48:	2300      	movs	r3, #0
 8002b4a:	72fb      	strb	r3, [r7, #11]
 8002b4c:	e014      	b.n	8002b78 <ST7789_DrawChar+0x248>
									ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 8002b4e:	7afb      	ldrb	r3, [r7, #11]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	b218      	sxth	r0, r3
 8002b5c:	7abb      	ldrb	r3, [r7, #10]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b21b      	sxth	r3, r3
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7ff fe11 	bl	8002794 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	3301      	adds	r3, #1
 8002b76:	72fb      	strb	r3, [r7, #11]
 8002b78:	7afa      	ldrb	r2, [r7, #11]
 8002b7a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3e5      	bcc.n	8002b4e <ST7789_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 8002b82:	7abb      	ldrb	r3, [r7, #10]
 8002b84:	3301      	adds	r3, #1
 8002b86:	72bb      	strb	r3, [r7, #10]
 8002b88:	7aba      	ldrb	r2, [r7, #10]
 8002b8a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3da      	bcc.n	8002b48 <ST7789_DrawChar+0x218>
 8002b92:	e02f      	b.n	8002bf4 <ST7789_DrawChar+0x2c4>
							}
						}
						
					} 
					else if( TransparentBg ){
 8002b94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02b      	beq.n	8002bf4 <ST7789_DrawChar+0x2c4>
						
						for (yy = 0; yy < multiplier; yy++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	72bb      	strb	r3, [r7, #10]
 8002ba0:	e023      	b.n	8002bea <ST7789_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	72fb      	strb	r3, [r7, #11]
 8002ba6:	e018      	b.n	8002bda <ST7789_DrawChar+0x2aa>
 8002ba8:	20000568 	.word	0x20000568
 8002bac:	2000056a 	.word	0x2000056a
									ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	b218      	sxth	r0, r3
 8002bbe:	7abb      	ldrb	r3, [r7, #10]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b21b      	sxth	r3, r3
 8002bcc:	883a      	ldrh	r2, [r7, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f7ff fde0 	bl	8002794 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	72fb      	strb	r3, [r7, #11]
 8002bda:	7afa      	ldrb	r2, [r7, #11]
 8002bdc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3e5      	bcc.n	8002bb0 <ST7789_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8002be4:	7abb      	ldrb	r3, [r7, #10]
 8002be6:	3301      	adds	r3, #1
 8002be8:	72bb      	strb	r3, [r7, #10]
 8002bea:	7aba      	ldrb	r2, [r7, #10]
 8002bec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3d6      	bcc.n	8002ba2 <ST7789_DrawChar+0x272>
							}
						}
						
					}
					X = X + multiplier;
 8002bf4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d390      	bcc.n	8002b32 <ST7789_DrawChar+0x202>
				}
				X = x;
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8002c14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {		
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3301      	adds	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	f4ff aeaf 	bcc.w	8002990 <ST7789_DrawChar+0x60>
			}
	}
}
 8002c32:	bf00      	nop
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop

08002c3c <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){	
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af04      	add	r7, sp, #16
 8002c42:	4604      	mov	r4, r0
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	80fb      	strh	r3, [r7, #6]
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80bb      	strh	r3, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	807b      	strh	r3, [r7, #2]
 8002c56:	4613      	mov	r3, r2
 8002c58:	803b      	strh	r3, [r7, #0]
	
	if( multiplier < 1 ){
 8002c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <ST7789_print+0x2c>
		multiplier = 1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8002c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c6a:	f7fd fab9 	bl	80001e0 <strlen>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	81bb      	strh	r3, [r7, #12]
	
	while (len--) {
 8002c72:	e09c      	b.n	8002dae <ST7789_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2bbf      	cmp	r3, #191	; 0xbf
 8002c7a:	d977      	bls.n	8002d6c <ST7789_print+0x130>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2bd0      	cmp	r3, #208	; 0xd0
 8002c82:	d002      	beq.n	8002c8a <ST7789_print+0x4e>
 8002c84:	2bd1      	cmp	r3, #209	; 0xd1
 8002c86:	d02c      	beq.n	8002ce2 <ST7789_print+0xa6>
 8002c88:	e05b      	b.n	8002d42 <ST7789_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b8f      	cmp	r3, #143	; 0x8f
 8002c96:	d908      	bls.n	8002caa <ST7789_print+0x6e>
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2bbf      	cmp	r3, #191	; 0xbf
 8002c9e:	d804      	bhi.n	8002caa <ST7789_print+0x6e>
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	3330      	adds	r3, #48	; 0x30
 8002ca6:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8002ca8:	e048      	b.n	8002d3c <ST7789_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b81      	cmp	r3, #129	; 0x81
 8002cb0:	d102      	bne.n	8002cb8 <ST7789_print+0x7c>
 8002cb2:	23a8      	movs	r3, #168	; 0xa8
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e044      	b.n	8002d42 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b84      	cmp	r3, #132	; 0x84
 8002cbe:	d102      	bne.n	8002cc6 <ST7789_print+0x8a>
 8002cc0:	23aa      	movs	r3, #170	; 0xaa
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	e03d      	b.n	8002d42 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b86      	cmp	r3, #134	; 0x86
 8002ccc:	d102      	bne.n	8002cd4 <ST7789_print+0x98>
 8002cce:	23b2      	movs	r3, #178	; 0xb2
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e036      	b.n	8002d42 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b87      	cmp	r3, #135	; 0x87
 8002cda:	d12f      	bne.n	8002d3c <ST7789_print+0x100>
 8002cdc:	23af      	movs	r3, #175	; 0xaf
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e02f      	b.n	8002d42 <ST7789_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da08      	bge.n	8002d04 <ST7789_print+0xc8>
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b8f      	cmp	r3, #143	; 0x8f
 8002cf8:	d804      	bhi.n	8002d04 <ST7789_print+0xc8>
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	3370      	adds	r3, #112	; 0x70
 8002d00:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8002d02:	e01d      	b.n	8002d40 <ST7789_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b91      	cmp	r3, #145	; 0x91
 8002d0a:	d102      	bne.n	8002d12 <ST7789_print+0xd6>
 8002d0c:	23b8      	movs	r3, #184	; 0xb8
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e017      	b.n	8002d42 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b94      	cmp	r3, #148	; 0x94
 8002d18:	d102      	bne.n	8002d20 <ST7789_print+0xe4>
 8002d1a:	23ba      	movs	r3, #186	; 0xba
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	e010      	b.n	8002d42 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b96      	cmp	r3, #150	; 0x96
 8002d26:	d102      	bne.n	8002d2e <ST7789_print+0xf2>
 8002d28:	23b3      	movs	r3, #179	; 0xb3
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e009      	b.n	8002d42 <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b97      	cmp	r3, #151	; 0x97
 8002d34:	d104      	bne.n	8002d40 <ST7789_print+0x104>
 8002d36:	23bf      	movs	r3, #191	; 0xbf
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e002      	b.n	8002d42 <ST7789_print+0x106>
					break;
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <ST7789_print+0x106>
					break;
 8002d40:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8002d42:	89bb      	ldrh	r3, [r7, #12]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	81bb      	strh	r3, [r7, #12]
			
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8002d48:	883c      	ldrh	r4, [r7, #0]
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	88b9      	ldrh	r1, [r7, #4]
 8002d4e:	88f8      	ldrh	r0, [r7, #6]
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	9303      	str	r3, [sp, #12]
 8002d54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4623      	mov	r3, r4
 8002d66:	f7ff fde3 	bl	8002930 <ST7789_DrawChar>
 8002d6a:	e011      	b.n	8002d90 <ST7789_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	883c      	ldrh	r4, [r7, #0]
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	88b9      	ldrh	r1, [r7, #4]
 8002d76:	88f8      	ldrh	r0, [r7, #6]
 8002d78:	9303      	str	r3, [sp, #12]
 8002d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	f7ff fdd0 	bl	8002930 <ST7789_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	fb12 f303 	smulbb	r3, r2, r3
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	4413      	add	r3, r2
 8002da6:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	3301      	adds	r3, #1
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (len--) {
 8002dae:	89bb      	ldrh	r3, [r7, #12]
 8002db0:	1e5a      	subs	r2, r3, #1
 8002db2:	81ba      	strh	r2, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f47f af5d 	bne.w	8002c74 <ST7789_print+0x38>
	}
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}

08002dc4 <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	
	ST7789_Select();
 8002dce:	f7ff f949 	bl	8002064 <ST7789_Select>
	
	ST7789_SendCmd(ST7789_MADCTL);
 8002dd2:	2036      	movs	r0, #54	; 0x36
 8002dd4:	f7ff f9bc 	bl	8002150 <ST7789_SendCmd>

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d85b      	bhi.n	8002e98 <ST7789_rotation+0xd4>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <ST7789_rotation+0x24>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002e21 	.word	0x08002e21
 8002df0:	08002e49 	.word	0x08002e49
 8002df4:	08002e71 	.word	0x08002e71
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_RGB);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7ff f9cf 	bl	800219c <ST7789_SendData>
				ST7789_Width = 240;
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <ST7789_rotation+0xe4>)
 8002e00:	22f0      	movs	r2, #240	; 0xf0
 8002e02:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <ST7789_rotation+0xe8>)
 8002e06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e0a:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <ST7789_rotation+0xec>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <ST7789_rotation+0xf0>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff fa17 	bl	800224c <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8002e1e:	e03c      	b.n	8002e9a <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
			
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002e20:	2060      	movs	r0, #96	; 0x60
 8002e22:	f7ff f9bb 	bl	800219c <ST7789_SendData>
				ST7789_Width = 320;
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <ST7789_rotation+0xe4>)
 8002e28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e2c:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;		
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <ST7789_rotation+0xe8>)
 8002e30:	22f0      	movs	r2, #240	; 0xf0
 8002e32:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <ST7789_rotation+0xec>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <ST7789_rotation+0xf0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7ff fa03 	bl	800224c <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8002e46:	e028      	b.n	8002e9a <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002e48:	20c0      	movs	r0, #192	; 0xc0
 8002e4a:	f7ff f9a7 	bl	800219c <ST7789_SendData>
				ST7789_Width = 240;
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <ST7789_rotation+0xe4>)
 8002e50:	22f0      	movs	r2, #240	; 0xf0
 8002e52:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 320;
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <ST7789_rotation+0xe8>)
 8002e56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e5a:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <ST7789_rotation+0xec>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <ST7789_rotation+0xf0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7ff f9ef 	bl	800224c <ST7789_FillScreen>
			#endif
			//==========================================================================
			
		 break;
 8002e6e:	e014      	b.n	8002e9a <ST7789_rotation+0xd6>
			#endif
			//==========================================================================
	   
			//== 2" 240 x 320 ST7789 =================================================
			#ifdef ST7789_IS_240X320
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002e70:	20a0      	movs	r0, #160	; 0xa0
 8002e72:	f7ff f993 	bl	800219c <ST7789_SendData>
				ST7789_Width = 320;
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <ST7789_rotation+0xe4>)
 8002e78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e7c:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <ST7789_rotation+0xe8>)
 8002e80:	22f0      	movs	r2, #240	; 0xf0
 8002e82:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <ST7789_rotation+0xec>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <ST7789_rotation+0xf0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7ff f9db 	bl	800224c <ST7789_FillScreen>
			#endif
			//==========================================================================
		 break;
 8002e96:	e000      	b.n	8002e9a <ST7789_rotation+0xd6>
	   
	   default:
		 break;
 8002e98:	bf00      	nop
	  }
	  
	  ST7789_Unselect();
 8002e9a:	f7ff f8ef 	bl	800207c <ST7789_Unselect>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000568 	.word	0x20000568
 8002eac:	2000056a 	.word	0x2000056a
 8002eb0:	20000564 	.word	0x20000564
 8002eb4:	20000566 	.word	0x20000566

08002eb8 <ST7789_DrawFillRoundRect>:


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( заполненый )
//==============================================================================
void ST7789_DrawFillRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint16_t color) {
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	80fb      	strh	r3, [r7, #6]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80bb      	strh	r3, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	807b      	strh	r3, [r7, #2]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	803b      	strh	r3, [r7, #0]
	
	int16_t max_radius = ((width < height) ? width : height) / 2; // 1/2 minor axis
 8002ed6:	883a      	ldrh	r2, [r7, #0]
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	4293      	cmp	r3, r2
 8002edc:	bf28      	it	cs
 8002ede:	4613      	movcs	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	0fda      	lsrs	r2, r3, #31
 8002ee4:	4413      	add	r3, r2
 8002ee6:	105b      	asrs	r3, r3, #1
 8002ee8:	81fb      	strh	r3, [r7, #14]
  if (cornerRadius > max_radius){
 8002eea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dd01      	ble.n	8002efa <ST7789_DrawFillRoundRect+0x42>
    cornerRadius = max_radius;
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	843b      	strh	r3, [r7, #32]
	}
	
  ST7789_DrawRectangleFilled(x + cornerRadius, y, x + cornerRadius + width - 2 * cornerRadius, y + height, color);
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	8c3b      	ldrh	r3, [r7, #32]
 8002efe:	4413      	add	r3, r2
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b218      	sxth	r0, r3
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	8c3b      	ldrh	r3, [r7, #32]
 8002f08:	4413      	add	r3, r2
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	8c3b      	ldrh	r3, [r7, #32]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b21c      	sxth	r4, r3
 8002f1e:	88ba      	ldrh	r2, [r7, #4]
 8002f20:	883b      	ldrh	r3, [r7, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	4622      	mov	r2, r4
 8002f34:	f7ff fae6 	bl	8002504 <ST7789_DrawRectangleFilled>
  // draw four corners
  ST7789_DrawFillCircleHelper(x + width - cornerRadius - 1, y + cornerRadius, cornerRadius, 1, height - 2 * cornerRadius - 1, color);
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	8c3b      	ldrh	r3, [r7, #32]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b218      	sxth	r0, r3
 8002f4c:	88ba      	ldrh	r2, [r7, #4]
 8002f4e:	8c3b      	ldrh	r3, [r7, #32]
 8002f50:	4413      	add	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	b219      	sxth	r1, r3
 8002f56:	8c3b      	ldrh	r3, [r7, #32]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	883a      	ldrh	r2, [r7, #0]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b21b      	sxth	r3, r3
 8002f68:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8002f6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2301      	movs	r3, #1
 8002f74:	4622      	mov	r2, r4
 8002f76:	f000 f820 	bl	8002fba <ST7789_DrawFillCircleHelper>
  ST7789_DrawFillCircleHelper(x + cornerRadius, y + cornerRadius, cornerRadius, 2, height - 2 * cornerRadius - 1, color);
 8002f7a:	88fa      	ldrh	r2, [r7, #6]
 8002f7c:	8c3b      	ldrh	r3, [r7, #32]
 8002f7e:	4413      	add	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b218      	sxth	r0, r3
 8002f84:	88ba      	ldrh	r2, [r7, #4]
 8002f86:	8c3b      	ldrh	r3, [r7, #32]
 8002f88:	4413      	add	r3, r2
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	b219      	sxth	r1, r3
 8002f8e:	8c3b      	ldrh	r3, [r7, #32]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	883a      	ldrh	r2, [r7, #0]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8002fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fa6:	9201      	str	r2, [sp, #4]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2302      	movs	r3, #2
 8002fac:	4622      	mov	r2, r4
 8002fae:	f000 f804 	bl	8002fba <ST7789_DrawFillCircleHelper>
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}

08002fba <ST7789_DrawFillCircleHelper>:
//==============================================================================

//==============================================================================
// Процедура рисования половины окружности ( правая или левая ) ( заполненый )
//==============================================================================
void ST7789_DrawFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8002fba:	b590      	push	{r4, r7, lr}
 8002fbc:	b089      	sub	sp, #36	; 0x24
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4608      	mov	r0, r1
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4623      	mov	r3, r4
 8002fca:	80fb      	strh	r3, [r7, #6]
 8002fcc:	4603      	mov	r3, r0
 8002fce:	80bb      	strh	r3, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	f1c3 0301 	rsb	r3, r3, #1
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	03d2      	lsls	r2, r2, #15
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8002ffc:	8a3b      	ldrh	r3, [r7, #16]
 8002ffe:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8003004:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003008:	b29b      	uxth	r3, r3
 800300a:	3301      	adds	r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 8003010:	e0d5      	b.n	80031be <ST7789_DrawFillCircleHelper+0x204>
    if (f >= 0) {
 8003012:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003016:	2b00      	cmp	r3, #0
 8003018:	db0e      	blt.n	8003038 <ST7789_DrawFillCircleHelper+0x7e>
      y--;
 800301a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29b      	uxth	r3, r3
 8003024:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8003026:	8a7b      	ldrh	r3, [r7, #18]
 8003028:	3302      	adds	r3, #2
 800302a:	b29b      	uxth	r3, r3
 800302c:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 800302e:	8afa      	ldrh	r2, [r7, #22]
 8003030:	8a7b      	ldrh	r3, [r7, #18]
 8003032:	4413      	add	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8003038:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800303c:	b29b      	uxth	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	b29b      	uxth	r3, r3
 8003042:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8003044:	8abb      	ldrh	r3, [r7, #20]
 8003046:	3302      	adds	r3, #2
 8003048:	b29b      	uxth	r3, r3
 800304a:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 800304c:	8afa      	ldrh	r2, [r7, #22]
 800304e:	8abb      	ldrh	r3, [r7, #20]
 8003050:	4413      	add	r3, r2
 8003052:	b29b      	uxth	r3, r3
 8003054:	82fb      	strh	r3, [r7, #22]

    if (x < (y + 1)) {
 8003056:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800305a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800305e:	429a      	cmp	r2, r3
 8003060:	db51      	blt.n	8003106 <ST7789_DrawFillCircleHelper+0x14c>
      if (corners & 1){
 8003062:	787b      	ldrb	r3, [r7, #1]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d023      	beq.n	80030b4 <ST7789_DrawFillCircleHelper+0xfa>
        ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 - y - 1 + 2 * y + delta, color);
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	8a3b      	ldrh	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	b218      	sxth	r0, r3
 8003076:	88ba      	ldrh	r2, [r7, #4]
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	b29b      	uxth	r3, r3
 800307e:	b219      	sxth	r1, r3
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	8a3b      	ldrh	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	b21c      	sxth	r4, r3
 800308a:	88ba      	ldrh	r2, [r7, #4]
 800308c:	89fb      	ldrh	r3, [r7, #14]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	b29a      	uxth	r2, r3
 8003092:	89fb      	ldrh	r3, [r7, #14]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	4413      	add	r3, r2
 800309a:	b29a      	uxth	r2, r3
 800309c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800309e:	4413      	add	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b21a      	sxth	r2, r3
 80030a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	4622      	mov	r2, r4
 80030b0:	f7ff faf2 	bl	8002698 <ST7789_DrawLine>
			}
      if (corners & 2){
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <ST7789_DrawFillCircleHelper+0x14c>
        ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 - y - 1 + 2 * y + delta, color);
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	8a3b      	ldrh	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	b218      	sxth	r0, r3
 80030c8:	88ba      	ldrh	r2, [r7, #4]
 80030ca:	89fb      	ldrh	r3, [r7, #14]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	b219      	sxth	r1, r3
 80030d2:	88fa      	ldrh	r2, [r7, #6]
 80030d4:	8a3b      	ldrh	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	b29b      	uxth	r3, r3
 80030da:	b21c      	sxth	r4, r3
 80030dc:	88ba      	ldrh	r2, [r7, #4]
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	89fb      	ldrh	r3, [r7, #14]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030f0:	4413      	add	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	b21a      	sxth	r2, r3
 80030fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	4622      	mov	r2, r4
 8003102:	f7ff fac9 	bl	8002698 <ST7789_DrawLine>
			}
    }
    if (y != py) {
 8003106:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800310a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800310e:	429a      	cmp	r2, r3
 8003110:	d053      	beq.n	80031ba <ST7789_DrawFillCircleHelper+0x200>
      if (corners & 1){
 8003112:	787b      	ldrb	r3, [r7, #1]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d023      	beq.n	8003164 <ST7789_DrawFillCircleHelper+0x1aa>
        ST7789_DrawLine(x0 + py, y0 - px, x0 + py, y0 - px - 1 + 2 * px + delta, color);
 800311c:	88fa      	ldrh	r2, [r7, #6]
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	4413      	add	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	b218      	sxth	r0, r3
 8003126:	88ba      	ldrh	r2, [r7, #4]
 8003128:	89bb      	ldrh	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b29b      	uxth	r3, r3
 800312e:	b219      	sxth	r1, r3
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	4413      	add	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	b21c      	sxth	r4, r3
 800313a:	88ba      	ldrh	r2, [r7, #4]
 800313c:	89bb      	ldrh	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	b29a      	uxth	r2, r3
 8003142:	89bb      	ldrh	r3, [r7, #12]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	b29b      	uxth	r3, r3
 8003148:	4413      	add	r3, r2
 800314a:	b29a      	uxth	r2, r3
 800314c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800314e:	4413      	add	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29b      	uxth	r3, r3
 8003156:	b21a      	sxth	r2, r3
 8003158:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	4622      	mov	r2, r4
 8003160:	f7ff fa9a 	bl	8002698 <ST7789_DrawLine>
			}
      if (corners & 2){
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d023      	beq.n	80031b6 <ST7789_DrawFillCircleHelper+0x1fc>
        ST7789_DrawLine(x0 - py, y0 - px, x0 - py, y0 - px - 1 + 2 * px + delta, color);
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b29b      	uxth	r3, r3
 8003176:	b218      	sxth	r0, r3
 8003178:	88ba      	ldrh	r2, [r7, #4]
 800317a:	89bb      	ldrh	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	b29b      	uxth	r3, r3
 8003180:	b219      	sxth	r1, r3
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	897b      	ldrh	r3, [r7, #10]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	b29b      	uxth	r3, r3
 800318a:	b21c      	sxth	r4, r3
 800318c:	88ba      	ldrh	r2, [r7, #4]
 800318e:	89bb      	ldrh	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29a      	uxth	r2, r3
 8003194:	89bb      	ldrh	r3, [r7, #12]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	b29b      	uxth	r3, r3
 800319a:	4413      	add	r3, r2
 800319c:	b29a      	uxth	r2, r3
 800319e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031a0:	4413      	add	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	b21a      	sxth	r2, r3
 80031aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	4622      	mov	r2, r4
 80031b2:	f7ff fa71 	bl	8002698 <ST7789_DrawLine>
			}
			py = y;
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 80031ba:	8a3b      	ldrh	r3, [r7, #16]
 80031bc:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 80031be:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80031c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	f6ff af23 	blt.w	8003012 <ST7789_DrawFillCircleHelper+0x58>
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_Init+0x40>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_Init+0x40>)
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_Init+0x40>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f000 fcfe 	bl	8003c02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003206:	200f      	movs	r0, #15
 8003208:	f7fe fdb8 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7fe fbec 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00

0800321c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_IncTick+0x20>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_IncTick+0x24>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <HAL_IncTick+0x24>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000018 	.word	0x20000018
 8003240:	2000056c 	.word	0x2000056c

08003244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_GetTick+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	2000056c 	.word	0x2000056c

0800325c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff ffee 	bl	8003244 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d005      	beq.n	8003282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_Delay+0x44>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003282:	bf00      	nop
 8003284:	f7ff ffde 	bl	8003244 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d8f7      	bhi.n	8003284 <HAL_Delay+0x28>
  {
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000018 	.word	0x20000018

080032a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e033      	b.n	8003322 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe fbb8 	bl	8001a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032ea:	f023 0302 	bic.w	r3, r3, #2
 80032ee:	f043 0202 	orr.w	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa58 	bl	80037ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
 8003312:	e001      	b.n	8003318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_Start_DMA+0x1e>
 8003346:	2302      	movs	r3, #2
 8003348:	e0ce      	b.n	80034e8 <HAL_ADC_Start_DMA+0x1bc>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d018      	beq.n	8003392 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003370:	4b5f      	ldr	r3, [pc, #380]	; (80034f0 <HAL_ADC_Start_DMA+0x1c4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a5f      	ldr	r2, [pc, #380]	; (80034f4 <HAL_ADC_Start_DMA+0x1c8>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0c9a      	lsrs	r2, r3, #18
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003384:	e002      	b.n	800338c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3b01      	subs	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f9      	bne.n	8003386 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a0:	d107      	bne.n	80033b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	f040 8086 	bne.w	80034ce <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003400:	d106      	bne.n	8003410 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f023 0206 	bic.w	r2, r3, #6
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
 800340e:	e002      	b.n	8003416 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800341e:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <HAL_ADC_Start_DMA+0x1cc>)
 8003420:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	4a35      	ldr	r2, [pc, #212]	; (80034fc <HAL_ADC_Start_DMA+0x1d0>)
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	4a34      	ldr	r2, [pc, #208]	; (8003500 <HAL_ADC_Start_DMA+0x1d4>)
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	4a33      	ldr	r2, [pc, #204]	; (8003504 <HAL_ADC_Start_DMA+0x1d8>)
 8003438:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003442:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003452:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003462:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	334c      	adds	r3, #76	; 0x4c
 800346e:	4619      	mov	r1, r3
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f000 fcc4 	bl	8003e00 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d129      	bne.n	80034e6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	e020      	b.n	80034e6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_ADC_Start_DMA+0x1dc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d11b      	bne.n	80034e6 <HAL_ADC_Start_DMA+0x1ba>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d114      	bne.n	80034e6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e00b      	b.n	80034e6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000010 	.word	0x20000010
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	40012300 	.word	0x40012300
 80034fc:	080039a5 	.word	0x080039a5
 8003500:	08003a5f 	.word	0x08003a5f
 8003504:	08003a7b 	.word	0x08003a7b
 8003508:	40012000 	.word	0x40012000

0800350c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1c>
 8003560:	2302      	movs	r3, #2
 8003562:	e113      	b.n	800378c <HAL_ADC_ConfigChannel+0x244>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b09      	cmp	r3, #9
 8003572:	d925      	bls.n	80035c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68d9      	ldr	r1, [r3, #12]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	3b1e      	subs	r3, #30
 800358a:	2207      	movs	r2, #7
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43da      	mvns	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	400a      	ands	r2, r1
 8003598:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68d9      	ldr	r1, [r3, #12]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	4618      	mov	r0, r3
 80035ac:	4603      	mov	r3, r0
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4403      	add	r3, r0
 80035b2:	3b1e      	subs	r3, #30
 80035b4:	409a      	lsls	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	e022      	b.n	8003606 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6919      	ldr	r1, [r3, #16]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	2207      	movs	r2, #7
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	400a      	ands	r2, r1
 80035e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6919      	ldr	r1, [r3, #16]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4618      	mov	r0, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4403      	add	r3, r0
 80035fc:	409a      	lsls	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d824      	bhi.n	8003658 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	3b05      	subs	r3, #5
 8003620:	221f      	movs	r2, #31
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43da      	mvns	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	400a      	ands	r2, r1
 800362e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	4618      	mov	r0, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	3b05      	subs	r3, #5
 800364a:	fa00 f203 	lsl.w	r2, r0, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	635a      	str	r2, [r3, #52]	; 0x34
 8003656:	e04c      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d824      	bhi.n	80036aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	3b23      	subs	r3, #35	; 0x23
 8003672:	221f      	movs	r2, #31
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43da      	mvns	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	400a      	ands	r2, r1
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	4618      	mov	r0, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	3b23      	subs	r3, #35	; 0x23
 800369c:	fa00 f203 	lsl.w	r2, r0, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
 80036a8:	e023      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b41      	subs	r3, #65	; 0x41
 80036bc:	221f      	movs	r2, #31
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4618      	mov	r0, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3b41      	subs	r3, #65	; 0x41
 80036e6:	fa00 f203 	lsl.w	r2, r0, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036f2:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_ADC_ConfigChannel+0x250>)
 80036f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a28      	ldr	r2, [pc, #160]	; (800379c <HAL_ADC_ConfigChannel+0x254>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10f      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x1d8>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b12      	cmp	r3, #18
 8003706:	d10b      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_ADC_ConfigChannel+0x254>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d12b      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x23a>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_ADC_ConfigChannel+0x258>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <HAL_ADC_ConfigChannel+0x1f4>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b11      	cmp	r3, #17
 800373a:	d122      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <HAL_ADC_ConfigChannel+0x258>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d111      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_ADC_ConfigChannel+0x25c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <HAL_ADC_ConfigChannel+0x260>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	0c9a      	lsrs	r2, r3, #18
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003774:	e002      	b.n	800377c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	3b01      	subs	r3, #1
 800377a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f9      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40012300 	.word	0x40012300
 800379c:	40012000 	.word	0x40012000
 80037a0:	10000012 	.word	0x10000012
 80037a4:	20000010 	.word	0x20000010
 80037a8:	431bde83 	.word	0x431bde83

080037ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b4:	4b79      	ldr	r3, [pc, #484]	; (800399c <ADC_Init+0x1f0>)
 80037b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	021a      	lsls	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <ADC_Init+0x1f4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003852:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	e00f      	b.n	80038aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0202 	bic.w	r2, r2, #2
 80038b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6899      	ldr	r1, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7e1b      	ldrb	r3, [r3, #24]
 80038c4:	005a      	lsls	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	3b01      	subs	r3, #1
 8003904:	035a      	lsls	r2, r3, #13
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e007      	b.n	8003920 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	3b01      	subs	r3, #1
 800393c:	051a      	lsls	r2, r3, #20
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6899      	ldr	r1, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003962:	025a      	lsls	r2, r3, #9
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	029a      	lsls	r2, r3, #10
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012300 	.word	0x40012300
 80039a0:	0f000001 	.word	0x0f000001

080039a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d13c      	bne.n	8003a38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d12b      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d127      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d119      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0220 	bic.w	r2, r2, #32
 8003a0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff fd6b 	bl	800350c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a36:	e00e      	b.n	8003a56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff fd75 	bl	8003534 <HAL_ADC_ErrorCallback>
}
 8003a4a:	e004      	b.n	8003a56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7ff fd57 	bl	8003520 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff fd4a 	bl	8003534 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <__NVIC_SetPriorityGrouping+0x44>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ada:	4a04      	ldr	r2, [pc, #16]	; (8003aec <__NVIC_SetPriorityGrouping+0x44>)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	60d3      	str	r3, [r2, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <__NVIC_GetPriorityGrouping+0x18>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	f003 0307 	and.w	r3, r3, #7
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	db0b      	blt.n	8003b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	4907      	ldr	r1, [pc, #28]	; (8003b44 <__NVIC_EnableIRQ+0x38>)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	e000e100 	.word	0xe000e100

08003b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	6039      	str	r1, [r7, #0]
 8003b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	db0a      	blt.n	8003b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	490c      	ldr	r1, [pc, #48]	; (8003b94 <__NVIC_SetPriority+0x4c>)
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	0112      	lsls	r2, r2, #4
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b70:	e00a      	b.n	8003b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	4908      	ldr	r1, [pc, #32]	; (8003b98 <__NVIC_SetPriority+0x50>)
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	0112      	lsls	r2, r2, #4
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	440b      	add	r3, r1
 8003b86:	761a      	strb	r2, [r3, #24]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000e100 	.word	0xe000e100
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f1c3 0307 	rsb	r3, r3, #7
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	bf28      	it	cs
 8003bba:	2304      	movcs	r3, #4
 8003bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d902      	bls.n	8003bcc <NVIC_EncodePriority+0x30>
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3b03      	subs	r3, #3
 8003bca:	e000      	b.n	8003bce <NVIC_EncodePriority+0x32>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	401a      	ands	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be4:	f04f 31ff 	mov.w	r1, #4294967295
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	43d9      	mvns	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	4313      	orrs	r3, r2
         );
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff4c 	bl	8003aa8 <__NVIC_SetPriorityGrouping>
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c2a:	f7ff ff61 	bl	8003af0 <__NVIC_GetPriorityGrouping>
 8003c2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	6978      	ldr	r0, [r7, #20]
 8003c36:	f7ff ffb1 	bl	8003b9c <NVIC_EncodePriority>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ff80 	bl	8003b48 <__NVIC_SetPriority>
}
 8003c48:	bf00      	nop
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ff54 	bl	8003b0c <__NVIC_EnableIRQ>
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00e      	b.n	8003c9c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	795b      	ldrb	r3, [r3, #5]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd ff52 	bl	8001b38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff fac8 	bl	8003244 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e099      	b.n	8003df4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce0:	e00f      	b.n	8003d02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce2:	f7ff faaf 	bl	8003244 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d908      	bls.n	8003d02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e078      	b.n	8003df4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e8      	bne.n	8003ce2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_DMA_Init+0x158>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d107      	bne.n	8003d6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	4313      	orrs	r3, r2
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d117      	bne.n	8003dc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa91 	bl	80042d0 <DMA_CheckFifoParam>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2240      	movs	r2, #64	; 0x40
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e016      	b.n	8003df4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa48 	bl	8004264 <DMA_CalcBaseAndBitshift>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	223f      	movs	r2, #63	; 0x3f
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	f010803f 	.word	0xf010803f

08003e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_DMA_Start_IT+0x26>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e040      	b.n	8003ea8 <HAL_DMA_Start_IT+0xa8>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d12f      	bne.n	8003e9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f9da 	bl	8004208 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	223f      	movs	r2, #63	; 0x3f
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0216 	orr.w	r2, r2, #22
 8003e6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0208 	orr.w	r2, r2, #8
 8003e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e005      	b.n	8003ea6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00c      	b.n	8003ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f00:	4b8e      	ldr	r3, [pc, #568]	; (800413c <HAL_DMA_IRQHandler+0x248>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a8e      	ldr	r2, [pc, #568]	; (8004140 <HAL_DMA_IRQHandler+0x24c>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	0a9b      	lsrs	r3, r3, #10
 8003f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2208      	movs	r2, #8
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01a      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0204 	bic.w	r2, r2, #4
 8003f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0201 	orr.w	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	2201      	movs	r2, #1
 8003f84:	409a      	lsls	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f043 0202 	orr.w	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2204      	movs	r2, #4
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d043      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03c      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2210      	movs	r2, #16
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d018      	beq.n	8004036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d024      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e01f      	b.n	8004064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
 8004034:	e016      	b.n	8004064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0208 	bic.w	r2, r2, #8
 8004052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2220      	movs	r2, #32
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 808f 	beq.w	8004194 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8087 	beq.w	8004194 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2220      	movs	r2, #32
 800408c:	409a      	lsls	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b05      	cmp	r3, #5
 800409c:	d136      	bne.n	800410c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0216 	bic.w	r2, r2, #22
 80040ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <HAL_DMA_IRQHandler+0x1da>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0208 	bic.w	r2, r2, #8
 80040dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	223f      	movs	r2, #63	; 0x3f
 80040e4:	409a      	lsls	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d07e      	beq.n	8004200 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
        }
        return;
 800410a:	e079      	b.n	8004200 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01d      	beq.n	8004156 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10d      	bne.n	8004144 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	2b00      	cmp	r3, #0
 800412e:	d031      	beq.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
 8004138:	e02c      	b.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
 800413a:	bf00      	nop
 800413c:	20000010 	.word	0x20000010
 8004140:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d023      	beq.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
 8004154:	e01e      	b.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0210 	bic.w	r2, r2, #16
 8004172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	2b00      	cmp	r3, #0
 800419a:	d032      	beq.n	8004202 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d022      	beq.n	80041ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2205      	movs	r2, #5
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d307      	bcc.n	80041dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f2      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x2cc>
 80041da:	e000      	b.n	80041de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
 80041fe:	e000      	b.n	8004202 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004200:	bf00      	nop
    }
  }
}
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004224:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d108      	bne.n	8004248 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004246:	e007      	b.n	8004258 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	3b10      	subs	r3, #16
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <DMA_CalcBaseAndBitshift+0x68>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d909      	bls.n	80042a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	1d1a      	adds	r2, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58
 80042a4:	e007      	b.n	80042b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	aaaaaaab 	.word	0xaaaaaaab
 80042cc:	080146b8 	.word	0x080146b8

080042d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11f      	bne.n	800432a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d856      	bhi.n	800439e <DMA_CheckFifoParam+0xce>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <DMA_CheckFifoParam+0x28>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004309 	.word	0x08004309
 80042fc:	0800431b 	.word	0x0800431b
 8004300:	08004309 	.word	0x08004309
 8004304:	0800439f 	.word	0x0800439f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d046      	beq.n	80043a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004318:	e043      	b.n	80043a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004322:	d140      	bne.n	80043a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004328:	e03d      	b.n	80043a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	d121      	bne.n	8004378 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d837      	bhi.n	80043aa <DMA_CheckFifoParam+0xda>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <DMA_CheckFifoParam+0x70>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004351 	.word	0x08004351
 8004344:	08004357 	.word	0x08004357
 8004348:	08004351 	.word	0x08004351
 800434c:	08004369 	.word	0x08004369
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      break;
 8004354:	e030      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d025      	beq.n	80043ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004366:	e022      	b.n	80043ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004370:	d11f      	bne.n	80043b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004376:	e01c      	b.n	80043b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d903      	bls.n	8004386 <DMA_CheckFifoParam+0xb6>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d003      	beq.n	800438c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004384:	e018      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      break;
 800438a:	e015      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
      break;
 800439c:	e00b      	b.n	80043b6 <DMA_CheckFifoParam+0xe6>
      break;
 800439e:	bf00      	nop
 80043a0:	e00a      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043a2:	bf00      	nop
 80043a4:	e008      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043a6:	bf00      	nop
 80043a8:	e006      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043aa:	bf00      	nop
 80043ac:	e004      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043b6:	bf00      	nop
    }
  } 
  
  return status; 
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop

080043c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e159      	b.n	8004698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043e4:	2201      	movs	r2, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f040 8148 	bne.w	8004692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d005      	beq.n	800441a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004416:	2b02      	cmp	r3, #2
 8004418:	d130      	bne.n	800447c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	2203      	movs	r2, #3
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004450:	2201      	movs	r2, #1
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 0201 	and.w	r2, r3, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b03      	cmp	r3, #3
 8004486:	d017      	beq.n	80044b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d123      	bne.n	800450c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	08da      	lsrs	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3208      	adds	r2, #8
 80044cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	220f      	movs	r2, #15
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	08da      	lsrs	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3208      	adds	r2, #8
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0203 	and.w	r2, r3, #3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a2 	beq.w	8004692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4a56      	ldr	r2, [pc, #344]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800455c:	6453      	str	r3, [r2, #68]	; 0x44
 800455e:	4b54      	ldr	r3, [pc, #336]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800456a:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_GPIO_Init+0x2ec>)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	3302      	adds	r3, #2
 8004572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	220f      	movs	r2, #15
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a49      	ldr	r2, [pc, #292]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d019      	beq.n	80045ca <HAL_GPIO_Init+0x202>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a48      	ldr	r2, [pc, #288]	; (80046bc <HAL_GPIO_Init+0x2f4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <HAL_GPIO_Init+0x1fe>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a47      	ldr	r2, [pc, #284]	; (80046c0 <HAL_GPIO_Init+0x2f8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00d      	beq.n	80045c2 <HAL_GPIO_Init+0x1fa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <HAL_GPIO_Init+0x2fc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <HAL_GPIO_Init+0x1f6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a45      	ldr	r2, [pc, #276]	; (80046c8 <HAL_GPIO_Init+0x300>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_GPIO_Init+0x1f2>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e008      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045ba:	2307      	movs	r3, #7
 80045bc:	e006      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045be:	2303      	movs	r3, #3
 80045c0:	e004      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e002      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045ca:	2300      	movs	r3, #0
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	f002 0203 	and.w	r2, r2, #3
 80045d2:	0092      	lsls	r2, r2, #2
 80045d4:	4093      	lsls	r3, r2
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045dc:	4935      	ldr	r1, [pc, #212]	; (80046b4 <HAL_GPIO_Init+0x2ec>)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	3302      	adds	r3, #2
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ea:	4b38      	ldr	r3, [pc, #224]	; (80046cc <HAL_GPIO_Init+0x304>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800460e:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004614:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <HAL_GPIO_Init+0x304>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800463e:	4b23      	ldr	r3, [pc, #140]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_GPIO_Init+0x304>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800468c:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <HAL_GPIO_Init+0x304>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3301      	adds	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	f67f aea2 	bls.w	80043e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3724      	adds	r7, #36	; 0x24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40013800 	.word	0x40013800
 80046b8:	40020000 	.word	0x40020000
 80046bc:	40020400 	.word	0x40020400
 80046c0:	40020800 	.word	0x40020800
 80046c4:	40020c00 	.word	0x40020c00
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40013c00 	.word	0x40013c00

080046d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
 80046dc:	4613      	mov	r3, r2
 80046de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e0:	787b      	ldrb	r3, [r7, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046ec:	e003      	b.n	80046f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ee:	887b      	ldrh	r3, [r7, #2]
 80046f0:	041a      	lsls	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800470e:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fd f91a 	bl	800195c <HAL_GPIO_EXTI_Callback>
  }
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40013c00 	.word	0x40013c00

08004734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	b08f      	sub	sp, #60	; 0x3c
 8004738:	af0a      	add	r7, sp, #40	; 0x28
 800473a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e10f      	b.n	8004966 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f007 f877 	bl	800b854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f003 fb5e 	bl	8007e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	687e      	ldr	r6, [r7, #4]
 8004792:	466d      	mov	r5, sp
 8004794:	f106 0410 	add.w	r4, r6, #16
 8004798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800479a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800479c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800479e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80047a8:	1d33      	adds	r3, r6, #4
 80047aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ac:	6838      	ldr	r0, [r7, #0]
 80047ae:	f003 fa35 	bl	8007c1c <USB_CoreInit>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0d0      	b.n	8004966 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fb4c 	bl	8007e68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e04a      	b.n	800486c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	333d      	adds	r3, #61	; 0x3d
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	333c      	adds	r3, #60	; 0x3c
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047fe:	7bfa      	ldrb	r2, [r7, #15]
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	b298      	uxth	r0, r3
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3344      	adds	r3, #68	; 0x44
 8004812:	4602      	mov	r2, r0
 8004814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	3340      	adds	r3, #64	; 0x40
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800482a:	7bfa      	ldrb	r2, [r7, #15]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	3348      	adds	r3, #72	; 0x48
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	334c      	adds	r3, #76	; 0x4c
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3354      	adds	r3, #84	; 0x54
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	3301      	adds	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	7bfa      	ldrb	r2, [r7, #15]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d3af      	bcc.n	80047d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	e044      	b.n	8004906 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800487c:	7bfa      	ldrb	r2, [r7, #15]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048d4:	7bfa      	ldrb	r2, [r7, #15]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	3301      	adds	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	7bfa      	ldrb	r2, [r7, #15]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d3b5      	bcc.n	800487c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	687e      	ldr	r6, [r7, #4]
 8004918:	466d      	mov	r5, sp
 800491a:	f106 0410 	add.w	r4, r6, #16
 800491e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800492a:	e885 0003 	stmia.w	r5, {r0, r1}
 800492e:	1d33      	adds	r3, r6, #4
 8004930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004932:	6838      	ldr	r0, [r7, #0]
 8004934:	f003 fae4 	bl	8007f00 <USB_DevInit>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e00d      	b.n	8004966 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f004 fc33 	bl	80091ca <USB_DevDisconnect>

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800496e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_PCD_Start+0x1c>
 8004986:	2302      	movs	r3, #2
 8004988:	e020      	b.n	80049cc <HAL_PCD_Start+0x5e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	2b01      	cmp	r3, #1
 8004998:	d109      	bne.n	80049ae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d005      	beq.n	80049ae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f003 fa36 	bl	8007e24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f004 fbe3 	bl	8009188 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b08d      	sub	sp, #52	; 0x34
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f004 fca1 	bl	8009332 <USB_GetMode>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 848a 	bne.w	800530c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f004 fc05 	bl	800920c <USB_ReadInterrupts>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8480 	beq.w	800530a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 fbf2 	bl	800920c <USB_ReadInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d107      	bne.n	8004a42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f002 0202 	and.w	r2, r2, #2
 8004a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 fbe0 	bl	800920c <USB_ReadInterrupts>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d161      	bne.n	8004b1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0210 	bic.w	r2, r2, #16
 8004a64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f003 020f 	and.w	r2, r3, #15
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	3304      	adds	r3, #4
 8004a84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	0c5b      	lsrs	r3, r3, #17
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d124      	bne.n	8004adc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d035      	beq.n	8004b0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6a38      	ldr	r0, [r7, #32]
 8004ab2:	f004 fa17 	bl	8008ee4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ac2:	441a      	add	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ad4:	441a      	add	r2, r3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	621a      	str	r2, [r3, #32]
 8004ada:	e016      	b.n	8004b0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	0c5b      	lsrs	r3, r3, #17
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	2b06      	cmp	r3, #6
 8004ae6:	d110      	bne.n	8004b0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004aee:	2208      	movs	r2, #8
 8004af0:	4619      	mov	r1, r3
 8004af2:	6a38      	ldr	r0, [r7, #32]
 8004af4:	f004 f9f6 	bl	8008ee4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b04:	441a      	add	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699a      	ldr	r2, [r3, #24]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0210 	orr.w	r2, r2, #16
 8004b18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f004 fb74 	bl	800920c <USB_ReadInterrupts>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b2e:	f040 80a7 	bne.w	8004c80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f004 fb79 	bl	8009232 <USB_ReadDevAllOutEpInterrupt>
 8004b40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b42:	e099      	b.n	8004c78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 808e 	beq.w	8004c6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f004 fb9d 	bl	800929a <USB_ReadDevOutEPInterrupt>
 8004b60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00c      	beq.n	8004b86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fec3 	bl	800590c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00c      	beq.n	8004baa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 ff99 	bl	8005adc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d030      	beq.n	8004c32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d109      	bne.n	8004bf0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	78db      	ldrb	r3, [r3, #3]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d108      	bne.n	8004c20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f006 ff16 	bl	800ba4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2302      	movs	r3, #2
 8004c30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	461a      	mov	r2, r3
 8004c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	3301      	adds	r3, #1
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f47f af62 	bne.w	8004b44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f004 fac1 	bl	800920c <USB_ReadInterrupts>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c94:	f040 80db 	bne.w	8004e4e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f004 fae2 	bl	8009266 <USB_ReadDevAllInEpInterrupt>
 8004ca2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ca8:	e0cd      	b.n	8004e46 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80c2 	beq.w	8004e3a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f004 fb08 	bl	80092d6 <USB_ReadDevInEPInterrupt>
 8004cc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d057      	beq.n	8004d82 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2201      	movs	r2, #1
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	461a      	mov	r2, r3
 8004d04:	2301      	movs	r3, #1
 8004d06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d132      	bne.n	8004d76 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	334c      	adds	r3, #76	; 0x4c
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4403      	add	r3, r0
 8004d30:	3348      	adds	r3, #72	; 0x48
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4419      	add	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4403      	add	r3, r0
 8004d44:	334c      	adds	r3, #76	; 0x4c
 8004d46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d113      	bne.n	8004d76 <HAL_PCD_IRQHandler+0x3a2>
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3354      	adds	r3, #84	; 0x54
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d108      	bne.n	8004d76 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2101      	movs	r1, #1
 8004d72:	f004 fb0f 	bl	8009394 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f006 fdea 	bl	800b956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	461a      	mov	r2, r3
 8004db6:	2310      	movs	r3, #16
 8004db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2340      	movs	r3, #64	; 0x40
 8004dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d023      	beq.n	8004e28 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de2:	6a38      	ldr	r0, [r7, #32]
 8004de4:	f003 f9f0 	bl	80081c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3338      	adds	r3, #56	; 0x38
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	3304      	adds	r3, #4
 8004dfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	78db      	ldrb	r3, [r3, #3]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d108      	bne.n	8004e16 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f006 fe2d 	bl	800ba70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	461a      	mov	r2, r3
 8004e24:	2302      	movs	r3, #2
 8004e26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fcdb 	bl	80057f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f47f af2e 	bne.w	8004caa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f004 f9da 	bl	800920c <USB_ReadInterrupts>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e62:	d122      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d108      	bne.n	8004e94 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fec3 	bl	8005c18 <HAL_PCDEx_LPM_Callback>
 8004e92:	e002      	b.n	8004e9a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f006 fdcb 	bl	800ba30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f004 f9ac 	bl	800920c <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ebe:	d112      	bne.n	8004ee6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d102      	bne.n	8004ed6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f006 fd87 	bl	800b9e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ee4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f004 f98e 	bl	800920c <USB_ReadInterrupts>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efa:	f040 80b7 	bne.w	800506c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2110      	movs	r1, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f003 f955 	bl	80081c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f22:	e046      	b.n	8004fb2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	461a      	mov	r2, r3
 8004f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f36:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	461a      	mov	r2, r3
 8004f66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004faa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	3301      	adds	r3, #1
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3b3      	bcc.n	8004f24 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004fce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d016      	beq.n	8005006 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe8:	f043 030b 	orr.w	r3, r3, #11
 8004fec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ffe:	f043 030b 	orr.w	r3, r3, #11
 8005002:	6453      	str	r3, [r2, #68]	; 0x44
 8005004:	e015      	b.n	8005032 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005018:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800501c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502c:	f043 030b 	orr.w	r3, r3, #11
 8005030:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005040:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005044:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005056:	461a      	mov	r2, r3
 8005058:	f004 f99c 	bl	8009394 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800506a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f004 f8cb 	bl	800920c <USB_ReadInterrupts>
 8005076:	4603      	mov	r3, r0
 8005078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005080:	d124      	bne.n	80050cc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f004 f961 	bl	800934e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f003 f916 	bl	80082c2 <USB_GetDevSpeed>
 8005096:	4603      	mov	r3, r0
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681c      	ldr	r4, [r3, #0]
 80050a2:	f001 f9e9 	bl	8006478 <HAL_RCC_GetHCLKFreq>
 80050a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	4620      	mov	r0, r4
 80050b2:	f002 fe15 	bl	8007ce0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f006 fc75 	bl	800b9a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80050ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f004 f89b 	bl	800920c <USB_ReadInterrupts>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10a      	bne.n	80050f6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f006 fc52 	bl	800b98a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f002 0208 	and.w	r2, r2, #8
 80050f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 f886 	bl	800920c <USB_ReadInterrupts>
 8005100:	4603      	mov	r3, r0
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d122      	bne.n	8005150 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005116:	2301      	movs	r3, #1
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	e014      	b.n	8005146 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	b2db      	uxtb	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fb27 	bl	800578e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	3301      	adds	r3, #1
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	429a      	cmp	r2, r3
 800514e:	d3e5      	bcc.n	800511c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f004 f859 	bl	800920c <USB_ReadInterrupts>
 800515a:	4603      	mov	r3, r0
 800515c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005164:	d13b      	bne.n	80051de <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005166:	2301      	movs	r3, #1
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	e02b      	b.n	80051c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3340      	adds	r3, #64	; 0x40
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d115      	bne.n	80051be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005192:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005194:	2b00      	cmp	r3, #0
 8005196:	da12      	bge.n	80051be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	333f      	adds	r3, #63	; 0x3f
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fae8 	bl	800578e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3ce      	bcc.n	800516c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80051dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f004 f812 	bl	800920c <USB_ReadInterrupts>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051f2:	d155      	bne.n	80052a0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051f4:	2301      	movs	r3, #1
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
 80051f8:	e045      	b.n	8005286 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d12e      	bne.n	8005280 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005222:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005224:	2b00      	cmp	r3, #0
 8005226:	da2b      	bge.n	8005280 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005234:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005238:	429a      	cmp	r2, r3
 800523a:	d121      	bne.n	8005280 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800527c:	6053      	str	r3, [r2, #4]
            break;
 800527e:	e007      	b.n	8005290 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	3301      	adds	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	429a      	cmp	r2, r3
 800528e:	d3b4      	bcc.n	80051fa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800529e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f003 ffb1 	bl	800920c <USB_ReadInterrupts>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b4:	d10a      	bne.n	80052cc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f006 fbec 	bl	800ba94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80052ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f003 ff9b 	bl	800920c <USB_ReadInterrupts>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d115      	bne.n	800530c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f006 fbdc 	bl	800bab0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	e000      	b.n	800530c <HAL_PCD_IRQHandler+0x938>
      return;
 800530a:	bf00      	nop
    }
  }
}
 800530c:	3734      	adds	r7, #52	; 0x34
 800530e:	46bd      	mov	sp, r7
 8005310:	bd90      	pop	{r4, r7, pc}

08005312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_PCD_SetAddress+0x1a>
 8005328:	2302      	movs	r3, #2
 800532a:	e013      	b.n	8005354 <HAL_PCD_SetAddress+0x42>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f003 fef9 	bl	800913c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	4608      	mov	r0, r1
 8005366:	4611      	mov	r1, r2
 8005368:	461a      	mov	r2, r3
 800536a:	4603      	mov	r3, r0
 800536c:	70fb      	strb	r3, [r7, #3]
 800536e:	460b      	mov	r3, r1
 8005370:	803b      	strh	r3, [r7, #0]
 8005372:	4613      	mov	r3, r2
 8005374:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800537a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800537e:	2b00      	cmp	r3, #0
 8005380:	da0f      	bge.n	80053a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	3338      	adds	r3, #56	; 0x38
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	3304      	adds	r3, #4
 8005398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	705a      	strb	r2, [r3, #1]
 80053a0:	e00f      	b.n	80053c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 020f 	and.w	r2, r3, #15
 80053a8:	4613      	mov	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	3304      	adds	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053ce:	883a      	ldrh	r2, [r7, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	78ba      	ldrb	r2, [r7, #2]
 80053d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053ec:	78bb      	ldrb	r3, [r7, #2]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d102      	bne.n	80053f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_PCD_EP_Open+0xaa>
 8005402:	2302      	movs	r3, #2
 8005404:	e00e      	b.n	8005424 <HAL_PCD_EP_Open+0xc8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	4618      	mov	r0, r3
 8005416:	f002 ff79 	bl	800830c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005422:	7afb      	ldrb	r3, [r7, #11]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800543c:	2b00      	cmp	r3, #0
 800543e:	da0f      	bge.n	8005460 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	3338      	adds	r3, #56	; 0x38
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	3304      	adds	r3, #4
 8005456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	705a      	strb	r2, [r3, #1]
 800545e:	e00f      	b.n	8005480 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	f003 020f 	and.w	r2, r3, #15
 8005466:	4613      	mov	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	3304      	adds	r3, #4
 8005478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	b2da      	uxtb	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_PCD_EP_Close+0x6e>
 8005496:	2302      	movs	r3, #2
 8005498:	e00e      	b.n	80054b8 <HAL_PCD_EP_Close+0x8c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 ffb7 	bl	800841c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	460b      	mov	r3, r1
 80054ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054d0:	7afb      	ldrb	r3, [r7, #11]
 80054d2:	f003 020f 	and.w	r2, r3, #15
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	3304      	adds	r3, #4
 80054e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2200      	movs	r2, #0
 8005500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	b2da      	uxtb	r2, r3
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d102      	bne.n	800551c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	6979      	ldr	r1, [r7, #20]
 8005534:	f003 fa96 	bl	8008a64 <USB_EP0StartXfer>
 8005538:	e008      	b.n	800554c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	6979      	ldr	r1, [r7, #20]
 8005548:	f003 f844 	bl	80085d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005578:	681b      	ldr	r3, [r3, #0]
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b086      	sub	sp, #24
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	460b      	mov	r3, r1
 8005594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	f003 020f 	and.w	r2, r3, #15
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	3338      	adds	r3, #56	; 0x38
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	3304      	adds	r3, #4
 80055ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2200      	movs	r2, #0
 80055be:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2201      	movs	r2, #1
 80055c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c6:	7afb      	ldrb	r3, [r7, #11]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d102      	bne.n	80055e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055e0:	7afb      	ldrb	r3, [r7, #11]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	6979      	ldr	r1, [r7, #20]
 80055f8:	f003 fa34 	bl	8008a64 <USB_EP0StartXfer>
 80055fc:	e008      	b.n	8005610 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	6979      	ldr	r1, [r7, #20]
 800560c:	f002 ffe2 	bl	80085d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	f003 020f 	and.w	r2, r3, #15
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d901      	bls.n	8005638 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e050      	b.n	80056da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800563c:	2b00      	cmp	r3, #0
 800563e:	da0f      	bge.n	8005660 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	3338      	adds	r3, #56	; 0x38
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	3304      	adds	r3, #4
 8005656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	705a      	strb	r2, [r3, #1]
 800565e:	e00d      	b.n	800567c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	3304      	adds	r3, #4
 8005674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_PCD_EP_SetStall+0x82>
 8005698:	2302      	movs	r3, #2
 800569a:	e01e      	b.n	80056da <HAL_PCD_EP_SetStall+0xc0>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f003 fc72 	bl	8008f94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	b2d9      	uxtb	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056ca:	461a      	mov	r2, r3
 80056cc:	f003 fe62 	bl	8009394 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	f003 020f 	and.w	r2, r3, #15
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d901      	bls.n	8005700 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e042      	b.n	8005786 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005704:	2b00      	cmp	r3, #0
 8005706:	da0f      	bge.n	8005728 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	f003 020f 	and.w	r2, r3, #15
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	3338      	adds	r3, #56	; 0x38
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	4413      	add	r3, r2
 800571c:	3304      	adds	r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	705a      	strb	r2, [r3, #1]
 8005726:	e00f      	b.n	8005748 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	3304      	adds	r3, #4
 8005740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	b2da      	uxtb	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_PCD_EP_ClrStall+0x86>
 8005764:	2302      	movs	r3, #2
 8005766:	e00e      	b.n	8005786 <HAL_PCD_EP_ClrStall+0xa4>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	4618      	mov	r0, r3
 8005778:	f003 fc7a 	bl	8009070 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800579a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da0c      	bge.n	80057bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	4613      	mov	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	3338      	adds	r3, #56	; 0x38
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	4413      	add	r3, r2
 80057b6:	3304      	adds	r3, #4
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e00c      	b.n	80057d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	f003 020f 	and.w	r2, r3, #15
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	3304      	adds	r3, #4
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	4618      	mov	r0, r3
 80057de:	f003 fa99 	bl	8008d14 <USB_EPStopXfer>
 80057e2:	4603      	mov	r3, r0
 80057e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80057e6:	7afb      	ldrb	r3, [r7, #11]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	3338      	adds	r3, #56	; 0x38
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	3304      	adds	r3, #4
 8005816:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1a      	ldr	r2, [r3, #32]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d901      	bls.n	8005828 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e06c      	b.n	8005902 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	429a      	cmp	r2, r3
 800583c:	d902      	bls.n	8005844 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3303      	adds	r3, #3
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800584c:	e02b      	b.n	80058a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	429a      	cmp	r2, r3
 8005862:	d902      	bls.n	800586a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3303      	adds	r3, #3
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6919      	ldr	r1, [r3, #16]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005882:	b2db      	uxtb	r3, r3
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	4603      	mov	r3, r0
 8005888:	6978      	ldr	r0, [r7, #20]
 800588a:	f003 faed 	bl	8008e68 <USB_WritePacket>

    ep->xfer_buff  += len;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	441a      	add	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d809      	bhi.n	80058d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a1a      	ldr	r2, [r3, #32]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d203      	bcs.n	80058d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1be      	bne.n	800584e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d811      	bhi.n	8005900 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	2201      	movs	r2, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	6939      	ldr	r1, [r7, #16]
 80058f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058fc:	4013      	ands	r3, r2
 80058fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	333c      	adds	r3, #60	; 0x3c
 8005924:	3304      	adds	r3, #4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d17b      	bne.n	8005a3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4a61      	ldr	r2, [pc, #388]	; (8005ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	f240 80b9 	bls.w	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80b3 	beq.w	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	461a      	mov	r2, r3
 8005970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005974:	6093      	str	r3, [r2, #8]
 8005976:	e0a7      	b.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	461a      	mov	r2, r3
 8005990:	2320      	movs	r3, #32
 8005992:	6093      	str	r3, [r2, #8]
 8005994:	e098      	b.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8093 	bne.w	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4a4b      	ldr	r2, [pc, #300]	; (8005ad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d90f      	bls.n	80059ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	461a      	mov	r2, r3
 80059c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c6:	6093      	str	r3, [r2, #8]
 80059c8:	e07e      	b.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	3304      	adds	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	0159      	lsls	r1, r3, #5
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	440b      	add	r3, r1
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d114      	bne.n	8005a2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a14:	461a      	mov	r2, r3
 8005a16:	2101      	movs	r1, #1
 8005a18:	f003 fcbc 	bl	8009394 <USB_EP0_OutStart>
 8005a1c:	e006      	b.n	8005a2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	441a      	add	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f005 ff74 	bl	800b920 <HAL_PCD_DataOutStageCallback>
 8005a38:	e046      	b.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d124      	bne.n	8005a8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5e:	6093      	str	r3, [r2, #8]
 8005a60:	e032      	b.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	461a      	mov	r2, r3
 8005a7a:	2320      	movs	r3, #32
 8005a7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f005 ff4b 	bl	800b920 <HAL_PCD_DataOutStageCallback>
 8005a8a:	e01d      	b.n	8005ac8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d114      	bne.n	8005abc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d108      	bne.n	8005abc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	f003 fc6c 	bl	8009394 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f005 ff2c 	bl	800b920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	4f54300a 	.word	0x4f54300a
 8005ad8:	4f54310a 	.word	0x4f54310a

08005adc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	333c      	adds	r3, #60	; 0x3c
 8005af4:	3304      	adds	r3, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d90e      	bls.n	8005b30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f005 fee3 	bl	800b8fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d90c      	bls.n	8005b58 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d108      	bne.n	8005b58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b50:	461a      	mov	r2, r3
 8005b52:	2101      	movs	r1, #1
 8005b54:	f003 fc1e 	bl	8009394 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	4f54300a 	.word	0x4f54300a

08005b68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
 8005b74:	4613      	mov	r3, r2
 8005b76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d107      	bne.n	8005b96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b86:	883b      	ldrh	r3, [r7, #0]
 8005b88:	0419      	lsls	r1, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
 8005b94:	e028      	b.n	8005be8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e00d      	b.n	8005bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	3340      	adds	r3, #64	; 0x40
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
 8005bc6:	7bfa      	ldrb	r2, [r7, #15]
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d3ec      	bcc.n	8005baa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005bd0:	883b      	ldrh	r3, [r7, #0]
 8005bd2:	0418      	lsls	r0, r3, #16
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6819      	ldr	r1, [r3, #0]
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	4302      	orrs	r2, r0
 8005be0:	3340      	adds	r3, #64	; 0x40
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	887a      	ldrh	r2, [r7, #2]
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e267      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d075      	beq.n	8005d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c4e:	4b88      	ldr	r3, [pc, #544]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d00c      	beq.n	8005c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c5a:	4b85      	ldr	r3, [pc, #532]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d112      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c66:	4b82      	ldr	r3, [pc, #520]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c74:	4b7e      	ldr	r3, [pc, #504]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05b      	beq.n	8005d38 <HAL_RCC_OscConfig+0x108>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d157      	bne.n	8005d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e242      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x74>
 8005c96:	4b76      	ldr	r3, [pc, #472]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a75      	ldr	r2, [pc, #468]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e01d      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x98>
 8005cae:	4b70      	ldr	r3, [pc, #448]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a6f      	ldr	r2, [pc, #444]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4b6d      	ldr	r3, [pc, #436]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a6c      	ldr	r2, [pc, #432]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e00b      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005cc8:	4b69      	ldr	r3, [pc, #420]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a68      	ldr	r2, [pc, #416]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d013      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fd faac 	bl	8003244 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf0:	f7fd faa8 	bl	8003244 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e207      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	4b5b      	ldr	r3, [pc, #364]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0xc0>
 8005d0e:	e014      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fd fa98 	bl	8003244 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d18:	f7fd fa94 	bl	8003244 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	; 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e1f3      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2a:	4b51      	ldr	r3, [pc, #324]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0xe8>
 8005d36:	e000      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d063      	beq.n	8005e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d52:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d11c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5e:	4b44      	ldr	r3, [pc, #272]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d116      	bne.n	8005d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_RCC_OscConfig+0x152>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e1c7      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d82:	4b3b      	ldr	r3, [pc, #236]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4937      	ldr	r1, [pc, #220]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d96:	e03a      	b.n	8005e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da0:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCC_OscConfig+0x244>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fd fa4d 	bl	8003244 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dae:	f7fd fa49 	bl	8003244 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e1a8      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc0:	4b2b      	ldr	r3, [pc, #172]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dcc:	4b28      	ldr	r3, [pc, #160]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4925      	ldr	r1, [pc, #148]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]
 8005de0:	e015      	b.n	8005e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x244>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fd fa2c 	bl	8003244 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fd fa28 	bl	8003244 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e187      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d036      	beq.n	8005e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e22:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <HAL_RCC_OscConfig+0x248>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fd fa0c 	bl	8003244 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e30:	f7fd fa08 	bl	8003244 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e167      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x200>
 8005e4e:	e01b      	b.n	8005e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e50:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <HAL_RCC_OscConfig+0x248>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e56:	f7fd f9f5 	bl	8003244 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e5c:	e00e      	b.n	8005e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e5e:	f7fd f9f1 	bl	8003244 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d907      	bls.n	8005e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e150      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470000 	.word	0x42470000
 8005e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7c:	4b88      	ldr	r3, [pc, #544]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ea      	bne.n	8005e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8097 	beq.w	8005fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b81      	ldr	r3, [pc, #516]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	4b7d      	ldr	r3, [pc, #500]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	4a7c      	ldr	r2, [pc, #496]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb6:	4b7a      	ldr	r3, [pc, #488]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec6:	4b77      	ldr	r3, [pc, #476]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d118      	bne.n	8005f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ed2:	4b74      	ldr	r3, [pc, #464]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a73      	ldr	r2, [pc, #460]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ede:	f7fd f9b1 	bl	8003244 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee6:	f7fd f9ad 	bl	8003244 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e10c      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef8:	4b6a      	ldr	r3, [pc, #424]	; (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d106      	bne.n	8005f1a <HAL_RCC_OscConfig+0x2ea>
 8005f0c:	4b64      	ldr	r3, [pc, #400]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	4a63      	ldr	r2, [pc, #396]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70
 8005f18:	e01c      	b.n	8005f54 <HAL_RCC_OscConfig+0x324>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x30c>
 8005f22:	4b5f      	ldr	r3, [pc, #380]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	4a5e      	ldr	r2, [pc, #376]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f28:	f043 0304 	orr.w	r3, r3, #4
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2e:	4b5c      	ldr	r3, [pc, #368]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	4a5b      	ldr	r2, [pc, #364]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCC_OscConfig+0x324>
 8005f3c:	4b58      	ldr	r3, [pc, #352]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	4a57      	ldr	r2, [pc, #348]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	6713      	str	r3, [r2, #112]	; 0x70
 8005f48:	4b55      	ldr	r3, [pc, #340]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	4a54      	ldr	r2, [pc, #336]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	f023 0304 	bic.w	r3, r3, #4
 8005f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d015      	beq.n	8005f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fd f972 	bl	8003244 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f62:	e00a      	b.n	8005f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fd f96e 	bl	8003244 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0cb      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7a:	4b49      	ldr	r3, [pc, #292]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0ee      	beq.n	8005f64 <HAL_RCC_OscConfig+0x334>
 8005f86:	e014      	b.n	8005fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f88:	f7fd f95c 	bl	8003244 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8e:	e00a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f90:	f7fd f958 	bl	8003244 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e0b5      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa6:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1ee      	bne.n	8005f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb8:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	4a38      	ldr	r2, [pc, #224]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80a1 	beq.w	8006110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fce:	4b34      	ldr	r3, [pc, #208]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d05c      	beq.n	8006094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d141      	bne.n	8006066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <HAL_RCC_OscConfig+0x478>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fd f92c 	bl	8003244 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fd f928 	bl	8003244 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e087      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	3b01      	subs	r3, #1
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	491b      	ldr	r1, [pc, #108]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006038:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <HAL_RCC_OscConfig+0x478>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7fd f901 	bl	8003244 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006046:	f7fd f8fd 	bl	8003244 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e05c      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006058:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x416>
 8006064:	e054      	b.n	8006110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <HAL_RCC_OscConfig+0x478>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606c:	f7fd f8ea 	bl	8003244 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006074:	f7fd f8e6 	bl	8003244 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e045      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x444>
 8006092:	e03d      	b.n	8006110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d107      	bne.n	80060ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e038      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40007000 	.word	0x40007000
 80060a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <HAL_RCC_OscConfig+0x4ec>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d028      	beq.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d121      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d11a      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060dc:	4013      	ands	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d111      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	3b01      	subs	r3, #1
 80060f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d107      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023800 	.word	0x40023800

08006120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0cc      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006134:	4b68      	ldr	r3, [pc, #416]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d90c      	bls.n	800615c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006142:	4b65      	ldr	r3, [pc, #404]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800614a:	4b63      	ldr	r3, [pc, #396]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d001      	beq.n	800615c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0b8      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006174:	4b59      	ldr	r3, [pc, #356]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a58      	ldr	r2, [pc, #352]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800617e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800618c:	4b53      	ldr	r3, [pc, #332]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a52      	ldr	r2, [pc, #328]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006198:	4b50      	ldr	r3, [pc, #320]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	494d      	ldr	r1, [pc, #308]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d044      	beq.n	8006240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d119      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e07f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d003      	beq.n	80061de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d107      	bne.n	80061ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061de:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e06f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ee:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e067      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061fe:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f023 0203 	bic.w	r2, r3, #3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4934      	ldr	r1, [pc, #208]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	4313      	orrs	r3, r2
 800620e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006210:	f7fd f818 	bl	8003244 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006216:	e00a      	b.n	800622e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006218:	f7fd f814 	bl	8003244 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e04f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622e:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 020c 	and.w	r2, r3, #12
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	429a      	cmp	r2, r3
 800623e:	d1eb      	bne.n	8006218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006240:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d20c      	bcs.n	8006268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e032      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006274:	4b19      	ldr	r3, [pc, #100]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4916      	ldr	r1, [pc, #88]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	490e      	ldr	r1, [pc, #56]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062a6:	f000 f821 	bl	80062ec <HAL_RCC_GetSysClockFreq>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	490a      	ldr	r1, [pc, #40]	; (80062e0 <HAL_RCC_ClockConfig+0x1c0>)
 80062b8:	5ccb      	ldrb	r3, [r1, r3]
 80062ba:	fa22 f303 	lsr.w	r3, r2, r3
 80062be:	4a09      	ldr	r2, [pc, #36]	; (80062e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_RCC_ClockConfig+0x1c8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fb fd58 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40023c00 	.word	0x40023c00
 80062dc:	40023800 	.word	0x40023800
 80062e0:	0801467c 	.word	0x0801467c
 80062e4:	20000010 	.word	0x20000010
 80062e8:	20000014 	.word	0x20000014

080062ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b090      	sub	sp, #64	; 0x40
 80062f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
 80062f8:	2300      	movs	r3, #0
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fc:	2300      	movs	r3, #0
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006304:	4b59      	ldr	r3, [pc, #356]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 030c 	and.w	r3, r3, #12
 800630c:	2b08      	cmp	r3, #8
 800630e:	d00d      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x40>
 8006310:	2b08      	cmp	r3, #8
 8006312:	f200 80a1 	bhi.w	8006458 <HAL_RCC_GetSysClockFreq+0x16c>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_RCC_GetSysClockFreq+0x34>
 800631a:	2b04      	cmp	r3, #4
 800631c:	d003      	beq.n	8006326 <HAL_RCC_GetSysClockFreq+0x3a>
 800631e:	e09b      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006320:	4b53      	ldr	r3, [pc, #332]	; (8006470 <HAL_RCC_GetSysClockFreq+0x184>)
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006324:	e09b      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006326:	4b53      	ldr	r3, [pc, #332]	; (8006474 <HAL_RCC_GetSysClockFreq+0x188>)
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800632a:	e098      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800632c:	4b4f      	ldr	r3, [pc, #316]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006336:	4b4d      	ldr	r3, [pc, #308]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d028      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006342:	4b4a      	ldr	r3, [pc, #296]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	2200      	movs	r2, #0
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	627a      	str	r2, [r7, #36]	; 0x24
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006354:	2100      	movs	r1, #0
 8006356:	4b47      	ldr	r3, [pc, #284]	; (8006474 <HAL_RCC_GetSysClockFreq+0x188>)
 8006358:	fb03 f201 	mul.w	r2, r3, r1
 800635c:	2300      	movs	r3, #0
 800635e:	fb00 f303 	mul.w	r3, r0, r3
 8006362:	4413      	add	r3, r2
 8006364:	4a43      	ldr	r2, [pc, #268]	; (8006474 <HAL_RCC_GetSysClockFreq+0x188>)
 8006366:	fba0 1202 	umull	r1, r2, r0, r2
 800636a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800636c:	460a      	mov	r2, r1
 800636e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006372:	4413      	add	r3, r2
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006378:	2200      	movs	r2, #0
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	61fa      	str	r2, [r7, #28]
 800637e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006386:	f7fa fc87 	bl	8000c98 <__aeabi_uldivmod>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4613      	mov	r3, r2
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006392:	e053      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006394:	4b35      	ldr	r3, [pc, #212]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	099b      	lsrs	r3, r3, #6
 800639a:	2200      	movs	r2, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	617a      	str	r2, [r7, #20]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063a6:	f04f 0b00 	mov.w	fp, #0
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	f04f 0000 	mov.w	r0, #0
 80063b2:	f04f 0100 	mov.w	r1, #0
 80063b6:	0159      	lsls	r1, r3, #5
 80063b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063bc:	0150      	lsls	r0, r2, #5
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	ebb2 080a 	subs.w	r8, r2, sl
 80063c6:	eb63 090b 	sbc.w	r9, r3, fp
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80063d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80063da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80063de:	ebb2 0408 	subs.w	r4, r2, r8
 80063e2:	eb63 0509 	sbc.w	r5, r3, r9
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	00eb      	lsls	r3, r5, #3
 80063f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063f4:	00e2      	lsls	r2, r4, #3
 80063f6:	4614      	mov	r4, r2
 80063f8:	461d      	mov	r5, r3
 80063fa:	eb14 030a 	adds.w	r3, r4, sl
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	eb45 030b 	adc.w	r3, r5, fp
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006412:	4629      	mov	r1, r5
 8006414:	028b      	lsls	r3, r1, #10
 8006416:	4621      	mov	r1, r4
 8006418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800641c:	4621      	mov	r1, r4
 800641e:	028a      	lsls	r2, r1, #10
 8006420:	4610      	mov	r0, r2
 8006422:	4619      	mov	r1, r3
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	2200      	movs	r2, #0
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	60fa      	str	r2, [r7, #12]
 800642c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006430:	f7fa fc32 	bl	8000c98 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4613      	mov	r3, r2
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_RCC_GetSysClockFreq+0x180>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	0c1b      	lsrs	r3, r3, #16
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	3301      	adds	r3, #1
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800644c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006456:	e002      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetSysClockFreq+0x184>)
 800645a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800645c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006460:	4618      	mov	r0, r3
 8006462:	3740      	adds	r7, #64	; 0x40
 8006464:	46bd      	mov	sp, r7
 8006466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646a:	bf00      	nop
 800646c:	40023800 	.word	0x40023800
 8006470:	00f42400 	.word	0x00f42400
 8006474:	017d7840 	.word	0x017d7840

08006478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800647c:	4b03      	ldr	r3, [pc, #12]	; (800648c <HAL_RCC_GetHCLKFreq+0x14>)
 800647e:	681b      	ldr	r3, [r3, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000010 	.word	0x20000010

08006490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006494:	f7ff fff0 	bl	8006478 <HAL_RCC_GetHCLKFreq>
 8006498:	4602      	mov	r2, r0
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	0b5b      	lsrs	r3, r3, #13
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	4903      	ldr	r1, [pc, #12]	; (80064b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064a6:	5ccb      	ldrb	r3, [r1, r3]
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40023800 	.word	0x40023800
 80064b4:	0801468c 	.word	0x0801468c

080064b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	220f      	movs	r2, #15
 80064c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <HAL_RCC_GetClockConfig+0x5c>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0203 	and.w	r2, r3, #3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <HAL_RCC_GetClockConfig+0x5c>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064e0:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <HAL_RCC_GetClockConfig+0x5c>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <HAL_RCC_GetClockConfig+0x5c>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	08db      	lsrs	r3, r3, #3
 80064f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064fa:	4b07      	ldr	r3, [pc, #28]	; (8006518 <HAL_RCC_GetClockConfig+0x60>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0207 	and.w	r2, r3, #7
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800
 8006518:	40023c00 	.word	0x40023c00

0800651c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e07b      	b.n	8006626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d108      	bne.n	8006548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653e:	d009      	beq.n	8006554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
 8006546:	e005      	b.n	8006554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fb fb04 	bl	8001b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	ea42 0103 	orr.w	r1, r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0104 	and.w	r1, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f003 0210 	and.w	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b088      	sub	sp, #32
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_SPI_Transmit+0x22>
 800664c:	2302      	movs	r3, #2
 800664e:	e126      	b.n	800689e <HAL_SPI_Transmit+0x270>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006658:	f7fc fdf4 	bl	8003244 <HAL_GetTick>
 800665c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b01      	cmp	r3, #1
 800666c:	d002      	beq.n	8006674 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800666e:	2302      	movs	r3, #2
 8006670:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006672:	e10b      	b.n	800688c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_SPI_Transmit+0x52>
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006684:	e102      	b.n	800688c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2203      	movs	r2, #3
 800668a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	88fa      	ldrh	r2, [r7, #6]
 800669e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066cc:	d10f      	bne.n	80066ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	d007      	beq.n	800670c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800670a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006714:	d14b      	bne.n	80067ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <HAL_SPI_Transmit+0xf6>
 800671e:	8afb      	ldrh	r3, [r7, #22]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d13e      	bne.n	80067a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	881a      	ldrh	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	1c9a      	adds	r2, r3, #2
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006748:	e02b      	b.n	80067a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d112      	bne.n	800677e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	881a      	ldrh	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	86da      	strh	r2, [r3, #54]	; 0x36
 800677c:	e011      	b.n	80067a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800677e:	f7fc fd61 	bl	8003244 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d803      	bhi.n	8006796 <HAL_SPI_Transmit+0x168>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d102      	bne.n	800679c <HAL_SPI_Transmit+0x16e>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067a0:	e074      	b.n	800688c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1ce      	bne.n	800674a <HAL_SPI_Transmit+0x11c>
 80067ac:	e04c      	b.n	8006848 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_SPI_Transmit+0x18e>
 80067b6:	8afb      	ldrh	r3, [r7, #22]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d140      	bne.n	800683e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	330c      	adds	r3, #12
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067e2:	e02c      	b.n	800683e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d113      	bne.n	800681a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	7812      	ldrb	r2, [r2, #0]
 80067fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	86da      	strh	r2, [r3, #54]	; 0x36
 8006818:	e011      	b.n	800683e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800681a:	f7fc fd13 	bl	8003244 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d803      	bhi.n	8006832 <HAL_SPI_Transmit+0x204>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d102      	bne.n	8006838 <HAL_SPI_Transmit+0x20a>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800683c:	e026      	b.n	800688c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1cd      	bne.n	80067e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f9df 	bl	8006c10 <SPI_EndRxTxTransaction>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006866:	2300      	movs	r3, #0
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e000      	b.n	800688c <HAL_SPI_Transmit+0x25e>
  }

error:
 800688a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800689c:	7ffb      	ldrb	r3, [r7, #31]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10f      	bne.n	80068ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
    return;
 80068ea:	e0d7      	b.n	8006a9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <HAL_SPI_IRQHandler+0x66>
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	09db      	lsrs	r3, r3, #7
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
    return;
 800690c:	e0c6      	b.n	8006a9c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10c      	bne.n	8006934 <HAL_SPI_IRQHandler+0x8c>
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	099b      	lsrs	r3, r3, #6
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80b4 	beq.w	8006a9c <HAL_SPI_IRQHandler+0x1f4>
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80ad 	beq.w	8006a9c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d023      	beq.n	8006996 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d011      	beq.n	800697e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f043 0204 	orr.w	r2, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	e00b      	b.n	8006996 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800697e:	2300      	movs	r3, #0
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	693b      	ldr	r3, [r7, #16]
        return;
 8006994:	e082      	b.n	8006a9c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d014      	beq.n	80069cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f043 0201 	orr.w	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	f043 0208 	orr.w	r2, r3, #8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069e4:	2300      	movs	r3, #0
 80069e6:	60bb      	str	r3, [r7, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d04f      	beq.n	8006a9a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a08:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <HAL_SPI_IRQHandler+0x17e>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d034      	beq.n	8006a90 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0203 	bic.w	r2, r2, #3
 8006a34:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d011      	beq.n	8006a62 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a42:	4a18      	ldr	r2, [pc, #96]	; (8006aa4 <HAL_SPI_IRQHandler+0x1fc>)
 8006a44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fd fa30 	bl	8003eb0 <HAL_DMA_Abort_IT>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d016      	beq.n	8006a98 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <HAL_SPI_IRQHandler+0x1fc>)
 8006a70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fd fa1a 	bl	8003eb0 <HAL_DMA_Abort_IT>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006a8e:	e003      	b.n	8006a98 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f809 	bl	8006aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a96:	e000      	b.n	8006a9a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006a98:	bf00      	nop
    return;
 8006a9a:	bf00      	nop
  }
}
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	08006ad9 	.word	0x08006ad9

08006aa8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aca:	b2db      	uxtb	r3, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff ffd8 	bl	8006aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b10:	f7fc fb98 	bl	8003244 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	1a9b      	subs	r3, r3, r2
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b20:	f7fc fb90 	bl	8003244 <HAL_GetTick>
 8006b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b26:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	015b      	lsls	r3, r3, #5
 8006b2c:	0d1b      	lsrs	r3, r3, #20
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b36:	e054      	b.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d050      	beq.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b40:	f7fc fb80 	bl	8003244 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d902      	bls.n	8006b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d13d      	bne.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b6e:	d111      	bne.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b78:	d004      	beq.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b82:	d107      	bne.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9c:	d10f      	bne.n	8006bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e017      	b.n	8006c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4013      	ands	r3, r2
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	2300      	movne	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d19b      	bne.n	8006b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000010 	.word	0x20000010

08006c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <SPI_EndRxTxTransaction+0x7c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <SPI_EndRxTxTransaction+0x80>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	0d5b      	lsrs	r3, r3, #21
 8006c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c3a:	d112      	bne.n	8006c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff ff5a 	bl	8006b00 <SPI_WaitFlagStateUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f043 0220 	orr.w	r2, r3, #32
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e00f      	b.n	8006c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c78:	2b80      	cmp	r3, #128	; 0x80
 8006c7a:	d0f2      	beq.n	8006c62 <SPI_EndRxTxTransaction+0x52>
 8006c7c:	e000      	b.n	8006c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c7e:	bf00      	nop
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000010 	.word	0x20000010
 8006c90:	165e9f81 	.word	0x165e9f81

08006c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e041      	b.n	8006d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fa ffe8 	bl	8001c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f000 fc54 	bl	8007580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d001      	beq.n	8006d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e044      	b.n	8006dd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0201 	orr.w	r2, r2, #1
 8006d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d018      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x6c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d76:	d013      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x6c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1a      	ldr	r2, [pc, #104]	; (8006de8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00e      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x6c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_TIM_Base_Start_IT+0xb8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d009      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x6c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x6c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d111      	bne.n	8006dc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d010      	beq.n	8006dd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc2:	e007      	b.n	8006dd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40014000 	.word	0x40014000

08006df8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e041      	b.n	8006e8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f839 	bl	8006e96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f000 fba2 	bl	8007580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d109      	bne.n	8006ed0 <HAL_TIM_PWM_Start+0x24>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	bf14      	ite	ne
 8006ec8:	2301      	movne	r3, #1
 8006eca:	2300      	moveq	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	e022      	b.n	8006f16 <HAL_TIM_PWM_Start+0x6a>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d109      	bne.n	8006eea <HAL_TIM_PWM_Start+0x3e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	bf14      	ite	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	e015      	b.n	8006f16 <HAL_TIM_PWM_Start+0x6a>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d109      	bne.n	8006f04 <HAL_TIM_PWM_Start+0x58>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e008      	b.n	8006f16 <HAL_TIM_PWM_Start+0x6a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e068      	b.n	8006ff0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_PWM_Start+0x82>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f2c:	e013      	b.n	8006f56 <HAL_TIM_PWM_Start+0xaa>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d104      	bne.n	8006f3e <HAL_TIM_PWM_Start+0x92>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f3c:	e00b      	b.n	8006f56 <HAL_TIM_PWM_Start+0xaa>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d104      	bne.n	8006f4e <HAL_TIM_PWM_Start+0xa2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f4c:	e003      	b.n	8006f56 <HAL_TIM_PWM_Start+0xaa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fdb4 	bl	8007acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a23      	ldr	r2, [pc, #140]	; (8006ff8 <HAL_TIM_PWM_Start+0x14c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d107      	bne.n	8006f7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a1d      	ldr	r2, [pc, #116]	; (8006ff8 <HAL_TIM_PWM_Start+0x14c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d018      	beq.n	8006fba <HAL_TIM_PWM_Start+0x10e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f90:	d013      	beq.n	8006fba <HAL_TIM_PWM_Start+0x10e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a19      	ldr	r2, [pc, #100]	; (8006ffc <HAL_TIM_PWM_Start+0x150>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <HAL_TIM_PWM_Start+0x10e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a17      	ldr	r2, [pc, #92]	; (8007000 <HAL_TIM_PWM_Start+0x154>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_TIM_PWM_Start+0x10e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a16      	ldr	r2, [pc, #88]	; (8007004 <HAL_TIM_PWM_Start+0x158>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_TIM_PWM_Start+0x10e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a14      	ldr	r2, [pc, #80]	; (8007008 <HAL_TIM_PWM_Start+0x15c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d111      	bne.n	8006fde <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b06      	cmp	r3, #6
 8006fca:	d010      	beq.n	8006fee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fdc:	e007      	b.n	8006fee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	40014000 	.word	0x40014000

0800700c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b02      	cmp	r3, #2
 8007020:	d122      	bne.n	8007068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b02      	cmp	r3, #2
 800702e:	d11b      	bne.n	8007068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0202 	mvn.w	r2, #2
 8007038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa77 	bl	8007542 <HAL_TIM_IC_CaptureCallback>
 8007054:	e005      	b.n	8007062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa69 	bl	800752e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa7a 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b04      	cmp	r3, #4
 8007074:	d122      	bne.n	80070bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b04      	cmp	r3, #4
 8007082:	d11b      	bne.n	80070bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0204 	mvn.w	r2, #4
 800708c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa4d 	bl	8007542 <HAL_TIM_IC_CaptureCallback>
 80070a8:	e005      	b.n	80070b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa3f 	bl	800752e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fa50 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d122      	bne.n	8007110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d11b      	bne.n	8007110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f06f 0208 	mvn.w	r2, #8
 80070e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2204      	movs	r2, #4
 80070e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa23 	bl	8007542 <HAL_TIM_IC_CaptureCallback>
 80070fc:	e005      	b.n	800710a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa15 	bl	800752e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa26 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b10      	cmp	r3, #16
 800711c:	d122      	bne.n	8007164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0310 	and.w	r3, r3, #16
 8007128:	2b10      	cmp	r3, #16
 800712a:	d11b      	bne.n	8007164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0210 	mvn.w	r2, #16
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2208      	movs	r2, #8
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f9f9 	bl	8007542 <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9eb 	bl	800752e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f9fc 	bl	8007556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b01      	cmp	r3, #1
 8007170:	d10e      	bne.n	8007190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b01      	cmp	r3, #1
 800717e:	d107      	bne.n	8007190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0201 	mvn.w	r2, #1
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fa fbfc 	bl	8001988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719a:	2b80      	cmp	r3, #128	; 0x80
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a8:	2b80      	cmp	r3, #128	; 0x80
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fd26 	bl	8007c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d10e      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9c1 	bl	800756a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d10e      	bne.n	8007214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0320 	and.w	r3, r3, #32
 8007200:	2b20      	cmp	r3, #32
 8007202:	d107      	bne.n	8007214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0220 	mvn.w	r2, #32
 800720c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fcf0 	bl	8007bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007236:	2302      	movs	r3, #2
 8007238:	e0ae      	b.n	8007398 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b0c      	cmp	r3, #12
 8007246:	f200 809f 	bhi.w	8007388 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007285 	.word	0x08007285
 8007254:	08007389 	.word	0x08007389
 8007258:	08007389 	.word	0x08007389
 800725c:	08007389 	.word	0x08007389
 8007260:	080072c5 	.word	0x080072c5
 8007264:	08007389 	.word	0x08007389
 8007268:	08007389 	.word	0x08007389
 800726c:	08007389 	.word	0x08007389
 8007270:	08007307 	.word	0x08007307
 8007274:	08007389 	.word	0x08007389
 8007278:	08007389 	.word	0x08007389
 800727c:	08007389 	.word	0x08007389
 8007280:	08007347 	.word	0x08007347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f9f8 	bl	8007680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0208 	orr.w	r2, r2, #8
 800729e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0204 	bic.w	r2, r2, #4
 80072ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6999      	ldr	r1, [r3, #24]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	619a      	str	r2, [r3, #24]
      break;
 80072c2:	e064      	b.n	800738e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fa3e 	bl	800774c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6999      	ldr	r1, [r3, #24]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	021a      	lsls	r2, r3, #8
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	619a      	str	r2, [r3, #24]
      break;
 8007304:	e043      	b.n	800738e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fa89 	bl	8007824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0208 	orr.w	r2, r2, #8
 8007320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0204 	bic.w	r2, r2, #4
 8007330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69d9      	ldr	r1, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	61da      	str	r2, [r3, #28]
      break;
 8007344:	e023      	b.n	800738e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fad3 	bl	80078f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69d9      	ldr	r1, [r3, #28]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	021a      	lsls	r2, r3, #8
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	61da      	str	r2, [r3, #28]
      break;
 8007386:	e002      	b.n	800738e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
      break;
 800738c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_TIM_ConfigClockSource+0x1c>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e0b4      	b.n	8007526 <HAL_TIM_ConfigClockSource+0x186>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f4:	d03e      	beq.n	8007474 <HAL_TIM_ConfigClockSource+0xd4>
 80073f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fa:	f200 8087 	bhi.w	800750c <HAL_TIM_ConfigClockSource+0x16c>
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	f000 8086 	beq.w	8007512 <HAL_TIM_ConfigClockSource+0x172>
 8007406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740a:	d87f      	bhi.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
 800740c:	2b70      	cmp	r3, #112	; 0x70
 800740e:	d01a      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0xa6>
 8007410:	2b70      	cmp	r3, #112	; 0x70
 8007412:	d87b      	bhi.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
 8007414:	2b60      	cmp	r3, #96	; 0x60
 8007416:	d050      	beq.n	80074ba <HAL_TIM_ConfigClockSource+0x11a>
 8007418:	2b60      	cmp	r3, #96	; 0x60
 800741a:	d877      	bhi.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
 800741c:	2b50      	cmp	r3, #80	; 0x50
 800741e:	d03c      	beq.n	800749a <HAL_TIM_ConfigClockSource+0xfa>
 8007420:	2b50      	cmp	r3, #80	; 0x50
 8007422:	d873      	bhi.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d058      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x13a>
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	d86f      	bhi.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
 800742c:	2b30      	cmp	r3, #48	; 0x30
 800742e:	d064      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x15a>
 8007430:	2b30      	cmp	r3, #48	; 0x30
 8007432:	d86b      	bhi.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
 8007434:	2b20      	cmp	r3, #32
 8007436:	d060      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x15a>
 8007438:	2b20      	cmp	r3, #32
 800743a:	d867      	bhi.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d05c      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x15a>
 8007440:	2b10      	cmp	r3, #16
 8007442:	d05a      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0x15a>
 8007444:	e062      	b.n	800750c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6899      	ldr	r1, [r3, #8]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f000 fb19 	bl	8007a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	609a      	str	r2, [r3, #8]
      break;
 8007472:	e04f      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	6899      	ldr	r1, [r3, #8]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f000 fb02 	bl	8007a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007496:	609a      	str	r2, [r3, #8]
      break;
 8007498:	e03c      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6859      	ldr	r1, [r3, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f000 fa76 	bl	8007998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2150      	movs	r1, #80	; 0x50
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 facf 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 80074b8:	e02c      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f000 fa95 	bl	80079f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2160      	movs	r1, #96	; 0x60
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fabf 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 80074d8:	e01c      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6859      	ldr	r1, [r3, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f000 fa56 	bl	8007998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2140      	movs	r1, #64	; 0x40
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 faaf 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 80074f8:	e00c      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f000 faa6 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 800750a:	e003      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
      break;
 8007510:	e000      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a34      	ldr	r2, [pc, #208]	; (8007664 <TIM_Base_SetConfig+0xe4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00f      	beq.n	80075b8 <TIM_Base_SetConfig+0x38>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759e:	d00b      	beq.n	80075b8 <TIM_Base_SetConfig+0x38>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a31      	ldr	r2, [pc, #196]	; (8007668 <TIM_Base_SetConfig+0xe8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_Base_SetConfig+0x38>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a30      	ldr	r2, [pc, #192]	; (800766c <TIM_Base_SetConfig+0xec>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_Base_SetConfig+0x38>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a2f      	ldr	r2, [pc, #188]	; (8007670 <TIM_Base_SetConfig+0xf0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d108      	bne.n	80075ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a25      	ldr	r2, [pc, #148]	; (8007664 <TIM_Base_SetConfig+0xe4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d01b      	beq.n	800760a <TIM_Base_SetConfig+0x8a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d8:	d017      	beq.n	800760a <TIM_Base_SetConfig+0x8a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a22      	ldr	r2, [pc, #136]	; (8007668 <TIM_Base_SetConfig+0xe8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <TIM_Base_SetConfig+0x8a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a21      	ldr	r2, [pc, #132]	; (800766c <TIM_Base_SetConfig+0xec>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00f      	beq.n	800760a <TIM_Base_SetConfig+0x8a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a20      	ldr	r2, [pc, #128]	; (8007670 <TIM_Base_SetConfig+0xf0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00b      	beq.n	800760a <TIM_Base_SetConfig+0x8a>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <TIM_Base_SetConfig+0xf4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_Base_SetConfig+0x8a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <TIM_Base_SetConfig+0xf8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_Base_SetConfig+0x8a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	; (800767c <TIM_Base_SetConfig+0xfc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d108      	bne.n	800761c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a08      	ldr	r2, [pc, #32]	; (8007664 <TIM_Base_SetConfig+0xe4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d103      	bne.n	8007650 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	615a      	str	r2, [r3, #20]
}
 8007656:	bf00      	nop
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40010000 	.word	0x40010000
 8007668:	40000400 	.word	0x40000400
 800766c:	40000800 	.word	0x40000800
 8007670:	40000c00 	.word	0x40000c00
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f023 0201 	bic.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f023 0302 	bic.w	r3, r3, #2
 80076c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <TIM_OC1_SetConfig+0xc8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d10c      	bne.n	80076f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0308 	bic.w	r3, r3, #8
 80076e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f023 0304 	bic.w	r3, r3, #4
 80076f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <TIM_OC1_SetConfig+0xc8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d111      	bne.n	8007722 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800770c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	4313      	orrs	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	621a      	str	r2, [r3, #32]
}
 800773c:	bf00      	nop
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	40010000 	.word	0x40010000

0800774c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f023 0210 	bic.w	r2, r3, #16
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0320 	bic.w	r3, r3, #32
 8007796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a1e      	ldr	r2, [pc, #120]	; (8007820 <TIM_OC2_SetConfig+0xd4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d10d      	bne.n	80077c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a15      	ldr	r2, [pc, #84]	; (8007820 <TIM_OC2_SetConfig+0xd4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d113      	bne.n	80077f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000

08007824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800786c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <TIM_OC3_SetConfig+0xd0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d10d      	bne.n	800789e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800789c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a14      	ldr	r2, [pc, #80]	; (80078f4 <TIM_OC3_SetConfig+0xd0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d113      	bne.n	80078ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40010000 	.word	0x40010000

080078f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800792e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	031b      	lsls	r3, r3, #12
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <TIM_OC4_SetConfig+0x9c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d109      	bne.n	800796c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	019b      	lsls	r3, r3, #6
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000

08007998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f023 0201 	bic.w	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f023 030a 	bic.w	r3, r3, #10
 80079d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4313      	orrs	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b087      	sub	sp, #28
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	f023 0210 	bic.w	r2, r3, #16
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	031b      	lsls	r3, r3, #12
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f043 0307 	orr.w	r3, r3, #7
 8007a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	609a      	str	r2, [r3, #8]
}
 8007a80:	bf00      	nop
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	021a      	lsls	r2, r3, #8
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	609a      	str	r2, [r3, #8]
}
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 031f 	and.w	r3, r3, #31
 8007ade:	2201      	movs	r2, #1
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1a      	ldr	r2, [r3, #32]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	43db      	mvns	r3, r3
 8007aee:	401a      	ands	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1a      	ldr	r2, [r3, #32]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	fa01 f303 	lsl.w	r3, r1, r3
 8007b04:	431a      	orrs	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	621a      	str	r2, [r3, #32]
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e050      	b.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d018      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7c:	d013      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a18      	ldr	r2, [pc, #96]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00e      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d009      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d004      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40014000 	.word	0x40014000

08007bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	f107 001c 	add.w	r0, r7, #28
 8007c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d122      	bne.n	8007c7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d105      	bne.n	8007c6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fbee 	bl	8009450 <USB_CoreReset>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e01a      	b.n	8007cb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fbe2 	bl	8009450 <USB_CoreReset>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ca2:	e005      	b.n	8007cb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d10b      	bne.n	8007cce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f043 0206 	orr.w	r2, r3, #6
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f043 0220 	orr.w	r2, r3, #32
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cda:	b004      	add	sp, #16
 8007cdc:	4770      	bx	lr
	...

08007ce0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d165      	bne.n	8007dc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4a41      	ldr	r2, [pc, #260]	; (8007dfc <USB_SetTurnaroundTime+0x11c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d906      	bls.n	8007d0a <USB_SetTurnaroundTime+0x2a>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4a40      	ldr	r2, [pc, #256]	; (8007e00 <USB_SetTurnaroundTime+0x120>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d202      	bcs.n	8007d0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d04:	230f      	movs	r3, #15
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	e062      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	4a3c      	ldr	r2, [pc, #240]	; (8007e00 <USB_SetTurnaroundTime+0x120>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d306      	bcc.n	8007d20 <USB_SetTurnaroundTime+0x40>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	4a3b      	ldr	r2, [pc, #236]	; (8007e04 <USB_SetTurnaroundTime+0x124>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d202      	bcs.n	8007d20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d1a:	230e      	movs	r3, #14
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	e057      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4a38      	ldr	r2, [pc, #224]	; (8007e04 <USB_SetTurnaroundTime+0x124>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d306      	bcc.n	8007d36 <USB_SetTurnaroundTime+0x56>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4a37      	ldr	r2, [pc, #220]	; (8007e08 <USB_SetTurnaroundTime+0x128>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d202      	bcs.n	8007d36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d30:	230d      	movs	r3, #13
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	e04c      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4a33      	ldr	r2, [pc, #204]	; (8007e08 <USB_SetTurnaroundTime+0x128>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d306      	bcc.n	8007d4c <USB_SetTurnaroundTime+0x6c>
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	4a32      	ldr	r2, [pc, #200]	; (8007e0c <USB_SetTurnaroundTime+0x12c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d802      	bhi.n	8007d4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d46:	230c      	movs	r3, #12
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e041      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4a2f      	ldr	r2, [pc, #188]	; (8007e0c <USB_SetTurnaroundTime+0x12c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d906      	bls.n	8007d62 <USB_SetTurnaroundTime+0x82>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4a2e      	ldr	r2, [pc, #184]	; (8007e10 <USB_SetTurnaroundTime+0x130>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d802      	bhi.n	8007d62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d5c:	230b      	movs	r3, #11
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e036      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4a2a      	ldr	r2, [pc, #168]	; (8007e10 <USB_SetTurnaroundTime+0x130>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d906      	bls.n	8007d78 <USB_SetTurnaroundTime+0x98>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4a29      	ldr	r2, [pc, #164]	; (8007e14 <USB_SetTurnaroundTime+0x134>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d802      	bhi.n	8007d78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d72:	230a      	movs	r3, #10
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	e02b      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	4a26      	ldr	r2, [pc, #152]	; (8007e14 <USB_SetTurnaroundTime+0x134>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d906      	bls.n	8007d8e <USB_SetTurnaroundTime+0xae>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4a25      	ldr	r2, [pc, #148]	; (8007e18 <USB_SetTurnaroundTime+0x138>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d202      	bcs.n	8007d8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d88:	2309      	movs	r3, #9
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	e020      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <USB_SetTurnaroundTime+0x138>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d306      	bcc.n	8007da4 <USB_SetTurnaroundTime+0xc4>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <USB_SetTurnaroundTime+0x13c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d802      	bhi.n	8007da4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d9e:	2308      	movs	r3, #8
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	e015      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4a1d      	ldr	r2, [pc, #116]	; (8007e1c <USB_SetTurnaroundTime+0x13c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d906      	bls.n	8007dba <USB_SetTurnaroundTime+0xda>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4a1c      	ldr	r2, [pc, #112]	; (8007e20 <USB_SetTurnaroundTime+0x140>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d202      	bcs.n	8007dba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007db4:	2307      	movs	r3, #7
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e00a      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007dba:	2306      	movs	r3, #6
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	e007      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007dc6:	2309      	movs	r3, #9
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	e001      	b.n	8007dd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007dcc:	2309      	movs	r3, #9
 8007dce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	029b      	lsls	r3, r3, #10
 8007de4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007de8:	431a      	orrs	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	00d8acbf 	.word	0x00d8acbf
 8007e00:	00e4e1c0 	.word	0x00e4e1c0
 8007e04:	00f42400 	.word	0x00f42400
 8007e08:	01067380 	.word	0x01067380
 8007e0c:	011a499f 	.word	0x011a499f
 8007e10:	01312cff 	.word	0x01312cff
 8007e14:	014ca43f 	.word	0x014ca43f
 8007e18:	016e3600 	.word	0x016e3600
 8007e1c:	01a6ab1f 	.word	0x01a6ab1f
 8007e20:	01e84800 	.word	0x01e84800

08007e24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f043 0201 	orr.w	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f023 0201 	bic.w	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d115      	bne.n	8007eb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e96:	2001      	movs	r0, #1
 8007e98:	f7fb f9e0 	bl	800325c <HAL_Delay>
      ms++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 fa45 	bl	8009332 <USB_GetMode>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d01e      	beq.n	8007eec <USB_SetCurrentMode+0x84>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b31      	cmp	r3, #49	; 0x31
 8007eb2:	d9f0      	bls.n	8007e96 <USB_SetCurrentMode+0x2e>
 8007eb4:	e01a      	b.n	8007eec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d115      	bne.n	8007ee8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7fb f9c7 	bl	800325c <HAL_Delay>
      ms++;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fa2c 	bl	8009332 <USB_GetMode>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <USB_SetCurrentMode+0x84>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b31      	cmp	r3, #49	; 0x31
 8007ee4:	d9f0      	bls.n	8007ec8 <USB_SetCurrentMode+0x60>
 8007ee6:	e001      	b.n	8007eec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e005      	b.n	8007ef8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b32      	cmp	r3, #50	; 0x32
 8007ef0:	d101      	bne.n	8007ef6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f00:	b084      	sub	sp, #16
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	e009      	b.n	8007f34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	3340      	adds	r3, #64	; 0x40
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3301      	adds	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2b0e      	cmp	r3, #14
 8007f38:	d9f2      	bls.n	8007f20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11c      	bne.n	8007f7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f4e:	f043 0302 	orr.w	r3, r3, #2
 8007f52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38
 8007f78:	e00b      	b.n	8007f92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f98:	461a      	mov	r2, r3
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fac:	461a      	mov	r2, r3
 8007fae:	680b      	ldr	r3, [r1, #0]
 8007fb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d10c      	bne.n	8007fd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f965 	bl	8008290 <USB_SetDevSpeed>
 8007fc6:	e008      	b.n	8007fda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fc8:	2101      	movs	r1, #1
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f960 	bl	8008290 <USB_SetDevSpeed>
 8007fd0:	e003      	b.n	8007fda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fd2:	2103      	movs	r1, #3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f95b 	bl	8008290 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fda:	2110      	movs	r1, #16
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8f3 	bl	80081c8 <USB_FlushTxFifo>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f91f 	bl	8008230 <USB_FlushRxFifo>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008002:	461a      	mov	r2, r3
 8008004:	2300      	movs	r3, #0
 8008006:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800e:	461a      	mov	r2, r3
 8008010:	2300      	movs	r3, #0
 8008012:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801a:	461a      	mov	r2, r3
 800801c:	2300      	movs	r3, #0
 800801e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	e043      	b.n	80080ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800803c:	d118      	bne.n	8008070 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008050:	461a      	mov	r2, r3
 8008052:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	e013      	b.n	8008082 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008066:	461a      	mov	r2, r3
 8008068:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	e008      	b.n	8008082 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808e:	461a      	mov	r2, r3
 8008090:	2300      	movs	r3, #0
 8008092:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a0:	461a      	mov	r2, r3
 80080a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	3301      	adds	r3, #1
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d3b7      	bcc.n	8008026 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080b6:	2300      	movs	r3, #0
 80080b8:	613b      	str	r3, [r7, #16]
 80080ba:	e043      	b.n	8008144 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d2:	d118      	bne.n	8008106 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e6:	461a      	mov	r2, r3
 80080e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080ec:	6013      	str	r3, [r2, #0]
 80080ee:	e013      	b.n	8008118 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fc:	461a      	mov	r2, r3
 80080fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e008      	b.n	8008118 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008112:	461a      	mov	r2, r3
 8008114:	2300      	movs	r3, #0
 8008116:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008124:	461a      	mov	r2, r3
 8008126:	2300      	movs	r3, #0
 8008128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	461a      	mov	r2, r3
 8008138:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800813c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	3301      	adds	r3, #1
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	429a      	cmp	r2, r3
 800814a:	d3b7      	bcc.n	80080bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800815a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800815e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800816c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f043 0210 	orr.w	r2, r3, #16
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <USB_DevInit+0x2c4>)
 8008186:	4313      	orrs	r3, r2
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800818c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	f043 0208 	orr.w	r2, r3, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800819e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d107      	bne.n	80081b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081ac:	f043 0304 	orr.w	r3, r3, #4
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081c0:	b004      	add	sp, #16
 80081c2:	4770      	bx	lr
 80081c4:	803c3800 	.word	0x803c3800

080081c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a13      	ldr	r2, [pc, #76]	; (800822c <USB_FlushTxFifo+0x64>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d901      	bls.n	80081e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e01b      	b.n	8008220 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	daf2      	bge.n	80081d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	019b      	lsls	r3, r3, #6
 80081f8:	f043 0220 	orr.w	r2, r3, #32
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a08      	ldr	r2, [pc, #32]	; (800822c <USB_FlushTxFifo+0x64>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d901      	bls.n	8008212 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e006      	b.n	8008220 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b20      	cmp	r3, #32
 800821c:	d0f0      	beq.n	8008200 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	00030d40 	.word	0x00030d40

08008230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4a11      	ldr	r2, [pc, #68]	; (800828c <USB_FlushRxFifo+0x5c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d901      	bls.n	800824e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e018      	b.n	8008280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	daf2      	bge.n	800823c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2210      	movs	r2, #16
 800825e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4a08      	ldr	r2, [pc, #32]	; (800828c <USB_FlushRxFifo+0x5c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d901      	bls.n	8008272 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e006      	b.n	8008280 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0310 	and.w	r3, r3, #16
 800827a:	2b10      	cmp	r3, #16
 800827c:	d0f0      	beq.n	8008260 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	00030d40 	.word	0x00030d40

08008290 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	68f9      	ldr	r1, [r7, #12]
 80082ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b0:	4313      	orrs	r3, r2
 80082b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b087      	sub	sp, #28
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 0306 	and.w	r3, r3, #6
 80082da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80082e2:	2300      	movs	r3, #0
 80082e4:	75fb      	strb	r3, [r7, #23]
 80082e6:	e00a      	b.n	80082fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d002      	beq.n	80082f4 <USB_GetDevSpeed+0x32>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b06      	cmp	r3, #6
 80082f2:	d102      	bne.n	80082fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80082f4:	2302      	movs	r3, #2
 80082f6:	75fb      	strb	r3, [r7, #23]
 80082f8:	e001      	b.n	80082fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082fa:	230f      	movs	r3, #15
 80082fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d13a      	bne.n	800839e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f003 030f 	and.w	r3, r3, #15
 8008338:	2101      	movs	r1, #1
 800833a:	fa01 f303 	lsl.w	r3, r1, r3
 800833e:	b29b      	uxth	r3, r3
 8008340:	68f9      	ldr	r1, [r7, #12]
 8008342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008346:	4313      	orrs	r3, r2
 8008348:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d155      	bne.n	800840c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	791b      	ldrb	r3, [r3, #4]
 800837a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800837c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	059b      	lsls	r3, r3, #22
 8008382:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008384:	4313      	orrs	r3, r2
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	0151      	lsls	r1, r2, #5
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	440a      	add	r2, r1
 800838e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	e036      	b.n	800840c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a4:	69da      	ldr	r2, [r3, #28]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	2101      	movs	r1, #1
 80083b0:	fa01 f303 	lsl.w	r3, r1, r3
 80083b4:	041b      	lsls	r3, r3, #16
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083bc:	4313      	orrs	r3, r2
 80083be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d11a      	bne.n	800840c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083f2:	430b      	orrs	r3, r1
 80083f4:	4313      	orrs	r3, r2
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d161      	bne.n	80084fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800844a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800844e:	d11f      	bne.n	8008490 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	440a      	add	r2, r1
 8008466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800846e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	440a      	add	r2, r1
 8008486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800848a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800848e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	2101      	movs	r1, #1
 80084a2:	fa01 f303 	lsl.w	r3, r1, r3
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	43db      	mvns	r3, r3
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084b0:	4013      	ands	r3, r2
 80084b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	f003 030f 	and.w	r3, r3, #15
 80084c4:	2101      	movs	r1, #1
 80084c6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	43db      	mvns	r3, r3
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084d4:	4013      	ands	r3, r2
 80084d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	0159      	lsls	r1, r3, #5
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	440b      	add	r3, r1
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	4619      	mov	r1, r3
 80084f4:	4b35      	ldr	r3, [pc, #212]	; (80085cc <USB_DeactivateEndpoint+0x1b0>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	600b      	str	r3, [r1, #0]
 80084fa:	e060      	b.n	80085be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800850e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008512:	d11f      	bne.n	8008554 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	440a      	add	r2, r1
 800852a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800852e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008532:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	440a      	add	r2, r1
 800854a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800854e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	2101      	movs	r1, #1
 8008566:	fa01 f303 	lsl.w	r3, r1, r3
 800856a:	041b      	lsls	r3, r3, #16
 800856c:	43db      	mvns	r3, r3
 800856e:	68f9      	ldr	r1, [r7, #12]
 8008570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008574:	4013      	ands	r3, r2
 8008576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	2101      	movs	r1, #1
 800858a:	fa01 f303 	lsl.w	r3, r1, r3
 800858e:	041b      	lsls	r3, r3, #16
 8008590:	43db      	mvns	r3, r3
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008598:	4013      	ands	r3, r2
 800859a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	0159      	lsls	r1, r3, #5
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	440b      	add	r3, r1
 80085b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b6:	4619      	mov	r1, r3
 80085b8:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <USB_DeactivateEndpoint+0x1b4>)
 80085ba:	4013      	ands	r3, r2
 80085bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	ec337800 	.word	0xec337800
 80085d0:	eff37800 	.word	0xeff37800

080085d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08a      	sub	sp, #40	; 0x28
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	f040 815c 	bne.w	80088ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d132      	bne.n	8008664 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800861c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	440a      	add	r2, r1
 8008658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800865c:	0cdb      	lsrs	r3, r3, #19
 800865e:	04db      	lsls	r3, r3, #19
 8008660:	6113      	str	r3, [r2, #16]
 8008662:	e074      	b.n	800874e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	69fa      	ldr	r2, [r7, #28]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800867e:	0cdb      	lsrs	r3, r3, #19
 8008680:	04db      	lsls	r3, r3, #19
 8008682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	0151      	lsls	r1, r2, #5
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	440a      	add	r2, r1
 800869a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6999      	ldr	r1, [r3, #24]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	440b      	add	r3, r1
 80086c0:	1e59      	subs	r1, r3, #1
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80086ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086cc:	4b9d      	ldr	r3, [pc, #628]	; (8008944 <USB_EPStartXfer+0x370>)
 80086ce:	400b      	ands	r3, r1
 80086d0:	69b9      	ldr	r1, [r7, #24]
 80086d2:	0148      	lsls	r0, r1, #5
 80086d4:	69f9      	ldr	r1, [r7, #28]
 80086d6:	4401      	add	r1, r0
 80086d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086dc:	4313      	orrs	r3, r2
 80086de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ec:	691a      	ldr	r2, [r3, #16]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f6:	69b9      	ldr	r1, [r7, #24]
 80086f8:	0148      	lsls	r0, r1, #5
 80086fa:	69f9      	ldr	r1, [r7, #28]
 80086fc:	4401      	add	r1, r0
 80086fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008702:	4313      	orrs	r3, r2
 8008704:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	791b      	ldrb	r3, [r3, #4]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d11f      	bne.n	800874e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	4413      	add	r3, r2
 8008716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	0151      	lsls	r1, r2, #5
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	440a      	add	r2, r1
 8008724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008728:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800872c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800874c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d14b      	bne.n	80087ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d009      	beq.n	8008770 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008768:	461a      	mov	r2, r3
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	791b      	ldrb	r3, [r3, #4]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d128      	bne.n	80087ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d110      	bne.n	80087aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	440a      	add	r2, r1
 800879e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e00f      	b.n	80087ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	69fa      	ldr	r2, [r7, #28]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	e133      	b.n	8008a54 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	440a      	add	r2, r1
 8008802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800880a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	791b      	ldrb	r3, [r3, #4]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d015      	beq.n	8008840 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 811b 	beq.w	8008a54 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	2101      	movs	r1, #1
 8008830:	fa01 f303 	lsl.w	r3, r1, r3
 8008834:	69f9      	ldr	r1, [r7, #28]
 8008836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800883a:	4313      	orrs	r3, r2
 800883c:	634b      	str	r3, [r1, #52]	; 0x34
 800883e:	e109      	b.n	8008a54 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884c:	2b00      	cmp	r3, #0
 800884e:	d110      	bne.n	8008872 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	440a      	add	r2, r1
 8008866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800886a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	e00f      	b.n	8008892 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	0151      	lsls	r1, r2, #5
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	440a      	add	r2, r1
 8008888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800888c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008890:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6919      	ldr	r1, [r3, #16]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	781a      	ldrb	r2, [r3, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	b298      	uxth	r0, r3
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	4603      	mov	r3, r0
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fade 	bl	8008e68 <USB_WritePacket>
 80088ac:	e0d2      	b.n	8008a54 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c8:	0cdb      	lsrs	r3, r3, #19
 80088ca:	04db      	lsls	r3, r3, #19
 80088cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	0151      	lsls	r1, r2, #5
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	440a      	add	r2, r1
 80088e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d126      	bne.n	8008948 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008910:	69b9      	ldr	r1, [r7, #24]
 8008912:	0148      	lsls	r0, r1, #5
 8008914:	69f9      	ldr	r1, [r7, #28]
 8008916:	4401      	add	r1, r0
 8008918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800891c:	4313      	orrs	r3, r2
 800891e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	440a      	add	r2, r1
 8008936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800893e:	6113      	str	r3, [r2, #16]
 8008940:	e03a      	b.n	80089b8 <USB_EPStartXfer+0x3e4>
 8008942:	bf00      	nop
 8008944:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	699a      	ldr	r2, [r3, #24]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	4413      	add	r3, r2
 8008952:	1e5a      	subs	r2, r3, #1
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	8afa      	ldrh	r2, [r7, #22]
 8008964:	fb03 f202 	mul.w	r2, r3, r2
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008978:	691a      	ldr	r2, [r3, #16]
 800897a:	8afb      	ldrh	r3, [r7, #22]
 800897c:	04d9      	lsls	r1, r3, #19
 800897e:	4b38      	ldr	r3, [pc, #224]	; (8008a60 <USB_EPStartXfer+0x48c>)
 8008980:	400b      	ands	r3, r1
 8008982:	69b9      	ldr	r1, [r7, #24]
 8008984:	0148      	lsls	r0, r1, #5
 8008986:	69f9      	ldr	r1, [r7, #28]
 8008988:	4401      	add	r1, r0
 800898a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800898e:	4313      	orrs	r3, r2
 8008990:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	691a      	ldr	r2, [r3, #16]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a8:	69b9      	ldr	r1, [r7, #24]
 80089aa:	0148      	lsls	r0, r1, #5
 80089ac:	69f9      	ldr	r1, [r7, #28]
 80089ae:	4401      	add	r1, r0
 80089b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089b4:	4313      	orrs	r3, r2
 80089b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d10d      	bne.n	80089da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6919      	ldr	r1, [r3, #16]
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d6:	460a      	mov	r2, r1
 80089d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	791b      	ldrb	r3, [r3, #4]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d128      	bne.n	8008a34 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d110      	bne.n	8008a14 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	e00f      	b.n	8008a34 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	0151      	lsls	r1, r2, #5
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	440a      	add	r2, r1
 8008a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	1ff80000 	.word	0x1ff80000

08008a64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	f040 80ce 	bne.w	8008c22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d132      	bne.n	8008af4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	0151      	lsls	r1, r2, #5
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aa8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	0151      	lsls	r1, r2, #5
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aec:	0cdb      	lsrs	r3, r3, #19
 8008aee:	04db      	lsls	r3, r3, #19
 8008af0:	6113      	str	r3, [r2, #16]
 8008af2:	e04e      	b.n	8008b92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0e:	0cdb      	lsrs	r3, r3, #19
 8008b10:	04db      	lsls	r3, r3, #19
 8008b12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	0151      	lsls	r1, r2, #5
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	440a      	add	r2, r1
 8008b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d903      	bls.n	8008b4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b78:	691a      	ldr	r2, [r3, #16]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b82:	6939      	ldr	r1, [r7, #16]
 8008b84:	0148      	lsls	r0, r1, #5
 8008b86:	6979      	ldr	r1, [r7, #20]
 8008b88:	4401      	add	r1, r0
 8008b8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d11e      	bne.n	8008bd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d009      	beq.n	8008bb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	461a      	mov	r2, r3
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	e097      	b.n	8008d06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bf4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 8083 	beq.w	8008d06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	2101      	movs	r1, #1
 8008c12:	fa01 f303 	lsl.w	r3, r1, r3
 8008c16:	6979      	ldr	r1, [r7, #20]
 8008c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	634b      	str	r3, [r1, #52]	; 0x34
 8008c20:	e071      	b.n	8008d06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c3c:	0cdb      	lsrs	r3, r3, #19
 8008c3e:	04db      	lsls	r3, r3, #19
 8008c40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb4:	6939      	ldr	r1, [r7, #16]
 8008cb6:	0148      	lsls	r0, r1, #5
 8008cb8:	6979      	ldr	r1, [r7, #20]
 8008cba:	4401      	add	r1, r0
 8008cbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d10d      	bne.n	8008ce6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6919      	ldr	r1, [r3, #16]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	460a      	mov	r2, r1
 8008ce4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	785b      	ldrb	r3, [r3, #1]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d14a      	bne.n	8008dc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d4a:	f040 8086 	bne.w	8008e5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	0151      	lsls	r1, r2, #5
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	440a      	add	r2, r1
 8008d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	7812      	ldrb	r2, [r2, #0]
 8008d86:	0151      	lsls	r1, r2, #5
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	440a      	add	r2, r1
 8008d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d902      	bls.n	8008dac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	75fb      	strb	r3, [r7, #23]
          break;
 8008daa:	e056      	b.n	8008e5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dc4:	d0e7      	beq.n	8008d96 <USB_EPStopXfer+0x82>
 8008dc6:	e048      	b.n	8008e5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de0:	d13b      	bne.n	8008e5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	7812      	ldrb	r2, [r2, #0]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	7812      	ldrb	r2, [r2, #0]
 8008e1a:	0151      	lsls	r1, r2, #5
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	440a      	add	r2, r1
 8008e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d902      	bls.n	8008e40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e3e:	e00c      	b.n	8008e5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e58:	d0e7      	beq.n	8008e2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b089      	sub	sp, #36	; 0x24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4611      	mov	r1, r2
 8008e74:	461a      	mov	r2, r3
 8008e76:	460b      	mov	r3, r1
 8008e78:	71fb      	strb	r3, [r7, #7]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d123      	bne.n	8008ed6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e8e:	88bb      	ldrh	r3, [r7, #4]
 8008e90:	3303      	adds	r3, #3
 8008e92:	089b      	lsrs	r3, r3, #2
 8008e94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e96:	2300      	movs	r3, #0
 8008e98:	61bb      	str	r3, [r7, #24]
 8008e9a:	e018      	b.n	8008ece <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	031a      	lsls	r2, r3, #12
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	61bb      	str	r3, [r7, #24]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3e2      	bcc.n	8008e9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3724      	adds	r7, #36	; 0x24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b08b      	sub	sp, #44	; 0x2c
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	089b      	lsrs	r3, r3, #2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008f02:	88fb      	ldrh	r3, [r7, #6]
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	623b      	str	r3, [r7, #32]
 8008f0e:	e014      	b.n	8008f3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	3301      	adds	r3, #1
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	3301      	adds	r3, #1
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	3301      	adds	r3, #1
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	3301      	adds	r3, #1
 8008f38:	623b      	str	r3, [r7, #32]
 8008f3a:	6a3a      	ldr	r2, [r7, #32]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d3e6      	bcc.n	8008f10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008f42:	8bfb      	ldrh	r3, [r7, #30]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01e      	beq.n	8008f86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f52:	461a      	mov	r2, r3
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	6812      	ldr	r2, [r2, #0]
 8008f5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	701a      	strb	r2, [r3, #0]
      i++;
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	3301      	adds	r3, #1
 8008f72:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	3301      	adds	r3, #1
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f7a:	8bfb      	ldrh	r3, [r7, #30]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f80:	8bfb      	ldrh	r3, [r7, #30]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1ea      	bne.n	8008f5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	372c      	adds	r7, #44	; 0x2c
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d12c      	bne.n	800900a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	db12      	blt.n	8008fe8 <USB_EPSetStall+0x54>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00f      	beq.n	8008fe8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008fe6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	e02b      	b.n	8009062 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db12      	blt.n	8009042 <USB_EPSetStall+0xae>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00f      	beq.n	8009042 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800903c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009040:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	0151      	lsls	r1, r2, #5
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	440a      	add	r2, r1
 8009058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800905c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009060:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d128      	bne.n	80090de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	0151      	lsls	r1, r2, #5
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	440a      	add	r2, r1
 80090a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	791b      	ldrb	r3, [r3, #4]
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d003      	beq.n	80090bc <USB_EPClearStall+0x4c>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	791b      	ldrb	r3, [r3, #4]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d138      	bne.n	800912e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	e027      	b.n	800912e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	0151      	lsls	r1, r2, #5
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	440a      	add	r2, r1
 80090f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	791b      	ldrb	r3, [r3, #4]
 8009102:	2b03      	cmp	r3, #3
 8009104:	d003      	beq.n	800910e <USB_EPClearStall+0x9e>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	791b      	ldrb	r3, [r3, #4]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d10f      	bne.n	800912e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	0151      	lsls	r1, r2, #5
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	440a      	add	r2, r1
 8009124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800912c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800915a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800915e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009170:	68f9      	ldr	r1, [r7, #12]
 8009172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009176:	4313      	orrs	r3, r2
 8009178:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091b6:	f023 0302 	bic.w	r3, r3, #2
 80091ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091e4:	f023 0303 	bic.w	r3, r3, #3
 80091e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091f8:	f043 0302 	orr.w	r3, r3, #2
 80091fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4013      	ands	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009224:	68fb      	ldr	r3, [r7, #12]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	0c1b      	lsrs	r3, r3, #16
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009266:	b480      	push	{r7}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	4013      	ands	r3, r2
 8009288:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	b29b      	uxth	r3, r3
}
 800928e:	4618      	mov	r0, r3
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800929a:	b480      	push	{r7}
 800929c:	b085      	sub	sp, #20
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	4013      	ands	r3, r2
 80092c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092c8:	68bb      	ldr	r3, [r7, #8]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b087      	sub	sp, #28
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	fa22 f303 	lsr.w	r3, r2, r3
 8009306:	01db      	lsls	r3, r3, #7
 8009308:	b2db      	uxtb	r3, r3
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	4313      	orrs	r3, r2
 800930e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4013      	ands	r3, r2
 8009322:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009324:	68bb      	ldr	r3, [r7, #8]
}
 8009326:	4618      	mov	r0, r3
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	f003 0301 	and.w	r3, r3, #1
}
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800934e:	b480      	push	{r7}
 8009350:	b085      	sub	sp, #20
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009368:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800936c:	f023 0307 	bic.w	r3, r3, #7
 8009370:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009384:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	460b      	mov	r3, r1
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	333c      	adds	r3, #60	; 0x3c
 80093aa:	3304      	adds	r3, #4
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	4a26      	ldr	r2, [pc, #152]	; (800944c <USB_EP0_OutStart+0xb8>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d90a      	bls.n	80093ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093c8:	d101      	bne.n	80093ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e037      	b.n	800943e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d4:	461a      	mov	r2, r3
 80093d6:	2300      	movs	r3, #0
 80093d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fc:	f043 0318 	orr.w	r3, r3, #24
 8009400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009410:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009414:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009416:	7afb      	ldrb	r3, [r7, #11]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d10f      	bne.n	800943c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009422:	461a      	mov	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009436:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800943a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	4f54300a 	.word	0x4f54300a

08009450 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4a13      	ldr	r2, [pc, #76]	; (80094b4 <USB_CoreReset+0x64>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d901      	bls.n	800946e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e01b      	b.n	80094a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	daf2      	bge.n	800945c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f043 0201 	orr.w	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a09      	ldr	r2, [pc, #36]	; (80094b4 <USB_CoreReset+0x64>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d901      	bls.n	8009498 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e006      	b.n	80094a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d0f0      	beq.n	8009486 <USB_CoreReset+0x36>

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	00030d40 	.word	0x00030d40

080094b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80094c8:	f002 fc8a 	bl	800bde0 <USBD_static_malloc>
 80094cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d109      	bne.n	80094e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	32b0      	adds	r2, #176	; 0xb0
 80094de:	2100      	movs	r1, #0
 80094e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80094e4:	2302      	movs	r3, #2
 80094e6:	e0d4      	b.n	8009692 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80094e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80094ec:	2100      	movs	r1, #0
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f002 fee8 	bl	800c2c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	32b0      	adds	r2, #176	; 0xb0
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	32b0      	adds	r2, #176	; 0xb0
 800950e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	7c1b      	ldrb	r3, [r3, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d138      	bne.n	8009592 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009520:	4b5e      	ldr	r3, [pc, #376]	; (800969c <USBD_CDC_Init+0x1e4>)
 8009522:	7819      	ldrb	r1, [r3, #0]
 8009524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009528:	2202      	movs	r2, #2
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f002 fb35 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009530:	4b5a      	ldr	r3, [pc, #360]	; (800969c <USBD_CDC_Init+0x1e4>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f003 020f 	and.w	r2, r3, #15
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	3324      	adds	r3, #36	; 0x24
 8009546:	2201      	movs	r2, #1
 8009548:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800954a:	4b55      	ldr	r3, [pc, #340]	; (80096a0 <USBD_CDC_Init+0x1e8>)
 800954c:	7819      	ldrb	r1, [r3, #0]
 800954e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009552:	2202      	movs	r2, #2
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f002 fb20 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800955a:	4b51      	ldr	r3, [pc, #324]	; (80096a0 <USBD_CDC_Init+0x1e8>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f003 020f 	and.w	r2, r3, #15
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009572:	2201      	movs	r2, #1
 8009574:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009576:	4b4b      	ldr	r3, [pc, #300]	; (80096a4 <USBD_CDC_Init+0x1ec>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	f003 020f 	and.w	r2, r3, #15
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	3326      	adds	r3, #38	; 0x26
 800958c:	2210      	movs	r2, #16
 800958e:	801a      	strh	r2, [r3, #0]
 8009590:	e035      	b.n	80095fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009592:	4b42      	ldr	r3, [pc, #264]	; (800969c <USBD_CDC_Init+0x1e4>)
 8009594:	7819      	ldrb	r1, [r3, #0]
 8009596:	2340      	movs	r3, #64	; 0x40
 8009598:	2202      	movs	r2, #2
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f002 fafd 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80095a0:	4b3e      	ldr	r3, [pc, #248]	; (800969c <USBD_CDC_Init+0x1e4>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 020f 	and.w	r2, r3, #15
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	3324      	adds	r3, #36	; 0x24
 80095b6:	2201      	movs	r2, #1
 80095b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80095ba:	4b39      	ldr	r3, [pc, #228]	; (80096a0 <USBD_CDC_Init+0x1e8>)
 80095bc:	7819      	ldrb	r1, [r3, #0]
 80095be:	2340      	movs	r3, #64	; 0x40
 80095c0:	2202      	movs	r2, #2
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f002 fae9 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80095c8:	4b35      	ldr	r3, [pc, #212]	; (80096a0 <USBD_CDC_Init+0x1e8>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	f003 020f 	and.w	r2, r3, #15
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	440b      	add	r3, r1
 80095dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095e0:	2201      	movs	r2, #1
 80095e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80095e4:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <USBD_CDC_Init+0x1ec>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 020f 	and.w	r2, r3, #15
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	440b      	add	r3, r1
 80095f8:	3326      	adds	r3, #38	; 0x26
 80095fa:	2210      	movs	r2, #16
 80095fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095fe:	4b29      	ldr	r3, [pc, #164]	; (80096a4 <USBD_CDC_Init+0x1ec>)
 8009600:	7819      	ldrb	r1, [r3, #0]
 8009602:	2308      	movs	r3, #8
 8009604:	2203      	movs	r2, #3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f002 fac7 	bl	800bb9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800960c:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <USBD_CDC_Init+0x1ec>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f003 020f 	and.w	r2, r3, #15
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	440b      	add	r3, r1
 8009620:	3324      	adds	r3, #36	; 0x24
 8009622:	2201      	movs	r2, #1
 8009624:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	33b0      	adds	r3, #176	; 0xb0
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800965c:	2302      	movs	r3, #2
 800965e:	e018      	b.n	8009692 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7c1b      	ldrb	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009668:	4b0d      	ldr	r3, [pc, #52]	; (80096a0 <USBD_CDC_Init+0x1e8>)
 800966a:	7819      	ldrb	r1, [r3, #0]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f002 fb7e 	bl	800bd78 <USBD_LL_PrepareReceive>
 800967c:	e008      	b.n	8009690 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800967e:	4b08      	ldr	r3, [pc, #32]	; (80096a0 <USBD_CDC_Init+0x1e8>)
 8009680:	7819      	ldrb	r1, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009688:	2340      	movs	r3, #64	; 0x40
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f002 fb74 	bl	800bd78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	200000a3 	.word	0x200000a3
 80096a0:	200000a4 	.word	0x200000a4
 80096a4:	200000a5 	.word	0x200000a5

080096a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80096b4:	4b3a      	ldr	r3, [pc, #232]	; (80097a0 <USBD_CDC_DeInit+0xf8>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f002 fa93 	bl	800bbe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80096c0:	4b37      	ldr	r3, [pc, #220]	; (80097a0 <USBD_CDC_DeInit+0xf8>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	f003 020f 	and.w	r2, r3, #15
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	440b      	add	r3, r1
 80096d4:	3324      	adds	r3, #36	; 0x24
 80096d6:	2200      	movs	r2, #0
 80096d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80096da:	4b32      	ldr	r3, [pc, #200]	; (80097a4 <USBD_CDC_DeInit+0xfc>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f002 fa80 	bl	800bbe6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80096e6:	4b2f      	ldr	r3, [pc, #188]	; (80097a4 <USBD_CDC_DeInit+0xfc>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	f003 020f 	and.w	r2, r3, #15
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	440b      	add	r3, r1
 80096fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096fe:	2200      	movs	r2, #0
 8009700:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009702:	4b29      	ldr	r3, [pc, #164]	; (80097a8 <USBD_CDC_DeInit+0x100>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f002 fa6c 	bl	800bbe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800970e:	4b26      	ldr	r3, [pc, #152]	; (80097a8 <USBD_CDC_DeInit+0x100>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	f003 020f 	and.w	r2, r3, #15
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	3324      	adds	r3, #36	; 0x24
 8009724:	2200      	movs	r2, #0
 8009726:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009728:	4b1f      	ldr	r3, [pc, #124]	; (80097a8 <USBD_CDC_DeInit+0x100>)
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	f003 020f 	and.w	r2, r3, #15
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	3326      	adds	r3, #38	; 0x26
 800973e:	2200      	movs	r2, #0
 8009740:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	32b0      	adds	r2, #176	; 0xb0
 800974c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01f      	beq.n	8009794 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	33b0      	adds	r3, #176	; 0xb0
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	32b0      	adds	r2, #176	; 0xb0
 8009772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009776:	4618      	mov	r0, r3
 8009778:	f002 fb40 	bl	800bdfc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	32b0      	adds	r2, #176	; 0xb0
 8009786:	2100      	movs	r1, #0
 8009788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	200000a3 	.word	0x200000a3
 80097a4:	200000a4 	.word	0x200000a4
 80097a8:	200000a5 	.word	0x200000a5

080097ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	32b0      	adds	r2, #176	; 0xb0
 80097c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80097d8:	2303      	movs	r3, #3
 80097da:	e0bf      	b.n	800995c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d050      	beq.n	800988a <USBD_CDC_Setup+0xde>
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	f040 80af 	bne.w	800994c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	88db      	ldrh	r3, [r3, #6]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d03a      	beq.n	800986c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	b25b      	sxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da1b      	bge.n	8009838 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	33b0      	adds	r3, #176	; 0xb0
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009816:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	88d2      	ldrh	r2, [r2, #6]
 800981c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	2b07      	cmp	r3, #7
 8009824:	bf28      	it	cs
 8009826:	2307      	movcs	r3, #7
 8009828:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	89fa      	ldrh	r2, [r7, #14]
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 fd89 	bl	800b348 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009836:	e090      	b.n	800995a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	785a      	ldrb	r2, [r3, #1]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	88db      	ldrh	r3, [r3, #6]
 8009846:	2b3f      	cmp	r3, #63	; 0x3f
 8009848:	d803      	bhi.n	8009852 <USBD_CDC_Setup+0xa6>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	88db      	ldrh	r3, [r3, #6]
 800984e:	b2da      	uxtb	r2, r3
 8009850:	e000      	b.n	8009854 <USBD_CDC_Setup+0xa8>
 8009852:	2240      	movs	r2, #64	; 0x40
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800985a:	6939      	ldr	r1, [r7, #16]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009862:	461a      	mov	r2, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 fd9b 	bl	800b3a0 <USBD_CtlPrepareRx>
      break;
 800986a:	e076      	b.n	800995a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	33b0      	adds	r3, #176	; 0xb0
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	7850      	ldrb	r0, [r2, #1]
 8009882:	2200      	movs	r2, #0
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	4798      	blx	r3
      break;
 8009888:	e067      	b.n	800995a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	785b      	ldrb	r3, [r3, #1]
 800988e:	2b0b      	cmp	r3, #11
 8009890:	d851      	bhi.n	8009936 <USBD_CDC_Setup+0x18a>
 8009892:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <USBD_CDC_Setup+0xec>)
 8009894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009898:	080098c9 	.word	0x080098c9
 800989c:	08009945 	.word	0x08009945
 80098a0:	08009937 	.word	0x08009937
 80098a4:	08009937 	.word	0x08009937
 80098a8:	08009937 	.word	0x08009937
 80098ac:	08009937 	.word	0x08009937
 80098b0:	08009937 	.word	0x08009937
 80098b4:	08009937 	.word	0x08009937
 80098b8:	08009937 	.word	0x08009937
 80098bc:	08009937 	.word	0x08009937
 80098c0:	080098f3 	.word	0x080098f3
 80098c4:	0800991d 	.word	0x0800991d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d107      	bne.n	80098e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80098d4:	f107 030a 	add.w	r3, r7, #10
 80098d8:	2202      	movs	r2, #2
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 fd33 	bl	800b348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098e2:	e032      	b.n	800994a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 fcbd 	bl	800b266 <USBD_CtlError>
            ret = USBD_FAIL;
 80098ec:	2303      	movs	r3, #3
 80098ee:	75fb      	strb	r3, [r7, #23]
          break;
 80098f0:	e02b      	b.n	800994a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d107      	bne.n	800990e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098fe:	f107 030d 	add.w	r3, r7, #13
 8009902:	2201      	movs	r2, #1
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f001 fd1e 	bl	800b348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800990c:	e01d      	b.n	800994a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 fca8 	bl	800b266 <USBD_CtlError>
            ret = USBD_FAIL;
 8009916:	2303      	movs	r3, #3
 8009918:	75fb      	strb	r3, [r7, #23]
          break;
 800991a:	e016      	b.n	800994a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009922:	b2db      	uxtb	r3, r3
 8009924:	2b03      	cmp	r3, #3
 8009926:	d00f      	beq.n	8009948 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 fc9b 	bl	800b266 <USBD_CtlError>
            ret = USBD_FAIL;
 8009930:	2303      	movs	r3, #3
 8009932:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009934:	e008      	b.n	8009948 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 fc94 	bl	800b266 <USBD_CtlError>
          ret = USBD_FAIL;
 800993e:	2303      	movs	r3, #3
 8009940:	75fb      	strb	r3, [r7, #23]
          break;
 8009942:	e002      	b.n	800994a <USBD_CDC_Setup+0x19e>
          break;
 8009944:	bf00      	nop
 8009946:	e008      	b.n	800995a <USBD_CDC_Setup+0x1ae>
          break;
 8009948:	bf00      	nop
      }
      break;
 800994a:	e006      	b.n	800995a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 fc89 	bl	800b266 <USBD_CtlError>
      ret = USBD_FAIL;
 8009954:	2303      	movs	r3, #3
 8009956:	75fb      	strb	r3, [r7, #23]
      break;
 8009958:	bf00      	nop
  }

  return (uint8_t)ret;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009976:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	32b0      	adds	r2, #176	; 0xb0
 8009982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800998a:	2303      	movs	r3, #3
 800998c:	e065      	b.n	8009a5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	32b0      	adds	r2, #176	; 0xb0
 8009998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	f003 020f 	and.w	r2, r3, #15
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	3318      	adds	r3, #24
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d02f      	beq.n	8009a18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	f003 020f 	and.w	r2, r3, #15
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	4613      	mov	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	3318      	adds	r3, #24
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	78fb      	ldrb	r3, [r7, #3]
 80099d0:	f003 010f 	and.w	r1, r3, #15
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	460b      	mov	r3, r1
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	440b      	add	r3, r1
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4403      	add	r3, r0
 80099e0:	3348      	adds	r3, #72	; 0x48
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80099e8:	fb01 f303 	mul.w	r3, r1, r3
 80099ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d112      	bne.n	8009a18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	f003 020f 	and.w	r2, r3, #15
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	440b      	add	r3, r1
 8009a04:	3318      	adds	r3, #24
 8009a06:	2200      	movs	r2, #0
 8009a08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a0a:	78f9      	ldrb	r1, [r7, #3]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	2200      	movs	r2, #0
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 f990 	bl	800bd36 <USBD_LL_Transmit>
 8009a16:	e01f      	b.n	8009a58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	33b0      	adds	r3, #176	; 0xb0
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d010      	beq.n	8009a58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	33b0      	adds	r3, #176	; 0xb0
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	32b0      	adds	r2, #176	; 0xb0
 8009a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	32b0      	adds	r2, #176	; 0xb0
 8009a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e01a      	b.n	8009aca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f002 f98e 	bl	800bdba <USBD_LL_GetRxDataSize>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	33b0      	adds	r3, #176	; 0xb0
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	32b0      	adds	r2, #176	; 0xb0
 8009ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e025      	b.n	8009b40 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	33b0      	adds	r3, #176	; 0xb0
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01a      	beq.n	8009b3e <USBD_CDC_EP0_RxReady+0x6c>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b0e:	2bff      	cmp	r3, #255	; 0xff
 8009b10:	d015      	beq.n	8009b3e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	33b0      	adds	r3, #176	; 0xb0
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009b2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b32:	b292      	uxth	r2, r2
 8009b34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	22ff      	movs	r2, #255	; 0xff
 8009b3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b50:	2182      	movs	r1, #130	; 0x82
 8009b52:	4818      	ldr	r0, [pc, #96]	; (8009bb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b54:	f000 fd4f 	bl	800a5f6 <USBD_GetEpDesc>
 8009b58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4815      	ldr	r0, [pc, #84]	; (8009bb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b5e:	f000 fd4a 	bl	800a5f6 <USBD_GetEpDesc>
 8009b62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b64:	2181      	movs	r1, #129	; 0x81
 8009b66:	4813      	ldr	r0, [pc, #76]	; (8009bb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b68:	f000 fd45 	bl	800a5f6 <USBD_GetEpDesc>
 8009b6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2210      	movs	r2, #16
 8009b78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b88:	711a      	strb	r2, [r3, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d006      	beq.n	8009ba2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b9c:	711a      	strb	r2, [r3, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2243      	movs	r2, #67	; 0x43
 8009ba6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ba8:	4b02      	ldr	r3, [pc, #8]	; (8009bb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000060 	.word	0x20000060

08009bb8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bc0:	2182      	movs	r1, #130	; 0x82
 8009bc2:	4818      	ldr	r0, [pc, #96]	; (8009c24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bc4:	f000 fd17 	bl	800a5f6 <USBD_GetEpDesc>
 8009bc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4815      	ldr	r0, [pc, #84]	; (8009c24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bce:	f000 fd12 	bl	800a5f6 <USBD_GetEpDesc>
 8009bd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bd4:	2181      	movs	r1, #129	; 0x81
 8009bd6:	4813      	ldr	r0, [pc, #76]	; (8009c24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bd8:	f000 fd0d 	bl	800a5f6 <USBD_GetEpDesc>
 8009bdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2210      	movs	r2, #16
 8009be8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	711a      	strb	r2, [r3, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f042 0202 	orr.w	r2, r2, #2
 8009bfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d006      	beq.n	8009c12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	711a      	strb	r2, [r3, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f042 0202 	orr.w	r2, r2, #2
 8009c10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2243      	movs	r2, #67	; 0x43
 8009c16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000060 	.word	0x20000060

08009c28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c30:	2182      	movs	r1, #130	; 0x82
 8009c32:	4818      	ldr	r0, [pc, #96]	; (8009c94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c34:	f000 fcdf 	bl	800a5f6 <USBD_GetEpDesc>
 8009c38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	4815      	ldr	r0, [pc, #84]	; (8009c94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c3e:	f000 fcda 	bl	800a5f6 <USBD_GetEpDesc>
 8009c42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c44:	2181      	movs	r1, #129	; 0x81
 8009c46:	4813      	ldr	r0, [pc, #76]	; (8009c94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c48:	f000 fcd5 	bl	800a5f6 <USBD_GetEpDesc>
 8009c4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2210      	movs	r2, #16
 8009c58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c68:	711a      	strb	r2, [r3, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d006      	beq.n	8009c82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c7c:	711a      	strb	r2, [r3, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2243      	movs	r2, #67	; 0x43
 8009c86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20000060 	.word	0x20000060

08009c98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	220a      	movs	r2, #10
 8009ca4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ca6:	4b03      	ldr	r3, [pc, #12]	; (8009cb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	2000001c 	.word	0x2000001c

08009cb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e009      	b.n	8009ce0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	33b0      	adds	r3, #176	; 0xb0
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	32b0      	adds	r2, #176	; 0xb0
 8009d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d06:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e008      	b.n	8009d24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	32b0      	adds	r2, #176	; 0xb0
 8009d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e004      	b.n	8009d5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
	...

08009d6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	32b0      	adds	r2, #176	; 0xb0
 8009d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009d84:	2301      	movs	r3, #1
 8009d86:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32b0      	adds	r2, #176	; 0xb0
 8009d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e025      	b.n	8009dea <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d11f      	bne.n	8009de8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009db0:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <USBD_CDC_TransmitPacket+0x88>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 020f 	and.w	r2, r3, #15
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4403      	add	r3, r0
 8009dca:	3318      	adds	r3, #24
 8009dcc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <USBD_CDC_TransmitPacket+0x88>)
 8009dd0:	7819      	ldrb	r1, [r3, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 ffa9 	bl	800bd36 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	200000a3 	.word	0x200000a3

08009df8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	32b0      	adds	r2, #176	; 0xb0
 8009e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	32b0      	adds	r2, #176	; 0xb0
 8009e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e018      	b.n	8009e58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	7c1b      	ldrb	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e2e:	4b0c      	ldr	r3, [pc, #48]	; (8009e60 <USBD_CDC_ReceivePacket+0x68>)
 8009e30:	7819      	ldrb	r1, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 ff9b 	bl	800bd78 <USBD_LL_PrepareReceive>
 8009e42:	e008      	b.n	8009e56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <USBD_CDC_ReceivePacket+0x68>)
 8009e46:	7819      	ldrb	r1, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e4e:	2340      	movs	r3, #64	; 0x40
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 ff91 	bl	800bd78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200000a4 	.word	0x200000a4

08009e64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e01f      	b.n	8009ebc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	79fa      	ldrb	r2, [r7, #7]
 8009eae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f001 fe0b 	bl	800bacc <USBD_LL_Init>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e025      	b.n	8009f28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	32ae      	adds	r2, #174	; 0xae
 8009eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00f      	beq.n	8009f18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	32ae      	adds	r2, #174	; 0xae
 8009f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	f107 020e 	add.w	r2, r7, #14
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4798      	blx	r3
 8009f10:	4602      	mov	r2, r0
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 fe13 	bl	800bb64 <USBD_LL_Start>
 8009f3e:	4603      	mov	r3, r0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d009      	beq.n	8009f8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	78fa      	ldrb	r2, [r7, #3]
 8009f82:	4611      	mov	r1, r2
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	4798      	blx	r3
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	78fa      	ldrb	r2, [r7, #3]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f001 f908 	bl	800b1f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ffe:	f003 031f 	and.w	r3, r3, #31
 800a002:	2b02      	cmp	r3, #2
 800a004:	d01a      	beq.n	800a03c <USBD_LL_SetupStage+0x72>
 800a006:	2b02      	cmp	r3, #2
 800a008:	d822      	bhi.n	800a050 <USBD_LL_SetupStage+0x86>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <USBD_LL_SetupStage+0x4a>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d00a      	beq.n	800a028 <USBD_LL_SetupStage+0x5e>
 800a012:	e01d      	b.n	800a050 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fb5f 	bl	800a6e0 <USBD_StdDevReq>
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
      break;
 800a026:	e020      	b.n	800a06a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fbc7 	bl	800a7c4 <USBD_StdItfReq>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
      break;
 800a03a:	e016      	b.n	800a06a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fc29 	bl	800a89c <USBD_StdEPReq>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
      break;
 800a04e:	e00c      	b.n	800a06a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a056:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 fde0 	bl	800bc24 <USBD_LL_StallEP>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
      break;
 800a068:	bf00      	nop
  }

  return ret;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	460b      	mov	r3, r1
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a086:	7afb      	ldrb	r3, [r7, #11]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d16e      	bne.n	800a16a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a092:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	f040 8098 	bne.w	800a1d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d913      	bls.n	800a0d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	1ad2      	subs	r2, r2, r3
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	bf28      	it	cs
 800a0c6:	4613      	movcs	r3, r2
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f001 f984 	bl	800b3da <USBD_CtlContinueRx>
 800a0d2:	e07d      	b.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0da:	f003 031f 	and.w	r3, r3, #31
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d014      	beq.n	800a10c <USBD_LL_DataOutStage+0x98>
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d81d      	bhi.n	800a122 <USBD_LL_DataOutStage+0xae>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USBD_LL_DataOutStage+0x7c>
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d003      	beq.n	800a0f6 <USBD_LL_DataOutStage+0x82>
 800a0ee:	e018      	b.n	800a122 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75bb      	strb	r3, [r7, #22]
            break;
 800a0f4:	e018      	b.n	800a128 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fa5e 	bl	800a5c2 <USBD_CoreFindIF>
 800a106:	4603      	mov	r3, r0
 800a108:	75bb      	strb	r3, [r7, #22]
            break;
 800a10a:	e00d      	b.n	800a128 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a112:	b2db      	uxtb	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fa60 	bl	800a5dc <USBD_CoreFindEP>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75bb      	strb	r3, [r7, #22]
            break;
 800a120:	e002      	b.n	800a128 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	75bb      	strb	r3, [r7, #22]
            break;
 800a126:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a128:	7dbb      	ldrb	r3, [r7, #22]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d119      	bne.n	800a162 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b03      	cmp	r3, #3
 800a138:	d113      	bne.n	800a162 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a13a:	7dba      	ldrb	r2, [r7, #22]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	32ae      	adds	r2, #174	; 0xae
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a14a:	7dba      	ldrb	r2, [r7, #22]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a152:	7dba      	ldrb	r2, [r7, #22]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	32ae      	adds	r2, #174	; 0xae
 800a158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f001 f94a 	bl	800b3fc <USBD_CtlSendStatus>
 800a168:	e032      	b.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a170:	b2db      	uxtb	r3, r3
 800a172:	4619      	mov	r1, r3
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 fa31 	bl	800a5dc <USBD_CoreFindEP>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a17e:	7dbb      	ldrb	r3, [r7, #22]
 800a180:	2bff      	cmp	r3, #255	; 0xff
 800a182:	d025      	beq.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
 800a184:	7dbb      	ldrb	r3, [r7, #22]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d122      	bne.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b03      	cmp	r3, #3
 800a194:	d117      	bne.n	800a1c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a196:	7dba      	ldrb	r2, [r7, #22]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	32ae      	adds	r2, #174	; 0xae
 800a19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00f      	beq.n	800a1c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a1a6:	7dba      	ldrb	r2, [r7, #22]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a1ae:	7dba      	ldrb	r2, [r7, #22]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	32ae      	adds	r2, #174	; 0xae
 800a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	7afa      	ldrb	r2, [r7, #11]
 800a1bc:	4611      	mov	r1, r2
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	4798      	blx	r3
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
 800a1ce:	e000      	b.n	800a1d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a1e8:	7afb      	ldrb	r3, [r7, #11]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d16f      	bne.n	800a2ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3314      	adds	r3, #20
 800a1f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d15a      	bne.n	800a2b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	429a      	cmp	r2, r3
 800a208:	d914      	bls.n	800a234 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	1ad2      	subs	r2, r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f001 f8ac 	bl	800b37e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a226:	2300      	movs	r3, #0
 800a228:	2200      	movs	r2, #0
 800a22a:	2100      	movs	r1, #0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f001 fda3 	bl	800bd78 <USBD_LL_PrepareReceive>
 800a232:	e03f      	b.n	800a2b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d11c      	bne.n	800a27a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a248:	429a      	cmp	r2, r3
 800a24a:	d316      	bcc.n	800a27a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a256:	429a      	cmp	r2, r3
 800a258:	d20f      	bcs.n	800a27a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a25a:	2200      	movs	r2, #0
 800a25c:	2100      	movs	r1, #0
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f001 f88d 	bl	800b37e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a26c:	2300      	movs	r3, #0
 800a26e:	2200      	movs	r2, #0
 800a270:	2100      	movs	r1, #0
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f001 fd80 	bl	800bd78 <USBD_LL_PrepareReceive>
 800a278:	e01c      	b.n	800a2b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b03      	cmp	r3, #3
 800a284:	d10f      	bne.n	800a2a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d009      	beq.n	800a2a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2a6:	2180      	movs	r1, #128	; 0x80
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f001 fcbb 	bl	800bc24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f001 f8b7 	bl	800b422 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d03a      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff fe42 	bl	8009f48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2cc:	e032      	b.n	800a334 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 f97f 	bl	800a5dc <USBD_CoreFindEP>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	2bff      	cmp	r3, #255	; 0xff
 800a2e6:	d025      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d122      	bne.n	800a334 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d11c      	bne.n	800a334 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a2fa:	7dfa      	ldrb	r2, [r7, #23]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	32ae      	adds	r2, #174	; 0xae
 800a300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d014      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a30a:	7dfa      	ldrb	r2, [r7, #23]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a312:	7dfa      	ldrb	r2, [r7, #23]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	32ae      	adds	r2, #174	; 0xae
 800a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	7afa      	ldrb	r2, [r7, #11]
 800a320:	4611      	mov	r1, r2
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	4798      	blx	r3
 800a326:	4603      	mov	r3, r0
 800a328:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a32a:	7dbb      	ldrb	r3, [r7, #22]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a330:	7dbb      	ldrb	r3, [r7, #22]
 800a332:	e000      	b.n	800a336 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d014      	beq.n	800a3a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00e      	beq.n	800a3a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6852      	ldr	r2, [r2, #4]
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	4611      	mov	r1, r2
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 fbf5 	bl	800bb9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2240      	movs	r2, #64	; 0x40
 800a3bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3c0:	2340      	movs	r3, #64	; 0x40
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2180      	movs	r1, #128	; 0x80
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 fbe7 	bl	800bb9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2240      	movs	r2, #64	; 0x40
 800a3d6:	621a      	str	r2, [r3, #32]

  return ret;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	78fa      	ldrb	r2, [r7, #3]
 800a3f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a410:	b2da      	uxtb	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2204      	movs	r2, #4
 800a41c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d106      	bne.n	800a450 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d110      	bne.n	800a494 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00b      	beq.n	800a494 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d005      	beq.n	800a494 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	32ae      	adds	r2, #174	; 0xae
 800a4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e01c      	b.n	800a4fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d115      	bne.n	800a4f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	32ae      	adds	r2, #174	; 0xae
 800a4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00b      	beq.n	800a4f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	32ae      	adds	r2, #174	; 0xae
 800a4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	78fa      	ldrb	r2, [r7, #3]
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	32ae      	adds	r2, #174	; 0xae
 800a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a520:	2303      	movs	r3, #3
 800a522:	e01c      	b.n	800a55e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d115      	bne.n	800a55c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	32ae      	adds	r2, #174	; 0xae
 800a53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	32ae      	adds	r2, #174	; 0xae
 800a54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	4611      	mov	r1, r2
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00e      	beq.n	800a5b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6852      	ldr	r2, [r2, #4]
 800a5a6:	b2d2      	uxtb	r2, r2
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b083      	sub	sp, #12
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b086      	sub	sp, #24
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	885b      	ldrh	r3, [r3, #2]
 800a612:	b29a      	uxth	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d920      	bls.n	800a660 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b29b      	uxth	r3, r3
 800a624:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a626:	e013      	b.n	800a650 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a628:	f107 030a 	add.w	r3, r7, #10
 800a62c:	4619      	mov	r1, r3
 800a62e:	6978      	ldr	r0, [r7, #20]
 800a630:	f000 f81b 	bl	800a66a <USBD_GetNextDesc>
 800a634:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	785b      	ldrb	r3, [r3, #1]
 800a63a:	2b05      	cmp	r3, #5
 800a63c:	d108      	bne.n	800a650 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	789b      	ldrb	r3, [r3, #2]
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d008      	beq.n	800a65e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	b29a      	uxth	r2, r3
 800a656:	897b      	ldrh	r3, [r7, #10]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d8e5      	bhi.n	800a628 <USBD_GetEpDesc+0x32>
 800a65c:	e000      	b.n	800a660 <USBD_GetEpDesc+0x6a>
          break;
 800a65e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a660:	693b      	ldr	r3, [r7, #16]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b085      	sub	sp, #20
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	881a      	ldrh	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	b29b      	uxth	r3, r3
 800a682:	4413      	add	r3, r2
 800a684:	b29a      	uxth	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4413      	add	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a696:	68fb      	ldr	r3, [r7, #12]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6c2:	8a3b      	ldrh	r3, [r7, #16]
 800a6c4:	021b      	lsls	r3, r3, #8
 800a6c6:	b21a      	sxth	r2, r3
 800a6c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	b21b      	sxth	r3, r3
 800a6d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a6d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	371c      	adds	r7, #28
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6f6:	2b40      	cmp	r3, #64	; 0x40
 800a6f8:	d005      	beq.n	800a706 <USBD_StdDevReq+0x26>
 800a6fa:	2b40      	cmp	r3, #64	; 0x40
 800a6fc:	d857      	bhi.n	800a7ae <USBD_StdDevReq+0xce>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00f      	beq.n	800a722 <USBD_StdDevReq+0x42>
 800a702:	2b20      	cmp	r3, #32
 800a704:	d153      	bne.n	800a7ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	32ae      	adds	r2, #174	; 0xae
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	4798      	blx	r3
 800a71c:	4603      	mov	r3, r0
 800a71e:	73fb      	strb	r3, [r7, #15]
      break;
 800a720:	e04a      	b.n	800a7b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	785b      	ldrb	r3, [r3, #1]
 800a726:	2b09      	cmp	r3, #9
 800a728:	d83b      	bhi.n	800a7a2 <USBD_StdDevReq+0xc2>
 800a72a:	a201      	add	r2, pc, #4	; (adr r2, 800a730 <USBD_StdDevReq+0x50>)
 800a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a730:	0800a785 	.word	0x0800a785
 800a734:	0800a799 	.word	0x0800a799
 800a738:	0800a7a3 	.word	0x0800a7a3
 800a73c:	0800a78f 	.word	0x0800a78f
 800a740:	0800a7a3 	.word	0x0800a7a3
 800a744:	0800a763 	.word	0x0800a763
 800a748:	0800a759 	.word	0x0800a759
 800a74c:	0800a7a3 	.word	0x0800a7a3
 800a750:	0800a77b 	.word	0x0800a77b
 800a754:	0800a76d 	.word	0x0800a76d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa3c 	bl	800abd8 <USBD_GetDescriptor>
          break;
 800a760:	e024      	b.n	800a7ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fba1 	bl	800aeac <USBD_SetAddress>
          break;
 800a76a:	e01f      	b.n	800a7ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fbe0 	bl	800af34 <USBD_SetConfig>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
          break;
 800a778:	e018      	b.n	800a7ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fc83 	bl	800b088 <USBD_GetConfig>
          break;
 800a782:	e013      	b.n	800a7ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fcb4 	bl	800b0f4 <USBD_GetStatus>
          break;
 800a78c:	e00e      	b.n	800a7ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fce3 	bl	800b15c <USBD_SetFeature>
          break;
 800a796:	e009      	b.n	800a7ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fd07 	bl	800b1ae <USBD_ClrFeature>
          break;
 800a7a0:	e004      	b.n	800a7ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fd5e 	bl	800b266 <USBD_CtlError>
          break;
 800a7aa:	bf00      	nop
      }
      break;
 800a7ac:	e004      	b.n	800a7b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fd58 	bl	800b266 <USBD_CtlError>
      break;
 800a7b6:	bf00      	nop
  }

  return ret;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop

0800a7c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7da:	2b40      	cmp	r3, #64	; 0x40
 800a7dc:	d005      	beq.n	800a7ea <USBD_StdItfReq+0x26>
 800a7de:	2b40      	cmp	r3, #64	; 0x40
 800a7e0:	d852      	bhi.n	800a888 <USBD_StdItfReq+0xc4>
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <USBD_StdItfReq+0x26>
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	d14e      	bne.n	800a888 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d840      	bhi.n	800a87a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	889b      	ldrh	r3, [r3, #4]
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d836      	bhi.n	800a870 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	889b      	ldrh	r3, [r3, #4]
 800a806:	b2db      	uxtb	r3, r3
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fed9 	bl	800a5c2 <USBD_CoreFindIF>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2bff      	cmp	r3, #255	; 0xff
 800a818:	d01d      	beq.n	800a856 <USBD_StdItfReq+0x92>
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11a      	bne.n	800a856 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a820:	7bba      	ldrb	r2, [r7, #14]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	32ae      	adds	r2, #174	; 0xae
 800a826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00f      	beq.n	800a850 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a830:	7bba      	ldrb	r2, [r7, #14]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a838:	7bba      	ldrb	r2, [r7, #14]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	32ae      	adds	r2, #174	; 0xae
 800a83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	4798      	blx	r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a84e:	e004      	b.n	800a85a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a850:	2303      	movs	r3, #3
 800a852:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a854:	e001      	b.n	800a85a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a856:	2303      	movs	r3, #3
 800a858:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	88db      	ldrh	r3, [r3, #6]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d110      	bne.n	800a884 <USBD_StdItfReq+0xc0>
 800a862:	7bfb      	ldrb	r3, [r7, #15]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10d      	bne.n	800a884 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fdc7 	bl	800b3fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a86e:	e009      	b.n	800a884 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fcf7 	bl	800b266 <USBD_CtlError>
          break;
 800a878:	e004      	b.n	800a884 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fcf2 	bl	800b266 <USBD_CtlError>
          break;
 800a882:	e000      	b.n	800a886 <USBD_StdItfReq+0xc2>
          break;
 800a884:	bf00      	nop
      }
      break;
 800a886:	e004      	b.n	800a892 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fceb 	bl	800b266 <USBD_CtlError>
      break;
 800a890:	bf00      	nop
  }

  return ret;
 800a892:	7bfb      	ldrb	r3, [r7, #15]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	889b      	ldrh	r3, [r3, #4]
 800a8ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8b8:	2b40      	cmp	r3, #64	; 0x40
 800a8ba:	d007      	beq.n	800a8cc <USBD_StdEPReq+0x30>
 800a8bc:	2b40      	cmp	r3, #64	; 0x40
 800a8be:	f200 817f 	bhi.w	800abc0 <USBD_StdEPReq+0x324>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d02a      	beq.n	800a91c <USBD_StdEPReq+0x80>
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	f040 817a 	bne.w	800abc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fe83 	bl	800a5dc <USBD_CoreFindEP>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8da:	7b7b      	ldrb	r3, [r7, #13]
 800a8dc:	2bff      	cmp	r3, #255	; 0xff
 800a8de:	f000 8174 	beq.w	800abca <USBD_StdEPReq+0x32e>
 800a8e2:	7b7b      	ldrb	r3, [r7, #13]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f040 8170 	bne.w	800abca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a8ea:	7b7a      	ldrb	r2, [r7, #13]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a8f2:	7b7a      	ldrb	r2, [r7, #13]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	32ae      	adds	r2, #174	; 0xae
 800a8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 8163 	beq.w	800abca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a904:	7b7a      	ldrb	r2, [r7, #13]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	32ae      	adds	r2, #174	; 0xae
 800a90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	4798      	blx	r3
 800a916:	4603      	mov	r3, r0
 800a918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a91a:	e156      	b.n	800abca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	785b      	ldrb	r3, [r3, #1]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d008      	beq.n	800a936 <USBD_StdEPReq+0x9a>
 800a924:	2b03      	cmp	r3, #3
 800a926:	f300 8145 	bgt.w	800abb4 <USBD_StdEPReq+0x318>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 809b 	beq.w	800aa66 <USBD_StdEPReq+0x1ca>
 800a930:	2b01      	cmp	r3, #1
 800a932:	d03c      	beq.n	800a9ae <USBD_StdEPReq+0x112>
 800a934:	e13e      	b.n	800abb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d002      	beq.n	800a948 <USBD_StdEPReq+0xac>
 800a942:	2b03      	cmp	r3, #3
 800a944:	d016      	beq.n	800a974 <USBD_StdEPReq+0xd8>
 800a946:	e02c      	b.n	800a9a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00d      	beq.n	800a96a <USBD_StdEPReq+0xce>
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b80      	cmp	r3, #128	; 0x80
 800a952:	d00a      	beq.n	800a96a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 f963 	bl	800bc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a95e:	2180      	movs	r1, #128	; 0x80
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 f95f 	bl	800bc24 <USBD_LL_StallEP>
 800a966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a968:	e020      	b.n	800a9ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a96a:	6839      	ldr	r1, [r7, #0]
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fc7a 	bl	800b266 <USBD_CtlError>
              break;
 800a972:	e01b      	b.n	800a9ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	885b      	ldrh	r3, [r3, #2]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10e      	bne.n	800a99a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <USBD_StdEPReq+0xfe>
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	2b80      	cmp	r3, #128	; 0x80
 800a986:	d008      	beq.n	800a99a <USBD_StdEPReq+0xfe>
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	88db      	ldrh	r3, [r3, #6]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f001 f945 	bl	800bc24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fd2e 	bl	800b3fc <USBD_CtlSendStatus>

              break;
 800a9a0:	e004      	b.n	800a9ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fc5e 	bl	800b266 <USBD_CtlError>
              break;
 800a9aa:	bf00      	nop
          }
          break;
 800a9ac:	e107      	b.n	800abbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d002      	beq.n	800a9c0 <USBD_StdEPReq+0x124>
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d016      	beq.n	800a9ec <USBD_StdEPReq+0x150>
 800a9be:	e04b      	b.n	800aa58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9c0:	7bbb      	ldrb	r3, [r7, #14]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00d      	beq.n	800a9e2 <USBD_StdEPReq+0x146>
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	2b80      	cmp	r3, #128	; 0x80
 800a9ca:	d00a      	beq.n	800a9e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f001 f927 	bl	800bc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9d6:	2180      	movs	r1, #128	; 0x80
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f001 f923 	bl	800bc24 <USBD_LL_StallEP>
 800a9de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9e0:	e040      	b.n	800aa64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fc3e 	bl	800b266 <USBD_CtlError>
              break;
 800a9ea:	e03b      	b.n	800aa64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	885b      	ldrh	r3, [r3, #2]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d136      	bne.n	800aa62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d004      	beq.n	800aa08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f001 f92d 	bl	800bc62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fcf7 	bl	800b3fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fde2 	bl	800a5dc <USBD_CoreFindEP>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa1c:	7b7b      	ldrb	r3, [r7, #13]
 800aa1e:	2bff      	cmp	r3, #255	; 0xff
 800aa20:	d01f      	beq.n	800aa62 <USBD_StdEPReq+0x1c6>
 800aa22:	7b7b      	ldrb	r3, [r7, #13]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d11c      	bne.n	800aa62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa28:	7b7a      	ldrb	r2, [r7, #13]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa30:	7b7a      	ldrb	r2, [r7, #13]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	32ae      	adds	r2, #174	; 0xae
 800aa36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d010      	beq.n	800aa62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa40:	7b7a      	ldrb	r2, [r7, #13]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	32ae      	adds	r2, #174	; 0xae
 800aa46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	4798      	blx	r3
 800aa52:	4603      	mov	r3, r0
 800aa54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa56:	e004      	b.n	800aa62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fc03 	bl	800b266 <USBD_CtlError>
              break;
 800aa60:	e000      	b.n	800aa64 <USBD_StdEPReq+0x1c8>
              break;
 800aa62:	bf00      	nop
          }
          break;
 800aa64:	e0ab      	b.n	800abbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d002      	beq.n	800aa78 <USBD_StdEPReq+0x1dc>
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d032      	beq.n	800aadc <USBD_StdEPReq+0x240>
 800aa76:	e097      	b.n	800aba8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d007      	beq.n	800aa8e <USBD_StdEPReq+0x1f2>
 800aa7e:	7bbb      	ldrb	r3, [r7, #14]
 800aa80:	2b80      	cmp	r3, #128	; 0x80
 800aa82:	d004      	beq.n	800aa8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fbed 	bl	800b266 <USBD_CtlError>
                break;
 800aa8c:	e091      	b.n	800abb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	da0b      	bge.n	800aaae <USBD_StdEPReq+0x212>
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	3310      	adds	r3, #16
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	3304      	adds	r3, #4
 800aaac:	e00b      	b.n	800aac6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaae:	7bbb      	ldrb	r3, [r7, #14]
 800aab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	4413      	add	r3, r2
 800aac4:	3304      	adds	r3, #4
 800aac6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2202      	movs	r2, #2
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fc37 	bl	800b348 <USBD_CtlSendData>
              break;
 800aada:	e06a      	b.n	800abb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aadc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da11      	bge.n	800ab08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	f003 020f 	and.w	r2, r3, #15
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	440b      	add	r3, r1
 800aaf6:	3324      	adds	r3, #36	; 0x24
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d117      	bne.n	800ab2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fbb0 	bl	800b266 <USBD_CtlError>
                  break;
 800ab06:	e054      	b.n	800abb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	f003 020f 	and.w	r2, r3, #15
 800ab0e:	6879      	ldr	r1, [r7, #4]
 800ab10:	4613      	mov	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	440b      	add	r3, r1
 800ab1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d104      	bne.n	800ab2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fb9d 	bl	800b266 <USBD_CtlError>
                  break;
 800ab2c:	e041      	b.n	800abb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	da0b      	bge.n	800ab4e <USBD_StdEPReq+0x2b2>
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	3310      	adds	r3, #16
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	4413      	add	r3, r2
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	e00b      	b.n	800ab66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	4413      	add	r3, r2
 800ab64:	3304      	adds	r3, #4
 800ab66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <USBD_StdEPReq+0x2d8>
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	2b80      	cmp	r3, #128	; 0x80
 800ab72:	d103      	bne.n	800ab7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	e00e      	b.n	800ab9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 f88d 	bl	800bca0 <USBD_LL_IsStallEP>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d003      	beq.n	800ab94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e002      	b.n	800ab9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2200      	movs	r2, #0
 800ab98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fbd1 	bl	800b348 <USBD_CtlSendData>
              break;
 800aba6:	e004      	b.n	800abb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fb5b 	bl	800b266 <USBD_CtlError>
              break;
 800abb0:	bf00      	nop
          }
          break;
 800abb2:	e004      	b.n	800abbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fb55 	bl	800b266 <USBD_CtlError>
          break;
 800abbc:	bf00      	nop
      }
      break;
 800abbe:	e005      	b.n	800abcc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fb4f 	bl	800b266 <USBD_CtlError>
      break;
 800abc8:	e000      	b.n	800abcc <USBD_StdEPReq+0x330>
      break;
 800abca:	bf00      	nop
  }

  return ret;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	0a1b      	lsrs	r3, r3, #8
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	3b01      	subs	r3, #1
 800abf8:	2b06      	cmp	r3, #6
 800abfa:	f200 8128 	bhi.w	800ae4e <USBD_GetDescriptor+0x276>
 800abfe:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <USBD_GetDescriptor+0x2c>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac21 	.word	0x0800ac21
 800ac08:	0800ac39 	.word	0x0800ac39
 800ac0c:	0800ac79 	.word	0x0800ac79
 800ac10:	0800ae4f 	.word	0x0800ae4f
 800ac14:	0800ae4f 	.word	0x0800ae4f
 800ac18:	0800adef 	.word	0x0800adef
 800ac1c:	0800ae1b 	.word	0x0800ae1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	7c12      	ldrb	r2, [r2, #16]
 800ac2c:	f107 0108 	add.w	r1, r7, #8
 800ac30:	4610      	mov	r0, r2
 800ac32:	4798      	blx	r3
 800ac34:	60f8      	str	r0, [r7, #12]
      break;
 800ac36:	e112      	b.n	800ae5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	7c1b      	ldrb	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10d      	bne.n	800ac5c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac48:	f107 0208 	add.w	r2, r7, #8
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4798      	blx	r3
 800ac50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3301      	adds	r3, #1
 800ac56:	2202      	movs	r2, #2
 800ac58:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac5a:	e100      	b.n	800ae5e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	f107 0208 	add.w	r2, r7, #8
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3301      	adds	r3, #1
 800ac72:	2202      	movs	r2, #2
 800ac74:	701a      	strb	r2, [r3, #0]
      break;
 800ac76:	e0f2      	b.n	800ae5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	885b      	ldrh	r3, [r3, #2]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	f200 80ac 	bhi.w	800addc <USBD_GetDescriptor+0x204>
 800ac84:	a201      	add	r2, pc, #4	; (adr r2, 800ac8c <USBD_GetDescriptor+0xb4>)
 800ac86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8a:	bf00      	nop
 800ac8c:	0800aca5 	.word	0x0800aca5
 800ac90:	0800acd9 	.word	0x0800acd9
 800ac94:	0800ad0d 	.word	0x0800ad0d
 800ac98:	0800ad41 	.word	0x0800ad41
 800ac9c:	0800ad75 	.word	0x0800ad75
 800aca0:	0800ada9 	.word	0x0800ada9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00b      	beq.n	800acc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	7c12      	ldrb	r2, [r2, #16]
 800acbc:	f107 0108 	add.w	r1, r7, #8
 800acc0:	4610      	mov	r0, r2
 800acc2:	4798      	blx	r3
 800acc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acc6:	e091      	b.n	800adec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 facb 	bl	800b266 <USBD_CtlError>
            err++;
 800acd0:	7afb      	ldrb	r3, [r7, #11]
 800acd2:	3301      	adds	r3, #1
 800acd4:	72fb      	strb	r3, [r7, #11]
          break;
 800acd6:	e089      	b.n	800adec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	7c12      	ldrb	r2, [r2, #16]
 800acf0:	f107 0108 	add.w	r1, r7, #8
 800acf4:	4610      	mov	r0, r2
 800acf6:	4798      	blx	r3
 800acf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfa:	e077      	b.n	800adec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fab1 	bl	800b266 <USBD_CtlError>
            err++;
 800ad04:	7afb      	ldrb	r3, [r7, #11]
 800ad06:	3301      	adds	r3, #1
 800ad08:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0a:	e06f      	b.n	800adec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00b      	beq.n	800ad30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	7c12      	ldrb	r2, [r2, #16]
 800ad24:	f107 0108 	add.w	r1, r7, #8
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4798      	blx	r3
 800ad2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad2e:	e05d      	b.n	800adec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fa97 	bl	800b266 <USBD_CtlError>
            err++;
 800ad38:	7afb      	ldrb	r3, [r7, #11]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad3e:	e055      	b.n	800adec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00b      	beq.n	800ad64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	7c12      	ldrb	r2, [r2, #16]
 800ad58:	f107 0108 	add.w	r1, r7, #8
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4798      	blx	r3
 800ad60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad62:	e043      	b.n	800adec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa7d 	bl	800b266 <USBD_CtlError>
            err++;
 800ad6c:	7afb      	ldrb	r3, [r7, #11]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	72fb      	strb	r3, [r7, #11]
          break;
 800ad72:	e03b      	b.n	800adec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad86:	695b      	ldr	r3, [r3, #20]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	7c12      	ldrb	r2, [r2, #16]
 800ad8c:	f107 0108 	add.w	r1, r7, #8
 800ad90:	4610      	mov	r0, r2
 800ad92:	4798      	blx	r3
 800ad94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad96:	e029      	b.n	800adec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fa63 	bl	800b266 <USBD_CtlError>
            err++;
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	3301      	adds	r3, #1
 800ada4:	72fb      	strb	r3, [r7, #11]
          break;
 800ada6:	e021      	b.n	800adec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00b      	beq.n	800adcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	7c12      	ldrb	r2, [r2, #16]
 800adc0:	f107 0108 	add.w	r1, r7, #8
 800adc4:	4610      	mov	r0, r2
 800adc6:	4798      	blx	r3
 800adc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adca:	e00f      	b.n	800adec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa49 	bl	800b266 <USBD_CtlError>
            err++;
 800add4:	7afb      	ldrb	r3, [r7, #11]
 800add6:	3301      	adds	r3, #1
 800add8:	72fb      	strb	r3, [r7, #11]
          break;
 800adda:	e007      	b.n	800adec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa41 	bl	800b266 <USBD_CtlError>
          err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800adea:	bf00      	nop
      }
      break;
 800adec:	e037      	b.n	800ae5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	7c1b      	ldrb	r3, [r3, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfe:	f107 0208 	add.w	r2, r7, #8
 800ae02:	4610      	mov	r0, r2
 800ae04:	4798      	blx	r3
 800ae06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae08:	e029      	b.n	800ae5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fa2a 	bl	800b266 <USBD_CtlError>
        err++;
 800ae12:	7afb      	ldrb	r3, [r7, #11]
 800ae14:	3301      	adds	r3, #1
 800ae16:	72fb      	strb	r3, [r7, #11]
      break;
 800ae18:	e021      	b.n	800ae5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	7c1b      	ldrb	r3, [r3, #16]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10d      	bne.n	800ae3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2a:	f107 0208 	add.w	r2, r7, #8
 800ae2e:	4610      	mov	r0, r2
 800ae30:	4798      	blx	r3
 800ae32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	3301      	adds	r3, #1
 800ae38:	2207      	movs	r2, #7
 800ae3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae3c:	e00f      	b.n	800ae5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fa10 	bl	800b266 <USBD_CtlError>
        err++;
 800ae46:	7afb      	ldrb	r3, [r7, #11]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae4c:	e007      	b.n	800ae5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fa08 	bl	800b266 <USBD_CtlError>
      err++;
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae5c:	bf00      	nop
  }

  if (err != 0U)
 800ae5e:	7afb      	ldrb	r3, [r7, #11]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d11e      	bne.n	800aea2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	88db      	ldrh	r3, [r3, #6]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d016      	beq.n	800ae9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae6c:	893b      	ldrh	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00e      	beq.n	800ae90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	88da      	ldrh	r2, [r3, #6]
 800ae76:	893b      	ldrh	r3, [r7, #8]
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	bf28      	it	cs
 800ae7c:	4613      	movcs	r3, r2
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae82:	893b      	ldrh	r3, [r7, #8]
 800ae84:	461a      	mov	r2, r3
 800ae86:	68f9      	ldr	r1, [r7, #12]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fa5d 	bl	800b348 <USBD_CtlSendData>
 800ae8e:	e009      	b.n	800aea4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f9e7 	bl	800b266 <USBD_CtlError>
 800ae98:	e004      	b.n	800aea4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 faae 	bl	800b3fc <USBD_CtlSendStatus>
 800aea0:	e000      	b.n	800aea4 <USBD_GetDescriptor+0x2cc>
    return;
 800aea2:	bf00      	nop
  }
}
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop

0800aeac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	889b      	ldrh	r3, [r3, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d131      	bne.n	800af22 <USBD_SetAddress+0x76>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	88db      	ldrh	r3, [r3, #6]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d12d      	bne.n	800af22 <USBD_SetAddress+0x76>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	2b7f      	cmp	r3, #127	; 0x7f
 800aecc:	d829      	bhi.n	800af22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	885b      	ldrh	r3, [r3, #2]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d104      	bne.n	800aef0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f9bc 	bl	800b266 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeee:	e01d      	b.n	800af2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7bfa      	ldrb	r2, [r7, #15]
 800aef4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fefb 	bl	800bcf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fa7a 	bl	800b3fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d004      	beq.n	800af18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2202      	movs	r2, #2
 800af12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af16:	e009      	b.n	800af2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af20:	e004      	b.n	800af2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f99e 	bl	800b266 <USBD_CtlError>
  }
}
 800af2a:	bf00      	nop
 800af2c:	bf00      	nop
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	885b      	ldrh	r3, [r3, #2]
 800af46:	b2da      	uxtb	r2, r3
 800af48:	4b4e      	ldr	r3, [pc, #312]	; (800b084 <USBD_SetConfig+0x150>)
 800af4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af4c:	4b4d      	ldr	r3, [pc, #308]	; (800b084 <USBD_SetConfig+0x150>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d905      	bls.n	800af60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f985 	bl	800b266 <USBD_CtlError>
    return USBD_FAIL;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e08c      	b.n	800b07a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d002      	beq.n	800af72 <USBD_SetConfig+0x3e>
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d029      	beq.n	800afc4 <USBD_SetConfig+0x90>
 800af70:	e075      	b.n	800b05e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af72:	4b44      	ldr	r3, [pc, #272]	; (800b084 <USBD_SetConfig+0x150>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d020      	beq.n	800afbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af7a:	4b42      	ldr	r3, [pc, #264]	; (800b084 <USBD_SetConfig+0x150>)
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	461a      	mov	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af84:	4b3f      	ldr	r3, [pc, #252]	; (800b084 <USBD_SetConfig+0x150>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7fe ffe7 	bl	8009f5e <USBD_SetClassConfig>
 800af90:	4603      	mov	r3, r0
 800af92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d008      	beq.n	800afac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f962 	bl	800b266 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2202      	movs	r2, #2
 800afa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afaa:	e065      	b.n	800b078 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fa25 	bl	800b3fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2203      	movs	r2, #3
 800afb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afba:	e05d      	b.n	800b078 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fa1d 	bl	800b3fc <USBD_CtlSendStatus>
      break;
 800afc2:	e059      	b.n	800b078 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afc4:	4b2f      	ldr	r3, [pc, #188]	; (800b084 <USBD_SetConfig+0x150>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d112      	bne.n	800aff2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afd4:	4b2b      	ldr	r3, [pc, #172]	; (800b084 <USBD_SetConfig+0x150>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afde:	4b29      	ldr	r3, [pc, #164]	; (800b084 <USBD_SetConfig+0x150>)
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7fe ffd6 	bl	8009f96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fa06 	bl	800b3fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aff0:	e042      	b.n	800b078 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aff2:	4b24      	ldr	r3, [pc, #144]	; (800b084 <USBD_SetConfig+0x150>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	429a      	cmp	r2, r3
 800affe:	d02a      	beq.n	800b056 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7fe ffc4 	bl	8009f96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b00e:	4b1d      	ldr	r3, [pc, #116]	; (800b084 <USBD_SetConfig+0x150>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b018:	4b1a      	ldr	r3, [pc, #104]	; (800b084 <USBD_SetConfig+0x150>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7fe ff9d 	bl	8009f5e <USBD_SetClassConfig>
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00f      	beq.n	800b04e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f918 	bl	800b266 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7fe ffa9 	bl	8009f96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b04c:	e014      	b.n	800b078 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f9d4 	bl	800b3fc <USBD_CtlSendStatus>
      break;
 800b054:	e010      	b.n	800b078 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f9d0 	bl	800b3fc <USBD_CtlSendStatus>
      break;
 800b05c:	e00c      	b.n	800b078 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f900 	bl	800b266 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b066:	4b07      	ldr	r3, [pc, #28]	; (800b084 <USBD_SetConfig+0x150>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7fe ff92 	bl	8009f96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b072:	2303      	movs	r3, #3
 800b074:	73fb      	strb	r3, [r7, #15]
      break;
 800b076:	bf00      	nop
  }

  return ret;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000570 	.word	0x20000570

0800b088 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	88db      	ldrh	r3, [r3, #6]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d004      	beq.n	800b0a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f8e2 	bl	800b266 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0a2:	e023      	b.n	800b0ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	dc02      	bgt.n	800b0b6 <USBD_GetConfig+0x2e>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dc03      	bgt.n	800b0bc <USBD_GetConfig+0x34>
 800b0b4:	e015      	b.n	800b0e2 <USBD_GetConfig+0x5a>
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d00b      	beq.n	800b0d2 <USBD_GetConfig+0x4a>
 800b0ba:	e012      	b.n	800b0e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f93c 	bl	800b348 <USBD_CtlSendData>
        break;
 800b0d0:	e00c      	b.n	800b0ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f934 	bl	800b348 <USBD_CtlSendData>
        break;
 800b0e0:	e004      	b.n	800b0ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f8be 	bl	800b266 <USBD_CtlError>
        break;
 800b0ea:	bf00      	nop
}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b104:	b2db      	uxtb	r3, r3
 800b106:	3b01      	subs	r3, #1
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d81e      	bhi.n	800b14a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	88db      	ldrh	r3, [r3, #6]
 800b110:	2b02      	cmp	r3, #2
 800b112:	d004      	beq.n	800b11e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f8a5 	bl	800b266 <USBD_CtlError>
        break;
 800b11c:	e01a      	b.n	800b154 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f043 0202 	orr.w	r2, r3, #2
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	330c      	adds	r3, #12
 800b13e:	2202      	movs	r2, #2
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f900 	bl	800b348 <USBD_CtlSendData>
      break;
 800b148:	e004      	b.n	800b154 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f88a 	bl	800b266 <USBD_CtlError>
      break;
 800b152:	bf00      	nop
  }
}
 800b154:	bf00      	nop
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	885b      	ldrh	r3, [r3, #2]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d107      	bne.n	800b17e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f940 	bl	800b3fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b17c:	e013      	b.n	800b1a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	885b      	ldrh	r3, [r3, #2]
 800b182:	2b02      	cmp	r3, #2
 800b184:	d10b      	bne.n	800b19e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	889b      	ldrh	r3, [r3, #4]
 800b18a:	0a1b      	lsrs	r3, r3, #8
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f930 	bl	800b3fc <USBD_CtlSendStatus>
}
 800b19c:	e003      	b.n	800b1a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f860 	bl	800b266 <USBD_CtlError>
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d80b      	bhi.n	800b1de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	885b      	ldrh	r3, [r3, #2]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d10c      	bne.n	800b1e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f910 	bl	800b3fc <USBD_CtlSendStatus>
      }
      break;
 800b1dc:	e004      	b.n	800b1e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f840 	bl	800b266 <USBD_CtlError>
      break;
 800b1e6:	e000      	b.n	800b1ea <USBD_ClrFeature+0x3c>
      break;
 800b1e8:	bf00      	nop
  }
}
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	781a      	ldrb	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f7ff fa41 	bl	800a6a4 <SWAPBYTE>
 800b222:	4603      	mov	r3, r0
 800b224:	461a      	mov	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3301      	adds	r3, #1
 800b22e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3301      	adds	r3, #1
 800b234:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f7ff fa34 	bl	800a6a4 <SWAPBYTE>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3301      	adds	r3, #1
 800b24e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff fa27 	bl	800a6a4 <SWAPBYTE>
 800b256:	4603      	mov	r3, r0
 800b258:	461a      	mov	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	80da      	strh	r2, [r3, #6]
}
 800b25e:	bf00      	nop
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b270:	2180      	movs	r1, #128	; 0x80
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fcd6 	bl	800bc24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b278:	2100      	movs	r1, #0
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fcd2 	bl	800bc24 <USBD_LL_StallEP>
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d036      	beq.n	800b30c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2a2:	6938      	ldr	r0, [r7, #16]
 800b2a4:	f000 f836 	bl	800b314 <USBD_GetLen>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	7812      	ldrb	r2, [r2, #0]
 800b2c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2d8:	e013      	b.n	800b302 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	4413      	add	r3, r2
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	7812      	ldrb	r2, [r2, #0]
 800b2e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]
    idx++;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
 800b2fe:	3301      	adds	r3, #1
 800b300:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1e7      	bne.n	800b2da <USBD_GetString+0x52>
 800b30a:	e000      	b.n	800b30e <USBD_GetString+0x86>
    return;
 800b30c:	bf00      	nop
  }
}
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b324:	e005      	b.n	800b332 <USBD_GetLen+0x1e>
  {
    len++;
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	3301      	adds	r3, #1
 800b32a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	3301      	adds	r3, #1
 800b330:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1f5      	bne.n	800b326 <USBD_GetLen+0x12>
  }

  return len;
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2202      	movs	r2, #2
 800b358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	2100      	movs	r1, #0
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 fce1 	bl	800bd36 <USBD_LL_Transmit>

  return USBD_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	2100      	movs	r1, #0
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f000 fcd0 	bl	800bd36 <USBD_LL_Transmit>

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 fcd4 	bl	800bd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	60f8      	str	r0, [r7, #12]
 800b3e2:	60b9      	str	r1, [r7, #8]
 800b3e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fcc3 	bl	800bd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2204      	movs	r2, #4
 800b408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b40c:	2300      	movs	r3, #0
 800b40e:	2200      	movs	r2, #0
 800b410:	2100      	movs	r1, #0
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fc8f 	bl	800bd36 <USBD_LL_Transmit>

  return USBD_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b082      	sub	sp, #8
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2205      	movs	r2, #5
 800b42e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b432:	2300      	movs	r3, #0
 800b434:	2200      	movs	r2, #0
 800b436:	2100      	movs	r1, #0
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fc9d 	bl	800bd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b44c:	2200      	movs	r2, #0
 800b44e:	4912      	ldr	r1, [pc, #72]	; (800b498 <MX_USB_DEVICE_Init+0x50>)
 800b450:	4812      	ldr	r0, [pc, #72]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b452:	f7fe fd07 	bl	8009e64 <USBD_Init>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b45c:	f7f6 fabe 	bl	80019dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b460:	490f      	ldr	r1, [pc, #60]	; (800b4a0 <MX_USB_DEVICE_Init+0x58>)
 800b462:	480e      	ldr	r0, [pc, #56]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b464:	f7fe fd2e 	bl	8009ec4 <USBD_RegisterClass>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b46e:	f7f6 fab5 	bl	80019dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b472:	490c      	ldr	r1, [pc, #48]	; (800b4a4 <MX_USB_DEVICE_Init+0x5c>)
 800b474:	4809      	ldr	r0, [pc, #36]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b476:	f7fe fc1f 	bl	8009cb8 <USBD_CDC_RegisterInterface>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b480:	f7f6 faac 	bl	80019dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b484:	4805      	ldr	r0, [pc, #20]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b486:	f7fe fd53 	bl	8009f30 <USBD_Start>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b490:	f7f6 faa4 	bl	80019dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b494:	bf00      	nop
 800b496:	bd80      	pop	{r7, pc}
 800b498:	200000bc 	.word	0x200000bc
 800b49c:	20000574 	.word	0x20000574
 800b4a0:	20000028 	.word	0x20000028
 800b4a4:	200000a8 	.word	0x200000a8

0800b4a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4905      	ldr	r1, [pc, #20]	; (800b4c4 <CDC_Init_FS+0x1c>)
 800b4b0:	4805      	ldr	r0, [pc, #20]	; (800b4c8 <CDC_Init_FS+0x20>)
 800b4b2:	f7fe fc1b 	bl	8009cec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4b6:	4905      	ldr	r1, [pc, #20]	; (800b4cc <CDC_Init_FS+0x24>)
 800b4b8:	4803      	ldr	r0, [pc, #12]	; (800b4c8 <CDC_Init_FS+0x20>)
 800b4ba:	f7fe fc39 	bl	8009d30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20001050 	.word	0x20001050
 800b4c8:	20000574 	.word	0x20000574
 800b4cc:	20000850 	.word	0x20000850

0800b4d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	6039      	str	r1, [r7, #0]
 800b4ea:	71fb      	strb	r3, [r7, #7]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	2b23      	cmp	r3, #35	; 0x23
 800b4f4:	d84a      	bhi.n	800b58c <CDC_Control_FS+0xac>
 800b4f6:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <CDC_Control_FS+0x1c>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b58d 	.word	0x0800b58d
 800b500:	0800b58d 	.word	0x0800b58d
 800b504:	0800b58d 	.word	0x0800b58d
 800b508:	0800b58d 	.word	0x0800b58d
 800b50c:	0800b58d 	.word	0x0800b58d
 800b510:	0800b58d 	.word	0x0800b58d
 800b514:	0800b58d 	.word	0x0800b58d
 800b518:	0800b58d 	.word	0x0800b58d
 800b51c:	0800b58d 	.word	0x0800b58d
 800b520:	0800b58d 	.word	0x0800b58d
 800b524:	0800b58d 	.word	0x0800b58d
 800b528:	0800b58d 	.word	0x0800b58d
 800b52c:	0800b58d 	.word	0x0800b58d
 800b530:	0800b58d 	.word	0x0800b58d
 800b534:	0800b58d 	.word	0x0800b58d
 800b538:	0800b58d 	.word	0x0800b58d
 800b53c:	0800b58d 	.word	0x0800b58d
 800b540:	0800b58d 	.word	0x0800b58d
 800b544:	0800b58d 	.word	0x0800b58d
 800b548:	0800b58d 	.word	0x0800b58d
 800b54c:	0800b58d 	.word	0x0800b58d
 800b550:	0800b58d 	.word	0x0800b58d
 800b554:	0800b58d 	.word	0x0800b58d
 800b558:	0800b58d 	.word	0x0800b58d
 800b55c:	0800b58d 	.word	0x0800b58d
 800b560:	0800b58d 	.word	0x0800b58d
 800b564:	0800b58d 	.word	0x0800b58d
 800b568:	0800b58d 	.word	0x0800b58d
 800b56c:	0800b58d 	.word	0x0800b58d
 800b570:	0800b58d 	.word	0x0800b58d
 800b574:	0800b58d 	.word	0x0800b58d
 800b578:	0800b58d 	.word	0x0800b58d
 800b57c:	0800b58d 	.word	0x0800b58d
 800b580:	0800b58d 	.word	0x0800b58d
 800b584:	0800b58d 	.word	0x0800b58d
 800b588:	0800b58d 	.word	0x0800b58d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b58c:	bf00      	nop
  }

  return (USBD_OK);
 800b58e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b590:	4618      	mov	r0, r3
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <CDC_Receive_FS+0x24>)
 800b5aa:	f7fe fbc1 	bl	8009d30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5ae:	4804      	ldr	r0, [pc, #16]	; (800b5c0 <CDC_Receive_FS+0x24>)
 800b5b0:	f7fe fc22 	bl	8009df8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b5b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000574 	.word	0x20000574

0800b5c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5d4:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <CDC_Transmit_FS+0x48>)
 800b5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e00b      	b.n	800b602 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5ea:	887b      	ldrh	r3, [r7, #2]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	4806      	ldr	r0, [pc, #24]	; (800b60c <CDC_Transmit_FS+0x48>)
 800b5f2:	f7fe fb7b 	bl	8009cec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5f6:	4805      	ldr	r0, [pc, #20]	; (800b60c <CDC_Transmit_FS+0x48>)
 800b5f8:	f7fe fbb8 	bl	8009d6c <USBD_CDC_TransmitPacket>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	20000574 	.word	0x20000574

0800b610 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	4613      	mov	r3, r2
 800b61c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b626:	4618      	mov	r0, r3
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
	...

0800b634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	4603      	mov	r3, r0
 800b63c:	6039      	str	r1, [r7, #0]
 800b63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2212      	movs	r2, #18
 800b644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b646:	4b03      	ldr	r3, [pc, #12]	; (800b654 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	200000d8 	.word	0x200000d8

0800b658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2204      	movs	r2, #4
 800b668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b66a:	4b03      	ldr	r3, [pc, #12]	; (800b678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	200000ec 	.word	0x200000ec

0800b67c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	6039      	str	r1, [r7, #0]
 800b686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d105      	bne.n	800b69a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	4907      	ldr	r1, [pc, #28]	; (800b6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b692:	4808      	ldr	r0, [pc, #32]	; (800b6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b694:	f7ff fdf8 	bl	800b288 <USBD_GetString>
 800b698:	e004      	b.n	800b6a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	4904      	ldr	r1, [pc, #16]	; (800b6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b69e:	4805      	ldr	r0, [pc, #20]	; (800b6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6a0:	f7ff fdf2 	bl	800b288 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20001850 	.word	0x20001850
 800b6b4:	08010c80 	.word	0x08010c80

0800b6b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	6039      	str	r1, [r7, #0]
 800b6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	4904      	ldr	r1, [pc, #16]	; (800b6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b6c8:	4804      	ldr	r0, [pc, #16]	; (800b6dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b6ca:	f7ff fddd 	bl	800b288 <USBD_GetString>
  return USBD_StrDesc;
 800b6ce:	4b02      	ldr	r3, [pc, #8]	; (800b6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20001850 	.word	0x20001850
 800b6dc:	08010c8c 	.word	0x08010c8c

0800b6e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	221a      	movs	r2, #26
 800b6f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b6f2:	f000 f843 	bl	800b77c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b6f6:	4b02      	ldr	r3, [pc, #8]	; (800b700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	200000f0 	.word	0x200000f0

0800b704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	4907      	ldr	r1, [pc, #28]	; (800b738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b71a:	4808      	ldr	r0, [pc, #32]	; (800b73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b71c:	f7ff fdb4 	bl	800b288 <USBD_GetString>
 800b720:	e004      	b.n	800b72c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	4904      	ldr	r1, [pc, #16]	; (800b738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b726:	4805      	ldr	r0, [pc, #20]	; (800b73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b728:	f7ff fdae 	bl	800b288 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20001850 	.word	0x20001850
 800b73c:	08010ca0 	.word	0x08010ca0

0800b740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	6039      	str	r1, [r7, #0]
 800b74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d105      	bne.n	800b75e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	4907      	ldr	r1, [pc, #28]	; (800b774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b756:	4808      	ldr	r0, [pc, #32]	; (800b778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b758:	f7ff fd96 	bl	800b288 <USBD_GetString>
 800b75c:	e004      	b.n	800b768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	4904      	ldr	r1, [pc, #16]	; (800b774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b762:	4805      	ldr	r0, [pc, #20]	; (800b778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b764:	f7ff fd90 	bl	800b288 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b768:	4b02      	ldr	r3, [pc, #8]	; (800b774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20001850 	.word	0x20001850
 800b778:	08010cac 	.word	0x08010cac

0800b77c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b782:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <Get_SerialNum+0x44>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b788:	4b0e      	ldr	r3, [pc, #56]	; (800b7c4 <Get_SerialNum+0x48>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b78e:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <Get_SerialNum+0x4c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4413      	add	r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d009      	beq.n	800b7b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7a2:	2208      	movs	r2, #8
 800b7a4:	4909      	ldr	r1, [pc, #36]	; (800b7cc <Get_SerialNum+0x50>)
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 f814 	bl	800b7d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7ac:	2204      	movs	r2, #4
 800b7ae:	4908      	ldr	r1, [pc, #32]	; (800b7d0 <Get_SerialNum+0x54>)
 800b7b0:	68b8      	ldr	r0, [r7, #8]
 800b7b2:	f000 f80f 	bl	800b7d4 <IntToUnicode>
  }
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	1fff7a10 	.word	0x1fff7a10
 800b7c4:	1fff7a14 	.word	0x1fff7a14
 800b7c8:	1fff7a18 	.word	0x1fff7a18
 800b7cc:	200000f2 	.word	0x200000f2
 800b7d0:	20000102 	.word	0x20000102

0800b7d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]
 800b7ea:	e027      	b.n	800b83c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	0f1b      	lsrs	r3, r3, #28
 800b7f0:	2b09      	cmp	r3, #9
 800b7f2:	d80b      	bhi.n	800b80c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	0f1b      	lsrs	r3, r3, #28
 800b7f8:	b2da      	uxtb	r2, r3
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	4619      	mov	r1, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	440b      	add	r3, r1
 800b804:	3230      	adds	r2, #48	; 0x30
 800b806:	b2d2      	uxtb	r2, r2
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	e00a      	b.n	800b822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	0f1b      	lsrs	r3, r3, #28
 800b810:	b2da      	uxtb	r2, r3
 800b812:	7dfb      	ldrb	r3, [r7, #23]
 800b814:	005b      	lsls	r3, r3, #1
 800b816:	4619      	mov	r1, r3
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	440b      	add	r3, r1
 800b81c:	3237      	adds	r2, #55	; 0x37
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	011b      	lsls	r3, r3, #4
 800b826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b828:	7dfb      	ldrb	r3, [r7, #23]
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	3301      	adds	r3, #1
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	4413      	add	r3, r2
 800b832:	2200      	movs	r2, #0
 800b834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	3301      	adds	r3, #1
 800b83a:	75fb      	strb	r3, [r7, #23]
 800b83c:	7dfa      	ldrb	r2, [r7, #23]
 800b83e:	79fb      	ldrb	r3, [r7, #7]
 800b840:	429a      	cmp	r2, r3
 800b842:	d3d3      	bcc.n	800b7ec <IntToUnicode+0x18>
  }
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	371c      	adds	r7, #28
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
	...

0800b854 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b85c:	f107 0314 	add.w	r3, r7, #20
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	609a      	str	r2, [r3, #8]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b874:	d13a      	bne.n	800b8ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b876:	2300      	movs	r3, #0
 800b878:	613b      	str	r3, [r7, #16]
 800b87a:	4b1e      	ldr	r3, [pc, #120]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87e:	4a1d      	ldr	r2, [pc, #116]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b880:	f043 0301 	orr.w	r3, r3, #1
 800b884:	6313      	str	r3, [r2, #48]	; 0x30
 800b886:	4b1b      	ldr	r3, [pc, #108]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	613b      	str	r3, [r7, #16]
 800b890:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b892:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b898:	2302      	movs	r3, #2
 800b89a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b89c:	2300      	movs	r3, #0
 800b89e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8a4:	230a      	movs	r3, #10
 800b8a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8a8:	f107 0314 	add.w	r3, r7, #20
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4812      	ldr	r0, [pc, #72]	; (800b8f8 <HAL_PCD_MspInit+0xa4>)
 800b8b0:	f7f8 fd8a 	bl	80043c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8b4:	4b0f      	ldr	r3, [pc, #60]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b8:	4a0e      	ldr	r2, [pc, #56]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8be:	6353      	str	r3, [r2, #52]	; 0x34
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c8:	4a0a      	ldr	r2, [pc, #40]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b8ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8ce:	6453      	str	r3, [r2, #68]	; 0x44
 800b8d0:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <HAL_PCD_MspInit+0xa0>)
 800b8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2100      	movs	r1, #0
 800b8e0:	2043      	movs	r0, #67	; 0x43
 800b8e2:	f7f8 f999 	bl	8003c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8e6:	2043      	movs	r0, #67	; 0x43
 800b8e8:	f7f8 f9b2 	bl	8003c50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8ec:	bf00      	nop
 800b8ee:	3728      	adds	r7, #40	; 0x28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	40023800 	.word	0x40023800
 800b8f8:	40020000 	.word	0x40020000

0800b8fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b910:	4619      	mov	r1, r3
 800b912:	4610      	mov	r0, r2
 800b914:	f7fe fb59 	bl	8009fca <USBD_LL_SetupStage>
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b932:	78fa      	ldrb	r2, [r7, #3]
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	78fb      	ldrb	r3, [r7, #3]
 800b948:	4619      	mov	r1, r3
 800b94a:	f7fe fb93 	bl	800a074 <USBD_LL_DataOutStage>
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b968:	78fa      	ldrb	r2, [r7, #3]
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	4613      	mov	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	440b      	add	r3, r1
 800b976:	334c      	adds	r3, #76	; 0x4c
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7fe fc2c 	bl	800a1da <USBD_LL_DataInStage>
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fd60 	bl	800a45e <USBD_LL_SOF>
}
 800b99e:	bf00      	nop
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d001      	beq.n	800b9be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9ba:	f7f6 f80f 	bl	80019dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9c4:	7bfa      	ldrb	r2, [r7, #15]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fd0a 	bl	800a3e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fcb2 	bl	800a33e <USBD_LL_Reset>
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fe fd05 	bl	800a402 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	6812      	ldr	r2, [r2, #0]
 800ba06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba0a:	f043 0301 	orr.w	r3, r3, #1
 800ba0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba18:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <HAL_PCD_SuspendCallback+0x48>)
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	4a03      	ldr	r2, [pc, #12]	; (800ba2c <HAL_PCD_SuspendCallback+0x48>)
 800ba1e:	f043 0306 	orr.w	r3, r3, #6
 800ba22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	e000ed00 	.word	0xe000ed00

0800ba30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fe fcf5 	bl	800a42e <USBD_LL_Resume>
}
 800ba44:	bf00      	nop
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe fd4d 	bl	800a502 <USBD_LL_IsoOUTIncomplete>
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba82:	78fa      	ldrb	r2, [r7, #3]
 800ba84:	4611      	mov	r1, r2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe fd09 	bl	800a49e <USBD_LL_IsoINIncomplete>
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe fd5f 	bl	800a566 <USBD_LL_DevConnected>
}
 800baa8:	bf00      	nop
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe fd5c 	bl	800a57c <USBD_LL_DevDisconnected>
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d13c      	bne.n	800bb56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800badc:	4a20      	ldr	r2, [pc, #128]	; (800bb60 <USBD_LL_Init+0x94>)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a1e      	ldr	r2, [pc, #120]	; (800bb60 <USBD_LL_Init+0x94>)
 800bae8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800baec:	4b1c      	ldr	r3, [pc, #112]	; (800bb60 <USBD_LL_Init+0x94>)
 800baee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800baf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800baf4:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <USBD_LL_Init+0x94>)
 800baf6:	2204      	movs	r2, #4
 800baf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bafa:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <USBD_LL_Init+0x94>)
 800bafc:	2202      	movs	r2, #2
 800bafe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb00:	4b17      	ldr	r3, [pc, #92]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb06:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb08:	2202      	movs	r2, #2
 800bb0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb0c:	4b14      	ldr	r3, [pc, #80]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb18:	4b11      	ldr	r3, [pc, #68]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb1e:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb24:	4b0e      	ldr	r3, [pc, #56]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb2a:	480d      	ldr	r0, [pc, #52]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb2c:	f7f8 fe02 	bl	8004734 <HAL_PCD_Init>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb36:	f7f5 ff51 	bl	80019dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb3a:	2180      	movs	r1, #128	; 0x80
 800bb3c:	4808      	ldr	r0, [pc, #32]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb3e:	f7fa f85a 	bl	8005bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb42:	2240      	movs	r2, #64	; 0x40
 800bb44:	2100      	movs	r1, #0
 800bb46:	4806      	ldr	r0, [pc, #24]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb48:	f7fa f80e 	bl	8005b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb4c:	2280      	movs	r2, #128	; 0x80
 800bb4e:	2101      	movs	r1, #1
 800bb50:	4803      	ldr	r0, [pc, #12]	; (800bb60 <USBD_LL_Init+0x94>)
 800bb52:	f7fa f809 	bl	8005b68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	20001a50 	.word	0x20001a50

0800bb64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb70:	2300      	movs	r3, #0
 800bb72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f8 fef7 	bl	800496e <HAL_PCD_Start>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f942 	bl	800be10 <USBD_Get_USB_Status>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	4608      	mov	r0, r1
 800bba4:	4611      	mov	r1, r2
 800bba6:	461a      	mov	r2, r3
 800bba8:	4603      	mov	r3, r0
 800bbaa:	70fb      	strb	r3, [r7, #3]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70bb      	strb	r3, [r7, #2]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbc2:	78bb      	ldrb	r3, [r7, #2]
 800bbc4:	883a      	ldrh	r2, [r7, #0]
 800bbc6:	78f9      	ldrb	r1, [r7, #3]
 800bbc8:	f7f9 fbc8 	bl	800535c <HAL_PCD_EP_Open>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f91c 	bl	800be10 <USBD_Get_USB_Status>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc00:	78fa      	ldrb	r2, [r7, #3]
 800bc02:	4611      	mov	r1, r2
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7f9 fc11 	bl	800542c <HAL_PCD_EP_Close>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 f8fd 	bl	800be10 <USBD_Get_USB_Status>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f9 fce9 	bl	800561a <HAL_PCD_EP_SetStall>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 f8de 	bl	800be10 <USBD_Get_USB_Status>
 800bc54:	4603      	mov	r3, r0
 800bc56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc7c:	78fa      	ldrb	r2, [r7, #3]
 800bc7e:	4611      	mov	r1, r2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7f9 fd2e 	bl	80056e2 <HAL_PCD_EP_ClrStall>
 800bc86:	4603      	mov	r3, r0
 800bc88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 f8bf 	bl	800be10 <USBD_Get_USB_Status>
 800bc92:	4603      	mov	r3, r0
 800bc94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	da0b      	bge.n	800bcd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bcbc:	78fb      	ldrb	r3, [r7, #3]
 800bcbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	440b      	add	r3, r1
 800bcce:	333e      	adds	r3, #62	; 0x3e
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	e00b      	b.n	800bcec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bcd4:	78fb      	ldrb	r3, [r7, #3]
 800bcd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcda:	68f9      	ldr	r1, [r7, #12]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	00db      	lsls	r3, r3, #3
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	440b      	add	r3, r1
 800bce6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bcea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd12:	78fa      	ldrb	r2, [r7, #3]
 800bd14:	4611      	mov	r1, r2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7f9 fafb 	bl	8005312 <HAL_PCD_SetAddress>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 f874 	bl	800be10 <USBD_Get_USB_Status>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b086      	sub	sp, #24
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
 800bd42:	460b      	mov	r3, r1
 800bd44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd54:	7af9      	ldrb	r1, [r7, #11]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	f7f9 fc14 	bl	8005586 <HAL_PCD_EP_Transmit>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 f853 	bl	800be10 <USBD_Get_USB_Status>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	607a      	str	r2, [r7, #4]
 800bd82:	603b      	str	r3, [r7, #0]
 800bd84:	460b      	mov	r3, r1
 800bd86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd96:	7af9      	ldrb	r1, [r7, #11]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	f7f9 fb90 	bl	80054c0 <HAL_PCD_EP_Receive>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 f832 	bl	800be10 <USBD_Get_USB_Status>
 800bdac:	4603      	mov	r3, r0
 800bdae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7f9 fbc0 	bl	8005556 <HAL_PCD_EP_GetRxCount>
 800bdd6:	4603      	mov	r3, r0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bde8:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <USBD_static_malloc+0x18>)
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	20001f5c 	.word	0x20001f5c

0800bdfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]

}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	2b03      	cmp	r3, #3
 800be22:	d817      	bhi.n	800be54 <USBD_Get_USB_Status+0x44>
 800be24:	a201      	add	r2, pc, #4	; (adr r2, 800be2c <USBD_Get_USB_Status+0x1c>)
 800be26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2a:	bf00      	nop
 800be2c:	0800be3d 	.word	0x0800be3d
 800be30:	0800be43 	.word	0x0800be43
 800be34:	0800be49 	.word	0x0800be49
 800be38:	0800be4f 	.word	0x0800be4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
    break;
 800be40:	e00b      	b.n	800be5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be42:	2303      	movs	r3, #3
 800be44:	73fb      	strb	r3, [r7, #15]
    break;
 800be46:	e008      	b.n	800be5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be48:	2301      	movs	r3, #1
 800be4a:	73fb      	strb	r3, [r7, #15]
    break;
 800be4c:	e005      	b.n	800be5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be4e:	2303      	movs	r3, #3
 800be50:	73fb      	strb	r3, [r7, #15]
    break;
 800be52:	e002      	b.n	800be5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be54:	2303      	movs	r3, #3
 800be56:	73fb      	strb	r3, [r7, #15]
    break;
 800be58:	bf00      	nop
  }
  return usb_status;
 800be5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <log>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	ed2d 8b02 	vpush	{d8}
 800be6e:	ec55 4b10 	vmov	r4, r5, d0
 800be72:	f000 f839 	bl	800bee8 <__ieee754_log>
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	eeb0 8a40 	vmov.f32	s16, s0
 800be82:	eef0 8a60 	vmov.f32	s17, s1
 800be86:	f7f4 fe59 	bl	8000b3c <__aeabi_dcmpun>
 800be8a:	b998      	cbnz	r0, 800beb4 <log+0x4c>
 800be8c:	2200      	movs	r2, #0
 800be8e:	2300      	movs	r3, #0
 800be90:	4620      	mov	r0, r4
 800be92:	4629      	mov	r1, r5
 800be94:	f7f4 fe48 	bl	8000b28 <__aeabi_dcmpgt>
 800be98:	b960      	cbnz	r0, 800beb4 <log+0x4c>
 800be9a:	2200      	movs	r2, #0
 800be9c:	2300      	movs	r3, #0
 800be9e:	4620      	mov	r0, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7f4 fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea6:	b160      	cbz	r0, 800bec2 <log+0x5a>
 800bea8:	f000 f9e2 	bl	800c270 <__errno>
 800beac:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800bed8 <log+0x70>
 800beb0:	2322      	movs	r3, #34	; 0x22
 800beb2:	6003      	str	r3, [r0, #0]
 800beb4:	eeb0 0a48 	vmov.f32	s0, s16
 800beb8:	eef0 0a68 	vmov.f32	s1, s17
 800bebc:	ecbd 8b02 	vpop	{d8}
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	f000 f9d5 	bl	800c270 <__errno>
 800bec6:	ecbd 8b02 	vpop	{d8}
 800beca:	2321      	movs	r3, #33	; 0x21
 800becc:	6003      	str	r3, [r0, #0]
 800bece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bed2:	4803      	ldr	r0, [pc, #12]	; (800bee0 <log+0x78>)
 800bed4:	f000 b9c4 	b.w	800c260 <nan>
 800bed8:	00000000 	.word	0x00000000
 800bedc:	fff00000 	.word	0xfff00000
 800bee0:	08014b00 	.word	0x08014b00
 800bee4:	00000000 	.word	0x00000000

0800bee8 <__ieee754_log>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	ec51 0b10 	vmov	r0, r1, d0
 800bef0:	ed2d 8b04 	vpush	{d8-d9}
 800bef4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bef8:	b083      	sub	sp, #12
 800befa:	460d      	mov	r5, r1
 800befc:	da29      	bge.n	800bf52 <__ieee754_log+0x6a>
 800befe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf02:	4303      	orrs	r3, r0
 800bf04:	ee10 2a10 	vmov	r2, s0
 800bf08:	d10c      	bne.n	800bf24 <__ieee754_log+0x3c>
 800bf0a:	49cf      	ldr	r1, [pc, #828]	; (800c248 <__ieee754_log+0x360>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2000      	movs	r0, #0
 800bf12:	f7f4 fca3 	bl	800085c <__aeabi_ddiv>
 800bf16:	ec41 0b10 	vmov	d0, r0, r1
 800bf1a:	b003      	add	sp, #12
 800bf1c:	ecbd 8b04 	vpop	{d8-d9}
 800bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf24:	2900      	cmp	r1, #0
 800bf26:	da05      	bge.n	800bf34 <__ieee754_log+0x4c>
 800bf28:	460b      	mov	r3, r1
 800bf2a:	f7f4 f9b5 	bl	8000298 <__aeabi_dsub>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2300      	movs	r3, #0
 800bf32:	e7ee      	b.n	800bf12 <__ieee754_log+0x2a>
 800bf34:	4bc5      	ldr	r3, [pc, #788]	; (800c24c <__ieee754_log+0x364>)
 800bf36:	2200      	movs	r2, #0
 800bf38:	f7f4 fb66 	bl	8000608 <__aeabi_dmul>
 800bf3c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800bf40:	460d      	mov	r5, r1
 800bf42:	4ac3      	ldr	r2, [pc, #780]	; (800c250 <__ieee754_log+0x368>)
 800bf44:	4295      	cmp	r5, r2
 800bf46:	dd06      	ble.n	800bf56 <__ieee754_log+0x6e>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	f7f4 f9a6 	bl	800029c <__adddf3>
 800bf50:	e7e1      	b.n	800bf16 <__ieee754_log+0x2e>
 800bf52:	2300      	movs	r3, #0
 800bf54:	e7f5      	b.n	800bf42 <__ieee754_log+0x5a>
 800bf56:	152c      	asrs	r4, r5, #20
 800bf58:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bf5c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bf60:	441c      	add	r4, r3
 800bf62:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800bf66:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800bf6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf6e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800bf72:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800bf76:	ea42 0105 	orr.w	r1, r2, r5
 800bf7a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800bf7e:	2200      	movs	r2, #0
 800bf80:	4bb4      	ldr	r3, [pc, #720]	; (800c254 <__ieee754_log+0x36c>)
 800bf82:	f7f4 f989 	bl	8000298 <__aeabi_dsub>
 800bf86:	1cab      	adds	r3, r5, #2
 800bf88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	4682      	mov	sl, r0
 800bf90:	468b      	mov	fp, r1
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	dc53      	bgt.n	800c040 <__ieee754_log+0x158>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f7f4 fd9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf9e:	b1d0      	cbz	r0, 800bfd6 <__ieee754_log+0xee>
 800bfa0:	2c00      	cmp	r4, #0
 800bfa2:	f000 8122 	beq.w	800c1ea <__ieee754_log+0x302>
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f7f4 fac4 	bl	8000534 <__aeabi_i2d>
 800bfac:	a390      	add	r3, pc, #576	; (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460f      	mov	r7, r1
 800bfb6:	f7f4 fb27 	bl	8000608 <__aeabi_dmul>
 800bfba:	a38f      	add	r3, pc, #572	; (adr r3, 800c1f8 <__ieee754_log+0x310>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	f7f4 fb1e 	bl	8000608 <__aeabi_dmul>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	e7ba      	b.n	800bf4c <__ieee754_log+0x64>
 800bfd6:	a38a      	add	r3, pc, #552	; (adr r3, 800c200 <__ieee754_log+0x318>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	4650      	mov	r0, sl
 800bfde:	4659      	mov	r1, fp
 800bfe0:	f7f4 fb12 	bl	8000608 <__aeabi_dmul>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	2000      	movs	r0, #0
 800bfea:	499b      	ldr	r1, [pc, #620]	; (800c258 <__ieee754_log+0x370>)
 800bfec:	f7f4 f954 	bl	8000298 <__aeabi_dsub>
 800bff0:	4652      	mov	r2, sl
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	465b      	mov	r3, fp
 800bff8:	4650      	mov	r0, sl
 800bffa:	4659      	mov	r1, fp
 800bffc:	f7f4 fb04 	bl	8000608 <__aeabi_dmul>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 fafe 	bl	8000608 <__aeabi_dmul>
 800c00c:	4606      	mov	r6, r0
 800c00e:	460f      	mov	r7, r1
 800c010:	b914      	cbnz	r4, 800c018 <__ieee754_log+0x130>
 800c012:	4632      	mov	r2, r6
 800c014:	463b      	mov	r3, r7
 800c016:	e0a2      	b.n	800c15e <__ieee754_log+0x276>
 800c018:	4620      	mov	r0, r4
 800c01a:	f7f4 fa8b 	bl	8000534 <__aeabi_i2d>
 800c01e:	a374      	add	r3, pc, #464	; (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	4680      	mov	r8, r0
 800c026:	4689      	mov	r9, r1
 800c028:	f7f4 faee 	bl	8000608 <__aeabi_dmul>
 800c02c:	a372      	add	r3, pc, #456	; (adr r3, 800c1f8 <__ieee754_log+0x310>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	4604      	mov	r4, r0
 800c034:	460d      	mov	r5, r1
 800c036:	4640      	mov	r0, r8
 800c038:	4649      	mov	r1, r9
 800c03a:	f7f4 fae5 	bl	8000608 <__aeabi_dmul>
 800c03e:	e0a7      	b.n	800c190 <__ieee754_log+0x2a8>
 800c040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c044:	f7f4 f92a 	bl	800029c <__adddf3>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4650      	mov	r0, sl
 800c04e:	4659      	mov	r1, fp
 800c050:	f7f4 fc04 	bl	800085c <__aeabi_ddiv>
 800c054:	ec41 0b18 	vmov	d8, r0, r1
 800c058:	4620      	mov	r0, r4
 800c05a:	f7f4 fa6b 	bl	8000534 <__aeabi_i2d>
 800c05e:	ec53 2b18 	vmov	r2, r3, d8
 800c062:	ec41 0b19 	vmov	d9, r0, r1
 800c066:	ec51 0b18 	vmov	r0, r1, d8
 800c06a:	f7f4 facd 	bl	8000608 <__aeabi_dmul>
 800c06e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c072:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4680      	mov	r8, r0
 800c07e:	4689      	mov	r9, r1
 800c080:	f7f4 fac2 	bl	8000608 <__aeabi_dmul>
 800c084:	a360      	add	r3, pc, #384	; (adr r3, 800c208 <__ieee754_log+0x320>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	f7f4 fabb 	bl	8000608 <__aeabi_dmul>
 800c092:	a35f      	add	r3, pc, #380	; (adr r3, 800c210 <__ieee754_log+0x328>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f7f4 f900 	bl	800029c <__adddf3>
 800c09c:	4632      	mov	r2, r6
 800c09e:	463b      	mov	r3, r7
 800c0a0:	f7f4 fab2 	bl	8000608 <__aeabi_dmul>
 800c0a4:	a35c      	add	r3, pc, #368	; (adr r3, 800c218 <__ieee754_log+0x330>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 f8f7 	bl	800029c <__adddf3>
 800c0ae:	4632      	mov	r2, r6
 800c0b0:	463b      	mov	r3, r7
 800c0b2:	f7f4 faa9 	bl	8000608 <__aeabi_dmul>
 800c0b6:	a35a      	add	r3, pc, #360	; (adr r3, 800c220 <__ieee754_log+0x338>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	f7f4 f8ee 	bl	800029c <__adddf3>
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	464b      	mov	r3, r9
 800c0c4:	f7f4 faa0 	bl	8000608 <__aeabi_dmul>
 800c0c8:	a357      	add	r3, pc, #348	; (adr r3, 800c228 <__ieee754_log+0x340>)
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	4680      	mov	r8, r0
 800c0d0:	4689      	mov	r9, r1
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	f7f4 fa97 	bl	8000608 <__aeabi_dmul>
 800c0da:	a355      	add	r3, pc, #340	; (adr r3, 800c230 <__ieee754_log+0x348>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 f8dc 	bl	800029c <__adddf3>
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	f7f4 fa8e 	bl	8000608 <__aeabi_dmul>
 800c0ec:	a352      	add	r3, pc, #328	; (adr r3, 800c238 <__ieee754_log+0x350>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f7f4 f8d3 	bl	800029c <__adddf3>
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	463b      	mov	r3, r7
 800c0fa:	f7f4 fa85 	bl	8000608 <__aeabi_dmul>
 800c0fe:	460b      	mov	r3, r1
 800c100:	4602      	mov	r2, r0
 800c102:	4649      	mov	r1, r9
 800c104:	4640      	mov	r0, r8
 800c106:	f7f4 f8c9 	bl	800029c <__adddf3>
 800c10a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	3551      	adds	r5, #81	; 0x51
 800c112:	431d      	orrs	r5, r3
 800c114:	2d00      	cmp	r5, #0
 800c116:	4680      	mov	r8, r0
 800c118:	4689      	mov	r9, r1
 800c11a:	dd48      	ble.n	800c1ae <__ieee754_log+0x2c6>
 800c11c:	4b4e      	ldr	r3, [pc, #312]	; (800c258 <__ieee754_log+0x370>)
 800c11e:	2200      	movs	r2, #0
 800c120:	4650      	mov	r0, sl
 800c122:	4659      	mov	r1, fp
 800c124:	f7f4 fa70 	bl	8000608 <__aeabi_dmul>
 800c128:	4652      	mov	r2, sl
 800c12a:	465b      	mov	r3, fp
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4606      	mov	r6, r0
 800c136:	460f      	mov	r7, r1
 800c138:	4640      	mov	r0, r8
 800c13a:	4649      	mov	r1, r9
 800c13c:	f7f4 f8ae 	bl	800029c <__adddf3>
 800c140:	ec53 2b18 	vmov	r2, r3, d8
 800c144:	f7f4 fa60 	bl	8000608 <__aeabi_dmul>
 800c148:	4680      	mov	r8, r0
 800c14a:	4689      	mov	r9, r1
 800c14c:	b964      	cbnz	r4, 800c168 <__ieee754_log+0x280>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	4630      	mov	r0, r6
 800c154:	4639      	mov	r1, r7
 800c156:	f7f4 f89f 	bl	8000298 <__aeabi_dsub>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4650      	mov	r0, sl
 800c160:	4659      	mov	r1, fp
 800c162:	f7f4 f899 	bl	8000298 <__aeabi_dsub>
 800c166:	e6d6      	b.n	800bf16 <__ieee754_log+0x2e>
 800c168:	a321      	add	r3, pc, #132	; (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	ec51 0b19 	vmov	r0, r1, d9
 800c172:	f7f4 fa49 	bl	8000608 <__aeabi_dmul>
 800c176:	a320      	add	r3, pc, #128	; (adr r3, 800c1f8 <__ieee754_log+0x310>)
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	4604      	mov	r4, r0
 800c17e:	460d      	mov	r5, r1
 800c180:	ec51 0b19 	vmov	r0, r1, d9
 800c184:	f7f4 fa40 	bl	8000608 <__aeabi_dmul>
 800c188:	4642      	mov	r2, r8
 800c18a:	464b      	mov	r3, r9
 800c18c:	f7f4 f886 	bl	800029c <__adddf3>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 f87e 	bl	8000298 <__aeabi_dsub>
 800c19c:	4652      	mov	r2, sl
 800c19e:	465b      	mov	r3, fp
 800c1a0:	f7f4 f87a 	bl	8000298 <__aeabi_dsub>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	e7d9      	b.n	800c162 <__ieee754_log+0x27a>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4650      	mov	r0, sl
 800c1b4:	4659      	mov	r1, fp
 800c1b6:	f7f4 f86f 	bl	8000298 <__aeabi_dsub>
 800c1ba:	ec53 2b18 	vmov	r2, r3, d8
 800c1be:	f7f4 fa23 	bl	8000608 <__aeabi_dmul>
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	2c00      	cmp	r4, #0
 800c1c8:	f43f af23 	beq.w	800c012 <__ieee754_log+0x12a>
 800c1cc:	a308      	add	r3, pc, #32	; (adr r3, 800c1f0 <__ieee754_log+0x308>)
 800c1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d2:	ec51 0b19 	vmov	r0, r1, d9
 800c1d6:	f7f4 fa17 	bl	8000608 <__aeabi_dmul>
 800c1da:	a307      	add	r3, pc, #28	; (adr r3, 800c1f8 <__ieee754_log+0x310>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	ec51 0b19 	vmov	r0, r1, d9
 800c1e8:	e727      	b.n	800c03a <__ieee754_log+0x152>
 800c1ea:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c240 <__ieee754_log+0x358>
 800c1ee:	e694      	b.n	800bf1a <__ieee754_log+0x32>
 800c1f0:	fee00000 	.word	0xfee00000
 800c1f4:	3fe62e42 	.word	0x3fe62e42
 800c1f8:	35793c76 	.word	0x35793c76
 800c1fc:	3dea39ef 	.word	0x3dea39ef
 800c200:	55555555 	.word	0x55555555
 800c204:	3fd55555 	.word	0x3fd55555
 800c208:	df3e5244 	.word	0xdf3e5244
 800c20c:	3fc2f112 	.word	0x3fc2f112
 800c210:	96cb03de 	.word	0x96cb03de
 800c214:	3fc74664 	.word	0x3fc74664
 800c218:	94229359 	.word	0x94229359
 800c21c:	3fd24924 	.word	0x3fd24924
 800c220:	55555593 	.word	0x55555593
 800c224:	3fe55555 	.word	0x3fe55555
 800c228:	d078c69f 	.word	0xd078c69f
 800c22c:	3fc39a09 	.word	0x3fc39a09
 800c230:	1d8e78af 	.word	0x1d8e78af
 800c234:	3fcc71c5 	.word	0x3fcc71c5
 800c238:	9997fa04 	.word	0x9997fa04
 800c23c:	3fd99999 	.word	0x3fd99999
	...
 800c248:	c3500000 	.word	0xc3500000
 800c24c:	43500000 	.word	0x43500000
 800c250:	7fefffff 	.word	0x7fefffff
 800c254:	3ff00000 	.word	0x3ff00000
 800c258:	3fe00000 	.word	0x3fe00000
 800c25c:	00000000 	.word	0x00000000

0800c260 <nan>:
 800c260:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c268 <nan+0x8>
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	00000000 	.word	0x00000000
 800c26c:	7ff80000 	.word	0x7ff80000

0800c270 <__errno>:
 800c270:	4b01      	ldr	r3, [pc, #4]	; (800c278 <__errno+0x8>)
 800c272:	6818      	ldr	r0, [r3, #0]
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	2000010c 	.word	0x2000010c

0800c27c <__libc_init_array>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	4d0d      	ldr	r5, [pc, #52]	; (800c2b4 <__libc_init_array+0x38>)
 800c280:	4c0d      	ldr	r4, [pc, #52]	; (800c2b8 <__libc_init_array+0x3c>)
 800c282:	1b64      	subs	r4, r4, r5
 800c284:	10a4      	asrs	r4, r4, #2
 800c286:	2600      	movs	r6, #0
 800c288:	42a6      	cmp	r6, r4
 800c28a:	d109      	bne.n	800c2a0 <__libc_init_array+0x24>
 800c28c:	4d0b      	ldr	r5, [pc, #44]	; (800c2bc <__libc_init_array+0x40>)
 800c28e:	4c0c      	ldr	r4, [pc, #48]	; (800c2c0 <__libc_init_array+0x44>)
 800c290:	f004 fcca 	bl	8010c28 <_init>
 800c294:	1b64      	subs	r4, r4, r5
 800c296:	10a4      	asrs	r4, r4, #2
 800c298:	2600      	movs	r6, #0
 800c29a:	42a6      	cmp	r6, r4
 800c29c:	d105      	bne.n	800c2aa <__libc_init_array+0x2e>
 800c29e:	bd70      	pop	{r4, r5, r6, pc}
 800c2a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a4:	4798      	blx	r3
 800c2a6:	3601      	adds	r6, #1
 800c2a8:	e7ee      	b.n	800c288 <__libc_init_array+0xc>
 800c2aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ae:	4798      	blx	r3
 800c2b0:	3601      	adds	r6, #1
 800c2b2:	e7f2      	b.n	800c29a <__libc_init_array+0x1e>
 800c2b4:	08014b6c 	.word	0x08014b6c
 800c2b8:	08014b6c 	.word	0x08014b6c
 800c2bc:	08014b6c 	.word	0x08014b6c
 800c2c0:	08014b70 	.word	0x08014b70

0800c2c4 <memset>:
 800c2c4:	4402      	add	r2, r0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d100      	bne.n	800c2ce <memset+0xa>
 800c2cc:	4770      	bx	lr
 800c2ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c2d2:	e7f9      	b.n	800c2c8 <memset+0x4>

0800c2d4 <__cvt>:
 800c2d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d8:	ec55 4b10 	vmov	r4, r5, d0
 800c2dc:	2d00      	cmp	r5, #0
 800c2de:	460e      	mov	r6, r1
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	bfbb      	ittet	lt
 800c2e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c2ea:	461d      	movlt	r5, r3
 800c2ec:	2300      	movge	r3, #0
 800c2ee:	232d      	movlt	r3, #45	; 0x2d
 800c2f0:	700b      	strb	r3, [r1, #0]
 800c2f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c2f8:	4691      	mov	r9, r2
 800c2fa:	f023 0820 	bic.w	r8, r3, #32
 800c2fe:	bfbc      	itt	lt
 800c300:	4622      	movlt	r2, r4
 800c302:	4614      	movlt	r4, r2
 800c304:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c308:	d005      	beq.n	800c316 <__cvt+0x42>
 800c30a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c30e:	d100      	bne.n	800c312 <__cvt+0x3e>
 800c310:	3601      	adds	r6, #1
 800c312:	2102      	movs	r1, #2
 800c314:	e000      	b.n	800c318 <__cvt+0x44>
 800c316:	2103      	movs	r1, #3
 800c318:	ab03      	add	r3, sp, #12
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	ab02      	add	r3, sp, #8
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	ec45 4b10 	vmov	d0, r4, r5
 800c324:	4653      	mov	r3, sl
 800c326:	4632      	mov	r2, r6
 800c328:	f001 fdae 	bl	800de88 <_dtoa_r>
 800c32c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c330:	4607      	mov	r7, r0
 800c332:	d102      	bne.n	800c33a <__cvt+0x66>
 800c334:	f019 0f01 	tst.w	r9, #1
 800c338:	d022      	beq.n	800c380 <__cvt+0xac>
 800c33a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c33e:	eb07 0906 	add.w	r9, r7, r6
 800c342:	d110      	bne.n	800c366 <__cvt+0x92>
 800c344:	783b      	ldrb	r3, [r7, #0]
 800c346:	2b30      	cmp	r3, #48	; 0x30
 800c348:	d10a      	bne.n	800c360 <__cvt+0x8c>
 800c34a:	2200      	movs	r2, #0
 800c34c:	2300      	movs	r3, #0
 800c34e:	4620      	mov	r0, r4
 800c350:	4629      	mov	r1, r5
 800c352:	f7f4 fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c356:	b918      	cbnz	r0, 800c360 <__cvt+0x8c>
 800c358:	f1c6 0601 	rsb	r6, r6, #1
 800c35c:	f8ca 6000 	str.w	r6, [sl]
 800c360:	f8da 3000 	ldr.w	r3, [sl]
 800c364:	4499      	add	r9, r3
 800c366:	2200      	movs	r2, #0
 800c368:	2300      	movs	r3, #0
 800c36a:	4620      	mov	r0, r4
 800c36c:	4629      	mov	r1, r5
 800c36e:	f7f4 fbb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c372:	b108      	cbz	r0, 800c378 <__cvt+0xa4>
 800c374:	f8cd 900c 	str.w	r9, [sp, #12]
 800c378:	2230      	movs	r2, #48	; 0x30
 800c37a:	9b03      	ldr	r3, [sp, #12]
 800c37c:	454b      	cmp	r3, r9
 800c37e:	d307      	bcc.n	800c390 <__cvt+0xbc>
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c384:	1bdb      	subs	r3, r3, r7
 800c386:	4638      	mov	r0, r7
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	b004      	add	sp, #16
 800c38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c390:	1c59      	adds	r1, r3, #1
 800c392:	9103      	str	r1, [sp, #12]
 800c394:	701a      	strb	r2, [r3, #0]
 800c396:	e7f0      	b.n	800c37a <__cvt+0xa6>

0800c398 <__exponent>:
 800c398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c39a:	4603      	mov	r3, r0
 800c39c:	2900      	cmp	r1, #0
 800c39e:	bfb8      	it	lt
 800c3a0:	4249      	neglt	r1, r1
 800c3a2:	f803 2b02 	strb.w	r2, [r3], #2
 800c3a6:	bfb4      	ite	lt
 800c3a8:	222d      	movlt	r2, #45	; 0x2d
 800c3aa:	222b      	movge	r2, #43	; 0x2b
 800c3ac:	2909      	cmp	r1, #9
 800c3ae:	7042      	strb	r2, [r0, #1]
 800c3b0:	dd2a      	ble.n	800c408 <__exponent+0x70>
 800c3b2:	f10d 0407 	add.w	r4, sp, #7
 800c3b6:	46a4      	mov	ip, r4
 800c3b8:	270a      	movs	r7, #10
 800c3ba:	46a6      	mov	lr, r4
 800c3bc:	460a      	mov	r2, r1
 800c3be:	fb91 f6f7 	sdiv	r6, r1, r7
 800c3c2:	fb07 1516 	mls	r5, r7, r6, r1
 800c3c6:	3530      	adds	r5, #48	; 0x30
 800c3c8:	2a63      	cmp	r2, #99	; 0x63
 800c3ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800c3ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	dcf1      	bgt.n	800c3ba <__exponent+0x22>
 800c3d6:	3130      	adds	r1, #48	; 0x30
 800c3d8:	f1ae 0502 	sub.w	r5, lr, #2
 800c3dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c3e0:	1c44      	adds	r4, r0, #1
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4561      	cmp	r1, ip
 800c3e6:	d30a      	bcc.n	800c3fe <__exponent+0x66>
 800c3e8:	f10d 0209 	add.w	r2, sp, #9
 800c3ec:	eba2 020e 	sub.w	r2, r2, lr
 800c3f0:	4565      	cmp	r5, ip
 800c3f2:	bf88      	it	hi
 800c3f4:	2200      	movhi	r2, #0
 800c3f6:	4413      	add	r3, r2
 800c3f8:	1a18      	subs	r0, r3, r0
 800c3fa:	b003      	add	sp, #12
 800c3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c402:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c406:	e7ed      	b.n	800c3e4 <__exponent+0x4c>
 800c408:	2330      	movs	r3, #48	; 0x30
 800c40a:	3130      	adds	r1, #48	; 0x30
 800c40c:	7083      	strb	r3, [r0, #2]
 800c40e:	70c1      	strb	r1, [r0, #3]
 800c410:	1d03      	adds	r3, r0, #4
 800c412:	e7f1      	b.n	800c3f8 <__exponent+0x60>

0800c414 <_printf_float>:
 800c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c418:	ed2d 8b02 	vpush	{d8}
 800c41c:	b08d      	sub	sp, #52	; 0x34
 800c41e:	460c      	mov	r4, r1
 800c420:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c424:	4616      	mov	r6, r2
 800c426:	461f      	mov	r7, r3
 800c428:	4605      	mov	r5, r0
 800c42a:	f002 fe8b 	bl	800f144 <_localeconv_r>
 800c42e:	f8d0 a000 	ldr.w	sl, [r0]
 800c432:	4650      	mov	r0, sl
 800c434:	f7f3 fed4 	bl	80001e0 <strlen>
 800c438:	2300      	movs	r3, #0
 800c43a:	930a      	str	r3, [sp, #40]	; 0x28
 800c43c:	6823      	ldr	r3, [r4, #0]
 800c43e:	9305      	str	r3, [sp, #20]
 800c440:	f8d8 3000 	ldr.w	r3, [r8]
 800c444:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c448:	3307      	adds	r3, #7
 800c44a:	f023 0307 	bic.w	r3, r3, #7
 800c44e:	f103 0208 	add.w	r2, r3, #8
 800c452:	f8c8 2000 	str.w	r2, [r8]
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c45e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c462:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c466:	9307      	str	r3, [sp, #28]
 800c468:	f8cd 8018 	str.w	r8, [sp, #24]
 800c46c:	ee08 0a10 	vmov	s16, r0
 800c470:	4b9f      	ldr	r3, [pc, #636]	; (800c6f0 <_printf_float+0x2dc>)
 800c472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c476:	f04f 32ff 	mov.w	r2, #4294967295
 800c47a:	f7f4 fb5f 	bl	8000b3c <__aeabi_dcmpun>
 800c47e:	bb88      	cbnz	r0, 800c4e4 <_printf_float+0xd0>
 800c480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c484:	4b9a      	ldr	r3, [pc, #616]	; (800c6f0 <_printf_float+0x2dc>)
 800c486:	f04f 32ff 	mov.w	r2, #4294967295
 800c48a:	f7f4 fb39 	bl	8000b00 <__aeabi_dcmple>
 800c48e:	bb48      	cbnz	r0, 800c4e4 <_printf_float+0xd0>
 800c490:	2200      	movs	r2, #0
 800c492:	2300      	movs	r3, #0
 800c494:	4640      	mov	r0, r8
 800c496:	4649      	mov	r1, r9
 800c498:	f7f4 fb28 	bl	8000aec <__aeabi_dcmplt>
 800c49c:	b110      	cbz	r0, 800c4a4 <_printf_float+0x90>
 800c49e:	232d      	movs	r3, #45	; 0x2d
 800c4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4a4:	4b93      	ldr	r3, [pc, #588]	; (800c6f4 <_printf_float+0x2e0>)
 800c4a6:	4894      	ldr	r0, [pc, #592]	; (800c6f8 <_printf_float+0x2e4>)
 800c4a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c4ac:	bf94      	ite	ls
 800c4ae:	4698      	movls	r8, r3
 800c4b0:	4680      	movhi	r8, r0
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	6123      	str	r3, [r4, #16]
 800c4b6:	9b05      	ldr	r3, [sp, #20]
 800c4b8:	f023 0204 	bic.w	r2, r3, #4
 800c4bc:	6022      	str	r2, [r4, #0]
 800c4be:	f04f 0900 	mov.w	r9, #0
 800c4c2:	9700      	str	r7, [sp, #0]
 800c4c4:	4633      	mov	r3, r6
 800c4c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 f9d8 	bl	800c880 <_printf_common>
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	f040 8090 	bne.w	800c5f6 <_printf_float+0x1e2>
 800c4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4da:	b00d      	add	sp, #52	; 0x34
 800c4dc:	ecbd 8b02 	vpop	{d8}
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e4:	4642      	mov	r2, r8
 800c4e6:	464b      	mov	r3, r9
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	f7f4 fb26 	bl	8000b3c <__aeabi_dcmpun>
 800c4f0:	b140      	cbz	r0, 800c504 <_printf_float+0xf0>
 800c4f2:	464b      	mov	r3, r9
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfbc      	itt	lt
 800c4f8:	232d      	movlt	r3, #45	; 0x2d
 800c4fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c4fe:	487f      	ldr	r0, [pc, #508]	; (800c6fc <_printf_float+0x2e8>)
 800c500:	4b7f      	ldr	r3, [pc, #508]	; (800c700 <_printf_float+0x2ec>)
 800c502:	e7d1      	b.n	800c4a8 <_printf_float+0x94>
 800c504:	6863      	ldr	r3, [r4, #4]
 800c506:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c50a:	9206      	str	r2, [sp, #24]
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	d13f      	bne.n	800c590 <_printf_float+0x17c>
 800c510:	2306      	movs	r3, #6
 800c512:	6063      	str	r3, [r4, #4]
 800c514:	9b05      	ldr	r3, [sp, #20]
 800c516:	6861      	ldr	r1, [r4, #4]
 800c518:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c51c:	2300      	movs	r3, #0
 800c51e:	9303      	str	r3, [sp, #12]
 800c520:	ab0a      	add	r3, sp, #40	; 0x28
 800c522:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c526:	ab09      	add	r3, sp, #36	; 0x24
 800c528:	ec49 8b10 	vmov	d0, r8, r9
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	6022      	str	r2, [r4, #0]
 800c530:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c534:	4628      	mov	r0, r5
 800c536:	f7ff fecd 	bl	800c2d4 <__cvt>
 800c53a:	9b06      	ldr	r3, [sp, #24]
 800c53c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c53e:	2b47      	cmp	r3, #71	; 0x47
 800c540:	4680      	mov	r8, r0
 800c542:	d108      	bne.n	800c556 <_printf_float+0x142>
 800c544:	1cc8      	adds	r0, r1, #3
 800c546:	db02      	blt.n	800c54e <_printf_float+0x13a>
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	4299      	cmp	r1, r3
 800c54c:	dd41      	ble.n	800c5d2 <_printf_float+0x1be>
 800c54e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c552:	fa5f fb8b 	uxtb.w	fp, fp
 800c556:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c55a:	d820      	bhi.n	800c59e <_printf_float+0x18a>
 800c55c:	3901      	subs	r1, #1
 800c55e:	465a      	mov	r2, fp
 800c560:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c564:	9109      	str	r1, [sp, #36]	; 0x24
 800c566:	f7ff ff17 	bl	800c398 <__exponent>
 800c56a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c56c:	1813      	adds	r3, r2, r0
 800c56e:	2a01      	cmp	r2, #1
 800c570:	4681      	mov	r9, r0
 800c572:	6123      	str	r3, [r4, #16]
 800c574:	dc02      	bgt.n	800c57c <_printf_float+0x168>
 800c576:	6822      	ldr	r2, [r4, #0]
 800c578:	07d2      	lsls	r2, r2, #31
 800c57a:	d501      	bpl.n	800c580 <_printf_float+0x16c>
 800c57c:	3301      	adds	r3, #1
 800c57e:	6123      	str	r3, [r4, #16]
 800c580:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c584:	2b00      	cmp	r3, #0
 800c586:	d09c      	beq.n	800c4c2 <_printf_float+0xae>
 800c588:	232d      	movs	r3, #45	; 0x2d
 800c58a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c58e:	e798      	b.n	800c4c2 <_printf_float+0xae>
 800c590:	9a06      	ldr	r2, [sp, #24]
 800c592:	2a47      	cmp	r2, #71	; 0x47
 800c594:	d1be      	bne.n	800c514 <_printf_float+0x100>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1bc      	bne.n	800c514 <_printf_float+0x100>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e7b9      	b.n	800c512 <_printf_float+0xfe>
 800c59e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c5a2:	d118      	bne.n	800c5d6 <_printf_float+0x1c2>
 800c5a4:	2900      	cmp	r1, #0
 800c5a6:	6863      	ldr	r3, [r4, #4]
 800c5a8:	dd0b      	ble.n	800c5c2 <_printf_float+0x1ae>
 800c5aa:	6121      	str	r1, [r4, #16]
 800c5ac:	b913      	cbnz	r3, 800c5b4 <_printf_float+0x1a0>
 800c5ae:	6822      	ldr	r2, [r4, #0]
 800c5b0:	07d0      	lsls	r0, r2, #31
 800c5b2:	d502      	bpl.n	800c5ba <_printf_float+0x1a6>
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	440b      	add	r3, r1
 800c5b8:	6123      	str	r3, [r4, #16]
 800c5ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800c5bc:	f04f 0900 	mov.w	r9, #0
 800c5c0:	e7de      	b.n	800c580 <_printf_float+0x16c>
 800c5c2:	b913      	cbnz	r3, 800c5ca <_printf_float+0x1b6>
 800c5c4:	6822      	ldr	r2, [r4, #0]
 800c5c6:	07d2      	lsls	r2, r2, #31
 800c5c8:	d501      	bpl.n	800c5ce <_printf_float+0x1ba>
 800c5ca:	3302      	adds	r3, #2
 800c5cc:	e7f4      	b.n	800c5b8 <_printf_float+0x1a4>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e7f2      	b.n	800c5b8 <_printf_float+0x1a4>
 800c5d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d8:	4299      	cmp	r1, r3
 800c5da:	db05      	blt.n	800c5e8 <_printf_float+0x1d4>
 800c5dc:	6823      	ldr	r3, [r4, #0]
 800c5de:	6121      	str	r1, [r4, #16]
 800c5e0:	07d8      	lsls	r0, r3, #31
 800c5e2:	d5ea      	bpl.n	800c5ba <_printf_float+0x1a6>
 800c5e4:	1c4b      	adds	r3, r1, #1
 800c5e6:	e7e7      	b.n	800c5b8 <_printf_float+0x1a4>
 800c5e8:	2900      	cmp	r1, #0
 800c5ea:	bfd4      	ite	le
 800c5ec:	f1c1 0202 	rsble	r2, r1, #2
 800c5f0:	2201      	movgt	r2, #1
 800c5f2:	4413      	add	r3, r2
 800c5f4:	e7e0      	b.n	800c5b8 <_printf_float+0x1a4>
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	055a      	lsls	r2, r3, #21
 800c5fa:	d407      	bmi.n	800c60c <_printf_float+0x1f8>
 800c5fc:	6923      	ldr	r3, [r4, #16]
 800c5fe:	4642      	mov	r2, r8
 800c600:	4631      	mov	r1, r6
 800c602:	4628      	mov	r0, r5
 800c604:	47b8      	blx	r7
 800c606:	3001      	adds	r0, #1
 800c608:	d12c      	bne.n	800c664 <_printf_float+0x250>
 800c60a:	e764      	b.n	800c4d6 <_printf_float+0xc2>
 800c60c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c610:	f240 80e0 	bls.w	800c7d4 <_printf_float+0x3c0>
 800c614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c618:	2200      	movs	r2, #0
 800c61a:	2300      	movs	r3, #0
 800c61c:	f7f4 fa5c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c620:	2800      	cmp	r0, #0
 800c622:	d034      	beq.n	800c68e <_printf_float+0x27a>
 800c624:	4a37      	ldr	r2, [pc, #220]	; (800c704 <_printf_float+0x2f0>)
 800c626:	2301      	movs	r3, #1
 800c628:	4631      	mov	r1, r6
 800c62a:	4628      	mov	r0, r5
 800c62c:	47b8      	blx	r7
 800c62e:	3001      	adds	r0, #1
 800c630:	f43f af51 	beq.w	800c4d6 <_printf_float+0xc2>
 800c634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c638:	429a      	cmp	r2, r3
 800c63a:	db02      	blt.n	800c642 <_printf_float+0x22e>
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	07d8      	lsls	r0, r3, #31
 800c640:	d510      	bpl.n	800c664 <_printf_float+0x250>
 800c642:	ee18 3a10 	vmov	r3, s16
 800c646:	4652      	mov	r2, sl
 800c648:	4631      	mov	r1, r6
 800c64a:	4628      	mov	r0, r5
 800c64c:	47b8      	blx	r7
 800c64e:	3001      	adds	r0, #1
 800c650:	f43f af41 	beq.w	800c4d6 <_printf_float+0xc2>
 800c654:	f04f 0800 	mov.w	r8, #0
 800c658:	f104 091a 	add.w	r9, r4, #26
 800c65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65e:	3b01      	subs	r3, #1
 800c660:	4543      	cmp	r3, r8
 800c662:	dc09      	bgt.n	800c678 <_printf_float+0x264>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	079b      	lsls	r3, r3, #30
 800c668:	f100 8105 	bmi.w	800c876 <_printf_float+0x462>
 800c66c:	68e0      	ldr	r0, [r4, #12]
 800c66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c670:	4298      	cmp	r0, r3
 800c672:	bfb8      	it	lt
 800c674:	4618      	movlt	r0, r3
 800c676:	e730      	b.n	800c4da <_printf_float+0xc6>
 800c678:	2301      	movs	r3, #1
 800c67a:	464a      	mov	r2, r9
 800c67c:	4631      	mov	r1, r6
 800c67e:	4628      	mov	r0, r5
 800c680:	47b8      	blx	r7
 800c682:	3001      	adds	r0, #1
 800c684:	f43f af27 	beq.w	800c4d6 <_printf_float+0xc2>
 800c688:	f108 0801 	add.w	r8, r8, #1
 800c68c:	e7e6      	b.n	800c65c <_printf_float+0x248>
 800c68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c690:	2b00      	cmp	r3, #0
 800c692:	dc39      	bgt.n	800c708 <_printf_float+0x2f4>
 800c694:	4a1b      	ldr	r2, [pc, #108]	; (800c704 <_printf_float+0x2f0>)
 800c696:	2301      	movs	r3, #1
 800c698:	4631      	mov	r1, r6
 800c69a:	4628      	mov	r0, r5
 800c69c:	47b8      	blx	r7
 800c69e:	3001      	adds	r0, #1
 800c6a0:	f43f af19 	beq.w	800c4d6 <_printf_float+0xc2>
 800c6a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	d102      	bne.n	800c6b2 <_printf_float+0x29e>
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	07d9      	lsls	r1, r3, #31
 800c6b0:	d5d8      	bpl.n	800c664 <_printf_float+0x250>
 800c6b2:	ee18 3a10 	vmov	r3, s16
 800c6b6:	4652      	mov	r2, sl
 800c6b8:	4631      	mov	r1, r6
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	47b8      	blx	r7
 800c6be:	3001      	adds	r0, #1
 800c6c0:	f43f af09 	beq.w	800c4d6 <_printf_float+0xc2>
 800c6c4:	f04f 0900 	mov.w	r9, #0
 800c6c8:	f104 0a1a 	add.w	sl, r4, #26
 800c6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ce:	425b      	negs	r3, r3
 800c6d0:	454b      	cmp	r3, r9
 800c6d2:	dc01      	bgt.n	800c6d8 <_printf_float+0x2c4>
 800c6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d6:	e792      	b.n	800c5fe <_printf_float+0x1ea>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4652      	mov	r2, sl
 800c6dc:	4631      	mov	r1, r6
 800c6de:	4628      	mov	r0, r5
 800c6e0:	47b8      	blx	r7
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	f43f aef7 	beq.w	800c4d6 <_printf_float+0xc2>
 800c6e8:	f109 0901 	add.w	r9, r9, #1
 800c6ec:	e7ee      	b.n	800c6cc <_printf_float+0x2b8>
 800c6ee:	bf00      	nop
 800c6f0:	7fefffff 	.word	0x7fefffff
 800c6f4:	080146c4 	.word	0x080146c4
 800c6f8:	080146c8 	.word	0x080146c8
 800c6fc:	080146d0 	.word	0x080146d0
 800c700:	080146cc 	.word	0x080146cc
 800c704:	080146d4 	.word	0x080146d4
 800c708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c70a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c70c:	429a      	cmp	r2, r3
 800c70e:	bfa8      	it	ge
 800c710:	461a      	movge	r2, r3
 800c712:	2a00      	cmp	r2, #0
 800c714:	4691      	mov	r9, r2
 800c716:	dc37      	bgt.n	800c788 <_printf_float+0x374>
 800c718:	f04f 0b00 	mov.w	fp, #0
 800c71c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c720:	f104 021a 	add.w	r2, r4, #26
 800c724:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c726:	9305      	str	r3, [sp, #20]
 800c728:	eba3 0309 	sub.w	r3, r3, r9
 800c72c:	455b      	cmp	r3, fp
 800c72e:	dc33      	bgt.n	800c798 <_printf_float+0x384>
 800c730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c734:	429a      	cmp	r2, r3
 800c736:	db3b      	blt.n	800c7b0 <_printf_float+0x39c>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	07da      	lsls	r2, r3, #31
 800c73c:	d438      	bmi.n	800c7b0 <_printf_float+0x39c>
 800c73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c740:	9a05      	ldr	r2, [sp, #20]
 800c742:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c744:	1a9a      	subs	r2, r3, r2
 800c746:	eba3 0901 	sub.w	r9, r3, r1
 800c74a:	4591      	cmp	r9, r2
 800c74c:	bfa8      	it	ge
 800c74e:	4691      	movge	r9, r2
 800c750:	f1b9 0f00 	cmp.w	r9, #0
 800c754:	dc35      	bgt.n	800c7c2 <_printf_float+0x3ae>
 800c756:	f04f 0800 	mov.w	r8, #0
 800c75a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c75e:	f104 0a1a 	add.w	sl, r4, #26
 800c762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c766:	1a9b      	subs	r3, r3, r2
 800c768:	eba3 0309 	sub.w	r3, r3, r9
 800c76c:	4543      	cmp	r3, r8
 800c76e:	f77f af79 	ble.w	800c664 <_printf_float+0x250>
 800c772:	2301      	movs	r3, #1
 800c774:	4652      	mov	r2, sl
 800c776:	4631      	mov	r1, r6
 800c778:	4628      	mov	r0, r5
 800c77a:	47b8      	blx	r7
 800c77c:	3001      	adds	r0, #1
 800c77e:	f43f aeaa 	beq.w	800c4d6 <_printf_float+0xc2>
 800c782:	f108 0801 	add.w	r8, r8, #1
 800c786:	e7ec      	b.n	800c762 <_printf_float+0x34e>
 800c788:	4613      	mov	r3, r2
 800c78a:	4631      	mov	r1, r6
 800c78c:	4642      	mov	r2, r8
 800c78e:	4628      	mov	r0, r5
 800c790:	47b8      	blx	r7
 800c792:	3001      	adds	r0, #1
 800c794:	d1c0      	bne.n	800c718 <_printf_float+0x304>
 800c796:	e69e      	b.n	800c4d6 <_printf_float+0xc2>
 800c798:	2301      	movs	r3, #1
 800c79a:	4631      	mov	r1, r6
 800c79c:	4628      	mov	r0, r5
 800c79e:	9205      	str	r2, [sp, #20]
 800c7a0:	47b8      	blx	r7
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	f43f ae97 	beq.w	800c4d6 <_printf_float+0xc2>
 800c7a8:	9a05      	ldr	r2, [sp, #20]
 800c7aa:	f10b 0b01 	add.w	fp, fp, #1
 800c7ae:	e7b9      	b.n	800c724 <_printf_float+0x310>
 800c7b0:	ee18 3a10 	vmov	r3, s16
 800c7b4:	4652      	mov	r2, sl
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	47b8      	blx	r7
 800c7bc:	3001      	adds	r0, #1
 800c7be:	d1be      	bne.n	800c73e <_printf_float+0x32a>
 800c7c0:	e689      	b.n	800c4d6 <_printf_float+0xc2>
 800c7c2:	9a05      	ldr	r2, [sp, #20]
 800c7c4:	464b      	mov	r3, r9
 800c7c6:	4442      	add	r2, r8
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	47b8      	blx	r7
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d1c1      	bne.n	800c756 <_printf_float+0x342>
 800c7d2:	e680      	b.n	800c4d6 <_printf_float+0xc2>
 800c7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7d6:	2a01      	cmp	r2, #1
 800c7d8:	dc01      	bgt.n	800c7de <_printf_float+0x3ca>
 800c7da:	07db      	lsls	r3, r3, #31
 800c7dc:	d538      	bpl.n	800c850 <_printf_float+0x43c>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	4642      	mov	r2, r8
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	47b8      	blx	r7
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	f43f ae74 	beq.w	800c4d6 <_printf_float+0xc2>
 800c7ee:	ee18 3a10 	vmov	r3, s16
 800c7f2:	4652      	mov	r2, sl
 800c7f4:	4631      	mov	r1, r6
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	47b8      	blx	r7
 800c7fa:	3001      	adds	r0, #1
 800c7fc:	f43f ae6b 	beq.w	800c4d6 <_printf_float+0xc2>
 800c800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c804:	2200      	movs	r2, #0
 800c806:	2300      	movs	r3, #0
 800c808:	f7f4 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800c80c:	b9d8      	cbnz	r0, 800c846 <_printf_float+0x432>
 800c80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c810:	f108 0201 	add.w	r2, r8, #1
 800c814:	3b01      	subs	r3, #1
 800c816:	4631      	mov	r1, r6
 800c818:	4628      	mov	r0, r5
 800c81a:	47b8      	blx	r7
 800c81c:	3001      	adds	r0, #1
 800c81e:	d10e      	bne.n	800c83e <_printf_float+0x42a>
 800c820:	e659      	b.n	800c4d6 <_printf_float+0xc2>
 800c822:	2301      	movs	r3, #1
 800c824:	4652      	mov	r2, sl
 800c826:	4631      	mov	r1, r6
 800c828:	4628      	mov	r0, r5
 800c82a:	47b8      	blx	r7
 800c82c:	3001      	adds	r0, #1
 800c82e:	f43f ae52 	beq.w	800c4d6 <_printf_float+0xc2>
 800c832:	f108 0801 	add.w	r8, r8, #1
 800c836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c838:	3b01      	subs	r3, #1
 800c83a:	4543      	cmp	r3, r8
 800c83c:	dcf1      	bgt.n	800c822 <_printf_float+0x40e>
 800c83e:	464b      	mov	r3, r9
 800c840:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c844:	e6dc      	b.n	800c600 <_printf_float+0x1ec>
 800c846:	f04f 0800 	mov.w	r8, #0
 800c84a:	f104 0a1a 	add.w	sl, r4, #26
 800c84e:	e7f2      	b.n	800c836 <_printf_float+0x422>
 800c850:	2301      	movs	r3, #1
 800c852:	4642      	mov	r2, r8
 800c854:	e7df      	b.n	800c816 <_printf_float+0x402>
 800c856:	2301      	movs	r3, #1
 800c858:	464a      	mov	r2, r9
 800c85a:	4631      	mov	r1, r6
 800c85c:	4628      	mov	r0, r5
 800c85e:	47b8      	blx	r7
 800c860:	3001      	adds	r0, #1
 800c862:	f43f ae38 	beq.w	800c4d6 <_printf_float+0xc2>
 800c866:	f108 0801 	add.w	r8, r8, #1
 800c86a:	68e3      	ldr	r3, [r4, #12]
 800c86c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c86e:	1a5b      	subs	r3, r3, r1
 800c870:	4543      	cmp	r3, r8
 800c872:	dcf0      	bgt.n	800c856 <_printf_float+0x442>
 800c874:	e6fa      	b.n	800c66c <_printf_float+0x258>
 800c876:	f04f 0800 	mov.w	r8, #0
 800c87a:	f104 0919 	add.w	r9, r4, #25
 800c87e:	e7f4      	b.n	800c86a <_printf_float+0x456>

0800c880 <_printf_common>:
 800c880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c884:	4616      	mov	r6, r2
 800c886:	4699      	mov	r9, r3
 800c888:	688a      	ldr	r2, [r1, #8]
 800c88a:	690b      	ldr	r3, [r1, #16]
 800c88c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c890:	4293      	cmp	r3, r2
 800c892:	bfb8      	it	lt
 800c894:	4613      	movlt	r3, r2
 800c896:	6033      	str	r3, [r6, #0]
 800c898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c89c:	4607      	mov	r7, r0
 800c89e:	460c      	mov	r4, r1
 800c8a0:	b10a      	cbz	r2, 800c8a6 <_printf_common+0x26>
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	6033      	str	r3, [r6, #0]
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	0699      	lsls	r1, r3, #26
 800c8aa:	bf42      	ittt	mi
 800c8ac:	6833      	ldrmi	r3, [r6, #0]
 800c8ae:	3302      	addmi	r3, #2
 800c8b0:	6033      	strmi	r3, [r6, #0]
 800c8b2:	6825      	ldr	r5, [r4, #0]
 800c8b4:	f015 0506 	ands.w	r5, r5, #6
 800c8b8:	d106      	bne.n	800c8c8 <_printf_common+0x48>
 800c8ba:	f104 0a19 	add.w	sl, r4, #25
 800c8be:	68e3      	ldr	r3, [r4, #12]
 800c8c0:	6832      	ldr	r2, [r6, #0]
 800c8c2:	1a9b      	subs	r3, r3, r2
 800c8c4:	42ab      	cmp	r3, r5
 800c8c6:	dc26      	bgt.n	800c916 <_printf_common+0x96>
 800c8c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8cc:	1e13      	subs	r3, r2, #0
 800c8ce:	6822      	ldr	r2, [r4, #0]
 800c8d0:	bf18      	it	ne
 800c8d2:	2301      	movne	r3, #1
 800c8d4:	0692      	lsls	r2, r2, #26
 800c8d6:	d42b      	bmi.n	800c930 <_printf_common+0xb0>
 800c8d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8dc:	4649      	mov	r1, r9
 800c8de:	4638      	mov	r0, r7
 800c8e0:	47c0      	blx	r8
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	d01e      	beq.n	800c924 <_printf_common+0xa4>
 800c8e6:	6823      	ldr	r3, [r4, #0]
 800c8e8:	68e5      	ldr	r5, [r4, #12]
 800c8ea:	6832      	ldr	r2, [r6, #0]
 800c8ec:	f003 0306 	and.w	r3, r3, #6
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	bf08      	it	eq
 800c8f4:	1aad      	subeq	r5, r5, r2
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	6922      	ldr	r2, [r4, #16]
 800c8fa:	bf0c      	ite	eq
 800c8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c900:	2500      	movne	r5, #0
 800c902:	4293      	cmp	r3, r2
 800c904:	bfc4      	itt	gt
 800c906:	1a9b      	subgt	r3, r3, r2
 800c908:	18ed      	addgt	r5, r5, r3
 800c90a:	2600      	movs	r6, #0
 800c90c:	341a      	adds	r4, #26
 800c90e:	42b5      	cmp	r5, r6
 800c910:	d11a      	bne.n	800c948 <_printf_common+0xc8>
 800c912:	2000      	movs	r0, #0
 800c914:	e008      	b.n	800c928 <_printf_common+0xa8>
 800c916:	2301      	movs	r3, #1
 800c918:	4652      	mov	r2, sl
 800c91a:	4649      	mov	r1, r9
 800c91c:	4638      	mov	r0, r7
 800c91e:	47c0      	blx	r8
 800c920:	3001      	adds	r0, #1
 800c922:	d103      	bne.n	800c92c <_printf_common+0xac>
 800c924:	f04f 30ff 	mov.w	r0, #4294967295
 800c928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c92c:	3501      	adds	r5, #1
 800c92e:	e7c6      	b.n	800c8be <_printf_common+0x3e>
 800c930:	18e1      	adds	r1, r4, r3
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	2030      	movs	r0, #48	; 0x30
 800c936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c93a:	4422      	add	r2, r4
 800c93c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c944:	3302      	adds	r3, #2
 800c946:	e7c7      	b.n	800c8d8 <_printf_common+0x58>
 800c948:	2301      	movs	r3, #1
 800c94a:	4622      	mov	r2, r4
 800c94c:	4649      	mov	r1, r9
 800c94e:	4638      	mov	r0, r7
 800c950:	47c0      	blx	r8
 800c952:	3001      	adds	r0, #1
 800c954:	d0e6      	beq.n	800c924 <_printf_common+0xa4>
 800c956:	3601      	adds	r6, #1
 800c958:	e7d9      	b.n	800c90e <_printf_common+0x8e>
	...

0800c95c <_printf_i>:
 800c95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c960:	7e0f      	ldrb	r7, [r1, #24]
 800c962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c964:	2f78      	cmp	r7, #120	; 0x78
 800c966:	4691      	mov	r9, r2
 800c968:	4680      	mov	r8, r0
 800c96a:	460c      	mov	r4, r1
 800c96c:	469a      	mov	sl, r3
 800c96e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c972:	d807      	bhi.n	800c984 <_printf_i+0x28>
 800c974:	2f62      	cmp	r7, #98	; 0x62
 800c976:	d80a      	bhi.n	800c98e <_printf_i+0x32>
 800c978:	2f00      	cmp	r7, #0
 800c97a:	f000 80d8 	beq.w	800cb2e <_printf_i+0x1d2>
 800c97e:	2f58      	cmp	r7, #88	; 0x58
 800c980:	f000 80a3 	beq.w	800caca <_printf_i+0x16e>
 800c984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c98c:	e03a      	b.n	800ca04 <_printf_i+0xa8>
 800c98e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c992:	2b15      	cmp	r3, #21
 800c994:	d8f6      	bhi.n	800c984 <_printf_i+0x28>
 800c996:	a101      	add	r1, pc, #4	; (adr r1, 800c99c <_printf_i+0x40>)
 800c998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c99c:	0800c9f5 	.word	0x0800c9f5
 800c9a0:	0800ca09 	.word	0x0800ca09
 800c9a4:	0800c985 	.word	0x0800c985
 800c9a8:	0800c985 	.word	0x0800c985
 800c9ac:	0800c985 	.word	0x0800c985
 800c9b0:	0800c985 	.word	0x0800c985
 800c9b4:	0800ca09 	.word	0x0800ca09
 800c9b8:	0800c985 	.word	0x0800c985
 800c9bc:	0800c985 	.word	0x0800c985
 800c9c0:	0800c985 	.word	0x0800c985
 800c9c4:	0800c985 	.word	0x0800c985
 800c9c8:	0800cb15 	.word	0x0800cb15
 800c9cc:	0800ca39 	.word	0x0800ca39
 800c9d0:	0800caf7 	.word	0x0800caf7
 800c9d4:	0800c985 	.word	0x0800c985
 800c9d8:	0800c985 	.word	0x0800c985
 800c9dc:	0800cb37 	.word	0x0800cb37
 800c9e0:	0800c985 	.word	0x0800c985
 800c9e4:	0800ca39 	.word	0x0800ca39
 800c9e8:	0800c985 	.word	0x0800c985
 800c9ec:	0800c985 	.word	0x0800c985
 800c9f0:	0800caff 	.word	0x0800caff
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	1d1a      	adds	r2, r3, #4
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	602a      	str	r2, [r5, #0]
 800c9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca04:	2301      	movs	r3, #1
 800ca06:	e0a3      	b.n	800cb50 <_printf_i+0x1f4>
 800ca08:	6820      	ldr	r0, [r4, #0]
 800ca0a:	6829      	ldr	r1, [r5, #0]
 800ca0c:	0606      	lsls	r6, r0, #24
 800ca0e:	f101 0304 	add.w	r3, r1, #4
 800ca12:	d50a      	bpl.n	800ca2a <_printf_i+0xce>
 800ca14:	680e      	ldr	r6, [r1, #0]
 800ca16:	602b      	str	r3, [r5, #0]
 800ca18:	2e00      	cmp	r6, #0
 800ca1a:	da03      	bge.n	800ca24 <_printf_i+0xc8>
 800ca1c:	232d      	movs	r3, #45	; 0x2d
 800ca1e:	4276      	negs	r6, r6
 800ca20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca24:	485e      	ldr	r0, [pc, #376]	; (800cba0 <_printf_i+0x244>)
 800ca26:	230a      	movs	r3, #10
 800ca28:	e019      	b.n	800ca5e <_printf_i+0x102>
 800ca2a:	680e      	ldr	r6, [r1, #0]
 800ca2c:	602b      	str	r3, [r5, #0]
 800ca2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca32:	bf18      	it	ne
 800ca34:	b236      	sxthne	r6, r6
 800ca36:	e7ef      	b.n	800ca18 <_printf_i+0xbc>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	6820      	ldr	r0, [r4, #0]
 800ca3c:	1d19      	adds	r1, r3, #4
 800ca3e:	6029      	str	r1, [r5, #0]
 800ca40:	0601      	lsls	r1, r0, #24
 800ca42:	d501      	bpl.n	800ca48 <_printf_i+0xec>
 800ca44:	681e      	ldr	r6, [r3, #0]
 800ca46:	e002      	b.n	800ca4e <_printf_i+0xf2>
 800ca48:	0646      	lsls	r6, r0, #25
 800ca4a:	d5fb      	bpl.n	800ca44 <_printf_i+0xe8>
 800ca4c:	881e      	ldrh	r6, [r3, #0]
 800ca4e:	4854      	ldr	r0, [pc, #336]	; (800cba0 <_printf_i+0x244>)
 800ca50:	2f6f      	cmp	r7, #111	; 0x6f
 800ca52:	bf0c      	ite	eq
 800ca54:	2308      	moveq	r3, #8
 800ca56:	230a      	movne	r3, #10
 800ca58:	2100      	movs	r1, #0
 800ca5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca5e:	6865      	ldr	r5, [r4, #4]
 800ca60:	60a5      	str	r5, [r4, #8]
 800ca62:	2d00      	cmp	r5, #0
 800ca64:	bfa2      	ittt	ge
 800ca66:	6821      	ldrge	r1, [r4, #0]
 800ca68:	f021 0104 	bicge.w	r1, r1, #4
 800ca6c:	6021      	strge	r1, [r4, #0]
 800ca6e:	b90e      	cbnz	r6, 800ca74 <_printf_i+0x118>
 800ca70:	2d00      	cmp	r5, #0
 800ca72:	d04d      	beq.n	800cb10 <_printf_i+0x1b4>
 800ca74:	4615      	mov	r5, r2
 800ca76:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca7a:	fb03 6711 	mls	r7, r3, r1, r6
 800ca7e:	5dc7      	ldrb	r7, [r0, r7]
 800ca80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca84:	4637      	mov	r7, r6
 800ca86:	42bb      	cmp	r3, r7
 800ca88:	460e      	mov	r6, r1
 800ca8a:	d9f4      	bls.n	800ca76 <_printf_i+0x11a>
 800ca8c:	2b08      	cmp	r3, #8
 800ca8e:	d10b      	bne.n	800caa8 <_printf_i+0x14c>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	07de      	lsls	r6, r3, #31
 800ca94:	d508      	bpl.n	800caa8 <_printf_i+0x14c>
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	6861      	ldr	r1, [r4, #4]
 800ca9a:	4299      	cmp	r1, r3
 800ca9c:	bfde      	ittt	le
 800ca9e:	2330      	movle	r3, #48	; 0x30
 800caa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800caa8:	1b52      	subs	r2, r2, r5
 800caaa:	6122      	str	r2, [r4, #16]
 800caac:	f8cd a000 	str.w	sl, [sp]
 800cab0:	464b      	mov	r3, r9
 800cab2:	aa03      	add	r2, sp, #12
 800cab4:	4621      	mov	r1, r4
 800cab6:	4640      	mov	r0, r8
 800cab8:	f7ff fee2 	bl	800c880 <_printf_common>
 800cabc:	3001      	adds	r0, #1
 800cabe:	d14c      	bne.n	800cb5a <_printf_i+0x1fe>
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	b004      	add	sp, #16
 800cac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caca:	4835      	ldr	r0, [pc, #212]	; (800cba0 <_printf_i+0x244>)
 800cacc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cad0:	6829      	ldr	r1, [r5, #0]
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cad8:	6029      	str	r1, [r5, #0]
 800cada:	061d      	lsls	r5, r3, #24
 800cadc:	d514      	bpl.n	800cb08 <_printf_i+0x1ac>
 800cade:	07df      	lsls	r7, r3, #31
 800cae0:	bf44      	itt	mi
 800cae2:	f043 0320 	orrmi.w	r3, r3, #32
 800cae6:	6023      	strmi	r3, [r4, #0]
 800cae8:	b91e      	cbnz	r6, 800caf2 <_printf_i+0x196>
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	f023 0320 	bic.w	r3, r3, #32
 800caf0:	6023      	str	r3, [r4, #0]
 800caf2:	2310      	movs	r3, #16
 800caf4:	e7b0      	b.n	800ca58 <_printf_i+0xfc>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	f043 0320 	orr.w	r3, r3, #32
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	2378      	movs	r3, #120	; 0x78
 800cb00:	4828      	ldr	r0, [pc, #160]	; (800cba4 <_printf_i+0x248>)
 800cb02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb06:	e7e3      	b.n	800cad0 <_printf_i+0x174>
 800cb08:	0659      	lsls	r1, r3, #25
 800cb0a:	bf48      	it	mi
 800cb0c:	b2b6      	uxthmi	r6, r6
 800cb0e:	e7e6      	b.n	800cade <_printf_i+0x182>
 800cb10:	4615      	mov	r5, r2
 800cb12:	e7bb      	b.n	800ca8c <_printf_i+0x130>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	6826      	ldr	r6, [r4, #0]
 800cb18:	6961      	ldr	r1, [r4, #20]
 800cb1a:	1d18      	adds	r0, r3, #4
 800cb1c:	6028      	str	r0, [r5, #0]
 800cb1e:	0635      	lsls	r5, r6, #24
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	d501      	bpl.n	800cb28 <_printf_i+0x1cc>
 800cb24:	6019      	str	r1, [r3, #0]
 800cb26:	e002      	b.n	800cb2e <_printf_i+0x1d2>
 800cb28:	0670      	lsls	r0, r6, #25
 800cb2a:	d5fb      	bpl.n	800cb24 <_printf_i+0x1c8>
 800cb2c:	8019      	strh	r1, [r3, #0]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	6123      	str	r3, [r4, #16]
 800cb32:	4615      	mov	r5, r2
 800cb34:	e7ba      	b.n	800caac <_printf_i+0x150>
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	1d1a      	adds	r2, r3, #4
 800cb3a:	602a      	str	r2, [r5, #0]
 800cb3c:	681d      	ldr	r5, [r3, #0]
 800cb3e:	6862      	ldr	r2, [r4, #4]
 800cb40:	2100      	movs	r1, #0
 800cb42:	4628      	mov	r0, r5
 800cb44:	f7f3 fb54 	bl	80001f0 <memchr>
 800cb48:	b108      	cbz	r0, 800cb4e <_printf_i+0x1f2>
 800cb4a:	1b40      	subs	r0, r0, r5
 800cb4c:	6060      	str	r0, [r4, #4]
 800cb4e:	6863      	ldr	r3, [r4, #4]
 800cb50:	6123      	str	r3, [r4, #16]
 800cb52:	2300      	movs	r3, #0
 800cb54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb58:	e7a8      	b.n	800caac <_printf_i+0x150>
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	462a      	mov	r2, r5
 800cb5e:	4649      	mov	r1, r9
 800cb60:	4640      	mov	r0, r8
 800cb62:	47d0      	blx	sl
 800cb64:	3001      	adds	r0, #1
 800cb66:	d0ab      	beq.n	800cac0 <_printf_i+0x164>
 800cb68:	6823      	ldr	r3, [r4, #0]
 800cb6a:	079b      	lsls	r3, r3, #30
 800cb6c:	d413      	bmi.n	800cb96 <_printf_i+0x23a>
 800cb6e:	68e0      	ldr	r0, [r4, #12]
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	4298      	cmp	r0, r3
 800cb74:	bfb8      	it	lt
 800cb76:	4618      	movlt	r0, r3
 800cb78:	e7a4      	b.n	800cac4 <_printf_i+0x168>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	4649      	mov	r1, r9
 800cb80:	4640      	mov	r0, r8
 800cb82:	47d0      	blx	sl
 800cb84:	3001      	adds	r0, #1
 800cb86:	d09b      	beq.n	800cac0 <_printf_i+0x164>
 800cb88:	3501      	adds	r5, #1
 800cb8a:	68e3      	ldr	r3, [r4, #12]
 800cb8c:	9903      	ldr	r1, [sp, #12]
 800cb8e:	1a5b      	subs	r3, r3, r1
 800cb90:	42ab      	cmp	r3, r5
 800cb92:	dcf2      	bgt.n	800cb7a <_printf_i+0x21e>
 800cb94:	e7eb      	b.n	800cb6e <_printf_i+0x212>
 800cb96:	2500      	movs	r5, #0
 800cb98:	f104 0619 	add.w	r6, r4, #25
 800cb9c:	e7f5      	b.n	800cb8a <_printf_i+0x22e>
 800cb9e:	bf00      	nop
 800cba0:	080146d6 	.word	0x080146d6
 800cba4:	080146e7 	.word	0x080146e7

0800cba8 <_scanf_float>:
 800cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbac:	b087      	sub	sp, #28
 800cbae:	4617      	mov	r7, r2
 800cbb0:	9303      	str	r3, [sp, #12]
 800cbb2:	688b      	ldr	r3, [r1, #8]
 800cbb4:	1e5a      	subs	r2, r3, #1
 800cbb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cbba:	bf83      	ittte	hi
 800cbbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cbc0:	195b      	addhi	r3, r3, r5
 800cbc2:	9302      	strhi	r3, [sp, #8]
 800cbc4:	2300      	movls	r3, #0
 800cbc6:	bf86      	itte	hi
 800cbc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cbcc:	608b      	strhi	r3, [r1, #8]
 800cbce:	9302      	strls	r3, [sp, #8]
 800cbd0:	680b      	ldr	r3, [r1, #0]
 800cbd2:	468b      	mov	fp, r1
 800cbd4:	2500      	movs	r5, #0
 800cbd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cbda:	f84b 3b1c 	str.w	r3, [fp], #28
 800cbde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cbe2:	4680      	mov	r8, r0
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	465e      	mov	r6, fp
 800cbe8:	46aa      	mov	sl, r5
 800cbea:	46a9      	mov	r9, r5
 800cbec:	9501      	str	r5, [sp, #4]
 800cbee:	68a2      	ldr	r2, [r4, #8]
 800cbf0:	b152      	cbz	r2, 800cc08 <_scanf_float+0x60>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b4e      	cmp	r3, #78	; 0x4e
 800cbf8:	d864      	bhi.n	800ccc4 <_scanf_float+0x11c>
 800cbfa:	2b40      	cmp	r3, #64	; 0x40
 800cbfc:	d83c      	bhi.n	800cc78 <_scanf_float+0xd0>
 800cbfe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cc02:	b2c8      	uxtb	r0, r1
 800cc04:	280e      	cmp	r0, #14
 800cc06:	d93a      	bls.n	800cc7e <_scanf_float+0xd6>
 800cc08:	f1b9 0f00 	cmp.w	r9, #0
 800cc0c:	d003      	beq.n	800cc16 <_scanf_float+0x6e>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc1a:	f1ba 0f01 	cmp.w	sl, #1
 800cc1e:	f200 8113 	bhi.w	800ce48 <_scanf_float+0x2a0>
 800cc22:	455e      	cmp	r6, fp
 800cc24:	f200 8105 	bhi.w	800ce32 <_scanf_float+0x28a>
 800cc28:	2501      	movs	r5, #1
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	b007      	add	sp, #28
 800cc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cc36:	2a0d      	cmp	r2, #13
 800cc38:	d8e6      	bhi.n	800cc08 <_scanf_float+0x60>
 800cc3a:	a101      	add	r1, pc, #4	; (adr r1, 800cc40 <_scanf_float+0x98>)
 800cc3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc40:	0800cd7f 	.word	0x0800cd7f
 800cc44:	0800cc09 	.word	0x0800cc09
 800cc48:	0800cc09 	.word	0x0800cc09
 800cc4c:	0800cc09 	.word	0x0800cc09
 800cc50:	0800cddf 	.word	0x0800cddf
 800cc54:	0800cdb7 	.word	0x0800cdb7
 800cc58:	0800cc09 	.word	0x0800cc09
 800cc5c:	0800cc09 	.word	0x0800cc09
 800cc60:	0800cd8d 	.word	0x0800cd8d
 800cc64:	0800cc09 	.word	0x0800cc09
 800cc68:	0800cc09 	.word	0x0800cc09
 800cc6c:	0800cc09 	.word	0x0800cc09
 800cc70:	0800cc09 	.word	0x0800cc09
 800cc74:	0800cd45 	.word	0x0800cd45
 800cc78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cc7c:	e7db      	b.n	800cc36 <_scanf_float+0x8e>
 800cc7e:	290e      	cmp	r1, #14
 800cc80:	d8c2      	bhi.n	800cc08 <_scanf_float+0x60>
 800cc82:	a001      	add	r0, pc, #4	; (adr r0, 800cc88 <_scanf_float+0xe0>)
 800cc84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc88:	0800cd37 	.word	0x0800cd37
 800cc8c:	0800cc09 	.word	0x0800cc09
 800cc90:	0800cd37 	.word	0x0800cd37
 800cc94:	0800cdcb 	.word	0x0800cdcb
 800cc98:	0800cc09 	.word	0x0800cc09
 800cc9c:	0800cce5 	.word	0x0800cce5
 800cca0:	0800cd21 	.word	0x0800cd21
 800cca4:	0800cd21 	.word	0x0800cd21
 800cca8:	0800cd21 	.word	0x0800cd21
 800ccac:	0800cd21 	.word	0x0800cd21
 800ccb0:	0800cd21 	.word	0x0800cd21
 800ccb4:	0800cd21 	.word	0x0800cd21
 800ccb8:	0800cd21 	.word	0x0800cd21
 800ccbc:	0800cd21 	.word	0x0800cd21
 800ccc0:	0800cd21 	.word	0x0800cd21
 800ccc4:	2b6e      	cmp	r3, #110	; 0x6e
 800ccc6:	d809      	bhi.n	800ccdc <_scanf_float+0x134>
 800ccc8:	2b60      	cmp	r3, #96	; 0x60
 800ccca:	d8b2      	bhi.n	800cc32 <_scanf_float+0x8a>
 800cccc:	2b54      	cmp	r3, #84	; 0x54
 800ccce:	d077      	beq.n	800cdc0 <_scanf_float+0x218>
 800ccd0:	2b59      	cmp	r3, #89	; 0x59
 800ccd2:	d199      	bne.n	800cc08 <_scanf_float+0x60>
 800ccd4:	2d07      	cmp	r5, #7
 800ccd6:	d197      	bne.n	800cc08 <_scanf_float+0x60>
 800ccd8:	2508      	movs	r5, #8
 800ccda:	e029      	b.n	800cd30 <_scanf_float+0x188>
 800ccdc:	2b74      	cmp	r3, #116	; 0x74
 800ccde:	d06f      	beq.n	800cdc0 <_scanf_float+0x218>
 800cce0:	2b79      	cmp	r3, #121	; 0x79
 800cce2:	e7f6      	b.n	800ccd2 <_scanf_float+0x12a>
 800cce4:	6821      	ldr	r1, [r4, #0]
 800cce6:	05c8      	lsls	r0, r1, #23
 800cce8:	d51a      	bpl.n	800cd20 <_scanf_float+0x178>
 800ccea:	9b02      	ldr	r3, [sp, #8]
 800ccec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ccf0:	6021      	str	r1, [r4, #0]
 800ccf2:	f109 0901 	add.w	r9, r9, #1
 800ccf6:	b11b      	cbz	r3, 800cd00 <_scanf_float+0x158>
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	3201      	adds	r2, #1
 800ccfc:	9302      	str	r3, [sp, #8]
 800ccfe:	60a2      	str	r2, [r4, #8]
 800cd00:	68a3      	ldr	r3, [r4, #8]
 800cd02:	3b01      	subs	r3, #1
 800cd04:	60a3      	str	r3, [r4, #8]
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	607b      	str	r3, [r7, #4]
 800cd14:	f340 8084 	ble.w	800ce20 <_scanf_float+0x278>
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	603b      	str	r3, [r7, #0]
 800cd1e:	e766      	b.n	800cbee <_scanf_float+0x46>
 800cd20:	eb1a 0f05 	cmn.w	sl, r5
 800cd24:	f47f af70 	bne.w	800cc08 <_scanf_float+0x60>
 800cd28:	6822      	ldr	r2, [r4, #0]
 800cd2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cd2e:	6022      	str	r2, [r4, #0]
 800cd30:	f806 3b01 	strb.w	r3, [r6], #1
 800cd34:	e7e4      	b.n	800cd00 <_scanf_float+0x158>
 800cd36:	6822      	ldr	r2, [r4, #0]
 800cd38:	0610      	lsls	r0, r2, #24
 800cd3a:	f57f af65 	bpl.w	800cc08 <_scanf_float+0x60>
 800cd3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd42:	e7f4      	b.n	800cd2e <_scanf_float+0x186>
 800cd44:	f1ba 0f00 	cmp.w	sl, #0
 800cd48:	d10e      	bne.n	800cd68 <_scanf_float+0x1c0>
 800cd4a:	f1b9 0f00 	cmp.w	r9, #0
 800cd4e:	d10e      	bne.n	800cd6e <_scanf_float+0x1c6>
 800cd50:	6822      	ldr	r2, [r4, #0]
 800cd52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd5a:	d108      	bne.n	800cd6e <_scanf_float+0x1c6>
 800cd5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd60:	6022      	str	r2, [r4, #0]
 800cd62:	f04f 0a01 	mov.w	sl, #1
 800cd66:	e7e3      	b.n	800cd30 <_scanf_float+0x188>
 800cd68:	f1ba 0f02 	cmp.w	sl, #2
 800cd6c:	d055      	beq.n	800ce1a <_scanf_float+0x272>
 800cd6e:	2d01      	cmp	r5, #1
 800cd70:	d002      	beq.n	800cd78 <_scanf_float+0x1d0>
 800cd72:	2d04      	cmp	r5, #4
 800cd74:	f47f af48 	bne.w	800cc08 <_scanf_float+0x60>
 800cd78:	3501      	adds	r5, #1
 800cd7a:	b2ed      	uxtb	r5, r5
 800cd7c:	e7d8      	b.n	800cd30 <_scanf_float+0x188>
 800cd7e:	f1ba 0f01 	cmp.w	sl, #1
 800cd82:	f47f af41 	bne.w	800cc08 <_scanf_float+0x60>
 800cd86:	f04f 0a02 	mov.w	sl, #2
 800cd8a:	e7d1      	b.n	800cd30 <_scanf_float+0x188>
 800cd8c:	b97d      	cbnz	r5, 800cdae <_scanf_float+0x206>
 800cd8e:	f1b9 0f00 	cmp.w	r9, #0
 800cd92:	f47f af3c 	bne.w	800cc0e <_scanf_float+0x66>
 800cd96:	6822      	ldr	r2, [r4, #0]
 800cd98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cda0:	f47f af39 	bne.w	800cc16 <_scanf_float+0x6e>
 800cda4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cda8:	6022      	str	r2, [r4, #0]
 800cdaa:	2501      	movs	r5, #1
 800cdac:	e7c0      	b.n	800cd30 <_scanf_float+0x188>
 800cdae:	2d03      	cmp	r5, #3
 800cdb0:	d0e2      	beq.n	800cd78 <_scanf_float+0x1d0>
 800cdb2:	2d05      	cmp	r5, #5
 800cdb4:	e7de      	b.n	800cd74 <_scanf_float+0x1cc>
 800cdb6:	2d02      	cmp	r5, #2
 800cdb8:	f47f af26 	bne.w	800cc08 <_scanf_float+0x60>
 800cdbc:	2503      	movs	r5, #3
 800cdbe:	e7b7      	b.n	800cd30 <_scanf_float+0x188>
 800cdc0:	2d06      	cmp	r5, #6
 800cdc2:	f47f af21 	bne.w	800cc08 <_scanf_float+0x60>
 800cdc6:	2507      	movs	r5, #7
 800cdc8:	e7b2      	b.n	800cd30 <_scanf_float+0x188>
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	0591      	lsls	r1, r2, #22
 800cdce:	f57f af1b 	bpl.w	800cc08 <_scanf_float+0x60>
 800cdd2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cdd6:	6022      	str	r2, [r4, #0]
 800cdd8:	f8cd 9004 	str.w	r9, [sp, #4]
 800cddc:	e7a8      	b.n	800cd30 <_scanf_float+0x188>
 800cdde:	6822      	ldr	r2, [r4, #0]
 800cde0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cde4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cde8:	d006      	beq.n	800cdf8 <_scanf_float+0x250>
 800cdea:	0550      	lsls	r0, r2, #21
 800cdec:	f57f af0c 	bpl.w	800cc08 <_scanf_float+0x60>
 800cdf0:	f1b9 0f00 	cmp.w	r9, #0
 800cdf4:	f43f af0f 	beq.w	800cc16 <_scanf_float+0x6e>
 800cdf8:	0591      	lsls	r1, r2, #22
 800cdfa:	bf58      	it	pl
 800cdfc:	9901      	ldrpl	r1, [sp, #4]
 800cdfe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce02:	bf58      	it	pl
 800ce04:	eba9 0101 	subpl.w	r1, r9, r1
 800ce08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ce0c:	bf58      	it	pl
 800ce0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ce12:	6022      	str	r2, [r4, #0]
 800ce14:	f04f 0900 	mov.w	r9, #0
 800ce18:	e78a      	b.n	800cd30 <_scanf_float+0x188>
 800ce1a:	f04f 0a03 	mov.w	sl, #3
 800ce1e:	e787      	b.n	800cd30 <_scanf_float+0x188>
 800ce20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce24:	4639      	mov	r1, r7
 800ce26:	4640      	mov	r0, r8
 800ce28:	4798      	blx	r3
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f43f aedf 	beq.w	800cbee <_scanf_float+0x46>
 800ce30:	e6ea      	b.n	800cc08 <_scanf_float+0x60>
 800ce32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce3a:	463a      	mov	r2, r7
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	4798      	blx	r3
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	6123      	str	r3, [r4, #16]
 800ce46:	e6ec      	b.n	800cc22 <_scanf_float+0x7a>
 800ce48:	1e6b      	subs	r3, r5, #1
 800ce4a:	2b06      	cmp	r3, #6
 800ce4c:	d825      	bhi.n	800ce9a <_scanf_float+0x2f2>
 800ce4e:	2d02      	cmp	r5, #2
 800ce50:	d836      	bhi.n	800cec0 <_scanf_float+0x318>
 800ce52:	455e      	cmp	r6, fp
 800ce54:	f67f aee8 	bls.w	800cc28 <_scanf_float+0x80>
 800ce58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce60:	463a      	mov	r2, r7
 800ce62:	4640      	mov	r0, r8
 800ce64:	4798      	blx	r3
 800ce66:	6923      	ldr	r3, [r4, #16]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	6123      	str	r3, [r4, #16]
 800ce6c:	e7f1      	b.n	800ce52 <_scanf_float+0x2aa>
 800ce6e:	9802      	ldr	r0, [sp, #8]
 800ce70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ce78:	9002      	str	r0, [sp, #8]
 800ce7a:	463a      	mov	r2, r7
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	4798      	blx	r3
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	3b01      	subs	r3, #1
 800ce84:	6123      	str	r3, [r4, #16]
 800ce86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce8a:	fa5f fa8a 	uxtb.w	sl, sl
 800ce8e:	f1ba 0f02 	cmp.w	sl, #2
 800ce92:	d1ec      	bne.n	800ce6e <_scanf_float+0x2c6>
 800ce94:	3d03      	subs	r5, #3
 800ce96:	b2ed      	uxtb	r5, r5
 800ce98:	1b76      	subs	r6, r6, r5
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	05da      	lsls	r2, r3, #23
 800ce9e:	d52f      	bpl.n	800cf00 <_scanf_float+0x358>
 800cea0:	055b      	lsls	r3, r3, #21
 800cea2:	d510      	bpl.n	800cec6 <_scanf_float+0x31e>
 800cea4:	455e      	cmp	r6, fp
 800cea6:	f67f aebf 	bls.w	800cc28 <_scanf_float+0x80>
 800ceaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ceae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ceb2:	463a      	mov	r2, r7
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4798      	blx	r3
 800ceb8:	6923      	ldr	r3, [r4, #16]
 800ceba:	3b01      	subs	r3, #1
 800cebc:	6123      	str	r3, [r4, #16]
 800cebe:	e7f1      	b.n	800cea4 <_scanf_float+0x2fc>
 800cec0:	46aa      	mov	sl, r5
 800cec2:	9602      	str	r6, [sp, #8]
 800cec4:	e7df      	b.n	800ce86 <_scanf_float+0x2de>
 800cec6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ceca:	6923      	ldr	r3, [r4, #16]
 800cecc:	2965      	cmp	r1, #101	; 0x65
 800cece:	f103 33ff 	add.w	r3, r3, #4294967295
 800ced2:	f106 35ff 	add.w	r5, r6, #4294967295
 800ced6:	6123      	str	r3, [r4, #16]
 800ced8:	d00c      	beq.n	800cef4 <_scanf_float+0x34c>
 800ceda:	2945      	cmp	r1, #69	; 0x45
 800cedc:	d00a      	beq.n	800cef4 <_scanf_float+0x34c>
 800cede:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cee2:	463a      	mov	r2, r7
 800cee4:	4640      	mov	r0, r8
 800cee6:	4798      	blx	r3
 800cee8:	6923      	ldr	r3, [r4, #16]
 800ceea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	1eb5      	subs	r5, r6, #2
 800cef2:	6123      	str	r3, [r4, #16]
 800cef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cef8:	463a      	mov	r2, r7
 800cefa:	4640      	mov	r0, r8
 800cefc:	4798      	blx	r3
 800cefe:	462e      	mov	r6, r5
 800cf00:	6825      	ldr	r5, [r4, #0]
 800cf02:	f015 0510 	ands.w	r5, r5, #16
 800cf06:	d159      	bne.n	800cfbc <_scanf_float+0x414>
 800cf08:	7035      	strb	r5, [r6, #0]
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cf10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf14:	d11b      	bne.n	800cf4e <_scanf_float+0x3a6>
 800cf16:	9b01      	ldr	r3, [sp, #4]
 800cf18:	454b      	cmp	r3, r9
 800cf1a:	eba3 0209 	sub.w	r2, r3, r9
 800cf1e:	d123      	bne.n	800cf68 <_scanf_float+0x3c0>
 800cf20:	2200      	movs	r2, #0
 800cf22:	4659      	mov	r1, fp
 800cf24:	4640      	mov	r0, r8
 800cf26:	f000 fe99 	bl	800dc5c <_strtod_r>
 800cf2a:	6822      	ldr	r2, [r4, #0]
 800cf2c:	9b03      	ldr	r3, [sp, #12]
 800cf2e:	f012 0f02 	tst.w	r2, #2
 800cf32:	ec57 6b10 	vmov	r6, r7, d0
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	d021      	beq.n	800cf7e <_scanf_float+0x3d6>
 800cf3a:	9903      	ldr	r1, [sp, #12]
 800cf3c:	1d1a      	adds	r2, r3, #4
 800cf3e:	600a      	str	r2, [r1, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	e9c3 6700 	strd	r6, r7, [r3]
 800cf46:	68e3      	ldr	r3, [r4, #12]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	60e3      	str	r3, [r4, #12]
 800cf4c:	e66d      	b.n	800cc2a <_scanf_float+0x82>
 800cf4e:	9b04      	ldr	r3, [sp, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0e5      	beq.n	800cf20 <_scanf_float+0x378>
 800cf54:	9905      	ldr	r1, [sp, #20]
 800cf56:	230a      	movs	r3, #10
 800cf58:	462a      	mov	r2, r5
 800cf5a:	3101      	adds	r1, #1
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	f000 ff05 	bl	800dd6c <_strtol_r>
 800cf62:	9b04      	ldr	r3, [sp, #16]
 800cf64:	9e05      	ldr	r6, [sp, #20]
 800cf66:	1ac2      	subs	r2, r0, r3
 800cf68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cf6c:	429e      	cmp	r6, r3
 800cf6e:	bf28      	it	cs
 800cf70:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cf74:	4912      	ldr	r1, [pc, #72]	; (800cfc0 <_scanf_float+0x418>)
 800cf76:	4630      	mov	r0, r6
 800cf78:	f000 f82c 	bl	800cfd4 <siprintf>
 800cf7c:	e7d0      	b.n	800cf20 <_scanf_float+0x378>
 800cf7e:	9903      	ldr	r1, [sp, #12]
 800cf80:	f012 0f04 	tst.w	r2, #4
 800cf84:	f103 0204 	add.w	r2, r3, #4
 800cf88:	600a      	str	r2, [r1, #0]
 800cf8a:	d1d9      	bne.n	800cf40 <_scanf_float+0x398>
 800cf8c:	f8d3 8000 	ldr.w	r8, [r3]
 800cf90:	ee10 2a10 	vmov	r2, s0
 800cf94:	ee10 0a10 	vmov	r0, s0
 800cf98:	463b      	mov	r3, r7
 800cf9a:	4639      	mov	r1, r7
 800cf9c:	f7f3 fdce 	bl	8000b3c <__aeabi_dcmpun>
 800cfa0:	b128      	cbz	r0, 800cfae <_scanf_float+0x406>
 800cfa2:	4808      	ldr	r0, [pc, #32]	; (800cfc4 <_scanf_float+0x41c>)
 800cfa4:	f000 f810 	bl	800cfc8 <nanf>
 800cfa8:	ed88 0a00 	vstr	s0, [r8]
 800cfac:	e7cb      	b.n	800cf46 <_scanf_float+0x39e>
 800cfae:	4630      	mov	r0, r6
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	f7f3 fe21 	bl	8000bf8 <__aeabi_d2f>
 800cfb6:	f8c8 0000 	str.w	r0, [r8]
 800cfba:	e7c4      	b.n	800cf46 <_scanf_float+0x39e>
 800cfbc:	2500      	movs	r5, #0
 800cfbe:	e634      	b.n	800cc2a <_scanf_float+0x82>
 800cfc0:	080146f8 	.word	0x080146f8
 800cfc4:	08014b00 	.word	0x08014b00

0800cfc8 <nanf>:
 800cfc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cfd0 <nanf+0x8>
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	7fc00000 	.word	0x7fc00000

0800cfd4 <siprintf>:
 800cfd4:	b40e      	push	{r1, r2, r3}
 800cfd6:	b500      	push	{lr}
 800cfd8:	b09c      	sub	sp, #112	; 0x70
 800cfda:	ab1d      	add	r3, sp, #116	; 0x74
 800cfdc:	9002      	str	r0, [sp, #8]
 800cfde:	9006      	str	r0, [sp, #24]
 800cfe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfe4:	4809      	ldr	r0, [pc, #36]	; (800d00c <siprintf+0x38>)
 800cfe6:	9107      	str	r1, [sp, #28]
 800cfe8:	9104      	str	r1, [sp, #16]
 800cfea:	4909      	ldr	r1, [pc, #36]	; (800d010 <siprintf+0x3c>)
 800cfec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff0:	9105      	str	r1, [sp, #20]
 800cff2:	6800      	ldr	r0, [r0, #0]
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	a902      	add	r1, sp, #8
 800cff8:	f002 fee4 	bl	800fdc4 <_svfiprintf_r>
 800cffc:	9b02      	ldr	r3, [sp, #8]
 800cffe:	2200      	movs	r2, #0
 800d000:	701a      	strb	r2, [r3, #0]
 800d002:	b01c      	add	sp, #112	; 0x70
 800d004:	f85d eb04 	ldr.w	lr, [sp], #4
 800d008:	b003      	add	sp, #12
 800d00a:	4770      	bx	lr
 800d00c:	2000010c 	.word	0x2000010c
 800d010:	ffff0208 	.word	0xffff0208

0800d014 <sulp>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	4604      	mov	r4, r0
 800d018:	460d      	mov	r5, r1
 800d01a:	ec45 4b10 	vmov	d0, r4, r5
 800d01e:	4616      	mov	r6, r2
 800d020:	f002 fc2e 	bl	800f880 <__ulp>
 800d024:	ec51 0b10 	vmov	r0, r1, d0
 800d028:	b17e      	cbz	r6, 800d04a <sulp+0x36>
 800d02a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d02e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d032:	2b00      	cmp	r3, #0
 800d034:	dd09      	ble.n	800d04a <sulp+0x36>
 800d036:	051b      	lsls	r3, r3, #20
 800d038:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d03c:	2400      	movs	r4, #0
 800d03e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d042:	4622      	mov	r2, r4
 800d044:	462b      	mov	r3, r5
 800d046:	f7f3 fadf 	bl	8000608 <__aeabi_dmul>
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	0000      	movs	r0, r0
	...

0800d050 <_strtod_l>:
 800d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	ed2d 8b02 	vpush	{d8}
 800d058:	b09d      	sub	sp, #116	; 0x74
 800d05a:	461f      	mov	r7, r3
 800d05c:	2300      	movs	r3, #0
 800d05e:	9318      	str	r3, [sp, #96]	; 0x60
 800d060:	4ba2      	ldr	r3, [pc, #648]	; (800d2ec <_strtod_l+0x29c>)
 800d062:	9213      	str	r2, [sp, #76]	; 0x4c
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	9305      	str	r3, [sp, #20]
 800d068:	4604      	mov	r4, r0
 800d06a:	4618      	mov	r0, r3
 800d06c:	4688      	mov	r8, r1
 800d06e:	f7f3 f8b7 	bl	80001e0 <strlen>
 800d072:	f04f 0a00 	mov.w	sl, #0
 800d076:	4605      	mov	r5, r0
 800d078:	f04f 0b00 	mov.w	fp, #0
 800d07c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d082:	781a      	ldrb	r2, [r3, #0]
 800d084:	2a2b      	cmp	r2, #43	; 0x2b
 800d086:	d04e      	beq.n	800d126 <_strtod_l+0xd6>
 800d088:	d83b      	bhi.n	800d102 <_strtod_l+0xb2>
 800d08a:	2a0d      	cmp	r2, #13
 800d08c:	d834      	bhi.n	800d0f8 <_strtod_l+0xa8>
 800d08e:	2a08      	cmp	r2, #8
 800d090:	d834      	bhi.n	800d0fc <_strtod_l+0xac>
 800d092:	2a00      	cmp	r2, #0
 800d094:	d03e      	beq.n	800d114 <_strtod_l+0xc4>
 800d096:	2300      	movs	r3, #0
 800d098:	930a      	str	r3, [sp, #40]	; 0x28
 800d09a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d09c:	7833      	ldrb	r3, [r6, #0]
 800d09e:	2b30      	cmp	r3, #48	; 0x30
 800d0a0:	f040 80b0 	bne.w	800d204 <_strtod_l+0x1b4>
 800d0a4:	7873      	ldrb	r3, [r6, #1]
 800d0a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0aa:	2b58      	cmp	r3, #88	; 0x58
 800d0ac:	d168      	bne.n	800d180 <_strtod_l+0x130>
 800d0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	ab18      	add	r3, sp, #96	; 0x60
 800d0b4:	9702      	str	r7, [sp, #8]
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	4a8d      	ldr	r2, [pc, #564]	; (800d2f0 <_strtod_l+0x2a0>)
 800d0ba:	ab19      	add	r3, sp, #100	; 0x64
 800d0bc:	a917      	add	r1, sp, #92	; 0x5c
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f001 fd38 	bl	800eb34 <__gethex>
 800d0c4:	f010 0707 	ands.w	r7, r0, #7
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	d005      	beq.n	800d0d8 <_strtod_l+0x88>
 800d0cc:	2f06      	cmp	r7, #6
 800d0ce:	d12c      	bne.n	800d12a <_strtod_l+0xda>
 800d0d0:	3601      	adds	r6, #1
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d0d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f040 8590 	bne.w	800dc00 <_strtod_l+0xbb0>
 800d0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e2:	b1eb      	cbz	r3, 800d120 <_strtod_l+0xd0>
 800d0e4:	4652      	mov	r2, sl
 800d0e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d0ea:	ec43 2b10 	vmov	d0, r2, r3
 800d0ee:	b01d      	add	sp, #116	; 0x74
 800d0f0:	ecbd 8b02 	vpop	{d8}
 800d0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f8:	2a20      	cmp	r2, #32
 800d0fa:	d1cc      	bne.n	800d096 <_strtod_l+0x46>
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800d100:	e7be      	b.n	800d080 <_strtod_l+0x30>
 800d102:	2a2d      	cmp	r2, #45	; 0x2d
 800d104:	d1c7      	bne.n	800d096 <_strtod_l+0x46>
 800d106:	2201      	movs	r2, #1
 800d108:	920a      	str	r2, [sp, #40]	; 0x28
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d10e:	785b      	ldrb	r3, [r3, #1]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1c2      	bne.n	800d09a <_strtod_l+0x4a>
 800d114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d116:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f040 856e 	bne.w	800dbfc <_strtod_l+0xbac>
 800d120:	4652      	mov	r2, sl
 800d122:	465b      	mov	r3, fp
 800d124:	e7e1      	b.n	800d0ea <_strtod_l+0x9a>
 800d126:	2200      	movs	r2, #0
 800d128:	e7ee      	b.n	800d108 <_strtod_l+0xb8>
 800d12a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d12c:	b13a      	cbz	r2, 800d13e <_strtod_l+0xee>
 800d12e:	2135      	movs	r1, #53	; 0x35
 800d130:	a81a      	add	r0, sp, #104	; 0x68
 800d132:	f002 fcb0 	bl	800fa96 <__copybits>
 800d136:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d138:	4620      	mov	r0, r4
 800d13a:	f002 f86f 	bl	800f21c <_Bfree>
 800d13e:	3f01      	subs	r7, #1
 800d140:	2f04      	cmp	r7, #4
 800d142:	d806      	bhi.n	800d152 <_strtod_l+0x102>
 800d144:	e8df f007 	tbb	[pc, r7]
 800d148:	1714030a 	.word	0x1714030a
 800d14c:	0a          	.byte	0x0a
 800d14d:	00          	.byte	0x00
 800d14e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d152:	0728      	lsls	r0, r5, #28
 800d154:	d5c0      	bpl.n	800d0d8 <_strtod_l+0x88>
 800d156:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d15a:	e7bd      	b.n	800d0d8 <_strtod_l+0x88>
 800d15c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d160:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d166:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d16a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d16e:	e7f0      	b.n	800d152 <_strtod_l+0x102>
 800d170:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d2f4 <_strtod_l+0x2a4>
 800d174:	e7ed      	b.n	800d152 <_strtod_l+0x102>
 800d176:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d17a:	f04f 3aff 	mov.w	sl, #4294967295
 800d17e:	e7e8      	b.n	800d152 <_strtod_l+0x102>
 800d180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	9217      	str	r2, [sp, #92]	; 0x5c
 800d186:	785b      	ldrb	r3, [r3, #1]
 800d188:	2b30      	cmp	r3, #48	; 0x30
 800d18a:	d0f9      	beq.n	800d180 <_strtod_l+0x130>
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d0a3      	beq.n	800d0d8 <_strtod_l+0x88>
 800d190:	2301      	movs	r3, #1
 800d192:	f04f 0900 	mov.w	r9, #0
 800d196:	9304      	str	r3, [sp, #16]
 800d198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d19a:	9308      	str	r3, [sp, #32]
 800d19c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d1a0:	464f      	mov	r7, r9
 800d1a2:	220a      	movs	r2, #10
 800d1a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d1a6:	7806      	ldrb	r6, [r0, #0]
 800d1a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d1ac:	b2d9      	uxtb	r1, r3
 800d1ae:	2909      	cmp	r1, #9
 800d1b0:	d92a      	bls.n	800d208 <_strtod_l+0x1b8>
 800d1b2:	9905      	ldr	r1, [sp, #20]
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	f002 ff15 	bl	800ffe4 <strncmp>
 800d1ba:	b398      	cbz	r0, 800d224 <_strtod_l+0x1d4>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	4632      	mov	r2, r6
 800d1c0:	463d      	mov	r5, r7
 800d1c2:	9005      	str	r0, [sp, #20]
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2a65      	cmp	r2, #101	; 0x65
 800d1c8:	d001      	beq.n	800d1ce <_strtod_l+0x17e>
 800d1ca:	2a45      	cmp	r2, #69	; 0x45
 800d1cc:	d118      	bne.n	800d200 <_strtod_l+0x1b0>
 800d1ce:	b91d      	cbnz	r5, 800d1d8 <_strtod_l+0x188>
 800d1d0:	9a04      	ldr	r2, [sp, #16]
 800d1d2:	4302      	orrs	r2, r0
 800d1d4:	d09e      	beq.n	800d114 <_strtod_l+0xc4>
 800d1d6:	2500      	movs	r5, #0
 800d1d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d1dc:	f108 0201 	add.w	r2, r8, #1
 800d1e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d1e6:	2a2b      	cmp	r2, #43	; 0x2b
 800d1e8:	d075      	beq.n	800d2d6 <_strtod_l+0x286>
 800d1ea:	2a2d      	cmp	r2, #45	; 0x2d
 800d1ec:	d07b      	beq.n	800d2e6 <_strtod_l+0x296>
 800d1ee:	f04f 0c00 	mov.w	ip, #0
 800d1f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d1f6:	2909      	cmp	r1, #9
 800d1f8:	f240 8082 	bls.w	800d300 <_strtod_l+0x2b0>
 800d1fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d200:	2600      	movs	r6, #0
 800d202:	e09d      	b.n	800d340 <_strtod_l+0x2f0>
 800d204:	2300      	movs	r3, #0
 800d206:	e7c4      	b.n	800d192 <_strtod_l+0x142>
 800d208:	2f08      	cmp	r7, #8
 800d20a:	bfd8      	it	le
 800d20c:	9907      	ldrle	r1, [sp, #28]
 800d20e:	f100 0001 	add.w	r0, r0, #1
 800d212:	bfda      	itte	le
 800d214:	fb02 3301 	mlale	r3, r2, r1, r3
 800d218:	9307      	strle	r3, [sp, #28]
 800d21a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d21e:	3701      	adds	r7, #1
 800d220:	9017      	str	r0, [sp, #92]	; 0x5c
 800d222:	e7bf      	b.n	800d1a4 <_strtod_l+0x154>
 800d224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d226:	195a      	adds	r2, r3, r5
 800d228:	9217      	str	r2, [sp, #92]	; 0x5c
 800d22a:	5d5a      	ldrb	r2, [r3, r5]
 800d22c:	2f00      	cmp	r7, #0
 800d22e:	d037      	beq.n	800d2a0 <_strtod_l+0x250>
 800d230:	9005      	str	r0, [sp, #20]
 800d232:	463d      	mov	r5, r7
 800d234:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d238:	2b09      	cmp	r3, #9
 800d23a:	d912      	bls.n	800d262 <_strtod_l+0x212>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e7c2      	b.n	800d1c6 <_strtod_l+0x176>
 800d240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	9217      	str	r2, [sp, #92]	; 0x5c
 800d246:	785a      	ldrb	r2, [r3, #1]
 800d248:	3001      	adds	r0, #1
 800d24a:	2a30      	cmp	r2, #48	; 0x30
 800d24c:	d0f8      	beq.n	800d240 <_strtod_l+0x1f0>
 800d24e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d252:	2b08      	cmp	r3, #8
 800d254:	f200 84d9 	bhi.w	800dc0a <_strtod_l+0xbba>
 800d258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d25a:	9005      	str	r0, [sp, #20]
 800d25c:	2000      	movs	r0, #0
 800d25e:	9308      	str	r3, [sp, #32]
 800d260:	4605      	mov	r5, r0
 800d262:	3a30      	subs	r2, #48	; 0x30
 800d264:	f100 0301 	add.w	r3, r0, #1
 800d268:	d014      	beq.n	800d294 <_strtod_l+0x244>
 800d26a:	9905      	ldr	r1, [sp, #20]
 800d26c:	4419      	add	r1, r3
 800d26e:	9105      	str	r1, [sp, #20]
 800d270:	462b      	mov	r3, r5
 800d272:	eb00 0e05 	add.w	lr, r0, r5
 800d276:	210a      	movs	r1, #10
 800d278:	4573      	cmp	r3, lr
 800d27a:	d113      	bne.n	800d2a4 <_strtod_l+0x254>
 800d27c:	182b      	adds	r3, r5, r0
 800d27e:	2b08      	cmp	r3, #8
 800d280:	f105 0501 	add.w	r5, r5, #1
 800d284:	4405      	add	r5, r0
 800d286:	dc1c      	bgt.n	800d2c2 <_strtod_l+0x272>
 800d288:	9907      	ldr	r1, [sp, #28]
 800d28a:	230a      	movs	r3, #10
 800d28c:	fb03 2301 	mla	r3, r3, r1, r2
 800d290:	9307      	str	r3, [sp, #28]
 800d292:	2300      	movs	r3, #0
 800d294:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d296:	1c51      	adds	r1, r2, #1
 800d298:	9117      	str	r1, [sp, #92]	; 0x5c
 800d29a:	7852      	ldrb	r2, [r2, #1]
 800d29c:	4618      	mov	r0, r3
 800d29e:	e7c9      	b.n	800d234 <_strtod_l+0x1e4>
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	e7d2      	b.n	800d24a <_strtod_l+0x1fa>
 800d2a4:	2b08      	cmp	r3, #8
 800d2a6:	dc04      	bgt.n	800d2b2 <_strtod_l+0x262>
 800d2a8:	9e07      	ldr	r6, [sp, #28]
 800d2aa:	434e      	muls	r6, r1
 800d2ac:	9607      	str	r6, [sp, #28]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	e7e2      	b.n	800d278 <_strtod_l+0x228>
 800d2b2:	f103 0c01 	add.w	ip, r3, #1
 800d2b6:	f1bc 0f10 	cmp.w	ip, #16
 800d2ba:	bfd8      	it	le
 800d2bc:	fb01 f909 	mulle.w	r9, r1, r9
 800d2c0:	e7f5      	b.n	800d2ae <_strtod_l+0x25e>
 800d2c2:	2d10      	cmp	r5, #16
 800d2c4:	bfdc      	itt	le
 800d2c6:	230a      	movle	r3, #10
 800d2c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800d2cc:	e7e1      	b.n	800d292 <_strtod_l+0x242>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	9305      	str	r3, [sp, #20]
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e77c      	b.n	800d1d0 <_strtod_l+0x180>
 800d2d6:	f04f 0c00 	mov.w	ip, #0
 800d2da:	f108 0202 	add.w	r2, r8, #2
 800d2de:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d2e4:	e785      	b.n	800d1f2 <_strtod_l+0x1a2>
 800d2e6:	f04f 0c01 	mov.w	ip, #1
 800d2ea:	e7f6      	b.n	800d2da <_strtod_l+0x28a>
 800d2ec:	08014948 	.word	0x08014948
 800d2f0:	08014700 	.word	0x08014700
 800d2f4:	7ff00000 	.word	0x7ff00000
 800d2f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d2fa:	1c51      	adds	r1, r2, #1
 800d2fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800d2fe:	7852      	ldrb	r2, [r2, #1]
 800d300:	2a30      	cmp	r2, #48	; 0x30
 800d302:	d0f9      	beq.n	800d2f8 <_strtod_l+0x2a8>
 800d304:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d308:	2908      	cmp	r1, #8
 800d30a:	f63f af79 	bhi.w	800d200 <_strtod_l+0x1b0>
 800d30e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d312:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d314:	9206      	str	r2, [sp, #24]
 800d316:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d318:	1c51      	adds	r1, r2, #1
 800d31a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d31c:	7852      	ldrb	r2, [r2, #1]
 800d31e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d322:	2e09      	cmp	r6, #9
 800d324:	d937      	bls.n	800d396 <_strtod_l+0x346>
 800d326:	9e06      	ldr	r6, [sp, #24]
 800d328:	1b89      	subs	r1, r1, r6
 800d32a:	2908      	cmp	r1, #8
 800d32c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d330:	dc02      	bgt.n	800d338 <_strtod_l+0x2e8>
 800d332:	4576      	cmp	r6, lr
 800d334:	bfa8      	it	ge
 800d336:	4676      	movge	r6, lr
 800d338:	f1bc 0f00 	cmp.w	ip, #0
 800d33c:	d000      	beq.n	800d340 <_strtod_l+0x2f0>
 800d33e:	4276      	negs	r6, r6
 800d340:	2d00      	cmp	r5, #0
 800d342:	d14d      	bne.n	800d3e0 <_strtod_l+0x390>
 800d344:	9904      	ldr	r1, [sp, #16]
 800d346:	4301      	orrs	r1, r0
 800d348:	f47f aec6 	bne.w	800d0d8 <_strtod_l+0x88>
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f47f aee1 	bne.w	800d114 <_strtod_l+0xc4>
 800d352:	2a69      	cmp	r2, #105	; 0x69
 800d354:	d027      	beq.n	800d3a6 <_strtod_l+0x356>
 800d356:	dc24      	bgt.n	800d3a2 <_strtod_l+0x352>
 800d358:	2a49      	cmp	r2, #73	; 0x49
 800d35a:	d024      	beq.n	800d3a6 <_strtod_l+0x356>
 800d35c:	2a4e      	cmp	r2, #78	; 0x4e
 800d35e:	f47f aed9 	bne.w	800d114 <_strtod_l+0xc4>
 800d362:	499f      	ldr	r1, [pc, #636]	; (800d5e0 <_strtod_l+0x590>)
 800d364:	a817      	add	r0, sp, #92	; 0x5c
 800d366:	f001 fe3d 	bl	800efe4 <__match>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	f43f aed2 	beq.w	800d114 <_strtod_l+0xc4>
 800d370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b28      	cmp	r3, #40	; 0x28
 800d376:	d12d      	bne.n	800d3d4 <_strtod_l+0x384>
 800d378:	499a      	ldr	r1, [pc, #616]	; (800d5e4 <_strtod_l+0x594>)
 800d37a:	aa1a      	add	r2, sp, #104	; 0x68
 800d37c:	a817      	add	r0, sp, #92	; 0x5c
 800d37e:	f001 fe45 	bl	800f00c <__hexnan>
 800d382:	2805      	cmp	r0, #5
 800d384:	d126      	bne.n	800d3d4 <_strtod_l+0x384>
 800d386:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d388:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d38c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d390:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d394:	e6a0      	b.n	800d0d8 <_strtod_l+0x88>
 800d396:	210a      	movs	r1, #10
 800d398:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d39c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d3a0:	e7b9      	b.n	800d316 <_strtod_l+0x2c6>
 800d3a2:	2a6e      	cmp	r2, #110	; 0x6e
 800d3a4:	e7db      	b.n	800d35e <_strtod_l+0x30e>
 800d3a6:	4990      	ldr	r1, [pc, #576]	; (800d5e8 <_strtod_l+0x598>)
 800d3a8:	a817      	add	r0, sp, #92	; 0x5c
 800d3aa:	f001 fe1b 	bl	800efe4 <__match>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f43f aeb0 	beq.w	800d114 <_strtod_l+0xc4>
 800d3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3b6:	498d      	ldr	r1, [pc, #564]	; (800d5ec <_strtod_l+0x59c>)
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	a817      	add	r0, sp, #92	; 0x5c
 800d3bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3be:	f001 fe11 	bl	800efe4 <__match>
 800d3c2:	b910      	cbnz	r0, 800d3ca <_strtod_l+0x37a>
 800d3c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d5fc <_strtod_l+0x5ac>
 800d3ce:	f04f 0a00 	mov.w	sl, #0
 800d3d2:	e681      	b.n	800d0d8 <_strtod_l+0x88>
 800d3d4:	4886      	ldr	r0, [pc, #536]	; (800d5f0 <_strtod_l+0x5a0>)
 800d3d6:	f7fe ff43 	bl	800c260 <nan>
 800d3da:	ec5b ab10 	vmov	sl, fp, d0
 800d3de:	e67b      	b.n	800d0d8 <_strtod_l+0x88>
 800d3e0:	9b05      	ldr	r3, [sp, #20]
 800d3e2:	9807      	ldr	r0, [sp, #28]
 800d3e4:	1af3      	subs	r3, r6, r3
 800d3e6:	2f00      	cmp	r7, #0
 800d3e8:	bf08      	it	eq
 800d3ea:	462f      	moveq	r7, r5
 800d3ec:	2d10      	cmp	r5, #16
 800d3ee:	9306      	str	r3, [sp, #24]
 800d3f0:	46a8      	mov	r8, r5
 800d3f2:	bfa8      	it	ge
 800d3f4:	f04f 0810 	movge.w	r8, #16
 800d3f8:	f7f3 f88c 	bl	8000514 <__aeabi_ui2d>
 800d3fc:	2d09      	cmp	r5, #9
 800d3fe:	4682      	mov	sl, r0
 800d400:	468b      	mov	fp, r1
 800d402:	dd13      	ble.n	800d42c <_strtod_l+0x3dc>
 800d404:	4b7b      	ldr	r3, [pc, #492]	; (800d5f4 <_strtod_l+0x5a4>)
 800d406:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d40a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d40e:	f7f3 f8fb 	bl	8000608 <__aeabi_dmul>
 800d412:	4682      	mov	sl, r0
 800d414:	4648      	mov	r0, r9
 800d416:	468b      	mov	fp, r1
 800d418:	f7f3 f87c 	bl	8000514 <__aeabi_ui2d>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4650      	mov	r0, sl
 800d422:	4659      	mov	r1, fp
 800d424:	f7f2 ff3a 	bl	800029c <__adddf3>
 800d428:	4682      	mov	sl, r0
 800d42a:	468b      	mov	fp, r1
 800d42c:	2d0f      	cmp	r5, #15
 800d42e:	dc38      	bgt.n	800d4a2 <_strtod_l+0x452>
 800d430:	9b06      	ldr	r3, [sp, #24]
 800d432:	2b00      	cmp	r3, #0
 800d434:	f43f ae50 	beq.w	800d0d8 <_strtod_l+0x88>
 800d438:	dd24      	ble.n	800d484 <_strtod_l+0x434>
 800d43a:	2b16      	cmp	r3, #22
 800d43c:	dc0b      	bgt.n	800d456 <_strtod_l+0x406>
 800d43e:	496d      	ldr	r1, [pc, #436]	; (800d5f4 <_strtod_l+0x5a4>)
 800d440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d444:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d448:	4652      	mov	r2, sl
 800d44a:	465b      	mov	r3, fp
 800d44c:	f7f3 f8dc 	bl	8000608 <__aeabi_dmul>
 800d450:	4682      	mov	sl, r0
 800d452:	468b      	mov	fp, r1
 800d454:	e640      	b.n	800d0d8 <_strtod_l+0x88>
 800d456:	9a06      	ldr	r2, [sp, #24]
 800d458:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d45c:	4293      	cmp	r3, r2
 800d45e:	db20      	blt.n	800d4a2 <_strtod_l+0x452>
 800d460:	4c64      	ldr	r4, [pc, #400]	; (800d5f4 <_strtod_l+0x5a4>)
 800d462:	f1c5 050f 	rsb	r5, r5, #15
 800d466:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d46a:	4652      	mov	r2, sl
 800d46c:	465b      	mov	r3, fp
 800d46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d472:	f7f3 f8c9 	bl	8000608 <__aeabi_dmul>
 800d476:	9b06      	ldr	r3, [sp, #24]
 800d478:	1b5d      	subs	r5, r3, r5
 800d47a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d47e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d482:	e7e3      	b.n	800d44c <_strtod_l+0x3fc>
 800d484:	9b06      	ldr	r3, [sp, #24]
 800d486:	3316      	adds	r3, #22
 800d488:	db0b      	blt.n	800d4a2 <_strtod_l+0x452>
 800d48a:	9b05      	ldr	r3, [sp, #20]
 800d48c:	1b9e      	subs	r6, r3, r6
 800d48e:	4b59      	ldr	r3, [pc, #356]	; (800d5f4 <_strtod_l+0x5a4>)
 800d490:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d494:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d498:	4650      	mov	r0, sl
 800d49a:	4659      	mov	r1, fp
 800d49c:	f7f3 f9de 	bl	800085c <__aeabi_ddiv>
 800d4a0:	e7d6      	b.n	800d450 <_strtod_l+0x400>
 800d4a2:	9b06      	ldr	r3, [sp, #24]
 800d4a4:	eba5 0808 	sub.w	r8, r5, r8
 800d4a8:	4498      	add	r8, r3
 800d4aa:	f1b8 0f00 	cmp.w	r8, #0
 800d4ae:	dd74      	ble.n	800d59a <_strtod_l+0x54a>
 800d4b0:	f018 030f 	ands.w	r3, r8, #15
 800d4b4:	d00a      	beq.n	800d4cc <_strtod_l+0x47c>
 800d4b6:	494f      	ldr	r1, [pc, #316]	; (800d5f4 <_strtod_l+0x5a4>)
 800d4b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4bc:	4652      	mov	r2, sl
 800d4be:	465b      	mov	r3, fp
 800d4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c4:	f7f3 f8a0 	bl	8000608 <__aeabi_dmul>
 800d4c8:	4682      	mov	sl, r0
 800d4ca:	468b      	mov	fp, r1
 800d4cc:	f038 080f 	bics.w	r8, r8, #15
 800d4d0:	d04f      	beq.n	800d572 <_strtod_l+0x522>
 800d4d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d4d6:	dd22      	ble.n	800d51e <_strtod_l+0x4ce>
 800d4d8:	2500      	movs	r5, #0
 800d4da:	462e      	mov	r6, r5
 800d4dc:	9507      	str	r5, [sp, #28]
 800d4de:	9505      	str	r5, [sp, #20]
 800d4e0:	2322      	movs	r3, #34	; 0x22
 800d4e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d5fc <_strtod_l+0x5ac>
 800d4e6:	6023      	str	r3, [r4, #0]
 800d4e8:	f04f 0a00 	mov.w	sl, #0
 800d4ec:	9b07      	ldr	r3, [sp, #28]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f43f adf2 	beq.w	800d0d8 <_strtod_l+0x88>
 800d4f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f001 fe90 	bl	800f21c <_Bfree>
 800d4fc:	9905      	ldr	r1, [sp, #20]
 800d4fe:	4620      	mov	r0, r4
 800d500:	f001 fe8c 	bl	800f21c <_Bfree>
 800d504:	4631      	mov	r1, r6
 800d506:	4620      	mov	r0, r4
 800d508:	f001 fe88 	bl	800f21c <_Bfree>
 800d50c:	9907      	ldr	r1, [sp, #28]
 800d50e:	4620      	mov	r0, r4
 800d510:	f001 fe84 	bl	800f21c <_Bfree>
 800d514:	4629      	mov	r1, r5
 800d516:	4620      	mov	r0, r4
 800d518:	f001 fe80 	bl	800f21c <_Bfree>
 800d51c:	e5dc      	b.n	800d0d8 <_strtod_l+0x88>
 800d51e:	4b36      	ldr	r3, [pc, #216]	; (800d5f8 <_strtod_l+0x5a8>)
 800d520:	9304      	str	r3, [sp, #16]
 800d522:	2300      	movs	r3, #0
 800d524:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d528:	4650      	mov	r0, sl
 800d52a:	4659      	mov	r1, fp
 800d52c:	4699      	mov	r9, r3
 800d52e:	f1b8 0f01 	cmp.w	r8, #1
 800d532:	dc21      	bgt.n	800d578 <_strtod_l+0x528>
 800d534:	b10b      	cbz	r3, 800d53a <_strtod_l+0x4ea>
 800d536:	4682      	mov	sl, r0
 800d538:	468b      	mov	fp, r1
 800d53a:	4b2f      	ldr	r3, [pc, #188]	; (800d5f8 <_strtod_l+0x5a8>)
 800d53c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d540:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d544:	4652      	mov	r2, sl
 800d546:	465b      	mov	r3, fp
 800d548:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d54c:	f7f3 f85c 	bl	8000608 <__aeabi_dmul>
 800d550:	4b2a      	ldr	r3, [pc, #168]	; (800d5fc <_strtod_l+0x5ac>)
 800d552:	460a      	mov	r2, r1
 800d554:	400b      	ands	r3, r1
 800d556:	492a      	ldr	r1, [pc, #168]	; (800d600 <_strtod_l+0x5b0>)
 800d558:	428b      	cmp	r3, r1
 800d55a:	4682      	mov	sl, r0
 800d55c:	d8bc      	bhi.n	800d4d8 <_strtod_l+0x488>
 800d55e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d562:	428b      	cmp	r3, r1
 800d564:	bf86      	itte	hi
 800d566:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d604 <_strtod_l+0x5b4>
 800d56a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d56e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d572:	2300      	movs	r3, #0
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	e084      	b.n	800d682 <_strtod_l+0x632>
 800d578:	f018 0f01 	tst.w	r8, #1
 800d57c:	d005      	beq.n	800d58a <_strtod_l+0x53a>
 800d57e:	9b04      	ldr	r3, [sp, #16]
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	f7f3 f840 	bl	8000608 <__aeabi_dmul>
 800d588:	2301      	movs	r3, #1
 800d58a:	9a04      	ldr	r2, [sp, #16]
 800d58c:	3208      	adds	r2, #8
 800d58e:	f109 0901 	add.w	r9, r9, #1
 800d592:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d596:	9204      	str	r2, [sp, #16]
 800d598:	e7c9      	b.n	800d52e <_strtod_l+0x4de>
 800d59a:	d0ea      	beq.n	800d572 <_strtod_l+0x522>
 800d59c:	f1c8 0800 	rsb	r8, r8, #0
 800d5a0:	f018 020f 	ands.w	r2, r8, #15
 800d5a4:	d00a      	beq.n	800d5bc <_strtod_l+0x56c>
 800d5a6:	4b13      	ldr	r3, [pc, #76]	; (800d5f4 <_strtod_l+0x5a4>)
 800d5a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ac:	4650      	mov	r0, sl
 800d5ae:	4659      	mov	r1, fp
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f7f3 f952 	bl	800085c <__aeabi_ddiv>
 800d5b8:	4682      	mov	sl, r0
 800d5ba:	468b      	mov	fp, r1
 800d5bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d5c0:	d0d7      	beq.n	800d572 <_strtod_l+0x522>
 800d5c2:	f1b8 0f1f 	cmp.w	r8, #31
 800d5c6:	dd1f      	ble.n	800d608 <_strtod_l+0x5b8>
 800d5c8:	2500      	movs	r5, #0
 800d5ca:	462e      	mov	r6, r5
 800d5cc:	9507      	str	r5, [sp, #28]
 800d5ce:	9505      	str	r5, [sp, #20]
 800d5d0:	2322      	movs	r3, #34	; 0x22
 800d5d2:	f04f 0a00 	mov.w	sl, #0
 800d5d6:	f04f 0b00 	mov.w	fp, #0
 800d5da:	6023      	str	r3, [r4, #0]
 800d5dc:	e786      	b.n	800d4ec <_strtod_l+0x49c>
 800d5de:	bf00      	nop
 800d5e0:	080146d1 	.word	0x080146d1
 800d5e4:	08014714 	.word	0x08014714
 800d5e8:	080146c9 	.word	0x080146c9
 800d5ec:	08014854 	.word	0x08014854
 800d5f0:	08014b00 	.word	0x08014b00
 800d5f4:	080149e0 	.word	0x080149e0
 800d5f8:	080149b8 	.word	0x080149b8
 800d5fc:	7ff00000 	.word	0x7ff00000
 800d600:	7ca00000 	.word	0x7ca00000
 800d604:	7fefffff 	.word	0x7fefffff
 800d608:	f018 0310 	ands.w	r3, r8, #16
 800d60c:	bf18      	it	ne
 800d60e:	236a      	movne	r3, #106	; 0x6a
 800d610:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d9c0 <_strtod_l+0x970>
 800d614:	9304      	str	r3, [sp, #16]
 800d616:	4650      	mov	r0, sl
 800d618:	4659      	mov	r1, fp
 800d61a:	2300      	movs	r3, #0
 800d61c:	f018 0f01 	tst.w	r8, #1
 800d620:	d004      	beq.n	800d62c <_strtod_l+0x5dc>
 800d622:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d626:	f7f2 ffef 	bl	8000608 <__aeabi_dmul>
 800d62a:	2301      	movs	r3, #1
 800d62c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d630:	f109 0908 	add.w	r9, r9, #8
 800d634:	d1f2      	bne.n	800d61c <_strtod_l+0x5cc>
 800d636:	b10b      	cbz	r3, 800d63c <_strtod_l+0x5ec>
 800d638:	4682      	mov	sl, r0
 800d63a:	468b      	mov	fp, r1
 800d63c:	9b04      	ldr	r3, [sp, #16]
 800d63e:	b1c3      	cbz	r3, 800d672 <_strtod_l+0x622>
 800d640:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d644:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d648:	2b00      	cmp	r3, #0
 800d64a:	4659      	mov	r1, fp
 800d64c:	dd11      	ble.n	800d672 <_strtod_l+0x622>
 800d64e:	2b1f      	cmp	r3, #31
 800d650:	f340 8124 	ble.w	800d89c <_strtod_l+0x84c>
 800d654:	2b34      	cmp	r3, #52	; 0x34
 800d656:	bfde      	ittt	le
 800d658:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d65c:	f04f 33ff 	movle.w	r3, #4294967295
 800d660:	fa03 f202 	lslle.w	r2, r3, r2
 800d664:	f04f 0a00 	mov.w	sl, #0
 800d668:	bfcc      	ite	gt
 800d66a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d66e:	ea02 0b01 	andle.w	fp, r2, r1
 800d672:	2200      	movs	r2, #0
 800d674:	2300      	movs	r3, #0
 800d676:	4650      	mov	r0, sl
 800d678:	4659      	mov	r1, fp
 800d67a:	f7f3 fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d1a2      	bne.n	800d5c8 <_strtod_l+0x578>
 800d682:	9b07      	ldr	r3, [sp, #28]
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	9908      	ldr	r1, [sp, #32]
 800d688:	462b      	mov	r3, r5
 800d68a:	463a      	mov	r2, r7
 800d68c:	4620      	mov	r0, r4
 800d68e:	f001 fe2d 	bl	800f2ec <__s2b>
 800d692:	9007      	str	r0, [sp, #28]
 800d694:	2800      	cmp	r0, #0
 800d696:	f43f af1f 	beq.w	800d4d8 <_strtod_l+0x488>
 800d69a:	9b05      	ldr	r3, [sp, #20]
 800d69c:	1b9e      	subs	r6, r3, r6
 800d69e:	9b06      	ldr	r3, [sp, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	bfb4      	ite	lt
 800d6a4:	4633      	movlt	r3, r6
 800d6a6:	2300      	movge	r3, #0
 800d6a8:	930c      	str	r3, [sp, #48]	; 0x30
 800d6aa:	9b06      	ldr	r3, [sp, #24]
 800d6ac:	2500      	movs	r5, #0
 800d6ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d6b2:	9312      	str	r3, [sp, #72]	; 0x48
 800d6b4:	462e      	mov	r6, r5
 800d6b6:	9b07      	ldr	r3, [sp, #28]
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	6859      	ldr	r1, [r3, #4]
 800d6bc:	f001 fd6e 	bl	800f19c <_Balloc>
 800d6c0:	9005      	str	r0, [sp, #20]
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	f43f af0c 	beq.w	800d4e0 <_strtod_l+0x490>
 800d6c8:	9b07      	ldr	r3, [sp, #28]
 800d6ca:	691a      	ldr	r2, [r3, #16]
 800d6cc:	3202      	adds	r2, #2
 800d6ce:	f103 010c 	add.w	r1, r3, #12
 800d6d2:	0092      	lsls	r2, r2, #2
 800d6d4:	300c      	adds	r0, #12
 800d6d6:	f001 fd53 	bl	800f180 <memcpy>
 800d6da:	ec4b ab10 	vmov	d0, sl, fp
 800d6de:	aa1a      	add	r2, sp, #104	; 0x68
 800d6e0:	a919      	add	r1, sp, #100	; 0x64
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f002 f948 	bl	800f978 <__d2b>
 800d6e8:	ec4b ab18 	vmov	d8, sl, fp
 800d6ec:	9018      	str	r0, [sp, #96]	; 0x60
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	f43f aef6 	beq.w	800d4e0 <_strtod_l+0x490>
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f001 fe92 	bl	800f420 <__i2b>
 800d6fc:	4606      	mov	r6, r0
 800d6fe:	2800      	cmp	r0, #0
 800d700:	f43f aeee 	beq.w	800d4e0 <_strtod_l+0x490>
 800d704:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d706:	9904      	ldr	r1, [sp, #16]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfab      	itete	ge
 800d70c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d70e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d710:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d712:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d716:	bfac      	ite	ge
 800d718:	eb03 0902 	addge.w	r9, r3, r2
 800d71c:	1ad7      	sublt	r7, r2, r3
 800d71e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d720:	eba3 0801 	sub.w	r8, r3, r1
 800d724:	4490      	add	r8, r2
 800d726:	4ba1      	ldr	r3, [pc, #644]	; (800d9ac <_strtod_l+0x95c>)
 800d728:	f108 38ff 	add.w	r8, r8, #4294967295
 800d72c:	4598      	cmp	r8, r3
 800d72e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d732:	f280 80c7 	bge.w	800d8c4 <_strtod_l+0x874>
 800d736:	eba3 0308 	sub.w	r3, r3, r8
 800d73a:	2b1f      	cmp	r3, #31
 800d73c:	eba2 0203 	sub.w	r2, r2, r3
 800d740:	f04f 0101 	mov.w	r1, #1
 800d744:	f300 80b1 	bgt.w	800d8aa <_strtod_l+0x85a>
 800d748:	fa01 f303 	lsl.w	r3, r1, r3
 800d74c:	930d      	str	r3, [sp, #52]	; 0x34
 800d74e:	2300      	movs	r3, #0
 800d750:	9308      	str	r3, [sp, #32]
 800d752:	eb09 0802 	add.w	r8, r9, r2
 800d756:	9b04      	ldr	r3, [sp, #16]
 800d758:	45c1      	cmp	r9, r8
 800d75a:	4417      	add	r7, r2
 800d75c:	441f      	add	r7, r3
 800d75e:	464b      	mov	r3, r9
 800d760:	bfa8      	it	ge
 800d762:	4643      	movge	r3, r8
 800d764:	42bb      	cmp	r3, r7
 800d766:	bfa8      	it	ge
 800d768:	463b      	movge	r3, r7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	bfc2      	ittt	gt
 800d76e:	eba8 0803 	subgt.w	r8, r8, r3
 800d772:	1aff      	subgt	r7, r7, r3
 800d774:	eba9 0903 	subgt.w	r9, r9, r3
 800d778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	dd17      	ble.n	800d7ae <_strtod_l+0x75e>
 800d77e:	4631      	mov	r1, r6
 800d780:	461a      	mov	r2, r3
 800d782:	4620      	mov	r0, r4
 800d784:	f001 ff0c 	bl	800f5a0 <__pow5mult>
 800d788:	4606      	mov	r6, r0
 800d78a:	2800      	cmp	r0, #0
 800d78c:	f43f aea8 	beq.w	800d4e0 <_strtod_l+0x490>
 800d790:	4601      	mov	r1, r0
 800d792:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d794:	4620      	mov	r0, r4
 800d796:	f001 fe59 	bl	800f44c <__multiply>
 800d79a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d79c:	2800      	cmp	r0, #0
 800d79e:	f43f ae9f 	beq.w	800d4e0 <_strtod_l+0x490>
 800d7a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f001 fd39 	bl	800f21c <_Bfree>
 800d7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ac:	9318      	str	r3, [sp, #96]	; 0x60
 800d7ae:	f1b8 0f00 	cmp.w	r8, #0
 800d7b2:	f300 808c 	bgt.w	800d8ce <_strtod_l+0x87e>
 800d7b6:	9b06      	ldr	r3, [sp, #24]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	dd08      	ble.n	800d7ce <_strtod_l+0x77e>
 800d7bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7be:	9905      	ldr	r1, [sp, #20]
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f001 feed 	bl	800f5a0 <__pow5mult>
 800d7c6:	9005      	str	r0, [sp, #20]
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	f43f ae89 	beq.w	800d4e0 <_strtod_l+0x490>
 800d7ce:	2f00      	cmp	r7, #0
 800d7d0:	dd08      	ble.n	800d7e4 <_strtod_l+0x794>
 800d7d2:	9905      	ldr	r1, [sp, #20]
 800d7d4:	463a      	mov	r2, r7
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f001 ff3c 	bl	800f654 <__lshift>
 800d7dc:	9005      	str	r0, [sp, #20]
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	f43f ae7e 	beq.w	800d4e0 <_strtod_l+0x490>
 800d7e4:	f1b9 0f00 	cmp.w	r9, #0
 800d7e8:	dd08      	ble.n	800d7fc <_strtod_l+0x7ac>
 800d7ea:	4631      	mov	r1, r6
 800d7ec:	464a      	mov	r2, r9
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f001 ff30 	bl	800f654 <__lshift>
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f ae72 	beq.w	800d4e0 <_strtod_l+0x490>
 800d7fc:	9a05      	ldr	r2, [sp, #20]
 800d7fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d800:	4620      	mov	r0, r4
 800d802:	f001 ffb3 	bl	800f76c <__mdiff>
 800d806:	4605      	mov	r5, r0
 800d808:	2800      	cmp	r0, #0
 800d80a:	f43f ae69 	beq.w	800d4e0 <_strtod_l+0x490>
 800d80e:	68c3      	ldr	r3, [r0, #12]
 800d810:	930b      	str	r3, [sp, #44]	; 0x2c
 800d812:	2300      	movs	r3, #0
 800d814:	60c3      	str	r3, [r0, #12]
 800d816:	4631      	mov	r1, r6
 800d818:	f001 ff8c 	bl	800f734 <__mcmp>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	da60      	bge.n	800d8e2 <_strtod_l+0x892>
 800d820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d822:	ea53 030a 	orrs.w	r3, r3, sl
 800d826:	f040 8082 	bne.w	800d92e <_strtod_l+0x8de>
 800d82a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d17d      	bne.n	800d92e <_strtod_l+0x8de>
 800d832:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d836:	0d1b      	lsrs	r3, r3, #20
 800d838:	051b      	lsls	r3, r3, #20
 800d83a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d83e:	d976      	bls.n	800d92e <_strtod_l+0x8de>
 800d840:	696b      	ldr	r3, [r5, #20]
 800d842:	b913      	cbnz	r3, 800d84a <_strtod_l+0x7fa>
 800d844:	692b      	ldr	r3, [r5, #16]
 800d846:	2b01      	cmp	r3, #1
 800d848:	dd71      	ble.n	800d92e <_strtod_l+0x8de>
 800d84a:	4629      	mov	r1, r5
 800d84c:	2201      	movs	r2, #1
 800d84e:	4620      	mov	r0, r4
 800d850:	f001 ff00 	bl	800f654 <__lshift>
 800d854:	4631      	mov	r1, r6
 800d856:	4605      	mov	r5, r0
 800d858:	f001 ff6c 	bl	800f734 <__mcmp>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	dd66      	ble.n	800d92e <_strtod_l+0x8de>
 800d860:	9904      	ldr	r1, [sp, #16]
 800d862:	4a53      	ldr	r2, [pc, #332]	; (800d9b0 <_strtod_l+0x960>)
 800d864:	465b      	mov	r3, fp
 800d866:	2900      	cmp	r1, #0
 800d868:	f000 8081 	beq.w	800d96e <_strtod_l+0x91e>
 800d86c:	ea02 010b 	and.w	r1, r2, fp
 800d870:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d874:	dc7b      	bgt.n	800d96e <_strtod_l+0x91e>
 800d876:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d87a:	f77f aea9 	ble.w	800d5d0 <_strtod_l+0x580>
 800d87e:	4b4d      	ldr	r3, [pc, #308]	; (800d9b4 <_strtod_l+0x964>)
 800d880:	4650      	mov	r0, sl
 800d882:	4659      	mov	r1, fp
 800d884:	2200      	movs	r2, #0
 800d886:	f7f2 febf 	bl	8000608 <__aeabi_dmul>
 800d88a:	460b      	mov	r3, r1
 800d88c:	4303      	orrs	r3, r0
 800d88e:	bf08      	it	eq
 800d890:	2322      	moveq	r3, #34	; 0x22
 800d892:	4682      	mov	sl, r0
 800d894:	468b      	mov	fp, r1
 800d896:	bf08      	it	eq
 800d898:	6023      	streq	r3, [r4, #0]
 800d89a:	e62b      	b.n	800d4f4 <_strtod_l+0x4a4>
 800d89c:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8a4:	ea03 0a0a 	and.w	sl, r3, sl
 800d8a8:	e6e3      	b.n	800d672 <_strtod_l+0x622>
 800d8aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d8ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d8b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d8b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d8ba:	fa01 f308 	lsl.w	r3, r1, r8
 800d8be:	9308      	str	r3, [sp, #32]
 800d8c0:	910d      	str	r1, [sp, #52]	; 0x34
 800d8c2:	e746      	b.n	800d752 <_strtod_l+0x702>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9308      	str	r3, [sp, #32]
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	930d      	str	r3, [sp, #52]	; 0x34
 800d8cc:	e741      	b.n	800d752 <_strtod_l+0x702>
 800d8ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8d0:	4642      	mov	r2, r8
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f001 febe 	bl	800f654 <__lshift>
 800d8d8:	9018      	str	r0, [sp, #96]	; 0x60
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f47f af6b 	bne.w	800d7b6 <_strtod_l+0x766>
 800d8e0:	e5fe      	b.n	800d4e0 <_strtod_l+0x490>
 800d8e2:	465f      	mov	r7, fp
 800d8e4:	d16e      	bne.n	800d9c4 <_strtod_l+0x974>
 800d8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8ec:	b342      	cbz	r2, 800d940 <_strtod_l+0x8f0>
 800d8ee:	4a32      	ldr	r2, [pc, #200]	; (800d9b8 <_strtod_l+0x968>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d128      	bne.n	800d946 <_strtod_l+0x8f6>
 800d8f4:	9b04      	ldr	r3, [sp, #16]
 800d8f6:	4651      	mov	r1, sl
 800d8f8:	b1eb      	cbz	r3, 800d936 <_strtod_l+0x8e6>
 800d8fa:	4b2d      	ldr	r3, [pc, #180]	; (800d9b0 <_strtod_l+0x960>)
 800d8fc:	403b      	ands	r3, r7
 800d8fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d902:	f04f 32ff 	mov.w	r2, #4294967295
 800d906:	d819      	bhi.n	800d93c <_strtod_l+0x8ec>
 800d908:	0d1b      	lsrs	r3, r3, #20
 800d90a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d90e:	fa02 f303 	lsl.w	r3, r2, r3
 800d912:	4299      	cmp	r1, r3
 800d914:	d117      	bne.n	800d946 <_strtod_l+0x8f6>
 800d916:	4b29      	ldr	r3, [pc, #164]	; (800d9bc <_strtod_l+0x96c>)
 800d918:	429f      	cmp	r7, r3
 800d91a:	d102      	bne.n	800d922 <_strtod_l+0x8d2>
 800d91c:	3101      	adds	r1, #1
 800d91e:	f43f addf 	beq.w	800d4e0 <_strtod_l+0x490>
 800d922:	4b23      	ldr	r3, [pc, #140]	; (800d9b0 <_strtod_l+0x960>)
 800d924:	403b      	ands	r3, r7
 800d926:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d92a:	f04f 0a00 	mov.w	sl, #0
 800d92e:	9b04      	ldr	r3, [sp, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1a4      	bne.n	800d87e <_strtod_l+0x82e>
 800d934:	e5de      	b.n	800d4f4 <_strtod_l+0x4a4>
 800d936:	f04f 33ff 	mov.w	r3, #4294967295
 800d93a:	e7ea      	b.n	800d912 <_strtod_l+0x8c2>
 800d93c:	4613      	mov	r3, r2
 800d93e:	e7e8      	b.n	800d912 <_strtod_l+0x8c2>
 800d940:	ea53 030a 	orrs.w	r3, r3, sl
 800d944:	d08c      	beq.n	800d860 <_strtod_l+0x810>
 800d946:	9b08      	ldr	r3, [sp, #32]
 800d948:	b1db      	cbz	r3, 800d982 <_strtod_l+0x932>
 800d94a:	423b      	tst	r3, r7
 800d94c:	d0ef      	beq.n	800d92e <_strtod_l+0x8de>
 800d94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d950:	9a04      	ldr	r2, [sp, #16]
 800d952:	4650      	mov	r0, sl
 800d954:	4659      	mov	r1, fp
 800d956:	b1c3      	cbz	r3, 800d98a <_strtod_l+0x93a>
 800d958:	f7ff fb5c 	bl	800d014 <sulp>
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	ec51 0b18 	vmov	r0, r1, d8
 800d964:	f7f2 fc9a 	bl	800029c <__adddf3>
 800d968:	4682      	mov	sl, r0
 800d96a:	468b      	mov	fp, r1
 800d96c:	e7df      	b.n	800d92e <_strtod_l+0x8de>
 800d96e:	4013      	ands	r3, r2
 800d970:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d974:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d978:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d97c:	f04f 3aff 	mov.w	sl, #4294967295
 800d980:	e7d5      	b.n	800d92e <_strtod_l+0x8de>
 800d982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d984:	ea13 0f0a 	tst.w	r3, sl
 800d988:	e7e0      	b.n	800d94c <_strtod_l+0x8fc>
 800d98a:	f7ff fb43 	bl	800d014 <sulp>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	ec51 0b18 	vmov	r0, r1, d8
 800d996:	f7f2 fc7f 	bl	8000298 <__aeabi_dsub>
 800d99a:	2200      	movs	r2, #0
 800d99c:	2300      	movs	r3, #0
 800d99e:	4682      	mov	sl, r0
 800d9a0:	468b      	mov	fp, r1
 800d9a2:	f7f3 f899 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d0c1      	beq.n	800d92e <_strtod_l+0x8de>
 800d9aa:	e611      	b.n	800d5d0 <_strtod_l+0x580>
 800d9ac:	fffffc02 	.word	0xfffffc02
 800d9b0:	7ff00000 	.word	0x7ff00000
 800d9b4:	39500000 	.word	0x39500000
 800d9b8:	000fffff 	.word	0x000fffff
 800d9bc:	7fefffff 	.word	0x7fefffff
 800d9c0:	08014728 	.word	0x08014728
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f002 f832 	bl	800fa30 <__ratio>
 800d9cc:	ec59 8b10 	vmov	r8, r9, d0
 800d9d0:	ee10 0a10 	vmov	r0, s0
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9da:	4649      	mov	r1, r9
 800d9dc:	f7f3 f890 	bl	8000b00 <__aeabi_dcmple>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d07a      	beq.n	800dada <_strtod_l+0xa8a>
 800d9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d04a      	beq.n	800da80 <_strtod_l+0xa30>
 800d9ea:	4b95      	ldr	r3, [pc, #596]	; (800dc40 <_strtod_l+0xbf0>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dc40 <_strtod_l+0xbf0>
 800d9f6:	f04f 0800 	mov.w	r8, #0
 800d9fa:	4b92      	ldr	r3, [pc, #584]	; (800dc44 <_strtod_l+0xbf4>)
 800d9fc:	403b      	ands	r3, r7
 800d9fe:	930d      	str	r3, [sp, #52]	; 0x34
 800da00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da02:	4b91      	ldr	r3, [pc, #580]	; (800dc48 <_strtod_l+0xbf8>)
 800da04:	429a      	cmp	r2, r3
 800da06:	f040 80b0 	bne.w	800db6a <_strtod_l+0xb1a>
 800da0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800da12:	ec4b ab10 	vmov	d0, sl, fp
 800da16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da1a:	f001 ff31 	bl	800f880 <__ulp>
 800da1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da22:	ec53 2b10 	vmov	r2, r3, d0
 800da26:	f7f2 fdef 	bl	8000608 <__aeabi_dmul>
 800da2a:	4652      	mov	r2, sl
 800da2c:	465b      	mov	r3, fp
 800da2e:	f7f2 fc35 	bl	800029c <__adddf3>
 800da32:	460b      	mov	r3, r1
 800da34:	4983      	ldr	r1, [pc, #524]	; (800dc44 <_strtod_l+0xbf4>)
 800da36:	4a85      	ldr	r2, [pc, #532]	; (800dc4c <_strtod_l+0xbfc>)
 800da38:	4019      	ands	r1, r3
 800da3a:	4291      	cmp	r1, r2
 800da3c:	4682      	mov	sl, r0
 800da3e:	d960      	bls.n	800db02 <_strtod_l+0xab2>
 800da40:	ee18 3a90 	vmov	r3, s17
 800da44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da48:	4293      	cmp	r3, r2
 800da4a:	d104      	bne.n	800da56 <_strtod_l+0xa06>
 800da4c:	ee18 3a10 	vmov	r3, s16
 800da50:	3301      	adds	r3, #1
 800da52:	f43f ad45 	beq.w	800d4e0 <_strtod_l+0x490>
 800da56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dc58 <_strtod_l+0xc08>
 800da5a:	f04f 3aff 	mov.w	sl, #4294967295
 800da5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da60:	4620      	mov	r0, r4
 800da62:	f001 fbdb 	bl	800f21c <_Bfree>
 800da66:	9905      	ldr	r1, [sp, #20]
 800da68:	4620      	mov	r0, r4
 800da6a:	f001 fbd7 	bl	800f21c <_Bfree>
 800da6e:	4631      	mov	r1, r6
 800da70:	4620      	mov	r0, r4
 800da72:	f001 fbd3 	bl	800f21c <_Bfree>
 800da76:	4629      	mov	r1, r5
 800da78:	4620      	mov	r0, r4
 800da7a:	f001 fbcf 	bl	800f21c <_Bfree>
 800da7e:	e61a      	b.n	800d6b6 <_strtod_l+0x666>
 800da80:	f1ba 0f00 	cmp.w	sl, #0
 800da84:	d11b      	bne.n	800dabe <_strtod_l+0xa6e>
 800da86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da8a:	b9f3      	cbnz	r3, 800daca <_strtod_l+0xa7a>
 800da8c:	4b6c      	ldr	r3, [pc, #432]	; (800dc40 <_strtod_l+0xbf0>)
 800da8e:	2200      	movs	r2, #0
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f3 f82a 	bl	8000aec <__aeabi_dcmplt>
 800da98:	b9d0      	cbnz	r0, 800dad0 <_strtod_l+0xa80>
 800da9a:	4640      	mov	r0, r8
 800da9c:	4649      	mov	r1, r9
 800da9e:	4b6c      	ldr	r3, [pc, #432]	; (800dc50 <_strtod_l+0xc00>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	f7f2 fdb1 	bl	8000608 <__aeabi_dmul>
 800daa6:	4680      	mov	r8, r0
 800daa8:	4689      	mov	r9, r1
 800daaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800daae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dab2:	9315      	str	r3, [sp, #84]	; 0x54
 800dab4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dab8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dabc:	e79d      	b.n	800d9fa <_strtod_l+0x9aa>
 800dabe:	f1ba 0f01 	cmp.w	sl, #1
 800dac2:	d102      	bne.n	800daca <_strtod_l+0xa7a>
 800dac4:	2f00      	cmp	r7, #0
 800dac6:	f43f ad83 	beq.w	800d5d0 <_strtod_l+0x580>
 800daca:	4b62      	ldr	r3, [pc, #392]	; (800dc54 <_strtod_l+0xc04>)
 800dacc:	2200      	movs	r2, #0
 800dace:	e78e      	b.n	800d9ee <_strtod_l+0x99e>
 800dad0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dc50 <_strtod_l+0xc00>
 800dad4:	f04f 0800 	mov.w	r8, #0
 800dad8:	e7e7      	b.n	800daaa <_strtod_l+0xa5a>
 800dada:	4b5d      	ldr	r3, [pc, #372]	; (800dc50 <_strtod_l+0xc00>)
 800dadc:	4640      	mov	r0, r8
 800dade:	4649      	mov	r1, r9
 800dae0:	2200      	movs	r2, #0
 800dae2:	f7f2 fd91 	bl	8000608 <__aeabi_dmul>
 800dae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae8:	4680      	mov	r8, r0
 800daea:	4689      	mov	r9, r1
 800daec:	b933      	cbnz	r3, 800dafc <_strtod_l+0xaac>
 800daee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800daf2:	900e      	str	r0, [sp, #56]	; 0x38
 800daf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800daf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dafa:	e7dd      	b.n	800dab8 <_strtod_l+0xa68>
 800dafc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800db00:	e7f9      	b.n	800daf6 <_strtod_l+0xaa6>
 800db02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800db06:	9b04      	ldr	r3, [sp, #16]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1a8      	bne.n	800da5e <_strtod_l+0xa0e>
 800db0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db12:	0d1b      	lsrs	r3, r3, #20
 800db14:	051b      	lsls	r3, r3, #20
 800db16:	429a      	cmp	r2, r3
 800db18:	d1a1      	bne.n	800da5e <_strtod_l+0xa0e>
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f3 f8d3 	bl	8000cc8 <__aeabi_d2lz>
 800db22:	f7f2 fd43 	bl	80005ac <__aeabi_l2d>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4640      	mov	r0, r8
 800db2c:	4649      	mov	r1, r9
 800db2e:	f7f2 fbb3 	bl	8000298 <__aeabi_dsub>
 800db32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db38:	ea43 030a 	orr.w	r3, r3, sl
 800db3c:	4313      	orrs	r3, r2
 800db3e:	4680      	mov	r8, r0
 800db40:	4689      	mov	r9, r1
 800db42:	d055      	beq.n	800dbf0 <_strtod_l+0xba0>
 800db44:	a336      	add	r3, pc, #216	; (adr r3, 800dc20 <_strtod_l+0xbd0>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	f7f2 ffcf 	bl	8000aec <__aeabi_dcmplt>
 800db4e:	2800      	cmp	r0, #0
 800db50:	f47f acd0 	bne.w	800d4f4 <_strtod_l+0x4a4>
 800db54:	a334      	add	r3, pc, #208	; (adr r3, 800dc28 <_strtod_l+0xbd8>)
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	4640      	mov	r0, r8
 800db5c:	4649      	mov	r1, r9
 800db5e:	f7f2 ffe3 	bl	8000b28 <__aeabi_dcmpgt>
 800db62:	2800      	cmp	r0, #0
 800db64:	f43f af7b 	beq.w	800da5e <_strtod_l+0xa0e>
 800db68:	e4c4      	b.n	800d4f4 <_strtod_l+0x4a4>
 800db6a:	9b04      	ldr	r3, [sp, #16]
 800db6c:	b333      	cbz	r3, 800dbbc <_strtod_l+0xb6c>
 800db6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db74:	d822      	bhi.n	800dbbc <_strtod_l+0xb6c>
 800db76:	a32e      	add	r3, pc, #184	; (adr r3, 800dc30 <_strtod_l+0xbe0>)
 800db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7c:	4640      	mov	r0, r8
 800db7e:	4649      	mov	r1, r9
 800db80:	f7f2 ffbe 	bl	8000b00 <__aeabi_dcmple>
 800db84:	b1a0      	cbz	r0, 800dbb0 <_strtod_l+0xb60>
 800db86:	4649      	mov	r1, r9
 800db88:	4640      	mov	r0, r8
 800db8a:	f7f3 f815 	bl	8000bb8 <__aeabi_d2uiz>
 800db8e:	2801      	cmp	r0, #1
 800db90:	bf38      	it	cc
 800db92:	2001      	movcc	r0, #1
 800db94:	f7f2 fcbe 	bl	8000514 <__aeabi_ui2d>
 800db98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db9a:	4680      	mov	r8, r0
 800db9c:	4689      	mov	r9, r1
 800db9e:	bb23      	cbnz	r3, 800dbea <_strtod_l+0xb9a>
 800dba0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dba4:	9010      	str	r0, [sp, #64]	; 0x40
 800dba6:	9311      	str	r3, [sp, #68]	; 0x44
 800dba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dbac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dbb8:	1a9b      	subs	r3, r3, r2
 800dbba:	9309      	str	r3, [sp, #36]	; 0x24
 800dbbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dbc0:	eeb0 0a48 	vmov.f32	s0, s16
 800dbc4:	eef0 0a68 	vmov.f32	s1, s17
 800dbc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dbcc:	f001 fe58 	bl	800f880 <__ulp>
 800dbd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dbd4:	ec53 2b10 	vmov	r2, r3, d0
 800dbd8:	f7f2 fd16 	bl	8000608 <__aeabi_dmul>
 800dbdc:	ec53 2b18 	vmov	r2, r3, d8
 800dbe0:	f7f2 fb5c 	bl	800029c <__adddf3>
 800dbe4:	4682      	mov	sl, r0
 800dbe6:	468b      	mov	fp, r1
 800dbe8:	e78d      	b.n	800db06 <_strtod_l+0xab6>
 800dbea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dbee:	e7db      	b.n	800dba8 <_strtod_l+0xb58>
 800dbf0:	a311      	add	r3, pc, #68	; (adr r3, 800dc38 <_strtod_l+0xbe8>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	f7f2 ff79 	bl	8000aec <__aeabi_dcmplt>
 800dbfa:	e7b2      	b.n	800db62 <_strtod_l+0xb12>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	930a      	str	r3, [sp, #40]	; 0x28
 800dc00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc04:	6013      	str	r3, [r2, #0]
 800dc06:	f7ff ba6b 	b.w	800d0e0 <_strtod_l+0x90>
 800dc0a:	2a65      	cmp	r2, #101	; 0x65
 800dc0c:	f43f ab5f 	beq.w	800d2ce <_strtod_l+0x27e>
 800dc10:	2a45      	cmp	r2, #69	; 0x45
 800dc12:	f43f ab5c 	beq.w	800d2ce <_strtod_l+0x27e>
 800dc16:	2301      	movs	r3, #1
 800dc18:	f7ff bb94 	b.w	800d344 <_strtod_l+0x2f4>
 800dc1c:	f3af 8000 	nop.w
 800dc20:	94a03595 	.word	0x94a03595
 800dc24:	3fdfffff 	.word	0x3fdfffff
 800dc28:	35afe535 	.word	0x35afe535
 800dc2c:	3fe00000 	.word	0x3fe00000
 800dc30:	ffc00000 	.word	0xffc00000
 800dc34:	41dfffff 	.word	0x41dfffff
 800dc38:	94a03595 	.word	0x94a03595
 800dc3c:	3fcfffff 	.word	0x3fcfffff
 800dc40:	3ff00000 	.word	0x3ff00000
 800dc44:	7ff00000 	.word	0x7ff00000
 800dc48:	7fe00000 	.word	0x7fe00000
 800dc4c:	7c9fffff 	.word	0x7c9fffff
 800dc50:	3fe00000 	.word	0x3fe00000
 800dc54:	bff00000 	.word	0xbff00000
 800dc58:	7fefffff 	.word	0x7fefffff

0800dc5c <_strtod_r>:
 800dc5c:	4b01      	ldr	r3, [pc, #4]	; (800dc64 <_strtod_r+0x8>)
 800dc5e:	f7ff b9f7 	b.w	800d050 <_strtod_l>
 800dc62:	bf00      	nop
 800dc64:	20000174 	.word	0x20000174

0800dc68 <_strtol_l.constprop.0>:
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc6e:	d001      	beq.n	800dc74 <_strtol_l.constprop.0+0xc>
 800dc70:	2b24      	cmp	r3, #36	; 0x24
 800dc72:	d906      	bls.n	800dc82 <_strtol_l.constprop.0+0x1a>
 800dc74:	f7fe fafc 	bl	800c270 <__errno>
 800dc78:	2316      	movs	r3, #22
 800dc7a:	6003      	str	r3, [r0, #0]
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd68 <_strtol_l.constprop.0+0x100>
 800dc86:	460d      	mov	r5, r1
 800dc88:	462e      	mov	r6, r5
 800dc8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dc92:	f017 0708 	ands.w	r7, r7, #8
 800dc96:	d1f7      	bne.n	800dc88 <_strtol_l.constprop.0+0x20>
 800dc98:	2c2d      	cmp	r4, #45	; 0x2d
 800dc9a:	d132      	bne.n	800dd02 <_strtol_l.constprop.0+0x9a>
 800dc9c:	782c      	ldrb	r4, [r5, #0]
 800dc9e:	2701      	movs	r7, #1
 800dca0:	1cb5      	adds	r5, r6, #2
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d05b      	beq.n	800dd5e <_strtol_l.constprop.0+0xf6>
 800dca6:	2b10      	cmp	r3, #16
 800dca8:	d109      	bne.n	800dcbe <_strtol_l.constprop.0+0x56>
 800dcaa:	2c30      	cmp	r4, #48	; 0x30
 800dcac:	d107      	bne.n	800dcbe <_strtol_l.constprop.0+0x56>
 800dcae:	782c      	ldrb	r4, [r5, #0]
 800dcb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dcb4:	2c58      	cmp	r4, #88	; 0x58
 800dcb6:	d14d      	bne.n	800dd54 <_strtol_l.constprop.0+0xec>
 800dcb8:	786c      	ldrb	r4, [r5, #1]
 800dcba:	2310      	movs	r3, #16
 800dcbc:	3502      	adds	r5, #2
 800dcbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dcc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcc6:	f04f 0c00 	mov.w	ip, #0
 800dcca:	fbb8 f9f3 	udiv	r9, r8, r3
 800dcce:	4666      	mov	r6, ip
 800dcd0:	fb03 8a19 	mls	sl, r3, r9, r8
 800dcd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dcd8:	f1be 0f09 	cmp.w	lr, #9
 800dcdc:	d816      	bhi.n	800dd0c <_strtol_l.constprop.0+0xa4>
 800dcde:	4674      	mov	r4, lr
 800dce0:	42a3      	cmp	r3, r4
 800dce2:	dd24      	ble.n	800dd2e <_strtol_l.constprop.0+0xc6>
 800dce4:	f1bc 0f00 	cmp.w	ip, #0
 800dce8:	db1e      	blt.n	800dd28 <_strtol_l.constprop.0+0xc0>
 800dcea:	45b1      	cmp	r9, r6
 800dcec:	d31c      	bcc.n	800dd28 <_strtol_l.constprop.0+0xc0>
 800dcee:	d101      	bne.n	800dcf4 <_strtol_l.constprop.0+0x8c>
 800dcf0:	45a2      	cmp	sl, r4
 800dcf2:	db19      	blt.n	800dd28 <_strtol_l.constprop.0+0xc0>
 800dcf4:	fb06 4603 	mla	r6, r6, r3, r4
 800dcf8:	f04f 0c01 	mov.w	ip, #1
 800dcfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd00:	e7e8      	b.n	800dcd4 <_strtol_l.constprop.0+0x6c>
 800dd02:	2c2b      	cmp	r4, #43	; 0x2b
 800dd04:	bf04      	itt	eq
 800dd06:	782c      	ldrbeq	r4, [r5, #0]
 800dd08:	1cb5      	addeq	r5, r6, #2
 800dd0a:	e7ca      	b.n	800dca2 <_strtol_l.constprop.0+0x3a>
 800dd0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dd10:	f1be 0f19 	cmp.w	lr, #25
 800dd14:	d801      	bhi.n	800dd1a <_strtol_l.constprop.0+0xb2>
 800dd16:	3c37      	subs	r4, #55	; 0x37
 800dd18:	e7e2      	b.n	800dce0 <_strtol_l.constprop.0+0x78>
 800dd1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dd1e:	f1be 0f19 	cmp.w	lr, #25
 800dd22:	d804      	bhi.n	800dd2e <_strtol_l.constprop.0+0xc6>
 800dd24:	3c57      	subs	r4, #87	; 0x57
 800dd26:	e7db      	b.n	800dce0 <_strtol_l.constprop.0+0x78>
 800dd28:	f04f 3cff 	mov.w	ip, #4294967295
 800dd2c:	e7e6      	b.n	800dcfc <_strtol_l.constprop.0+0x94>
 800dd2e:	f1bc 0f00 	cmp.w	ip, #0
 800dd32:	da05      	bge.n	800dd40 <_strtol_l.constprop.0+0xd8>
 800dd34:	2322      	movs	r3, #34	; 0x22
 800dd36:	6003      	str	r3, [r0, #0]
 800dd38:	4646      	mov	r6, r8
 800dd3a:	b942      	cbnz	r2, 800dd4e <_strtol_l.constprop.0+0xe6>
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	e79e      	b.n	800dc7e <_strtol_l.constprop.0+0x16>
 800dd40:	b107      	cbz	r7, 800dd44 <_strtol_l.constprop.0+0xdc>
 800dd42:	4276      	negs	r6, r6
 800dd44:	2a00      	cmp	r2, #0
 800dd46:	d0f9      	beq.n	800dd3c <_strtol_l.constprop.0+0xd4>
 800dd48:	f1bc 0f00 	cmp.w	ip, #0
 800dd4c:	d000      	beq.n	800dd50 <_strtol_l.constprop.0+0xe8>
 800dd4e:	1e69      	subs	r1, r5, #1
 800dd50:	6011      	str	r1, [r2, #0]
 800dd52:	e7f3      	b.n	800dd3c <_strtol_l.constprop.0+0xd4>
 800dd54:	2430      	movs	r4, #48	; 0x30
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1b1      	bne.n	800dcbe <_strtol_l.constprop.0+0x56>
 800dd5a:	2308      	movs	r3, #8
 800dd5c:	e7af      	b.n	800dcbe <_strtol_l.constprop.0+0x56>
 800dd5e:	2c30      	cmp	r4, #48	; 0x30
 800dd60:	d0a5      	beq.n	800dcae <_strtol_l.constprop.0+0x46>
 800dd62:	230a      	movs	r3, #10
 800dd64:	e7ab      	b.n	800dcbe <_strtol_l.constprop.0+0x56>
 800dd66:	bf00      	nop
 800dd68:	08014751 	.word	0x08014751

0800dd6c <_strtol_r>:
 800dd6c:	f7ff bf7c 	b.w	800dc68 <_strtol_l.constprop.0>

0800dd70 <quorem>:
 800dd70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd74:	6903      	ldr	r3, [r0, #16]
 800dd76:	690c      	ldr	r4, [r1, #16]
 800dd78:	42a3      	cmp	r3, r4
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	f2c0 8081 	blt.w	800de82 <quorem+0x112>
 800dd80:	3c01      	subs	r4, #1
 800dd82:	f101 0814 	add.w	r8, r1, #20
 800dd86:	f100 0514 	add.w	r5, r0, #20
 800dd8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dda0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dda4:	fbb2 f6f3 	udiv	r6, r2, r3
 800dda8:	d331      	bcc.n	800de0e <quorem+0x9e>
 800ddaa:	f04f 0e00 	mov.w	lr, #0
 800ddae:	4640      	mov	r0, r8
 800ddb0:	46ac      	mov	ip, r5
 800ddb2:	46f2      	mov	sl, lr
 800ddb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800ddb8:	b293      	uxth	r3, r2
 800ddba:	fb06 e303 	mla	r3, r6, r3, lr
 800ddbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	ebaa 0303 	sub.w	r3, sl, r3
 800ddc8:	f8dc a000 	ldr.w	sl, [ip]
 800ddcc:	0c12      	lsrs	r2, r2, #16
 800ddce:	fa13 f38a 	uxtah	r3, r3, sl
 800ddd2:	fb06 e202 	mla	r2, r6, r2, lr
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	9b00      	ldr	r3, [sp, #0]
 800ddda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ddde:	b292      	uxth	r2, r2
 800dde0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dde4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dde8:	f8bd 3000 	ldrh.w	r3, [sp]
 800ddec:	4581      	cmp	r9, r0
 800ddee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddf2:	f84c 3b04 	str.w	r3, [ip], #4
 800ddf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ddfa:	d2db      	bcs.n	800ddb4 <quorem+0x44>
 800ddfc:	f855 300b 	ldr.w	r3, [r5, fp]
 800de00:	b92b      	cbnz	r3, 800de0e <quorem+0x9e>
 800de02:	9b01      	ldr	r3, [sp, #4]
 800de04:	3b04      	subs	r3, #4
 800de06:	429d      	cmp	r5, r3
 800de08:	461a      	mov	r2, r3
 800de0a:	d32e      	bcc.n	800de6a <quorem+0xfa>
 800de0c:	613c      	str	r4, [r7, #16]
 800de0e:	4638      	mov	r0, r7
 800de10:	f001 fc90 	bl	800f734 <__mcmp>
 800de14:	2800      	cmp	r0, #0
 800de16:	db24      	blt.n	800de62 <quorem+0xf2>
 800de18:	3601      	adds	r6, #1
 800de1a:	4628      	mov	r0, r5
 800de1c:	f04f 0c00 	mov.w	ip, #0
 800de20:	f858 2b04 	ldr.w	r2, [r8], #4
 800de24:	f8d0 e000 	ldr.w	lr, [r0]
 800de28:	b293      	uxth	r3, r2
 800de2a:	ebac 0303 	sub.w	r3, ip, r3
 800de2e:	0c12      	lsrs	r2, r2, #16
 800de30:	fa13 f38e 	uxtah	r3, r3, lr
 800de34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de42:	45c1      	cmp	r9, r8
 800de44:	f840 3b04 	str.w	r3, [r0], #4
 800de48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de4c:	d2e8      	bcs.n	800de20 <quorem+0xb0>
 800de4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de56:	b922      	cbnz	r2, 800de62 <quorem+0xf2>
 800de58:	3b04      	subs	r3, #4
 800de5a:	429d      	cmp	r5, r3
 800de5c:	461a      	mov	r2, r3
 800de5e:	d30a      	bcc.n	800de76 <quorem+0x106>
 800de60:	613c      	str	r4, [r7, #16]
 800de62:	4630      	mov	r0, r6
 800de64:	b003      	add	sp, #12
 800de66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6a:	6812      	ldr	r2, [r2, #0]
 800de6c:	3b04      	subs	r3, #4
 800de6e:	2a00      	cmp	r2, #0
 800de70:	d1cc      	bne.n	800de0c <quorem+0x9c>
 800de72:	3c01      	subs	r4, #1
 800de74:	e7c7      	b.n	800de06 <quorem+0x96>
 800de76:	6812      	ldr	r2, [r2, #0]
 800de78:	3b04      	subs	r3, #4
 800de7a:	2a00      	cmp	r2, #0
 800de7c:	d1f0      	bne.n	800de60 <quorem+0xf0>
 800de7e:	3c01      	subs	r4, #1
 800de80:	e7eb      	b.n	800de5a <quorem+0xea>
 800de82:	2000      	movs	r0, #0
 800de84:	e7ee      	b.n	800de64 <quorem+0xf4>
	...

0800de88 <_dtoa_r>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	ed2d 8b04 	vpush	{d8-d9}
 800de90:	ec57 6b10 	vmov	r6, r7, d0
 800de94:	b093      	sub	sp, #76	; 0x4c
 800de96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de9c:	9106      	str	r1, [sp, #24]
 800de9e:	ee10 aa10 	vmov	sl, s0
 800dea2:	4604      	mov	r4, r0
 800dea4:	9209      	str	r2, [sp, #36]	; 0x24
 800dea6:	930c      	str	r3, [sp, #48]	; 0x30
 800dea8:	46bb      	mov	fp, r7
 800deaa:	b975      	cbnz	r5, 800deca <_dtoa_r+0x42>
 800deac:	2010      	movs	r0, #16
 800deae:	f001 f94d 	bl	800f14c <malloc>
 800deb2:	4602      	mov	r2, r0
 800deb4:	6260      	str	r0, [r4, #36]	; 0x24
 800deb6:	b920      	cbnz	r0, 800dec2 <_dtoa_r+0x3a>
 800deb8:	4ba7      	ldr	r3, [pc, #668]	; (800e158 <_dtoa_r+0x2d0>)
 800deba:	21ea      	movs	r1, #234	; 0xea
 800debc:	48a7      	ldr	r0, [pc, #668]	; (800e15c <_dtoa_r+0x2d4>)
 800debe:	f002 f8b3 	bl	8010028 <__assert_func>
 800dec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dec6:	6005      	str	r5, [r0, #0]
 800dec8:	60c5      	str	r5, [r0, #12]
 800deca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800decc:	6819      	ldr	r1, [r3, #0]
 800dece:	b151      	cbz	r1, 800dee6 <_dtoa_r+0x5e>
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	604a      	str	r2, [r1, #4]
 800ded4:	2301      	movs	r3, #1
 800ded6:	4093      	lsls	r3, r2
 800ded8:	608b      	str	r3, [r1, #8]
 800deda:	4620      	mov	r0, r4
 800dedc:	f001 f99e 	bl	800f21c <_Bfree>
 800dee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	1e3b      	subs	r3, r7, #0
 800dee8:	bfaa      	itet	ge
 800deea:	2300      	movge	r3, #0
 800deec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800def0:	f8c8 3000 	strge.w	r3, [r8]
 800def4:	4b9a      	ldr	r3, [pc, #616]	; (800e160 <_dtoa_r+0x2d8>)
 800def6:	bfbc      	itt	lt
 800def8:	2201      	movlt	r2, #1
 800defa:	f8c8 2000 	strlt.w	r2, [r8]
 800defe:	ea33 030b 	bics.w	r3, r3, fp
 800df02:	d11b      	bne.n	800df3c <_dtoa_r+0xb4>
 800df04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df06:	f242 730f 	movw	r3, #9999	; 0x270f
 800df0a:	6013      	str	r3, [r2, #0]
 800df0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df10:	4333      	orrs	r3, r6
 800df12:	f000 8592 	beq.w	800ea3a <_dtoa_r+0xbb2>
 800df16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df18:	b963      	cbnz	r3, 800df34 <_dtoa_r+0xac>
 800df1a:	4b92      	ldr	r3, [pc, #584]	; (800e164 <_dtoa_r+0x2dc>)
 800df1c:	e022      	b.n	800df64 <_dtoa_r+0xdc>
 800df1e:	4b92      	ldr	r3, [pc, #584]	; (800e168 <_dtoa_r+0x2e0>)
 800df20:	9301      	str	r3, [sp, #4]
 800df22:	3308      	adds	r3, #8
 800df24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df26:	6013      	str	r3, [r2, #0]
 800df28:	9801      	ldr	r0, [sp, #4]
 800df2a:	b013      	add	sp, #76	; 0x4c
 800df2c:	ecbd 8b04 	vpop	{d8-d9}
 800df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df34:	4b8b      	ldr	r3, [pc, #556]	; (800e164 <_dtoa_r+0x2dc>)
 800df36:	9301      	str	r3, [sp, #4]
 800df38:	3303      	adds	r3, #3
 800df3a:	e7f3      	b.n	800df24 <_dtoa_r+0x9c>
 800df3c:	2200      	movs	r2, #0
 800df3e:	2300      	movs	r3, #0
 800df40:	4650      	mov	r0, sl
 800df42:	4659      	mov	r1, fp
 800df44:	f7f2 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800df48:	ec4b ab19 	vmov	d9, sl, fp
 800df4c:	4680      	mov	r8, r0
 800df4e:	b158      	cbz	r0, 800df68 <_dtoa_r+0xe0>
 800df50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df52:	2301      	movs	r3, #1
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 856b 	beq.w	800ea34 <_dtoa_r+0xbac>
 800df5e:	4883      	ldr	r0, [pc, #524]	; (800e16c <_dtoa_r+0x2e4>)
 800df60:	6018      	str	r0, [r3, #0]
 800df62:	1e43      	subs	r3, r0, #1
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	e7df      	b.n	800df28 <_dtoa_r+0xa0>
 800df68:	ec4b ab10 	vmov	d0, sl, fp
 800df6c:	aa10      	add	r2, sp, #64	; 0x40
 800df6e:	a911      	add	r1, sp, #68	; 0x44
 800df70:	4620      	mov	r0, r4
 800df72:	f001 fd01 	bl	800f978 <__d2b>
 800df76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800df7a:	ee08 0a10 	vmov	s16, r0
 800df7e:	2d00      	cmp	r5, #0
 800df80:	f000 8084 	beq.w	800e08c <_dtoa_r+0x204>
 800df84:	ee19 3a90 	vmov	r3, s19
 800df88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800df90:	4656      	mov	r6, sl
 800df92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800df96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800df9e:	4b74      	ldr	r3, [pc, #464]	; (800e170 <_dtoa_r+0x2e8>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 f977 	bl	8000298 <__aeabi_dsub>
 800dfaa:	a365      	add	r3, pc, #404	; (adr r3, 800e140 <_dtoa_r+0x2b8>)
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	f7f2 fb2a 	bl	8000608 <__aeabi_dmul>
 800dfb4:	a364      	add	r3, pc, #400	; (adr r3, 800e148 <_dtoa_r+0x2c0>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f7f2 f96f 	bl	800029c <__adddf3>
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	460f      	mov	r7, r1
 800dfc4:	f7f2 fab6 	bl	8000534 <__aeabi_i2d>
 800dfc8:	a361      	add	r3, pc, #388	; (adr r3, 800e150 <_dtoa_r+0x2c8>)
 800dfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfce:	f7f2 fb1b 	bl	8000608 <__aeabi_dmul>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	4639      	mov	r1, r7
 800dfda:	f7f2 f95f 	bl	800029c <__adddf3>
 800dfde:	4606      	mov	r6, r0
 800dfe0:	460f      	mov	r7, r1
 800dfe2:	f7f2 fdc1 	bl	8000b68 <__aeabi_d2iz>
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	9000      	str	r0, [sp, #0]
 800dfea:	2300      	movs	r3, #0
 800dfec:	4630      	mov	r0, r6
 800dfee:	4639      	mov	r1, r7
 800dff0:	f7f2 fd7c 	bl	8000aec <__aeabi_dcmplt>
 800dff4:	b150      	cbz	r0, 800e00c <_dtoa_r+0x184>
 800dff6:	9800      	ldr	r0, [sp, #0]
 800dff8:	f7f2 fa9c 	bl	8000534 <__aeabi_i2d>
 800dffc:	4632      	mov	r2, r6
 800dffe:	463b      	mov	r3, r7
 800e000:	f7f2 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800e004:	b910      	cbnz	r0, 800e00c <_dtoa_r+0x184>
 800e006:	9b00      	ldr	r3, [sp, #0]
 800e008:	3b01      	subs	r3, #1
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	9b00      	ldr	r3, [sp, #0]
 800e00e:	2b16      	cmp	r3, #22
 800e010:	d85a      	bhi.n	800e0c8 <_dtoa_r+0x240>
 800e012:	9a00      	ldr	r2, [sp, #0]
 800e014:	4b57      	ldr	r3, [pc, #348]	; (800e174 <_dtoa_r+0x2ec>)
 800e016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	ec51 0b19 	vmov	r0, r1, d9
 800e022:	f7f2 fd63 	bl	8000aec <__aeabi_dcmplt>
 800e026:	2800      	cmp	r0, #0
 800e028:	d050      	beq.n	800e0cc <_dtoa_r+0x244>
 800e02a:	9b00      	ldr	r3, [sp, #0]
 800e02c:	3b01      	subs	r3, #1
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	2300      	movs	r3, #0
 800e032:	930b      	str	r3, [sp, #44]	; 0x2c
 800e034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e036:	1b5d      	subs	r5, r3, r5
 800e038:	1e6b      	subs	r3, r5, #1
 800e03a:	9305      	str	r3, [sp, #20]
 800e03c:	bf45      	ittet	mi
 800e03e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e042:	9304      	strmi	r3, [sp, #16]
 800e044:	2300      	movpl	r3, #0
 800e046:	2300      	movmi	r3, #0
 800e048:	bf4c      	ite	mi
 800e04a:	9305      	strmi	r3, [sp, #20]
 800e04c:	9304      	strpl	r3, [sp, #16]
 800e04e:	9b00      	ldr	r3, [sp, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	db3d      	blt.n	800e0d0 <_dtoa_r+0x248>
 800e054:	9b05      	ldr	r3, [sp, #20]
 800e056:	9a00      	ldr	r2, [sp, #0]
 800e058:	920a      	str	r2, [sp, #40]	; 0x28
 800e05a:	4413      	add	r3, r2
 800e05c:	9305      	str	r3, [sp, #20]
 800e05e:	2300      	movs	r3, #0
 800e060:	9307      	str	r3, [sp, #28]
 800e062:	9b06      	ldr	r3, [sp, #24]
 800e064:	2b09      	cmp	r3, #9
 800e066:	f200 8089 	bhi.w	800e17c <_dtoa_r+0x2f4>
 800e06a:	2b05      	cmp	r3, #5
 800e06c:	bfc4      	itt	gt
 800e06e:	3b04      	subgt	r3, #4
 800e070:	9306      	strgt	r3, [sp, #24]
 800e072:	9b06      	ldr	r3, [sp, #24]
 800e074:	f1a3 0302 	sub.w	r3, r3, #2
 800e078:	bfcc      	ite	gt
 800e07a:	2500      	movgt	r5, #0
 800e07c:	2501      	movle	r5, #1
 800e07e:	2b03      	cmp	r3, #3
 800e080:	f200 8087 	bhi.w	800e192 <_dtoa_r+0x30a>
 800e084:	e8df f003 	tbb	[pc, r3]
 800e088:	59383a2d 	.word	0x59383a2d
 800e08c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e090:	441d      	add	r5, r3
 800e092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e096:	2b20      	cmp	r3, #32
 800e098:	bfc1      	itttt	gt
 800e09a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e09e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e0a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e0a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0aa:	bfda      	itte	le
 800e0ac:	f1c3 0320 	rsble	r3, r3, #32
 800e0b0:	fa06 f003 	lslle.w	r0, r6, r3
 800e0b4:	4318      	orrgt	r0, r3
 800e0b6:	f7f2 fa2d 	bl	8000514 <__aeabi_ui2d>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	4606      	mov	r6, r0
 800e0be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e0c2:	3d01      	subs	r5, #1
 800e0c4:	930e      	str	r3, [sp, #56]	; 0x38
 800e0c6:	e76a      	b.n	800df9e <_dtoa_r+0x116>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e7b2      	b.n	800e032 <_dtoa_r+0x1aa>
 800e0cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800e0ce:	e7b1      	b.n	800e034 <_dtoa_r+0x1ac>
 800e0d0:	9b04      	ldr	r3, [sp, #16]
 800e0d2:	9a00      	ldr	r2, [sp, #0]
 800e0d4:	1a9b      	subs	r3, r3, r2
 800e0d6:	9304      	str	r3, [sp, #16]
 800e0d8:	4253      	negs	r3, r2
 800e0da:	9307      	str	r3, [sp, #28]
 800e0dc:	2300      	movs	r3, #0
 800e0de:	930a      	str	r3, [sp, #40]	; 0x28
 800e0e0:	e7bf      	b.n	800e062 <_dtoa_r+0x1da>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	9308      	str	r3, [sp, #32]
 800e0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	dc55      	bgt.n	800e198 <_dtoa_r+0x310>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e0f6:	e00c      	b.n	800e112 <_dtoa_r+0x28a>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e7f3      	b.n	800e0e4 <_dtoa_r+0x25c>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e100:	9308      	str	r3, [sp, #32]
 800e102:	9b00      	ldr	r3, [sp, #0]
 800e104:	4413      	add	r3, r2
 800e106:	9302      	str	r3, [sp, #8]
 800e108:	3301      	adds	r3, #1
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	9303      	str	r3, [sp, #12]
 800e10e:	bfb8      	it	lt
 800e110:	2301      	movlt	r3, #1
 800e112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e114:	2200      	movs	r2, #0
 800e116:	6042      	str	r2, [r0, #4]
 800e118:	2204      	movs	r2, #4
 800e11a:	f102 0614 	add.w	r6, r2, #20
 800e11e:	429e      	cmp	r6, r3
 800e120:	6841      	ldr	r1, [r0, #4]
 800e122:	d93d      	bls.n	800e1a0 <_dtoa_r+0x318>
 800e124:	4620      	mov	r0, r4
 800e126:	f001 f839 	bl	800f19c <_Balloc>
 800e12a:	9001      	str	r0, [sp, #4]
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d13b      	bne.n	800e1a8 <_dtoa_r+0x320>
 800e130:	4b11      	ldr	r3, [pc, #68]	; (800e178 <_dtoa_r+0x2f0>)
 800e132:	4602      	mov	r2, r0
 800e134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e138:	e6c0      	b.n	800debc <_dtoa_r+0x34>
 800e13a:	2301      	movs	r3, #1
 800e13c:	e7df      	b.n	800e0fe <_dtoa_r+0x276>
 800e13e:	bf00      	nop
 800e140:	636f4361 	.word	0x636f4361
 800e144:	3fd287a7 	.word	0x3fd287a7
 800e148:	8b60c8b3 	.word	0x8b60c8b3
 800e14c:	3fc68a28 	.word	0x3fc68a28
 800e150:	509f79fb 	.word	0x509f79fb
 800e154:	3fd34413 	.word	0x3fd34413
 800e158:	0801485e 	.word	0x0801485e
 800e15c:	08014875 	.word	0x08014875
 800e160:	7ff00000 	.word	0x7ff00000
 800e164:	0801485a 	.word	0x0801485a
 800e168:	08014851 	.word	0x08014851
 800e16c:	080146d5 	.word	0x080146d5
 800e170:	3ff80000 	.word	0x3ff80000
 800e174:	080149e0 	.word	0x080149e0
 800e178:	080148d0 	.word	0x080148d0
 800e17c:	2501      	movs	r5, #1
 800e17e:	2300      	movs	r3, #0
 800e180:	9306      	str	r3, [sp, #24]
 800e182:	9508      	str	r5, [sp, #32]
 800e184:	f04f 33ff 	mov.w	r3, #4294967295
 800e188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e18c:	2200      	movs	r2, #0
 800e18e:	2312      	movs	r3, #18
 800e190:	e7b0      	b.n	800e0f4 <_dtoa_r+0x26c>
 800e192:	2301      	movs	r3, #1
 800e194:	9308      	str	r3, [sp, #32]
 800e196:	e7f5      	b.n	800e184 <_dtoa_r+0x2fc>
 800e198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e19a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e19e:	e7b8      	b.n	800e112 <_dtoa_r+0x28a>
 800e1a0:	3101      	adds	r1, #1
 800e1a2:	6041      	str	r1, [r0, #4]
 800e1a4:	0052      	lsls	r2, r2, #1
 800e1a6:	e7b8      	b.n	800e11a <_dtoa_r+0x292>
 800e1a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1aa:	9a01      	ldr	r2, [sp, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	2b0e      	cmp	r3, #14
 800e1b2:	f200 809d 	bhi.w	800e2f0 <_dtoa_r+0x468>
 800e1b6:	2d00      	cmp	r5, #0
 800e1b8:	f000 809a 	beq.w	800e2f0 <_dtoa_r+0x468>
 800e1bc:	9b00      	ldr	r3, [sp, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	dd32      	ble.n	800e228 <_dtoa_r+0x3a0>
 800e1c2:	4ab7      	ldr	r2, [pc, #732]	; (800e4a0 <_dtoa_r+0x618>)
 800e1c4:	f003 030f 	and.w	r3, r3, #15
 800e1c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1d0:	9b00      	ldr	r3, [sp, #0]
 800e1d2:	05d8      	lsls	r0, r3, #23
 800e1d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e1d8:	d516      	bpl.n	800e208 <_dtoa_r+0x380>
 800e1da:	4bb2      	ldr	r3, [pc, #712]	; (800e4a4 <_dtoa_r+0x61c>)
 800e1dc:	ec51 0b19 	vmov	r0, r1, d9
 800e1e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1e4:	f7f2 fb3a 	bl	800085c <__aeabi_ddiv>
 800e1e8:	f007 070f 	and.w	r7, r7, #15
 800e1ec:	4682      	mov	sl, r0
 800e1ee:	468b      	mov	fp, r1
 800e1f0:	2503      	movs	r5, #3
 800e1f2:	4eac      	ldr	r6, [pc, #688]	; (800e4a4 <_dtoa_r+0x61c>)
 800e1f4:	b957      	cbnz	r7, 800e20c <_dtoa_r+0x384>
 800e1f6:	4642      	mov	r2, r8
 800e1f8:	464b      	mov	r3, r9
 800e1fa:	4650      	mov	r0, sl
 800e1fc:	4659      	mov	r1, fp
 800e1fe:	f7f2 fb2d 	bl	800085c <__aeabi_ddiv>
 800e202:	4682      	mov	sl, r0
 800e204:	468b      	mov	fp, r1
 800e206:	e028      	b.n	800e25a <_dtoa_r+0x3d2>
 800e208:	2502      	movs	r5, #2
 800e20a:	e7f2      	b.n	800e1f2 <_dtoa_r+0x36a>
 800e20c:	07f9      	lsls	r1, r7, #31
 800e20e:	d508      	bpl.n	800e222 <_dtoa_r+0x39a>
 800e210:	4640      	mov	r0, r8
 800e212:	4649      	mov	r1, r9
 800e214:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e218:	f7f2 f9f6 	bl	8000608 <__aeabi_dmul>
 800e21c:	3501      	adds	r5, #1
 800e21e:	4680      	mov	r8, r0
 800e220:	4689      	mov	r9, r1
 800e222:	107f      	asrs	r7, r7, #1
 800e224:	3608      	adds	r6, #8
 800e226:	e7e5      	b.n	800e1f4 <_dtoa_r+0x36c>
 800e228:	f000 809b 	beq.w	800e362 <_dtoa_r+0x4da>
 800e22c:	9b00      	ldr	r3, [sp, #0]
 800e22e:	4f9d      	ldr	r7, [pc, #628]	; (800e4a4 <_dtoa_r+0x61c>)
 800e230:	425e      	negs	r6, r3
 800e232:	4b9b      	ldr	r3, [pc, #620]	; (800e4a0 <_dtoa_r+0x618>)
 800e234:	f006 020f 	and.w	r2, r6, #15
 800e238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	ec51 0b19 	vmov	r0, r1, d9
 800e244:	f7f2 f9e0 	bl	8000608 <__aeabi_dmul>
 800e248:	1136      	asrs	r6, r6, #4
 800e24a:	4682      	mov	sl, r0
 800e24c:	468b      	mov	fp, r1
 800e24e:	2300      	movs	r3, #0
 800e250:	2502      	movs	r5, #2
 800e252:	2e00      	cmp	r6, #0
 800e254:	d17a      	bne.n	800e34c <_dtoa_r+0x4c4>
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1d3      	bne.n	800e202 <_dtoa_r+0x37a>
 800e25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 8082 	beq.w	800e366 <_dtoa_r+0x4de>
 800e262:	4b91      	ldr	r3, [pc, #580]	; (800e4a8 <_dtoa_r+0x620>)
 800e264:	2200      	movs	r2, #0
 800e266:	4650      	mov	r0, sl
 800e268:	4659      	mov	r1, fp
 800e26a:	f7f2 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d079      	beq.n	800e366 <_dtoa_r+0x4de>
 800e272:	9b03      	ldr	r3, [sp, #12]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d076      	beq.n	800e366 <_dtoa_r+0x4de>
 800e278:	9b02      	ldr	r3, [sp, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	dd36      	ble.n	800e2ec <_dtoa_r+0x464>
 800e27e:	9b00      	ldr	r3, [sp, #0]
 800e280:	4650      	mov	r0, sl
 800e282:	4659      	mov	r1, fp
 800e284:	1e5f      	subs	r7, r3, #1
 800e286:	2200      	movs	r2, #0
 800e288:	4b88      	ldr	r3, [pc, #544]	; (800e4ac <_dtoa_r+0x624>)
 800e28a:	f7f2 f9bd 	bl	8000608 <__aeabi_dmul>
 800e28e:	9e02      	ldr	r6, [sp, #8]
 800e290:	4682      	mov	sl, r0
 800e292:	468b      	mov	fp, r1
 800e294:	3501      	adds	r5, #1
 800e296:	4628      	mov	r0, r5
 800e298:	f7f2 f94c 	bl	8000534 <__aeabi_i2d>
 800e29c:	4652      	mov	r2, sl
 800e29e:	465b      	mov	r3, fp
 800e2a0:	f7f2 f9b2 	bl	8000608 <__aeabi_dmul>
 800e2a4:	4b82      	ldr	r3, [pc, #520]	; (800e4b0 <_dtoa_r+0x628>)
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f7f1 fff8 	bl	800029c <__adddf3>
 800e2ac:	46d0      	mov	r8, sl
 800e2ae:	46d9      	mov	r9, fp
 800e2b0:	4682      	mov	sl, r0
 800e2b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e2b6:	2e00      	cmp	r6, #0
 800e2b8:	d158      	bne.n	800e36c <_dtoa_r+0x4e4>
 800e2ba:	4b7e      	ldr	r3, [pc, #504]	; (800e4b4 <_dtoa_r+0x62c>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	4640      	mov	r0, r8
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	f7f1 ffe9 	bl	8000298 <__aeabi_dsub>
 800e2c6:	4652      	mov	r2, sl
 800e2c8:	465b      	mov	r3, fp
 800e2ca:	4680      	mov	r8, r0
 800e2cc:	4689      	mov	r9, r1
 800e2ce:	f7f2 fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	f040 8295 	bne.w	800e802 <_dtoa_r+0x97a>
 800e2d8:	4652      	mov	r2, sl
 800e2da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e2de:	4640      	mov	r0, r8
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	f7f2 fc03 	bl	8000aec <__aeabi_dcmplt>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f040 8289 	bne.w	800e7fe <_dtoa_r+0x976>
 800e2ec:	ec5b ab19 	vmov	sl, fp, d9
 800e2f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f2c0 8148 	blt.w	800e588 <_dtoa_r+0x700>
 800e2f8:	9a00      	ldr	r2, [sp, #0]
 800e2fa:	2a0e      	cmp	r2, #14
 800e2fc:	f300 8144 	bgt.w	800e588 <_dtoa_r+0x700>
 800e300:	4b67      	ldr	r3, [pc, #412]	; (800e4a0 <_dtoa_r+0x618>)
 800e302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e306:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f280 80d5 	bge.w	800e4bc <_dtoa_r+0x634>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	f300 80d1 	bgt.w	800e4bc <_dtoa_r+0x634>
 800e31a:	f040 826f 	bne.w	800e7fc <_dtoa_r+0x974>
 800e31e:	4b65      	ldr	r3, [pc, #404]	; (800e4b4 <_dtoa_r+0x62c>)
 800e320:	2200      	movs	r2, #0
 800e322:	4640      	mov	r0, r8
 800e324:	4649      	mov	r1, r9
 800e326:	f7f2 f96f 	bl	8000608 <__aeabi_dmul>
 800e32a:	4652      	mov	r2, sl
 800e32c:	465b      	mov	r3, fp
 800e32e:	f7f2 fbf1 	bl	8000b14 <__aeabi_dcmpge>
 800e332:	9e03      	ldr	r6, [sp, #12]
 800e334:	4637      	mov	r7, r6
 800e336:	2800      	cmp	r0, #0
 800e338:	f040 8245 	bne.w	800e7c6 <_dtoa_r+0x93e>
 800e33c:	9d01      	ldr	r5, [sp, #4]
 800e33e:	2331      	movs	r3, #49	; 0x31
 800e340:	f805 3b01 	strb.w	r3, [r5], #1
 800e344:	9b00      	ldr	r3, [sp, #0]
 800e346:	3301      	adds	r3, #1
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	e240      	b.n	800e7ce <_dtoa_r+0x946>
 800e34c:	07f2      	lsls	r2, r6, #31
 800e34e:	d505      	bpl.n	800e35c <_dtoa_r+0x4d4>
 800e350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e354:	f7f2 f958 	bl	8000608 <__aeabi_dmul>
 800e358:	3501      	adds	r5, #1
 800e35a:	2301      	movs	r3, #1
 800e35c:	1076      	asrs	r6, r6, #1
 800e35e:	3708      	adds	r7, #8
 800e360:	e777      	b.n	800e252 <_dtoa_r+0x3ca>
 800e362:	2502      	movs	r5, #2
 800e364:	e779      	b.n	800e25a <_dtoa_r+0x3d2>
 800e366:	9f00      	ldr	r7, [sp, #0]
 800e368:	9e03      	ldr	r6, [sp, #12]
 800e36a:	e794      	b.n	800e296 <_dtoa_r+0x40e>
 800e36c:	9901      	ldr	r1, [sp, #4]
 800e36e:	4b4c      	ldr	r3, [pc, #304]	; (800e4a0 <_dtoa_r+0x618>)
 800e370:	4431      	add	r1, r6
 800e372:	910d      	str	r1, [sp, #52]	; 0x34
 800e374:	9908      	ldr	r1, [sp, #32]
 800e376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e37a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e37e:	2900      	cmp	r1, #0
 800e380:	d043      	beq.n	800e40a <_dtoa_r+0x582>
 800e382:	494d      	ldr	r1, [pc, #308]	; (800e4b8 <_dtoa_r+0x630>)
 800e384:	2000      	movs	r0, #0
 800e386:	f7f2 fa69 	bl	800085c <__aeabi_ddiv>
 800e38a:	4652      	mov	r2, sl
 800e38c:	465b      	mov	r3, fp
 800e38e:	f7f1 ff83 	bl	8000298 <__aeabi_dsub>
 800e392:	9d01      	ldr	r5, [sp, #4]
 800e394:	4682      	mov	sl, r0
 800e396:	468b      	mov	fp, r1
 800e398:	4649      	mov	r1, r9
 800e39a:	4640      	mov	r0, r8
 800e39c:	f7f2 fbe4 	bl	8000b68 <__aeabi_d2iz>
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	f7f2 f8c7 	bl	8000534 <__aeabi_i2d>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	4649      	mov	r1, r9
 800e3ae:	f7f1 ff73 	bl	8000298 <__aeabi_dsub>
 800e3b2:	3630      	adds	r6, #48	; 0x30
 800e3b4:	f805 6b01 	strb.w	r6, [r5], #1
 800e3b8:	4652      	mov	r2, sl
 800e3ba:	465b      	mov	r3, fp
 800e3bc:	4680      	mov	r8, r0
 800e3be:	4689      	mov	r9, r1
 800e3c0:	f7f2 fb94 	bl	8000aec <__aeabi_dcmplt>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d163      	bne.n	800e490 <_dtoa_r+0x608>
 800e3c8:	4642      	mov	r2, r8
 800e3ca:	464b      	mov	r3, r9
 800e3cc:	4936      	ldr	r1, [pc, #216]	; (800e4a8 <_dtoa_r+0x620>)
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	f7f1 ff62 	bl	8000298 <__aeabi_dsub>
 800e3d4:	4652      	mov	r2, sl
 800e3d6:	465b      	mov	r3, fp
 800e3d8:	f7f2 fb88 	bl	8000aec <__aeabi_dcmplt>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	f040 80b5 	bne.w	800e54c <_dtoa_r+0x6c4>
 800e3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3e4:	429d      	cmp	r5, r3
 800e3e6:	d081      	beq.n	800e2ec <_dtoa_r+0x464>
 800e3e8:	4b30      	ldr	r3, [pc, #192]	; (800e4ac <_dtoa_r+0x624>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	4650      	mov	r0, sl
 800e3ee:	4659      	mov	r1, fp
 800e3f0:	f7f2 f90a 	bl	8000608 <__aeabi_dmul>
 800e3f4:	4b2d      	ldr	r3, [pc, #180]	; (800e4ac <_dtoa_r+0x624>)
 800e3f6:	4682      	mov	sl, r0
 800e3f8:	468b      	mov	fp, r1
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	4649      	mov	r1, r9
 800e3fe:	2200      	movs	r2, #0
 800e400:	f7f2 f902 	bl	8000608 <__aeabi_dmul>
 800e404:	4680      	mov	r8, r0
 800e406:	4689      	mov	r9, r1
 800e408:	e7c6      	b.n	800e398 <_dtoa_r+0x510>
 800e40a:	4650      	mov	r0, sl
 800e40c:	4659      	mov	r1, fp
 800e40e:	f7f2 f8fb 	bl	8000608 <__aeabi_dmul>
 800e412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e414:	9d01      	ldr	r5, [sp, #4]
 800e416:	930f      	str	r3, [sp, #60]	; 0x3c
 800e418:	4682      	mov	sl, r0
 800e41a:	468b      	mov	fp, r1
 800e41c:	4649      	mov	r1, r9
 800e41e:	4640      	mov	r0, r8
 800e420:	f7f2 fba2 	bl	8000b68 <__aeabi_d2iz>
 800e424:	4606      	mov	r6, r0
 800e426:	f7f2 f885 	bl	8000534 <__aeabi_i2d>
 800e42a:	3630      	adds	r6, #48	; 0x30
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	4640      	mov	r0, r8
 800e432:	4649      	mov	r1, r9
 800e434:	f7f1 ff30 	bl	8000298 <__aeabi_dsub>
 800e438:	f805 6b01 	strb.w	r6, [r5], #1
 800e43c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e43e:	429d      	cmp	r5, r3
 800e440:	4680      	mov	r8, r0
 800e442:	4689      	mov	r9, r1
 800e444:	f04f 0200 	mov.w	r2, #0
 800e448:	d124      	bne.n	800e494 <_dtoa_r+0x60c>
 800e44a:	4b1b      	ldr	r3, [pc, #108]	; (800e4b8 <_dtoa_r+0x630>)
 800e44c:	4650      	mov	r0, sl
 800e44e:	4659      	mov	r1, fp
 800e450:	f7f1 ff24 	bl	800029c <__adddf3>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4640      	mov	r0, r8
 800e45a:	4649      	mov	r1, r9
 800e45c:	f7f2 fb64 	bl	8000b28 <__aeabi_dcmpgt>
 800e460:	2800      	cmp	r0, #0
 800e462:	d173      	bne.n	800e54c <_dtoa_r+0x6c4>
 800e464:	4652      	mov	r2, sl
 800e466:	465b      	mov	r3, fp
 800e468:	4913      	ldr	r1, [pc, #76]	; (800e4b8 <_dtoa_r+0x630>)
 800e46a:	2000      	movs	r0, #0
 800e46c:	f7f1 ff14 	bl	8000298 <__aeabi_dsub>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f2 fb38 	bl	8000aec <__aeabi_dcmplt>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	f43f af35 	beq.w	800e2ec <_dtoa_r+0x464>
 800e482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e484:	1e6b      	subs	r3, r5, #1
 800e486:	930f      	str	r3, [sp, #60]	; 0x3c
 800e488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e48c:	2b30      	cmp	r3, #48	; 0x30
 800e48e:	d0f8      	beq.n	800e482 <_dtoa_r+0x5fa>
 800e490:	9700      	str	r7, [sp, #0]
 800e492:	e049      	b.n	800e528 <_dtoa_r+0x6a0>
 800e494:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <_dtoa_r+0x624>)
 800e496:	f7f2 f8b7 	bl	8000608 <__aeabi_dmul>
 800e49a:	4680      	mov	r8, r0
 800e49c:	4689      	mov	r9, r1
 800e49e:	e7bd      	b.n	800e41c <_dtoa_r+0x594>
 800e4a0:	080149e0 	.word	0x080149e0
 800e4a4:	080149b8 	.word	0x080149b8
 800e4a8:	3ff00000 	.word	0x3ff00000
 800e4ac:	40240000 	.word	0x40240000
 800e4b0:	401c0000 	.word	0x401c0000
 800e4b4:	40140000 	.word	0x40140000
 800e4b8:	3fe00000 	.word	0x3fe00000
 800e4bc:	9d01      	ldr	r5, [sp, #4]
 800e4be:	4656      	mov	r6, sl
 800e4c0:	465f      	mov	r7, fp
 800e4c2:	4642      	mov	r2, r8
 800e4c4:	464b      	mov	r3, r9
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	f7f2 f9c7 	bl	800085c <__aeabi_ddiv>
 800e4ce:	f7f2 fb4b 	bl	8000b68 <__aeabi_d2iz>
 800e4d2:	4682      	mov	sl, r0
 800e4d4:	f7f2 f82e 	bl	8000534 <__aeabi_i2d>
 800e4d8:	4642      	mov	r2, r8
 800e4da:	464b      	mov	r3, r9
 800e4dc:	f7f2 f894 	bl	8000608 <__aeabi_dmul>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e4ec:	f7f1 fed4 	bl	8000298 <__aeabi_dsub>
 800e4f0:	f805 6b01 	strb.w	r6, [r5], #1
 800e4f4:	9e01      	ldr	r6, [sp, #4]
 800e4f6:	9f03      	ldr	r7, [sp, #12]
 800e4f8:	1bae      	subs	r6, r5, r6
 800e4fa:	42b7      	cmp	r7, r6
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	d135      	bne.n	800e56e <_dtoa_r+0x6e6>
 800e502:	f7f1 fecb 	bl	800029c <__adddf3>
 800e506:	4642      	mov	r2, r8
 800e508:	464b      	mov	r3, r9
 800e50a:	4606      	mov	r6, r0
 800e50c:	460f      	mov	r7, r1
 800e50e:	f7f2 fb0b 	bl	8000b28 <__aeabi_dcmpgt>
 800e512:	b9d0      	cbnz	r0, 800e54a <_dtoa_r+0x6c2>
 800e514:	4642      	mov	r2, r8
 800e516:	464b      	mov	r3, r9
 800e518:	4630      	mov	r0, r6
 800e51a:	4639      	mov	r1, r7
 800e51c:	f7f2 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 800e520:	b110      	cbz	r0, 800e528 <_dtoa_r+0x6a0>
 800e522:	f01a 0f01 	tst.w	sl, #1
 800e526:	d110      	bne.n	800e54a <_dtoa_r+0x6c2>
 800e528:	4620      	mov	r0, r4
 800e52a:	ee18 1a10 	vmov	r1, s16
 800e52e:	f000 fe75 	bl	800f21c <_Bfree>
 800e532:	2300      	movs	r3, #0
 800e534:	9800      	ldr	r0, [sp, #0]
 800e536:	702b      	strb	r3, [r5, #0]
 800e538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e53a:	3001      	adds	r0, #1
 800e53c:	6018      	str	r0, [r3, #0]
 800e53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e540:	2b00      	cmp	r3, #0
 800e542:	f43f acf1 	beq.w	800df28 <_dtoa_r+0xa0>
 800e546:	601d      	str	r5, [r3, #0]
 800e548:	e4ee      	b.n	800df28 <_dtoa_r+0xa0>
 800e54a:	9f00      	ldr	r7, [sp, #0]
 800e54c:	462b      	mov	r3, r5
 800e54e:	461d      	mov	r5, r3
 800e550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e554:	2a39      	cmp	r2, #57	; 0x39
 800e556:	d106      	bne.n	800e566 <_dtoa_r+0x6de>
 800e558:	9a01      	ldr	r2, [sp, #4]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d1f7      	bne.n	800e54e <_dtoa_r+0x6c6>
 800e55e:	9901      	ldr	r1, [sp, #4]
 800e560:	2230      	movs	r2, #48	; 0x30
 800e562:	3701      	adds	r7, #1
 800e564:	700a      	strb	r2, [r1, #0]
 800e566:	781a      	ldrb	r2, [r3, #0]
 800e568:	3201      	adds	r2, #1
 800e56a:	701a      	strb	r2, [r3, #0]
 800e56c:	e790      	b.n	800e490 <_dtoa_r+0x608>
 800e56e:	4ba6      	ldr	r3, [pc, #664]	; (800e808 <_dtoa_r+0x980>)
 800e570:	2200      	movs	r2, #0
 800e572:	f7f2 f849 	bl	8000608 <__aeabi_dmul>
 800e576:	2200      	movs	r2, #0
 800e578:	2300      	movs	r3, #0
 800e57a:	4606      	mov	r6, r0
 800e57c:	460f      	mov	r7, r1
 800e57e:	f7f2 faab 	bl	8000ad8 <__aeabi_dcmpeq>
 800e582:	2800      	cmp	r0, #0
 800e584:	d09d      	beq.n	800e4c2 <_dtoa_r+0x63a>
 800e586:	e7cf      	b.n	800e528 <_dtoa_r+0x6a0>
 800e588:	9a08      	ldr	r2, [sp, #32]
 800e58a:	2a00      	cmp	r2, #0
 800e58c:	f000 80d7 	beq.w	800e73e <_dtoa_r+0x8b6>
 800e590:	9a06      	ldr	r2, [sp, #24]
 800e592:	2a01      	cmp	r2, #1
 800e594:	f300 80ba 	bgt.w	800e70c <_dtoa_r+0x884>
 800e598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e59a:	2a00      	cmp	r2, #0
 800e59c:	f000 80b2 	beq.w	800e704 <_dtoa_r+0x87c>
 800e5a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5a4:	9e07      	ldr	r6, [sp, #28]
 800e5a6:	9d04      	ldr	r5, [sp, #16]
 800e5a8:	9a04      	ldr	r2, [sp, #16]
 800e5aa:	441a      	add	r2, r3
 800e5ac:	9204      	str	r2, [sp, #16]
 800e5ae:	9a05      	ldr	r2, [sp, #20]
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	441a      	add	r2, r3
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	9205      	str	r2, [sp, #20]
 800e5b8:	f000 ff32 	bl	800f420 <__i2b>
 800e5bc:	4607      	mov	r7, r0
 800e5be:	2d00      	cmp	r5, #0
 800e5c0:	dd0c      	ble.n	800e5dc <_dtoa_r+0x754>
 800e5c2:	9b05      	ldr	r3, [sp, #20]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	dd09      	ble.n	800e5dc <_dtoa_r+0x754>
 800e5c8:	42ab      	cmp	r3, r5
 800e5ca:	9a04      	ldr	r2, [sp, #16]
 800e5cc:	bfa8      	it	ge
 800e5ce:	462b      	movge	r3, r5
 800e5d0:	1ad2      	subs	r2, r2, r3
 800e5d2:	9204      	str	r2, [sp, #16]
 800e5d4:	9a05      	ldr	r2, [sp, #20]
 800e5d6:	1aed      	subs	r5, r5, r3
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	9305      	str	r3, [sp, #20]
 800e5dc:	9b07      	ldr	r3, [sp, #28]
 800e5de:	b31b      	cbz	r3, 800e628 <_dtoa_r+0x7a0>
 800e5e0:	9b08      	ldr	r3, [sp, #32]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f000 80af 	beq.w	800e746 <_dtoa_r+0x8be>
 800e5e8:	2e00      	cmp	r6, #0
 800e5ea:	dd13      	ble.n	800e614 <_dtoa_r+0x78c>
 800e5ec:	4639      	mov	r1, r7
 800e5ee:	4632      	mov	r2, r6
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	f000 ffd5 	bl	800f5a0 <__pow5mult>
 800e5f6:	ee18 2a10 	vmov	r2, s16
 800e5fa:	4601      	mov	r1, r0
 800e5fc:	4607      	mov	r7, r0
 800e5fe:	4620      	mov	r0, r4
 800e600:	f000 ff24 	bl	800f44c <__multiply>
 800e604:	ee18 1a10 	vmov	r1, s16
 800e608:	4680      	mov	r8, r0
 800e60a:	4620      	mov	r0, r4
 800e60c:	f000 fe06 	bl	800f21c <_Bfree>
 800e610:	ee08 8a10 	vmov	s16, r8
 800e614:	9b07      	ldr	r3, [sp, #28]
 800e616:	1b9a      	subs	r2, r3, r6
 800e618:	d006      	beq.n	800e628 <_dtoa_r+0x7a0>
 800e61a:	ee18 1a10 	vmov	r1, s16
 800e61e:	4620      	mov	r0, r4
 800e620:	f000 ffbe 	bl	800f5a0 <__pow5mult>
 800e624:	ee08 0a10 	vmov	s16, r0
 800e628:	2101      	movs	r1, #1
 800e62a:	4620      	mov	r0, r4
 800e62c:	f000 fef8 	bl	800f420 <__i2b>
 800e630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e632:	2b00      	cmp	r3, #0
 800e634:	4606      	mov	r6, r0
 800e636:	f340 8088 	ble.w	800e74a <_dtoa_r+0x8c2>
 800e63a:	461a      	mov	r2, r3
 800e63c:	4601      	mov	r1, r0
 800e63e:	4620      	mov	r0, r4
 800e640:	f000 ffae 	bl	800f5a0 <__pow5mult>
 800e644:	9b06      	ldr	r3, [sp, #24]
 800e646:	2b01      	cmp	r3, #1
 800e648:	4606      	mov	r6, r0
 800e64a:	f340 8081 	ble.w	800e750 <_dtoa_r+0x8c8>
 800e64e:	f04f 0800 	mov.w	r8, #0
 800e652:	6933      	ldr	r3, [r6, #16]
 800e654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e658:	6918      	ldr	r0, [r3, #16]
 800e65a:	f000 fe91 	bl	800f380 <__hi0bits>
 800e65e:	f1c0 0020 	rsb	r0, r0, #32
 800e662:	9b05      	ldr	r3, [sp, #20]
 800e664:	4418      	add	r0, r3
 800e666:	f010 001f 	ands.w	r0, r0, #31
 800e66a:	f000 8092 	beq.w	800e792 <_dtoa_r+0x90a>
 800e66e:	f1c0 0320 	rsb	r3, r0, #32
 800e672:	2b04      	cmp	r3, #4
 800e674:	f340 808a 	ble.w	800e78c <_dtoa_r+0x904>
 800e678:	f1c0 001c 	rsb	r0, r0, #28
 800e67c:	9b04      	ldr	r3, [sp, #16]
 800e67e:	4403      	add	r3, r0
 800e680:	9304      	str	r3, [sp, #16]
 800e682:	9b05      	ldr	r3, [sp, #20]
 800e684:	4403      	add	r3, r0
 800e686:	4405      	add	r5, r0
 800e688:	9305      	str	r3, [sp, #20]
 800e68a:	9b04      	ldr	r3, [sp, #16]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	dd07      	ble.n	800e6a0 <_dtoa_r+0x818>
 800e690:	ee18 1a10 	vmov	r1, s16
 800e694:	461a      	mov	r2, r3
 800e696:	4620      	mov	r0, r4
 800e698:	f000 ffdc 	bl	800f654 <__lshift>
 800e69c:	ee08 0a10 	vmov	s16, r0
 800e6a0:	9b05      	ldr	r3, [sp, #20]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	dd05      	ble.n	800e6b2 <_dtoa_r+0x82a>
 800e6a6:	4631      	mov	r1, r6
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 ffd2 	bl	800f654 <__lshift>
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d06e      	beq.n	800e796 <_dtoa_r+0x90e>
 800e6b8:	ee18 0a10 	vmov	r0, s16
 800e6bc:	4631      	mov	r1, r6
 800e6be:	f001 f839 	bl	800f734 <__mcmp>
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	da67      	bge.n	800e796 <_dtoa_r+0x90e>
 800e6c6:	9b00      	ldr	r3, [sp, #0]
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	ee18 1a10 	vmov	r1, s16
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	220a      	movs	r2, #10
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 fdc3 	bl	800f260 <__multadd>
 800e6da:	9b08      	ldr	r3, [sp, #32]
 800e6dc:	ee08 0a10 	vmov	s16, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f000 81b1 	beq.w	800ea48 <_dtoa_r+0xbc0>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	4639      	mov	r1, r7
 800e6ea:	220a      	movs	r2, #10
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f000 fdb7 	bl	800f260 <__multadd>
 800e6f2:	9b02      	ldr	r3, [sp, #8]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	f300 808e 	bgt.w	800e818 <_dtoa_r+0x990>
 800e6fc:	9b06      	ldr	r3, [sp, #24]
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	dc51      	bgt.n	800e7a6 <_dtoa_r+0x91e>
 800e702:	e089      	b.n	800e818 <_dtoa_r+0x990>
 800e704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e70a:	e74b      	b.n	800e5a4 <_dtoa_r+0x71c>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	1e5e      	subs	r6, r3, #1
 800e710:	9b07      	ldr	r3, [sp, #28]
 800e712:	42b3      	cmp	r3, r6
 800e714:	bfbf      	itttt	lt
 800e716:	9b07      	ldrlt	r3, [sp, #28]
 800e718:	9607      	strlt	r6, [sp, #28]
 800e71a:	1af2      	sublt	r2, r6, r3
 800e71c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e71e:	bfb6      	itet	lt
 800e720:	189b      	addlt	r3, r3, r2
 800e722:	1b9e      	subge	r6, r3, r6
 800e724:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e726:	9b03      	ldr	r3, [sp, #12]
 800e728:	bfb8      	it	lt
 800e72a:	2600      	movlt	r6, #0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	bfb7      	itett	lt
 800e730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e738:	1a9d      	sublt	r5, r3, r2
 800e73a:	2300      	movlt	r3, #0
 800e73c:	e734      	b.n	800e5a8 <_dtoa_r+0x720>
 800e73e:	9e07      	ldr	r6, [sp, #28]
 800e740:	9d04      	ldr	r5, [sp, #16]
 800e742:	9f08      	ldr	r7, [sp, #32]
 800e744:	e73b      	b.n	800e5be <_dtoa_r+0x736>
 800e746:	9a07      	ldr	r2, [sp, #28]
 800e748:	e767      	b.n	800e61a <_dtoa_r+0x792>
 800e74a:	9b06      	ldr	r3, [sp, #24]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	dc18      	bgt.n	800e782 <_dtoa_r+0x8fa>
 800e750:	f1ba 0f00 	cmp.w	sl, #0
 800e754:	d115      	bne.n	800e782 <_dtoa_r+0x8fa>
 800e756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e75a:	b993      	cbnz	r3, 800e782 <_dtoa_r+0x8fa>
 800e75c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e760:	0d1b      	lsrs	r3, r3, #20
 800e762:	051b      	lsls	r3, r3, #20
 800e764:	b183      	cbz	r3, 800e788 <_dtoa_r+0x900>
 800e766:	9b04      	ldr	r3, [sp, #16]
 800e768:	3301      	adds	r3, #1
 800e76a:	9304      	str	r3, [sp, #16]
 800e76c:	9b05      	ldr	r3, [sp, #20]
 800e76e:	3301      	adds	r3, #1
 800e770:	9305      	str	r3, [sp, #20]
 800e772:	f04f 0801 	mov.w	r8, #1
 800e776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f47f af6a 	bne.w	800e652 <_dtoa_r+0x7ca>
 800e77e:	2001      	movs	r0, #1
 800e780:	e76f      	b.n	800e662 <_dtoa_r+0x7da>
 800e782:	f04f 0800 	mov.w	r8, #0
 800e786:	e7f6      	b.n	800e776 <_dtoa_r+0x8ee>
 800e788:	4698      	mov	r8, r3
 800e78a:	e7f4      	b.n	800e776 <_dtoa_r+0x8ee>
 800e78c:	f43f af7d 	beq.w	800e68a <_dtoa_r+0x802>
 800e790:	4618      	mov	r0, r3
 800e792:	301c      	adds	r0, #28
 800e794:	e772      	b.n	800e67c <_dtoa_r+0x7f4>
 800e796:	9b03      	ldr	r3, [sp, #12]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	dc37      	bgt.n	800e80c <_dtoa_r+0x984>
 800e79c:	9b06      	ldr	r3, [sp, #24]
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	dd34      	ble.n	800e80c <_dtoa_r+0x984>
 800e7a2:	9b03      	ldr	r3, [sp, #12]
 800e7a4:	9302      	str	r3, [sp, #8]
 800e7a6:	9b02      	ldr	r3, [sp, #8]
 800e7a8:	b96b      	cbnz	r3, 800e7c6 <_dtoa_r+0x93e>
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	2205      	movs	r2, #5
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f000 fd56 	bl	800f260 <__multadd>
 800e7b4:	4601      	mov	r1, r0
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	ee18 0a10 	vmov	r0, s16
 800e7bc:	f000 ffba 	bl	800f734 <__mcmp>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	f73f adbb 	bgt.w	800e33c <_dtoa_r+0x4b4>
 800e7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c8:	9d01      	ldr	r5, [sp, #4]
 800e7ca:	43db      	mvns	r3, r3
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	f04f 0800 	mov.w	r8, #0
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	f000 fd21 	bl	800f21c <_Bfree>
 800e7da:	2f00      	cmp	r7, #0
 800e7dc:	f43f aea4 	beq.w	800e528 <_dtoa_r+0x6a0>
 800e7e0:	f1b8 0f00 	cmp.w	r8, #0
 800e7e4:	d005      	beq.n	800e7f2 <_dtoa_r+0x96a>
 800e7e6:	45b8      	cmp	r8, r7
 800e7e8:	d003      	beq.n	800e7f2 <_dtoa_r+0x96a>
 800e7ea:	4641      	mov	r1, r8
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	f000 fd15 	bl	800f21c <_Bfree>
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	f000 fd11 	bl	800f21c <_Bfree>
 800e7fa:	e695      	b.n	800e528 <_dtoa_r+0x6a0>
 800e7fc:	2600      	movs	r6, #0
 800e7fe:	4637      	mov	r7, r6
 800e800:	e7e1      	b.n	800e7c6 <_dtoa_r+0x93e>
 800e802:	9700      	str	r7, [sp, #0]
 800e804:	4637      	mov	r7, r6
 800e806:	e599      	b.n	800e33c <_dtoa_r+0x4b4>
 800e808:	40240000 	.word	0x40240000
 800e80c:	9b08      	ldr	r3, [sp, #32]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 80ca 	beq.w	800e9a8 <_dtoa_r+0xb20>
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	9302      	str	r3, [sp, #8]
 800e818:	2d00      	cmp	r5, #0
 800e81a:	dd05      	ble.n	800e828 <_dtoa_r+0x9a0>
 800e81c:	4639      	mov	r1, r7
 800e81e:	462a      	mov	r2, r5
 800e820:	4620      	mov	r0, r4
 800e822:	f000 ff17 	bl	800f654 <__lshift>
 800e826:	4607      	mov	r7, r0
 800e828:	f1b8 0f00 	cmp.w	r8, #0
 800e82c:	d05b      	beq.n	800e8e6 <_dtoa_r+0xa5e>
 800e82e:	6879      	ldr	r1, [r7, #4]
 800e830:	4620      	mov	r0, r4
 800e832:	f000 fcb3 	bl	800f19c <_Balloc>
 800e836:	4605      	mov	r5, r0
 800e838:	b928      	cbnz	r0, 800e846 <_dtoa_r+0x9be>
 800e83a:	4b87      	ldr	r3, [pc, #540]	; (800ea58 <_dtoa_r+0xbd0>)
 800e83c:	4602      	mov	r2, r0
 800e83e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e842:	f7ff bb3b 	b.w	800debc <_dtoa_r+0x34>
 800e846:	693a      	ldr	r2, [r7, #16]
 800e848:	3202      	adds	r2, #2
 800e84a:	0092      	lsls	r2, r2, #2
 800e84c:	f107 010c 	add.w	r1, r7, #12
 800e850:	300c      	adds	r0, #12
 800e852:	f000 fc95 	bl	800f180 <memcpy>
 800e856:	2201      	movs	r2, #1
 800e858:	4629      	mov	r1, r5
 800e85a:	4620      	mov	r0, r4
 800e85c:	f000 fefa 	bl	800f654 <__lshift>
 800e860:	9b01      	ldr	r3, [sp, #4]
 800e862:	f103 0901 	add.w	r9, r3, #1
 800e866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e86a:	4413      	add	r3, r2
 800e86c:	9305      	str	r3, [sp, #20]
 800e86e:	f00a 0301 	and.w	r3, sl, #1
 800e872:	46b8      	mov	r8, r7
 800e874:	9304      	str	r3, [sp, #16]
 800e876:	4607      	mov	r7, r0
 800e878:	4631      	mov	r1, r6
 800e87a:	ee18 0a10 	vmov	r0, s16
 800e87e:	f7ff fa77 	bl	800dd70 <quorem>
 800e882:	4641      	mov	r1, r8
 800e884:	9002      	str	r0, [sp, #8]
 800e886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e88a:	ee18 0a10 	vmov	r0, s16
 800e88e:	f000 ff51 	bl	800f734 <__mcmp>
 800e892:	463a      	mov	r2, r7
 800e894:	9003      	str	r0, [sp, #12]
 800e896:	4631      	mov	r1, r6
 800e898:	4620      	mov	r0, r4
 800e89a:	f000 ff67 	bl	800f76c <__mdiff>
 800e89e:	68c2      	ldr	r2, [r0, #12]
 800e8a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e8a4:	4605      	mov	r5, r0
 800e8a6:	bb02      	cbnz	r2, 800e8ea <_dtoa_r+0xa62>
 800e8a8:	4601      	mov	r1, r0
 800e8aa:	ee18 0a10 	vmov	r0, s16
 800e8ae:	f000 ff41 	bl	800f734 <__mcmp>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	9207      	str	r2, [sp, #28]
 800e8ba:	f000 fcaf 	bl	800f21c <_Bfree>
 800e8be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e8c2:	ea43 0102 	orr.w	r1, r3, r2
 800e8c6:	9b04      	ldr	r3, [sp, #16]
 800e8c8:	430b      	orrs	r3, r1
 800e8ca:	464d      	mov	r5, r9
 800e8cc:	d10f      	bne.n	800e8ee <_dtoa_r+0xa66>
 800e8ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e8d2:	d02a      	beq.n	800e92a <_dtoa_r+0xaa2>
 800e8d4:	9b03      	ldr	r3, [sp, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	dd02      	ble.n	800e8e0 <_dtoa_r+0xa58>
 800e8da:	9b02      	ldr	r3, [sp, #8]
 800e8dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e8e0:	f88b a000 	strb.w	sl, [fp]
 800e8e4:	e775      	b.n	800e7d2 <_dtoa_r+0x94a>
 800e8e6:	4638      	mov	r0, r7
 800e8e8:	e7ba      	b.n	800e860 <_dtoa_r+0x9d8>
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	e7e2      	b.n	800e8b4 <_dtoa_r+0xa2c>
 800e8ee:	9b03      	ldr	r3, [sp, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	db04      	blt.n	800e8fe <_dtoa_r+0xa76>
 800e8f4:	9906      	ldr	r1, [sp, #24]
 800e8f6:	430b      	orrs	r3, r1
 800e8f8:	9904      	ldr	r1, [sp, #16]
 800e8fa:	430b      	orrs	r3, r1
 800e8fc:	d122      	bne.n	800e944 <_dtoa_r+0xabc>
 800e8fe:	2a00      	cmp	r2, #0
 800e900:	ddee      	ble.n	800e8e0 <_dtoa_r+0xa58>
 800e902:	ee18 1a10 	vmov	r1, s16
 800e906:	2201      	movs	r2, #1
 800e908:	4620      	mov	r0, r4
 800e90a:	f000 fea3 	bl	800f654 <__lshift>
 800e90e:	4631      	mov	r1, r6
 800e910:	ee08 0a10 	vmov	s16, r0
 800e914:	f000 ff0e 	bl	800f734 <__mcmp>
 800e918:	2800      	cmp	r0, #0
 800e91a:	dc03      	bgt.n	800e924 <_dtoa_r+0xa9c>
 800e91c:	d1e0      	bne.n	800e8e0 <_dtoa_r+0xa58>
 800e91e:	f01a 0f01 	tst.w	sl, #1
 800e922:	d0dd      	beq.n	800e8e0 <_dtoa_r+0xa58>
 800e924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e928:	d1d7      	bne.n	800e8da <_dtoa_r+0xa52>
 800e92a:	2339      	movs	r3, #57	; 0x39
 800e92c:	f88b 3000 	strb.w	r3, [fp]
 800e930:	462b      	mov	r3, r5
 800e932:	461d      	mov	r5, r3
 800e934:	3b01      	subs	r3, #1
 800e936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e93a:	2a39      	cmp	r2, #57	; 0x39
 800e93c:	d071      	beq.n	800ea22 <_dtoa_r+0xb9a>
 800e93e:	3201      	adds	r2, #1
 800e940:	701a      	strb	r2, [r3, #0]
 800e942:	e746      	b.n	800e7d2 <_dtoa_r+0x94a>
 800e944:	2a00      	cmp	r2, #0
 800e946:	dd07      	ble.n	800e958 <_dtoa_r+0xad0>
 800e948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e94c:	d0ed      	beq.n	800e92a <_dtoa_r+0xaa2>
 800e94e:	f10a 0301 	add.w	r3, sl, #1
 800e952:	f88b 3000 	strb.w	r3, [fp]
 800e956:	e73c      	b.n	800e7d2 <_dtoa_r+0x94a>
 800e958:	9b05      	ldr	r3, [sp, #20]
 800e95a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e95e:	4599      	cmp	r9, r3
 800e960:	d047      	beq.n	800e9f2 <_dtoa_r+0xb6a>
 800e962:	ee18 1a10 	vmov	r1, s16
 800e966:	2300      	movs	r3, #0
 800e968:	220a      	movs	r2, #10
 800e96a:	4620      	mov	r0, r4
 800e96c:	f000 fc78 	bl	800f260 <__multadd>
 800e970:	45b8      	cmp	r8, r7
 800e972:	ee08 0a10 	vmov	s16, r0
 800e976:	f04f 0300 	mov.w	r3, #0
 800e97a:	f04f 020a 	mov.w	r2, #10
 800e97e:	4641      	mov	r1, r8
 800e980:	4620      	mov	r0, r4
 800e982:	d106      	bne.n	800e992 <_dtoa_r+0xb0a>
 800e984:	f000 fc6c 	bl	800f260 <__multadd>
 800e988:	4680      	mov	r8, r0
 800e98a:	4607      	mov	r7, r0
 800e98c:	f109 0901 	add.w	r9, r9, #1
 800e990:	e772      	b.n	800e878 <_dtoa_r+0x9f0>
 800e992:	f000 fc65 	bl	800f260 <__multadd>
 800e996:	4639      	mov	r1, r7
 800e998:	4680      	mov	r8, r0
 800e99a:	2300      	movs	r3, #0
 800e99c:	220a      	movs	r2, #10
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f000 fc5e 	bl	800f260 <__multadd>
 800e9a4:	4607      	mov	r7, r0
 800e9a6:	e7f1      	b.n	800e98c <_dtoa_r+0xb04>
 800e9a8:	9b03      	ldr	r3, [sp, #12]
 800e9aa:	9302      	str	r3, [sp, #8]
 800e9ac:	9d01      	ldr	r5, [sp, #4]
 800e9ae:	ee18 0a10 	vmov	r0, s16
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	f7ff f9dc 	bl	800dd70 <quorem>
 800e9b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e9bc:	9b01      	ldr	r3, [sp, #4]
 800e9be:	f805 ab01 	strb.w	sl, [r5], #1
 800e9c2:	1aea      	subs	r2, r5, r3
 800e9c4:	9b02      	ldr	r3, [sp, #8]
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	dd09      	ble.n	800e9de <_dtoa_r+0xb56>
 800e9ca:	ee18 1a10 	vmov	r1, s16
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	220a      	movs	r2, #10
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f000 fc44 	bl	800f260 <__multadd>
 800e9d8:	ee08 0a10 	vmov	s16, r0
 800e9dc:	e7e7      	b.n	800e9ae <_dtoa_r+0xb26>
 800e9de:	9b02      	ldr	r3, [sp, #8]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfc8      	it	gt
 800e9e4:	461d      	movgt	r5, r3
 800e9e6:	9b01      	ldr	r3, [sp, #4]
 800e9e8:	bfd8      	it	le
 800e9ea:	2501      	movle	r5, #1
 800e9ec:	441d      	add	r5, r3
 800e9ee:	f04f 0800 	mov.w	r8, #0
 800e9f2:	ee18 1a10 	vmov	r1, s16
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f000 fe2b 	bl	800f654 <__lshift>
 800e9fe:	4631      	mov	r1, r6
 800ea00:	ee08 0a10 	vmov	s16, r0
 800ea04:	f000 fe96 	bl	800f734 <__mcmp>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	dc91      	bgt.n	800e930 <_dtoa_r+0xaa8>
 800ea0c:	d102      	bne.n	800ea14 <_dtoa_r+0xb8c>
 800ea0e:	f01a 0f01 	tst.w	sl, #1
 800ea12:	d18d      	bne.n	800e930 <_dtoa_r+0xaa8>
 800ea14:	462b      	mov	r3, r5
 800ea16:	461d      	mov	r5, r3
 800ea18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea1c:	2a30      	cmp	r2, #48	; 0x30
 800ea1e:	d0fa      	beq.n	800ea16 <_dtoa_r+0xb8e>
 800ea20:	e6d7      	b.n	800e7d2 <_dtoa_r+0x94a>
 800ea22:	9a01      	ldr	r2, [sp, #4]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d184      	bne.n	800e932 <_dtoa_r+0xaaa>
 800ea28:	9b00      	ldr	r3, [sp, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	9300      	str	r3, [sp, #0]
 800ea2e:	2331      	movs	r3, #49	; 0x31
 800ea30:	7013      	strb	r3, [r2, #0]
 800ea32:	e6ce      	b.n	800e7d2 <_dtoa_r+0x94a>
 800ea34:	4b09      	ldr	r3, [pc, #36]	; (800ea5c <_dtoa_r+0xbd4>)
 800ea36:	f7ff ba95 	b.w	800df64 <_dtoa_r+0xdc>
 800ea3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f47f aa6e 	bne.w	800df1e <_dtoa_r+0x96>
 800ea42:	4b07      	ldr	r3, [pc, #28]	; (800ea60 <_dtoa_r+0xbd8>)
 800ea44:	f7ff ba8e 	b.w	800df64 <_dtoa_r+0xdc>
 800ea48:	9b02      	ldr	r3, [sp, #8]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	dcae      	bgt.n	800e9ac <_dtoa_r+0xb24>
 800ea4e:	9b06      	ldr	r3, [sp, #24]
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	f73f aea8 	bgt.w	800e7a6 <_dtoa_r+0x91e>
 800ea56:	e7a9      	b.n	800e9ac <_dtoa_r+0xb24>
 800ea58:	080148d0 	.word	0x080148d0
 800ea5c:	080146d4 	.word	0x080146d4
 800ea60:	08014851 	.word	0x08014851

0800ea64 <rshift>:
 800ea64:	6903      	ldr	r3, [r0, #16]
 800ea66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea72:	f100 0414 	add.w	r4, r0, #20
 800ea76:	dd45      	ble.n	800eb04 <rshift+0xa0>
 800ea78:	f011 011f 	ands.w	r1, r1, #31
 800ea7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea84:	d10c      	bne.n	800eaa0 <rshift+0x3c>
 800ea86:	f100 0710 	add.w	r7, r0, #16
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	42b1      	cmp	r1, r6
 800ea8e:	d334      	bcc.n	800eafa <rshift+0x96>
 800ea90:	1a9b      	subs	r3, r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	1eea      	subs	r2, r5, #3
 800ea96:	4296      	cmp	r6, r2
 800ea98:	bf38      	it	cc
 800ea9a:	2300      	movcc	r3, #0
 800ea9c:	4423      	add	r3, r4
 800ea9e:	e015      	b.n	800eacc <rshift+0x68>
 800eaa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eaa4:	f1c1 0820 	rsb	r8, r1, #32
 800eaa8:	40cf      	lsrs	r7, r1
 800eaaa:	f105 0e04 	add.w	lr, r5, #4
 800eaae:	46a1      	mov	r9, r4
 800eab0:	4576      	cmp	r6, lr
 800eab2:	46f4      	mov	ip, lr
 800eab4:	d815      	bhi.n	800eae2 <rshift+0x7e>
 800eab6:	1a9a      	subs	r2, r3, r2
 800eab8:	0092      	lsls	r2, r2, #2
 800eaba:	3a04      	subs	r2, #4
 800eabc:	3501      	adds	r5, #1
 800eabe:	42ae      	cmp	r6, r5
 800eac0:	bf38      	it	cc
 800eac2:	2200      	movcc	r2, #0
 800eac4:	18a3      	adds	r3, r4, r2
 800eac6:	50a7      	str	r7, [r4, r2]
 800eac8:	b107      	cbz	r7, 800eacc <rshift+0x68>
 800eaca:	3304      	adds	r3, #4
 800eacc:	1b1a      	subs	r2, r3, r4
 800eace:	42a3      	cmp	r3, r4
 800ead0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ead4:	bf08      	it	eq
 800ead6:	2300      	moveq	r3, #0
 800ead8:	6102      	str	r2, [r0, #16]
 800eada:	bf08      	it	eq
 800eadc:	6143      	streq	r3, [r0, #20]
 800eade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eae2:	f8dc c000 	ldr.w	ip, [ip]
 800eae6:	fa0c fc08 	lsl.w	ip, ip, r8
 800eaea:	ea4c 0707 	orr.w	r7, ip, r7
 800eaee:	f849 7b04 	str.w	r7, [r9], #4
 800eaf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eaf6:	40cf      	lsrs	r7, r1
 800eaf8:	e7da      	b.n	800eab0 <rshift+0x4c>
 800eafa:	f851 cb04 	ldr.w	ip, [r1], #4
 800eafe:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb02:	e7c3      	b.n	800ea8c <rshift+0x28>
 800eb04:	4623      	mov	r3, r4
 800eb06:	e7e1      	b.n	800eacc <rshift+0x68>

0800eb08 <__hexdig_fun>:
 800eb08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eb0c:	2b09      	cmp	r3, #9
 800eb0e:	d802      	bhi.n	800eb16 <__hexdig_fun+0xe>
 800eb10:	3820      	subs	r0, #32
 800eb12:	b2c0      	uxtb	r0, r0
 800eb14:	4770      	bx	lr
 800eb16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	d801      	bhi.n	800eb22 <__hexdig_fun+0x1a>
 800eb1e:	3847      	subs	r0, #71	; 0x47
 800eb20:	e7f7      	b.n	800eb12 <__hexdig_fun+0xa>
 800eb22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eb26:	2b05      	cmp	r3, #5
 800eb28:	d801      	bhi.n	800eb2e <__hexdig_fun+0x26>
 800eb2a:	3827      	subs	r0, #39	; 0x27
 800eb2c:	e7f1      	b.n	800eb12 <__hexdig_fun+0xa>
 800eb2e:	2000      	movs	r0, #0
 800eb30:	4770      	bx	lr
	...

0800eb34 <__gethex>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	ed2d 8b02 	vpush	{d8}
 800eb3c:	b089      	sub	sp, #36	; 0x24
 800eb3e:	ee08 0a10 	vmov	s16, r0
 800eb42:	9304      	str	r3, [sp, #16]
 800eb44:	4bb4      	ldr	r3, [pc, #720]	; (800ee18 <__gethex+0x2e4>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	468b      	mov	fp, r1
 800eb4e:	4690      	mov	r8, r2
 800eb50:	f7f1 fb46 	bl	80001e0 <strlen>
 800eb54:	9b01      	ldr	r3, [sp, #4]
 800eb56:	f8db 2000 	ldr.w	r2, [fp]
 800eb5a:	4403      	add	r3, r0
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eb62:	9305      	str	r3, [sp, #20]
 800eb64:	1c93      	adds	r3, r2, #2
 800eb66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eb6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eb6e:	32fe      	adds	r2, #254	; 0xfe
 800eb70:	18d1      	adds	r1, r2, r3
 800eb72:	461f      	mov	r7, r3
 800eb74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb78:	9100      	str	r1, [sp, #0]
 800eb7a:	2830      	cmp	r0, #48	; 0x30
 800eb7c:	d0f8      	beq.n	800eb70 <__gethex+0x3c>
 800eb7e:	f7ff ffc3 	bl	800eb08 <__hexdig_fun>
 800eb82:	4604      	mov	r4, r0
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d13a      	bne.n	800ebfe <__gethex+0xca>
 800eb88:	9901      	ldr	r1, [sp, #4]
 800eb8a:	4652      	mov	r2, sl
 800eb8c:	4638      	mov	r0, r7
 800eb8e:	f001 fa29 	bl	800ffe4 <strncmp>
 800eb92:	4605      	mov	r5, r0
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d168      	bne.n	800ec6a <__gethex+0x136>
 800eb98:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eb9c:	eb07 060a 	add.w	r6, r7, sl
 800eba0:	f7ff ffb2 	bl	800eb08 <__hexdig_fun>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d062      	beq.n	800ec6e <__gethex+0x13a>
 800eba8:	4633      	mov	r3, r6
 800ebaa:	7818      	ldrb	r0, [r3, #0]
 800ebac:	2830      	cmp	r0, #48	; 0x30
 800ebae:	461f      	mov	r7, r3
 800ebb0:	f103 0301 	add.w	r3, r3, #1
 800ebb4:	d0f9      	beq.n	800ebaa <__gethex+0x76>
 800ebb6:	f7ff ffa7 	bl	800eb08 <__hexdig_fun>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	fab0 f480 	clz	r4, r0
 800ebc0:	0964      	lsrs	r4, r4, #5
 800ebc2:	4635      	mov	r5, r6
 800ebc4:	9300      	str	r3, [sp, #0]
 800ebc6:	463a      	mov	r2, r7
 800ebc8:	4616      	mov	r6, r2
 800ebca:	3201      	adds	r2, #1
 800ebcc:	7830      	ldrb	r0, [r6, #0]
 800ebce:	f7ff ff9b 	bl	800eb08 <__hexdig_fun>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d1f8      	bne.n	800ebc8 <__gethex+0x94>
 800ebd6:	9901      	ldr	r1, [sp, #4]
 800ebd8:	4652      	mov	r2, sl
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f001 fa02 	bl	800ffe4 <strncmp>
 800ebe0:	b980      	cbnz	r0, 800ec04 <__gethex+0xd0>
 800ebe2:	b94d      	cbnz	r5, 800ebf8 <__gethex+0xc4>
 800ebe4:	eb06 050a 	add.w	r5, r6, sl
 800ebe8:	462a      	mov	r2, r5
 800ebea:	4616      	mov	r6, r2
 800ebec:	3201      	adds	r2, #1
 800ebee:	7830      	ldrb	r0, [r6, #0]
 800ebf0:	f7ff ff8a 	bl	800eb08 <__hexdig_fun>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d1f8      	bne.n	800ebea <__gethex+0xb6>
 800ebf8:	1bad      	subs	r5, r5, r6
 800ebfa:	00ad      	lsls	r5, r5, #2
 800ebfc:	e004      	b.n	800ec08 <__gethex+0xd4>
 800ebfe:	2400      	movs	r4, #0
 800ec00:	4625      	mov	r5, r4
 800ec02:	e7e0      	b.n	800ebc6 <__gethex+0x92>
 800ec04:	2d00      	cmp	r5, #0
 800ec06:	d1f7      	bne.n	800ebf8 <__gethex+0xc4>
 800ec08:	7833      	ldrb	r3, [r6, #0]
 800ec0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec0e:	2b50      	cmp	r3, #80	; 0x50
 800ec10:	d13b      	bne.n	800ec8a <__gethex+0x156>
 800ec12:	7873      	ldrb	r3, [r6, #1]
 800ec14:	2b2b      	cmp	r3, #43	; 0x2b
 800ec16:	d02c      	beq.n	800ec72 <__gethex+0x13e>
 800ec18:	2b2d      	cmp	r3, #45	; 0x2d
 800ec1a:	d02e      	beq.n	800ec7a <__gethex+0x146>
 800ec1c:	1c71      	adds	r1, r6, #1
 800ec1e:	f04f 0900 	mov.w	r9, #0
 800ec22:	7808      	ldrb	r0, [r1, #0]
 800ec24:	f7ff ff70 	bl	800eb08 <__hexdig_fun>
 800ec28:	1e43      	subs	r3, r0, #1
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b18      	cmp	r3, #24
 800ec2e:	d82c      	bhi.n	800ec8a <__gethex+0x156>
 800ec30:	f1a0 0210 	sub.w	r2, r0, #16
 800ec34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec38:	f7ff ff66 	bl	800eb08 <__hexdig_fun>
 800ec3c:	1e43      	subs	r3, r0, #1
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b18      	cmp	r3, #24
 800ec42:	d91d      	bls.n	800ec80 <__gethex+0x14c>
 800ec44:	f1b9 0f00 	cmp.w	r9, #0
 800ec48:	d000      	beq.n	800ec4c <__gethex+0x118>
 800ec4a:	4252      	negs	r2, r2
 800ec4c:	4415      	add	r5, r2
 800ec4e:	f8cb 1000 	str.w	r1, [fp]
 800ec52:	b1e4      	cbz	r4, 800ec8e <__gethex+0x15a>
 800ec54:	9b00      	ldr	r3, [sp, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	bf14      	ite	ne
 800ec5a:	2700      	movne	r7, #0
 800ec5c:	2706      	moveq	r7, #6
 800ec5e:	4638      	mov	r0, r7
 800ec60:	b009      	add	sp, #36	; 0x24
 800ec62:	ecbd 8b02 	vpop	{d8}
 800ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6a:	463e      	mov	r6, r7
 800ec6c:	4625      	mov	r5, r4
 800ec6e:	2401      	movs	r4, #1
 800ec70:	e7ca      	b.n	800ec08 <__gethex+0xd4>
 800ec72:	f04f 0900 	mov.w	r9, #0
 800ec76:	1cb1      	adds	r1, r6, #2
 800ec78:	e7d3      	b.n	800ec22 <__gethex+0xee>
 800ec7a:	f04f 0901 	mov.w	r9, #1
 800ec7e:	e7fa      	b.n	800ec76 <__gethex+0x142>
 800ec80:	230a      	movs	r3, #10
 800ec82:	fb03 0202 	mla	r2, r3, r2, r0
 800ec86:	3a10      	subs	r2, #16
 800ec88:	e7d4      	b.n	800ec34 <__gethex+0x100>
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	e7df      	b.n	800ec4e <__gethex+0x11a>
 800ec8e:	1bf3      	subs	r3, r6, r7
 800ec90:	3b01      	subs	r3, #1
 800ec92:	4621      	mov	r1, r4
 800ec94:	2b07      	cmp	r3, #7
 800ec96:	dc0b      	bgt.n	800ecb0 <__gethex+0x17c>
 800ec98:	ee18 0a10 	vmov	r0, s16
 800ec9c:	f000 fa7e 	bl	800f19c <_Balloc>
 800eca0:	4604      	mov	r4, r0
 800eca2:	b940      	cbnz	r0, 800ecb6 <__gethex+0x182>
 800eca4:	4b5d      	ldr	r3, [pc, #372]	; (800ee1c <__gethex+0x2e8>)
 800eca6:	4602      	mov	r2, r0
 800eca8:	21de      	movs	r1, #222	; 0xde
 800ecaa:	485d      	ldr	r0, [pc, #372]	; (800ee20 <__gethex+0x2ec>)
 800ecac:	f001 f9bc 	bl	8010028 <__assert_func>
 800ecb0:	3101      	adds	r1, #1
 800ecb2:	105b      	asrs	r3, r3, #1
 800ecb4:	e7ee      	b.n	800ec94 <__gethex+0x160>
 800ecb6:	f100 0914 	add.w	r9, r0, #20
 800ecba:	f04f 0b00 	mov.w	fp, #0
 800ecbe:	f1ca 0301 	rsb	r3, sl, #1
 800ecc2:	f8cd 9008 	str.w	r9, [sp, #8]
 800ecc6:	f8cd b000 	str.w	fp, [sp]
 800ecca:	9306      	str	r3, [sp, #24]
 800eccc:	42b7      	cmp	r7, r6
 800ecce:	d340      	bcc.n	800ed52 <__gethex+0x21e>
 800ecd0:	9802      	ldr	r0, [sp, #8]
 800ecd2:	9b00      	ldr	r3, [sp, #0]
 800ecd4:	f840 3b04 	str.w	r3, [r0], #4
 800ecd8:	eba0 0009 	sub.w	r0, r0, r9
 800ecdc:	1080      	asrs	r0, r0, #2
 800ecde:	0146      	lsls	r6, r0, #5
 800ece0:	6120      	str	r0, [r4, #16]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f000 fb4c 	bl	800f380 <__hi0bits>
 800ece8:	1a30      	subs	r0, r6, r0
 800ecea:	f8d8 6000 	ldr.w	r6, [r8]
 800ecee:	42b0      	cmp	r0, r6
 800ecf0:	dd63      	ble.n	800edba <__gethex+0x286>
 800ecf2:	1b87      	subs	r7, r0, r6
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 fef0 	bl	800fadc <__any_on>
 800ecfc:	4682      	mov	sl, r0
 800ecfe:	b1a8      	cbz	r0, 800ed2c <__gethex+0x1f8>
 800ed00:	1e7b      	subs	r3, r7, #1
 800ed02:	1159      	asrs	r1, r3, #5
 800ed04:	f003 021f 	and.w	r2, r3, #31
 800ed08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ed0c:	f04f 0a01 	mov.w	sl, #1
 800ed10:	fa0a f202 	lsl.w	r2, sl, r2
 800ed14:	420a      	tst	r2, r1
 800ed16:	d009      	beq.n	800ed2c <__gethex+0x1f8>
 800ed18:	4553      	cmp	r3, sl
 800ed1a:	dd05      	ble.n	800ed28 <__gethex+0x1f4>
 800ed1c:	1eb9      	subs	r1, r7, #2
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 fedc 	bl	800fadc <__any_on>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d145      	bne.n	800edb4 <__gethex+0x280>
 800ed28:	f04f 0a02 	mov.w	sl, #2
 800ed2c:	4639      	mov	r1, r7
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f7ff fe98 	bl	800ea64 <rshift>
 800ed34:	443d      	add	r5, r7
 800ed36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed3a:	42ab      	cmp	r3, r5
 800ed3c:	da4c      	bge.n	800edd8 <__gethex+0x2a4>
 800ed3e:	ee18 0a10 	vmov	r0, s16
 800ed42:	4621      	mov	r1, r4
 800ed44:	f000 fa6a 	bl	800f21c <_Bfree>
 800ed48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	6013      	str	r3, [r2, #0]
 800ed4e:	27a3      	movs	r7, #163	; 0xa3
 800ed50:	e785      	b.n	800ec5e <__gethex+0x12a>
 800ed52:	1e73      	subs	r3, r6, #1
 800ed54:	9a05      	ldr	r2, [sp, #20]
 800ed56:	9303      	str	r3, [sp, #12]
 800ed58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d019      	beq.n	800ed94 <__gethex+0x260>
 800ed60:	f1bb 0f20 	cmp.w	fp, #32
 800ed64:	d107      	bne.n	800ed76 <__gethex+0x242>
 800ed66:	9b02      	ldr	r3, [sp, #8]
 800ed68:	9a00      	ldr	r2, [sp, #0]
 800ed6a:	f843 2b04 	str.w	r2, [r3], #4
 800ed6e:	9302      	str	r3, [sp, #8]
 800ed70:	2300      	movs	r3, #0
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	469b      	mov	fp, r3
 800ed76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ed7a:	f7ff fec5 	bl	800eb08 <__hexdig_fun>
 800ed7e:	9b00      	ldr	r3, [sp, #0]
 800ed80:	f000 000f 	and.w	r0, r0, #15
 800ed84:	fa00 f00b 	lsl.w	r0, r0, fp
 800ed88:	4303      	orrs	r3, r0
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	f10b 0b04 	add.w	fp, fp, #4
 800ed90:	9b03      	ldr	r3, [sp, #12]
 800ed92:	e00d      	b.n	800edb0 <__gethex+0x27c>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	9a06      	ldr	r2, [sp, #24]
 800ed98:	4413      	add	r3, r2
 800ed9a:	42bb      	cmp	r3, r7
 800ed9c:	d3e0      	bcc.n	800ed60 <__gethex+0x22c>
 800ed9e:	4618      	mov	r0, r3
 800eda0:	9901      	ldr	r1, [sp, #4]
 800eda2:	9307      	str	r3, [sp, #28]
 800eda4:	4652      	mov	r2, sl
 800eda6:	f001 f91d 	bl	800ffe4 <strncmp>
 800edaa:	9b07      	ldr	r3, [sp, #28]
 800edac:	2800      	cmp	r0, #0
 800edae:	d1d7      	bne.n	800ed60 <__gethex+0x22c>
 800edb0:	461e      	mov	r6, r3
 800edb2:	e78b      	b.n	800eccc <__gethex+0x198>
 800edb4:	f04f 0a03 	mov.w	sl, #3
 800edb8:	e7b8      	b.n	800ed2c <__gethex+0x1f8>
 800edba:	da0a      	bge.n	800edd2 <__gethex+0x29e>
 800edbc:	1a37      	subs	r7, r6, r0
 800edbe:	4621      	mov	r1, r4
 800edc0:	ee18 0a10 	vmov	r0, s16
 800edc4:	463a      	mov	r2, r7
 800edc6:	f000 fc45 	bl	800f654 <__lshift>
 800edca:	1bed      	subs	r5, r5, r7
 800edcc:	4604      	mov	r4, r0
 800edce:	f100 0914 	add.w	r9, r0, #20
 800edd2:	f04f 0a00 	mov.w	sl, #0
 800edd6:	e7ae      	b.n	800ed36 <__gethex+0x202>
 800edd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eddc:	42a8      	cmp	r0, r5
 800edde:	dd72      	ble.n	800eec6 <__gethex+0x392>
 800ede0:	1b45      	subs	r5, r0, r5
 800ede2:	42ae      	cmp	r6, r5
 800ede4:	dc36      	bgt.n	800ee54 <__gethex+0x320>
 800ede6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edea:	2b02      	cmp	r3, #2
 800edec:	d02a      	beq.n	800ee44 <__gethex+0x310>
 800edee:	2b03      	cmp	r3, #3
 800edf0:	d02c      	beq.n	800ee4c <__gethex+0x318>
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d11c      	bne.n	800ee30 <__gethex+0x2fc>
 800edf6:	42ae      	cmp	r6, r5
 800edf8:	d11a      	bne.n	800ee30 <__gethex+0x2fc>
 800edfa:	2e01      	cmp	r6, #1
 800edfc:	d112      	bne.n	800ee24 <__gethex+0x2f0>
 800edfe:	9a04      	ldr	r2, [sp, #16]
 800ee00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	2301      	movs	r3, #1
 800ee08:	6123      	str	r3, [r4, #16]
 800ee0a:	f8c9 3000 	str.w	r3, [r9]
 800ee0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee10:	2762      	movs	r7, #98	; 0x62
 800ee12:	601c      	str	r4, [r3, #0]
 800ee14:	e723      	b.n	800ec5e <__gethex+0x12a>
 800ee16:	bf00      	nop
 800ee18:	08014948 	.word	0x08014948
 800ee1c:	080148d0 	.word	0x080148d0
 800ee20:	080148e1 	.word	0x080148e1
 800ee24:	1e71      	subs	r1, r6, #1
 800ee26:	4620      	mov	r0, r4
 800ee28:	f000 fe58 	bl	800fadc <__any_on>
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d1e6      	bne.n	800edfe <__gethex+0x2ca>
 800ee30:	ee18 0a10 	vmov	r0, s16
 800ee34:	4621      	mov	r1, r4
 800ee36:	f000 f9f1 	bl	800f21c <_Bfree>
 800ee3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	2750      	movs	r7, #80	; 0x50
 800ee42:	e70c      	b.n	800ec5e <__gethex+0x12a>
 800ee44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1f2      	bne.n	800ee30 <__gethex+0x2fc>
 800ee4a:	e7d8      	b.n	800edfe <__gethex+0x2ca>
 800ee4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1d5      	bne.n	800edfe <__gethex+0x2ca>
 800ee52:	e7ed      	b.n	800ee30 <__gethex+0x2fc>
 800ee54:	1e6f      	subs	r7, r5, #1
 800ee56:	f1ba 0f00 	cmp.w	sl, #0
 800ee5a:	d131      	bne.n	800eec0 <__gethex+0x38c>
 800ee5c:	b127      	cbz	r7, 800ee68 <__gethex+0x334>
 800ee5e:	4639      	mov	r1, r7
 800ee60:	4620      	mov	r0, r4
 800ee62:	f000 fe3b 	bl	800fadc <__any_on>
 800ee66:	4682      	mov	sl, r0
 800ee68:	117b      	asrs	r3, r7, #5
 800ee6a:	2101      	movs	r1, #1
 800ee6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ee70:	f007 071f 	and.w	r7, r7, #31
 800ee74:	fa01 f707 	lsl.w	r7, r1, r7
 800ee78:	421f      	tst	r7, r3
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	bf18      	it	ne
 800ee80:	f04a 0a02 	orrne.w	sl, sl, #2
 800ee84:	1b76      	subs	r6, r6, r5
 800ee86:	f7ff fded 	bl	800ea64 <rshift>
 800ee8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee8e:	2702      	movs	r7, #2
 800ee90:	f1ba 0f00 	cmp.w	sl, #0
 800ee94:	d048      	beq.n	800ef28 <__gethex+0x3f4>
 800ee96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d015      	beq.n	800eeca <__gethex+0x396>
 800ee9e:	2b03      	cmp	r3, #3
 800eea0:	d017      	beq.n	800eed2 <__gethex+0x39e>
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d109      	bne.n	800eeba <__gethex+0x386>
 800eea6:	f01a 0f02 	tst.w	sl, #2
 800eeaa:	d006      	beq.n	800eeba <__gethex+0x386>
 800eeac:	f8d9 0000 	ldr.w	r0, [r9]
 800eeb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800eeb4:	f01a 0f01 	tst.w	sl, #1
 800eeb8:	d10e      	bne.n	800eed8 <__gethex+0x3a4>
 800eeba:	f047 0710 	orr.w	r7, r7, #16
 800eebe:	e033      	b.n	800ef28 <__gethex+0x3f4>
 800eec0:	f04f 0a01 	mov.w	sl, #1
 800eec4:	e7d0      	b.n	800ee68 <__gethex+0x334>
 800eec6:	2701      	movs	r7, #1
 800eec8:	e7e2      	b.n	800ee90 <__gethex+0x35c>
 800eeca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eecc:	f1c3 0301 	rsb	r3, r3, #1
 800eed0:	9315      	str	r3, [sp, #84]	; 0x54
 800eed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d0f0      	beq.n	800eeba <__gethex+0x386>
 800eed8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eedc:	f104 0314 	add.w	r3, r4, #20
 800eee0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eee4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eee8:	f04f 0c00 	mov.w	ip, #0
 800eeec:	4618      	mov	r0, r3
 800eeee:	f853 2b04 	ldr.w	r2, [r3], #4
 800eef2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eef6:	d01c      	beq.n	800ef32 <__gethex+0x3fe>
 800eef8:	3201      	adds	r2, #1
 800eefa:	6002      	str	r2, [r0, #0]
 800eefc:	2f02      	cmp	r7, #2
 800eefe:	f104 0314 	add.w	r3, r4, #20
 800ef02:	d13f      	bne.n	800ef84 <__gethex+0x450>
 800ef04:	f8d8 2000 	ldr.w	r2, [r8]
 800ef08:	3a01      	subs	r2, #1
 800ef0a:	42b2      	cmp	r2, r6
 800ef0c:	d10a      	bne.n	800ef24 <__gethex+0x3f0>
 800ef0e:	1171      	asrs	r1, r6, #5
 800ef10:	2201      	movs	r2, #1
 800ef12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef16:	f006 061f 	and.w	r6, r6, #31
 800ef1a:	fa02 f606 	lsl.w	r6, r2, r6
 800ef1e:	421e      	tst	r6, r3
 800ef20:	bf18      	it	ne
 800ef22:	4617      	movne	r7, r2
 800ef24:	f047 0720 	orr.w	r7, r7, #32
 800ef28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef2a:	601c      	str	r4, [r3, #0]
 800ef2c:	9b04      	ldr	r3, [sp, #16]
 800ef2e:	601d      	str	r5, [r3, #0]
 800ef30:	e695      	b.n	800ec5e <__gethex+0x12a>
 800ef32:	4299      	cmp	r1, r3
 800ef34:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef38:	d8d8      	bhi.n	800eeec <__gethex+0x3b8>
 800ef3a:	68a3      	ldr	r3, [r4, #8]
 800ef3c:	459b      	cmp	fp, r3
 800ef3e:	db19      	blt.n	800ef74 <__gethex+0x440>
 800ef40:	6861      	ldr	r1, [r4, #4]
 800ef42:	ee18 0a10 	vmov	r0, s16
 800ef46:	3101      	adds	r1, #1
 800ef48:	f000 f928 	bl	800f19c <_Balloc>
 800ef4c:	4681      	mov	r9, r0
 800ef4e:	b918      	cbnz	r0, 800ef58 <__gethex+0x424>
 800ef50:	4b1a      	ldr	r3, [pc, #104]	; (800efbc <__gethex+0x488>)
 800ef52:	4602      	mov	r2, r0
 800ef54:	2184      	movs	r1, #132	; 0x84
 800ef56:	e6a8      	b.n	800ecaa <__gethex+0x176>
 800ef58:	6922      	ldr	r2, [r4, #16]
 800ef5a:	3202      	adds	r2, #2
 800ef5c:	f104 010c 	add.w	r1, r4, #12
 800ef60:	0092      	lsls	r2, r2, #2
 800ef62:	300c      	adds	r0, #12
 800ef64:	f000 f90c 	bl	800f180 <memcpy>
 800ef68:	4621      	mov	r1, r4
 800ef6a:	ee18 0a10 	vmov	r0, s16
 800ef6e:	f000 f955 	bl	800f21c <_Bfree>
 800ef72:	464c      	mov	r4, r9
 800ef74:	6923      	ldr	r3, [r4, #16]
 800ef76:	1c5a      	adds	r2, r3, #1
 800ef78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef7c:	6122      	str	r2, [r4, #16]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	615a      	str	r2, [r3, #20]
 800ef82:	e7bb      	b.n	800eefc <__gethex+0x3c8>
 800ef84:	6922      	ldr	r2, [r4, #16]
 800ef86:	455a      	cmp	r2, fp
 800ef88:	dd0b      	ble.n	800efa2 <__gethex+0x46e>
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f7ff fd69 	bl	800ea64 <rshift>
 800ef92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef96:	3501      	adds	r5, #1
 800ef98:	42ab      	cmp	r3, r5
 800ef9a:	f6ff aed0 	blt.w	800ed3e <__gethex+0x20a>
 800ef9e:	2701      	movs	r7, #1
 800efa0:	e7c0      	b.n	800ef24 <__gethex+0x3f0>
 800efa2:	f016 061f 	ands.w	r6, r6, #31
 800efa6:	d0fa      	beq.n	800ef9e <__gethex+0x46a>
 800efa8:	4453      	add	r3, sl
 800efaa:	f1c6 0620 	rsb	r6, r6, #32
 800efae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800efb2:	f000 f9e5 	bl	800f380 <__hi0bits>
 800efb6:	42b0      	cmp	r0, r6
 800efb8:	dbe7      	blt.n	800ef8a <__gethex+0x456>
 800efba:	e7f0      	b.n	800ef9e <__gethex+0x46a>
 800efbc:	080148d0 	.word	0x080148d0

0800efc0 <L_shift>:
 800efc0:	f1c2 0208 	rsb	r2, r2, #8
 800efc4:	0092      	lsls	r2, r2, #2
 800efc6:	b570      	push	{r4, r5, r6, lr}
 800efc8:	f1c2 0620 	rsb	r6, r2, #32
 800efcc:	6843      	ldr	r3, [r0, #4]
 800efce:	6804      	ldr	r4, [r0, #0]
 800efd0:	fa03 f506 	lsl.w	r5, r3, r6
 800efd4:	432c      	orrs	r4, r5
 800efd6:	40d3      	lsrs	r3, r2
 800efd8:	6004      	str	r4, [r0, #0]
 800efda:	f840 3f04 	str.w	r3, [r0, #4]!
 800efde:	4288      	cmp	r0, r1
 800efe0:	d3f4      	bcc.n	800efcc <L_shift+0xc>
 800efe2:	bd70      	pop	{r4, r5, r6, pc}

0800efe4 <__match>:
 800efe4:	b530      	push	{r4, r5, lr}
 800efe6:	6803      	ldr	r3, [r0, #0]
 800efe8:	3301      	adds	r3, #1
 800efea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efee:	b914      	cbnz	r4, 800eff6 <__match+0x12>
 800eff0:	6003      	str	r3, [r0, #0]
 800eff2:	2001      	movs	r0, #1
 800eff4:	bd30      	pop	{r4, r5, pc}
 800eff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800effa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800effe:	2d19      	cmp	r5, #25
 800f000:	bf98      	it	ls
 800f002:	3220      	addls	r2, #32
 800f004:	42a2      	cmp	r2, r4
 800f006:	d0f0      	beq.n	800efea <__match+0x6>
 800f008:	2000      	movs	r0, #0
 800f00a:	e7f3      	b.n	800eff4 <__match+0x10>

0800f00c <__hexnan>:
 800f00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f010:	680b      	ldr	r3, [r1, #0]
 800f012:	115e      	asrs	r6, r3, #5
 800f014:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f018:	f013 031f 	ands.w	r3, r3, #31
 800f01c:	b087      	sub	sp, #28
 800f01e:	bf18      	it	ne
 800f020:	3604      	addne	r6, #4
 800f022:	2500      	movs	r5, #0
 800f024:	1f37      	subs	r7, r6, #4
 800f026:	4690      	mov	r8, r2
 800f028:	6802      	ldr	r2, [r0, #0]
 800f02a:	9301      	str	r3, [sp, #4]
 800f02c:	4682      	mov	sl, r0
 800f02e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f032:	46b9      	mov	r9, r7
 800f034:	463c      	mov	r4, r7
 800f036:	9502      	str	r5, [sp, #8]
 800f038:	46ab      	mov	fp, r5
 800f03a:	7851      	ldrb	r1, [r2, #1]
 800f03c:	1c53      	adds	r3, r2, #1
 800f03e:	9303      	str	r3, [sp, #12]
 800f040:	b341      	cbz	r1, 800f094 <__hexnan+0x88>
 800f042:	4608      	mov	r0, r1
 800f044:	9205      	str	r2, [sp, #20]
 800f046:	9104      	str	r1, [sp, #16]
 800f048:	f7ff fd5e 	bl	800eb08 <__hexdig_fun>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d14f      	bne.n	800f0f0 <__hexnan+0xe4>
 800f050:	9904      	ldr	r1, [sp, #16]
 800f052:	9a05      	ldr	r2, [sp, #20]
 800f054:	2920      	cmp	r1, #32
 800f056:	d818      	bhi.n	800f08a <__hexnan+0x7e>
 800f058:	9b02      	ldr	r3, [sp, #8]
 800f05a:	459b      	cmp	fp, r3
 800f05c:	dd13      	ble.n	800f086 <__hexnan+0x7a>
 800f05e:	454c      	cmp	r4, r9
 800f060:	d206      	bcs.n	800f070 <__hexnan+0x64>
 800f062:	2d07      	cmp	r5, #7
 800f064:	dc04      	bgt.n	800f070 <__hexnan+0x64>
 800f066:	462a      	mov	r2, r5
 800f068:	4649      	mov	r1, r9
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7ff ffa8 	bl	800efc0 <L_shift>
 800f070:	4544      	cmp	r4, r8
 800f072:	d950      	bls.n	800f116 <__hexnan+0x10a>
 800f074:	2300      	movs	r3, #0
 800f076:	f1a4 0904 	sub.w	r9, r4, #4
 800f07a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f07e:	f8cd b008 	str.w	fp, [sp, #8]
 800f082:	464c      	mov	r4, r9
 800f084:	461d      	mov	r5, r3
 800f086:	9a03      	ldr	r2, [sp, #12]
 800f088:	e7d7      	b.n	800f03a <__hexnan+0x2e>
 800f08a:	2929      	cmp	r1, #41	; 0x29
 800f08c:	d156      	bne.n	800f13c <__hexnan+0x130>
 800f08e:	3202      	adds	r2, #2
 800f090:	f8ca 2000 	str.w	r2, [sl]
 800f094:	f1bb 0f00 	cmp.w	fp, #0
 800f098:	d050      	beq.n	800f13c <__hexnan+0x130>
 800f09a:	454c      	cmp	r4, r9
 800f09c:	d206      	bcs.n	800f0ac <__hexnan+0xa0>
 800f09e:	2d07      	cmp	r5, #7
 800f0a0:	dc04      	bgt.n	800f0ac <__hexnan+0xa0>
 800f0a2:	462a      	mov	r2, r5
 800f0a4:	4649      	mov	r1, r9
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f7ff ff8a 	bl	800efc0 <L_shift>
 800f0ac:	4544      	cmp	r4, r8
 800f0ae:	d934      	bls.n	800f11a <__hexnan+0x10e>
 800f0b0:	f1a8 0204 	sub.w	r2, r8, #4
 800f0b4:	4623      	mov	r3, r4
 800f0b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f0ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800f0be:	429f      	cmp	r7, r3
 800f0c0:	d2f9      	bcs.n	800f0b6 <__hexnan+0xaa>
 800f0c2:	1b3b      	subs	r3, r7, r4
 800f0c4:	f023 0303 	bic.w	r3, r3, #3
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	3401      	adds	r4, #1
 800f0cc:	3e03      	subs	r6, #3
 800f0ce:	42b4      	cmp	r4, r6
 800f0d0:	bf88      	it	hi
 800f0d2:	2304      	movhi	r3, #4
 800f0d4:	4443      	add	r3, r8
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f843 2b04 	str.w	r2, [r3], #4
 800f0dc:	429f      	cmp	r7, r3
 800f0de:	d2fb      	bcs.n	800f0d8 <__hexnan+0xcc>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	b91b      	cbnz	r3, 800f0ec <__hexnan+0xe0>
 800f0e4:	4547      	cmp	r7, r8
 800f0e6:	d127      	bne.n	800f138 <__hexnan+0x12c>
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	603b      	str	r3, [r7, #0]
 800f0ec:	2005      	movs	r0, #5
 800f0ee:	e026      	b.n	800f13e <__hexnan+0x132>
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	2d08      	cmp	r5, #8
 800f0f4:	f10b 0b01 	add.w	fp, fp, #1
 800f0f8:	dd06      	ble.n	800f108 <__hexnan+0xfc>
 800f0fa:	4544      	cmp	r4, r8
 800f0fc:	d9c3      	bls.n	800f086 <__hexnan+0x7a>
 800f0fe:	2300      	movs	r3, #0
 800f100:	f844 3c04 	str.w	r3, [r4, #-4]
 800f104:	2501      	movs	r5, #1
 800f106:	3c04      	subs	r4, #4
 800f108:	6822      	ldr	r2, [r4, #0]
 800f10a:	f000 000f 	and.w	r0, r0, #15
 800f10e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f112:	6022      	str	r2, [r4, #0]
 800f114:	e7b7      	b.n	800f086 <__hexnan+0x7a>
 800f116:	2508      	movs	r5, #8
 800f118:	e7b5      	b.n	800f086 <__hexnan+0x7a>
 800f11a:	9b01      	ldr	r3, [sp, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d0df      	beq.n	800f0e0 <__hexnan+0xd4>
 800f120:	f04f 32ff 	mov.w	r2, #4294967295
 800f124:	f1c3 0320 	rsb	r3, r3, #32
 800f128:	fa22 f303 	lsr.w	r3, r2, r3
 800f12c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f130:	401a      	ands	r2, r3
 800f132:	f846 2c04 	str.w	r2, [r6, #-4]
 800f136:	e7d3      	b.n	800f0e0 <__hexnan+0xd4>
 800f138:	3f04      	subs	r7, #4
 800f13a:	e7d1      	b.n	800f0e0 <__hexnan+0xd4>
 800f13c:	2004      	movs	r0, #4
 800f13e:	b007      	add	sp, #28
 800f140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f144 <_localeconv_r>:
 800f144:	4800      	ldr	r0, [pc, #0]	; (800f148 <_localeconv_r+0x4>)
 800f146:	4770      	bx	lr
 800f148:	20000264 	.word	0x20000264

0800f14c <malloc>:
 800f14c:	4b02      	ldr	r3, [pc, #8]	; (800f158 <malloc+0xc>)
 800f14e:	4601      	mov	r1, r0
 800f150:	6818      	ldr	r0, [r3, #0]
 800f152:	f000 bd67 	b.w	800fc24 <_malloc_r>
 800f156:	bf00      	nop
 800f158:	2000010c 	.word	0x2000010c

0800f15c <__ascii_mbtowc>:
 800f15c:	b082      	sub	sp, #8
 800f15e:	b901      	cbnz	r1, 800f162 <__ascii_mbtowc+0x6>
 800f160:	a901      	add	r1, sp, #4
 800f162:	b142      	cbz	r2, 800f176 <__ascii_mbtowc+0x1a>
 800f164:	b14b      	cbz	r3, 800f17a <__ascii_mbtowc+0x1e>
 800f166:	7813      	ldrb	r3, [r2, #0]
 800f168:	600b      	str	r3, [r1, #0]
 800f16a:	7812      	ldrb	r2, [r2, #0]
 800f16c:	1e10      	subs	r0, r2, #0
 800f16e:	bf18      	it	ne
 800f170:	2001      	movne	r0, #1
 800f172:	b002      	add	sp, #8
 800f174:	4770      	bx	lr
 800f176:	4610      	mov	r0, r2
 800f178:	e7fb      	b.n	800f172 <__ascii_mbtowc+0x16>
 800f17a:	f06f 0001 	mvn.w	r0, #1
 800f17e:	e7f8      	b.n	800f172 <__ascii_mbtowc+0x16>

0800f180 <memcpy>:
 800f180:	440a      	add	r2, r1
 800f182:	4291      	cmp	r1, r2
 800f184:	f100 33ff 	add.w	r3, r0, #4294967295
 800f188:	d100      	bne.n	800f18c <memcpy+0xc>
 800f18a:	4770      	bx	lr
 800f18c:	b510      	push	{r4, lr}
 800f18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f196:	4291      	cmp	r1, r2
 800f198:	d1f9      	bne.n	800f18e <memcpy+0xe>
 800f19a:	bd10      	pop	{r4, pc}

0800f19c <_Balloc>:
 800f19c:	b570      	push	{r4, r5, r6, lr}
 800f19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	460d      	mov	r5, r1
 800f1a4:	b976      	cbnz	r6, 800f1c4 <_Balloc+0x28>
 800f1a6:	2010      	movs	r0, #16
 800f1a8:	f7ff ffd0 	bl	800f14c <malloc>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	6260      	str	r0, [r4, #36]	; 0x24
 800f1b0:	b920      	cbnz	r0, 800f1bc <_Balloc+0x20>
 800f1b2:	4b18      	ldr	r3, [pc, #96]	; (800f214 <_Balloc+0x78>)
 800f1b4:	4818      	ldr	r0, [pc, #96]	; (800f218 <_Balloc+0x7c>)
 800f1b6:	2166      	movs	r1, #102	; 0x66
 800f1b8:	f000 ff36 	bl	8010028 <__assert_func>
 800f1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1c0:	6006      	str	r6, [r0, #0]
 800f1c2:	60c6      	str	r6, [r0, #12]
 800f1c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f1c6:	68f3      	ldr	r3, [r6, #12]
 800f1c8:	b183      	cbz	r3, 800f1ec <_Balloc+0x50>
 800f1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1d2:	b9b8      	cbnz	r0, 800f204 <_Balloc+0x68>
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	fa01 f605 	lsl.w	r6, r1, r5
 800f1da:	1d72      	adds	r2, r6, #5
 800f1dc:	0092      	lsls	r2, r2, #2
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 fc9d 	bl	800fb1e <_calloc_r>
 800f1e4:	b160      	cbz	r0, 800f200 <_Balloc+0x64>
 800f1e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1ea:	e00e      	b.n	800f20a <_Balloc+0x6e>
 800f1ec:	2221      	movs	r2, #33	; 0x21
 800f1ee:	2104      	movs	r1, #4
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fc94 	bl	800fb1e <_calloc_r>
 800f1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1f8:	60f0      	str	r0, [r6, #12]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d1e4      	bne.n	800f1ca <_Balloc+0x2e>
 800f200:	2000      	movs	r0, #0
 800f202:	bd70      	pop	{r4, r5, r6, pc}
 800f204:	6802      	ldr	r2, [r0, #0]
 800f206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f20a:	2300      	movs	r3, #0
 800f20c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f210:	e7f7      	b.n	800f202 <_Balloc+0x66>
 800f212:	bf00      	nop
 800f214:	0801485e 	.word	0x0801485e
 800f218:	0801495c 	.word	0x0801495c

0800f21c <_Bfree>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f220:	4605      	mov	r5, r0
 800f222:	460c      	mov	r4, r1
 800f224:	b976      	cbnz	r6, 800f244 <_Bfree+0x28>
 800f226:	2010      	movs	r0, #16
 800f228:	f7ff ff90 	bl	800f14c <malloc>
 800f22c:	4602      	mov	r2, r0
 800f22e:	6268      	str	r0, [r5, #36]	; 0x24
 800f230:	b920      	cbnz	r0, 800f23c <_Bfree+0x20>
 800f232:	4b09      	ldr	r3, [pc, #36]	; (800f258 <_Bfree+0x3c>)
 800f234:	4809      	ldr	r0, [pc, #36]	; (800f25c <_Bfree+0x40>)
 800f236:	218a      	movs	r1, #138	; 0x8a
 800f238:	f000 fef6 	bl	8010028 <__assert_func>
 800f23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f240:	6006      	str	r6, [r0, #0]
 800f242:	60c6      	str	r6, [r0, #12]
 800f244:	b13c      	cbz	r4, 800f256 <_Bfree+0x3a>
 800f246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f248:	6862      	ldr	r2, [r4, #4]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f250:	6021      	str	r1, [r4, #0]
 800f252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f256:	bd70      	pop	{r4, r5, r6, pc}
 800f258:	0801485e 	.word	0x0801485e
 800f25c:	0801495c 	.word	0x0801495c

0800f260 <__multadd>:
 800f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f264:	690d      	ldr	r5, [r1, #16]
 800f266:	4607      	mov	r7, r0
 800f268:	460c      	mov	r4, r1
 800f26a:	461e      	mov	r6, r3
 800f26c:	f101 0c14 	add.w	ip, r1, #20
 800f270:	2000      	movs	r0, #0
 800f272:	f8dc 3000 	ldr.w	r3, [ip]
 800f276:	b299      	uxth	r1, r3
 800f278:	fb02 6101 	mla	r1, r2, r1, r6
 800f27c:	0c1e      	lsrs	r6, r3, #16
 800f27e:	0c0b      	lsrs	r3, r1, #16
 800f280:	fb02 3306 	mla	r3, r2, r6, r3
 800f284:	b289      	uxth	r1, r1
 800f286:	3001      	adds	r0, #1
 800f288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f28c:	4285      	cmp	r5, r0
 800f28e:	f84c 1b04 	str.w	r1, [ip], #4
 800f292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f296:	dcec      	bgt.n	800f272 <__multadd+0x12>
 800f298:	b30e      	cbz	r6, 800f2de <__multadd+0x7e>
 800f29a:	68a3      	ldr	r3, [r4, #8]
 800f29c:	42ab      	cmp	r3, r5
 800f29e:	dc19      	bgt.n	800f2d4 <__multadd+0x74>
 800f2a0:	6861      	ldr	r1, [r4, #4]
 800f2a2:	4638      	mov	r0, r7
 800f2a4:	3101      	adds	r1, #1
 800f2a6:	f7ff ff79 	bl	800f19c <_Balloc>
 800f2aa:	4680      	mov	r8, r0
 800f2ac:	b928      	cbnz	r0, 800f2ba <__multadd+0x5a>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	4b0c      	ldr	r3, [pc, #48]	; (800f2e4 <__multadd+0x84>)
 800f2b2:	480d      	ldr	r0, [pc, #52]	; (800f2e8 <__multadd+0x88>)
 800f2b4:	21b5      	movs	r1, #181	; 0xb5
 800f2b6:	f000 feb7 	bl	8010028 <__assert_func>
 800f2ba:	6922      	ldr	r2, [r4, #16]
 800f2bc:	3202      	adds	r2, #2
 800f2be:	f104 010c 	add.w	r1, r4, #12
 800f2c2:	0092      	lsls	r2, r2, #2
 800f2c4:	300c      	adds	r0, #12
 800f2c6:	f7ff ff5b 	bl	800f180 <memcpy>
 800f2ca:	4621      	mov	r1, r4
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	f7ff ffa5 	bl	800f21c <_Bfree>
 800f2d2:	4644      	mov	r4, r8
 800f2d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2d8:	3501      	adds	r5, #1
 800f2da:	615e      	str	r6, [r3, #20]
 800f2dc:	6125      	str	r5, [r4, #16]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e4:	080148d0 	.word	0x080148d0
 800f2e8:	0801495c 	.word	0x0801495c

0800f2ec <__s2b>:
 800f2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2f0:	460c      	mov	r4, r1
 800f2f2:	4615      	mov	r5, r2
 800f2f4:	461f      	mov	r7, r3
 800f2f6:	2209      	movs	r2, #9
 800f2f8:	3308      	adds	r3, #8
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f300:	2100      	movs	r1, #0
 800f302:	2201      	movs	r2, #1
 800f304:	429a      	cmp	r2, r3
 800f306:	db09      	blt.n	800f31c <__s2b+0x30>
 800f308:	4630      	mov	r0, r6
 800f30a:	f7ff ff47 	bl	800f19c <_Balloc>
 800f30e:	b940      	cbnz	r0, 800f322 <__s2b+0x36>
 800f310:	4602      	mov	r2, r0
 800f312:	4b19      	ldr	r3, [pc, #100]	; (800f378 <__s2b+0x8c>)
 800f314:	4819      	ldr	r0, [pc, #100]	; (800f37c <__s2b+0x90>)
 800f316:	21ce      	movs	r1, #206	; 0xce
 800f318:	f000 fe86 	bl	8010028 <__assert_func>
 800f31c:	0052      	lsls	r2, r2, #1
 800f31e:	3101      	adds	r1, #1
 800f320:	e7f0      	b.n	800f304 <__s2b+0x18>
 800f322:	9b08      	ldr	r3, [sp, #32]
 800f324:	6143      	str	r3, [r0, #20]
 800f326:	2d09      	cmp	r5, #9
 800f328:	f04f 0301 	mov.w	r3, #1
 800f32c:	6103      	str	r3, [r0, #16]
 800f32e:	dd16      	ble.n	800f35e <__s2b+0x72>
 800f330:	f104 0909 	add.w	r9, r4, #9
 800f334:	46c8      	mov	r8, r9
 800f336:	442c      	add	r4, r5
 800f338:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f33c:	4601      	mov	r1, r0
 800f33e:	3b30      	subs	r3, #48	; 0x30
 800f340:	220a      	movs	r2, #10
 800f342:	4630      	mov	r0, r6
 800f344:	f7ff ff8c 	bl	800f260 <__multadd>
 800f348:	45a0      	cmp	r8, r4
 800f34a:	d1f5      	bne.n	800f338 <__s2b+0x4c>
 800f34c:	f1a5 0408 	sub.w	r4, r5, #8
 800f350:	444c      	add	r4, r9
 800f352:	1b2d      	subs	r5, r5, r4
 800f354:	1963      	adds	r3, r4, r5
 800f356:	42bb      	cmp	r3, r7
 800f358:	db04      	blt.n	800f364 <__s2b+0x78>
 800f35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f35e:	340a      	adds	r4, #10
 800f360:	2509      	movs	r5, #9
 800f362:	e7f6      	b.n	800f352 <__s2b+0x66>
 800f364:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f368:	4601      	mov	r1, r0
 800f36a:	3b30      	subs	r3, #48	; 0x30
 800f36c:	220a      	movs	r2, #10
 800f36e:	4630      	mov	r0, r6
 800f370:	f7ff ff76 	bl	800f260 <__multadd>
 800f374:	e7ee      	b.n	800f354 <__s2b+0x68>
 800f376:	bf00      	nop
 800f378:	080148d0 	.word	0x080148d0
 800f37c:	0801495c 	.word	0x0801495c

0800f380 <__hi0bits>:
 800f380:	0c03      	lsrs	r3, r0, #16
 800f382:	041b      	lsls	r3, r3, #16
 800f384:	b9d3      	cbnz	r3, 800f3bc <__hi0bits+0x3c>
 800f386:	0400      	lsls	r0, r0, #16
 800f388:	2310      	movs	r3, #16
 800f38a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f38e:	bf04      	itt	eq
 800f390:	0200      	lsleq	r0, r0, #8
 800f392:	3308      	addeq	r3, #8
 800f394:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f398:	bf04      	itt	eq
 800f39a:	0100      	lsleq	r0, r0, #4
 800f39c:	3304      	addeq	r3, #4
 800f39e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f3a2:	bf04      	itt	eq
 800f3a4:	0080      	lsleq	r0, r0, #2
 800f3a6:	3302      	addeq	r3, #2
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	db05      	blt.n	800f3b8 <__hi0bits+0x38>
 800f3ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f3b0:	f103 0301 	add.w	r3, r3, #1
 800f3b4:	bf08      	it	eq
 800f3b6:	2320      	moveq	r3, #32
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	4770      	bx	lr
 800f3bc:	2300      	movs	r3, #0
 800f3be:	e7e4      	b.n	800f38a <__hi0bits+0xa>

0800f3c0 <__lo0bits>:
 800f3c0:	6803      	ldr	r3, [r0, #0]
 800f3c2:	f013 0207 	ands.w	r2, r3, #7
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	d00b      	beq.n	800f3e2 <__lo0bits+0x22>
 800f3ca:	07da      	lsls	r2, r3, #31
 800f3cc:	d423      	bmi.n	800f416 <__lo0bits+0x56>
 800f3ce:	0798      	lsls	r0, r3, #30
 800f3d0:	bf49      	itett	mi
 800f3d2:	085b      	lsrmi	r3, r3, #1
 800f3d4:	089b      	lsrpl	r3, r3, #2
 800f3d6:	2001      	movmi	r0, #1
 800f3d8:	600b      	strmi	r3, [r1, #0]
 800f3da:	bf5c      	itt	pl
 800f3dc:	600b      	strpl	r3, [r1, #0]
 800f3de:	2002      	movpl	r0, #2
 800f3e0:	4770      	bx	lr
 800f3e2:	b298      	uxth	r0, r3
 800f3e4:	b9a8      	cbnz	r0, 800f412 <__lo0bits+0x52>
 800f3e6:	0c1b      	lsrs	r3, r3, #16
 800f3e8:	2010      	movs	r0, #16
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	b90a      	cbnz	r2, 800f3f2 <__lo0bits+0x32>
 800f3ee:	3008      	adds	r0, #8
 800f3f0:	0a1b      	lsrs	r3, r3, #8
 800f3f2:	071a      	lsls	r2, r3, #28
 800f3f4:	bf04      	itt	eq
 800f3f6:	091b      	lsreq	r3, r3, #4
 800f3f8:	3004      	addeq	r0, #4
 800f3fa:	079a      	lsls	r2, r3, #30
 800f3fc:	bf04      	itt	eq
 800f3fe:	089b      	lsreq	r3, r3, #2
 800f400:	3002      	addeq	r0, #2
 800f402:	07da      	lsls	r2, r3, #31
 800f404:	d403      	bmi.n	800f40e <__lo0bits+0x4e>
 800f406:	085b      	lsrs	r3, r3, #1
 800f408:	f100 0001 	add.w	r0, r0, #1
 800f40c:	d005      	beq.n	800f41a <__lo0bits+0x5a>
 800f40e:	600b      	str	r3, [r1, #0]
 800f410:	4770      	bx	lr
 800f412:	4610      	mov	r0, r2
 800f414:	e7e9      	b.n	800f3ea <__lo0bits+0x2a>
 800f416:	2000      	movs	r0, #0
 800f418:	4770      	bx	lr
 800f41a:	2020      	movs	r0, #32
 800f41c:	4770      	bx	lr
	...

0800f420 <__i2b>:
 800f420:	b510      	push	{r4, lr}
 800f422:	460c      	mov	r4, r1
 800f424:	2101      	movs	r1, #1
 800f426:	f7ff feb9 	bl	800f19c <_Balloc>
 800f42a:	4602      	mov	r2, r0
 800f42c:	b928      	cbnz	r0, 800f43a <__i2b+0x1a>
 800f42e:	4b05      	ldr	r3, [pc, #20]	; (800f444 <__i2b+0x24>)
 800f430:	4805      	ldr	r0, [pc, #20]	; (800f448 <__i2b+0x28>)
 800f432:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f436:	f000 fdf7 	bl	8010028 <__assert_func>
 800f43a:	2301      	movs	r3, #1
 800f43c:	6144      	str	r4, [r0, #20]
 800f43e:	6103      	str	r3, [r0, #16]
 800f440:	bd10      	pop	{r4, pc}
 800f442:	bf00      	nop
 800f444:	080148d0 	.word	0x080148d0
 800f448:	0801495c 	.word	0x0801495c

0800f44c <__multiply>:
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	4691      	mov	r9, r2
 800f452:	690a      	ldr	r2, [r1, #16]
 800f454:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f458:	429a      	cmp	r2, r3
 800f45a:	bfb8      	it	lt
 800f45c:	460b      	movlt	r3, r1
 800f45e:	460c      	mov	r4, r1
 800f460:	bfbc      	itt	lt
 800f462:	464c      	movlt	r4, r9
 800f464:	4699      	movlt	r9, r3
 800f466:	6927      	ldr	r7, [r4, #16]
 800f468:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f46c:	68a3      	ldr	r3, [r4, #8]
 800f46e:	6861      	ldr	r1, [r4, #4]
 800f470:	eb07 060a 	add.w	r6, r7, sl
 800f474:	42b3      	cmp	r3, r6
 800f476:	b085      	sub	sp, #20
 800f478:	bfb8      	it	lt
 800f47a:	3101      	addlt	r1, #1
 800f47c:	f7ff fe8e 	bl	800f19c <_Balloc>
 800f480:	b930      	cbnz	r0, 800f490 <__multiply+0x44>
 800f482:	4602      	mov	r2, r0
 800f484:	4b44      	ldr	r3, [pc, #272]	; (800f598 <__multiply+0x14c>)
 800f486:	4845      	ldr	r0, [pc, #276]	; (800f59c <__multiply+0x150>)
 800f488:	f240 115d 	movw	r1, #349	; 0x15d
 800f48c:	f000 fdcc 	bl	8010028 <__assert_func>
 800f490:	f100 0514 	add.w	r5, r0, #20
 800f494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f498:	462b      	mov	r3, r5
 800f49a:	2200      	movs	r2, #0
 800f49c:	4543      	cmp	r3, r8
 800f49e:	d321      	bcc.n	800f4e4 <__multiply+0x98>
 800f4a0:	f104 0314 	add.w	r3, r4, #20
 800f4a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f4a8:	f109 0314 	add.w	r3, r9, #20
 800f4ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f4b0:	9202      	str	r2, [sp, #8]
 800f4b2:	1b3a      	subs	r2, r7, r4
 800f4b4:	3a15      	subs	r2, #21
 800f4b6:	f022 0203 	bic.w	r2, r2, #3
 800f4ba:	3204      	adds	r2, #4
 800f4bc:	f104 0115 	add.w	r1, r4, #21
 800f4c0:	428f      	cmp	r7, r1
 800f4c2:	bf38      	it	cc
 800f4c4:	2204      	movcc	r2, #4
 800f4c6:	9201      	str	r2, [sp, #4]
 800f4c8:	9a02      	ldr	r2, [sp, #8]
 800f4ca:	9303      	str	r3, [sp, #12]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d80c      	bhi.n	800f4ea <__multiply+0x9e>
 800f4d0:	2e00      	cmp	r6, #0
 800f4d2:	dd03      	ble.n	800f4dc <__multiply+0x90>
 800f4d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d05a      	beq.n	800f592 <__multiply+0x146>
 800f4dc:	6106      	str	r6, [r0, #16]
 800f4de:	b005      	add	sp, #20
 800f4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e4:	f843 2b04 	str.w	r2, [r3], #4
 800f4e8:	e7d8      	b.n	800f49c <__multiply+0x50>
 800f4ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4ee:	f1ba 0f00 	cmp.w	sl, #0
 800f4f2:	d024      	beq.n	800f53e <__multiply+0xf2>
 800f4f4:	f104 0e14 	add.w	lr, r4, #20
 800f4f8:	46a9      	mov	r9, r5
 800f4fa:	f04f 0c00 	mov.w	ip, #0
 800f4fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f502:	f8d9 1000 	ldr.w	r1, [r9]
 800f506:	fa1f fb82 	uxth.w	fp, r2
 800f50a:	b289      	uxth	r1, r1
 800f50c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f510:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f514:	f8d9 2000 	ldr.w	r2, [r9]
 800f518:	4461      	add	r1, ip
 800f51a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f51e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f522:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f526:	b289      	uxth	r1, r1
 800f528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f52c:	4577      	cmp	r7, lr
 800f52e:	f849 1b04 	str.w	r1, [r9], #4
 800f532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f536:	d8e2      	bhi.n	800f4fe <__multiply+0xb2>
 800f538:	9a01      	ldr	r2, [sp, #4]
 800f53a:	f845 c002 	str.w	ip, [r5, r2]
 800f53e:	9a03      	ldr	r2, [sp, #12]
 800f540:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f544:	3304      	adds	r3, #4
 800f546:	f1b9 0f00 	cmp.w	r9, #0
 800f54a:	d020      	beq.n	800f58e <__multiply+0x142>
 800f54c:	6829      	ldr	r1, [r5, #0]
 800f54e:	f104 0c14 	add.w	ip, r4, #20
 800f552:	46ae      	mov	lr, r5
 800f554:	f04f 0a00 	mov.w	sl, #0
 800f558:	f8bc b000 	ldrh.w	fp, [ip]
 800f55c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f560:	fb09 220b 	mla	r2, r9, fp, r2
 800f564:	4492      	add	sl, r2
 800f566:	b289      	uxth	r1, r1
 800f568:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f56c:	f84e 1b04 	str.w	r1, [lr], #4
 800f570:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f574:	f8be 1000 	ldrh.w	r1, [lr]
 800f578:	0c12      	lsrs	r2, r2, #16
 800f57a:	fb09 1102 	mla	r1, r9, r2, r1
 800f57e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f582:	4567      	cmp	r7, ip
 800f584:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f588:	d8e6      	bhi.n	800f558 <__multiply+0x10c>
 800f58a:	9a01      	ldr	r2, [sp, #4]
 800f58c:	50a9      	str	r1, [r5, r2]
 800f58e:	3504      	adds	r5, #4
 800f590:	e79a      	b.n	800f4c8 <__multiply+0x7c>
 800f592:	3e01      	subs	r6, #1
 800f594:	e79c      	b.n	800f4d0 <__multiply+0x84>
 800f596:	bf00      	nop
 800f598:	080148d0 	.word	0x080148d0
 800f59c:	0801495c 	.word	0x0801495c

0800f5a0 <__pow5mult>:
 800f5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5a4:	4615      	mov	r5, r2
 800f5a6:	f012 0203 	ands.w	r2, r2, #3
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	460f      	mov	r7, r1
 800f5ae:	d007      	beq.n	800f5c0 <__pow5mult+0x20>
 800f5b0:	4c25      	ldr	r4, [pc, #148]	; (800f648 <__pow5mult+0xa8>)
 800f5b2:	3a01      	subs	r2, #1
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5ba:	f7ff fe51 	bl	800f260 <__multadd>
 800f5be:	4607      	mov	r7, r0
 800f5c0:	10ad      	asrs	r5, r5, #2
 800f5c2:	d03d      	beq.n	800f640 <__pow5mult+0xa0>
 800f5c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f5c6:	b97c      	cbnz	r4, 800f5e8 <__pow5mult+0x48>
 800f5c8:	2010      	movs	r0, #16
 800f5ca:	f7ff fdbf 	bl	800f14c <malloc>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	6270      	str	r0, [r6, #36]	; 0x24
 800f5d2:	b928      	cbnz	r0, 800f5e0 <__pow5mult+0x40>
 800f5d4:	4b1d      	ldr	r3, [pc, #116]	; (800f64c <__pow5mult+0xac>)
 800f5d6:	481e      	ldr	r0, [pc, #120]	; (800f650 <__pow5mult+0xb0>)
 800f5d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f5dc:	f000 fd24 	bl	8010028 <__assert_func>
 800f5e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5e4:	6004      	str	r4, [r0, #0]
 800f5e6:	60c4      	str	r4, [r0, #12]
 800f5e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f5ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5f0:	b94c      	cbnz	r4, 800f606 <__pow5mult+0x66>
 800f5f2:	f240 2171 	movw	r1, #625	; 0x271
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	f7ff ff12 	bl	800f420 <__i2b>
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800f602:	4604      	mov	r4, r0
 800f604:	6003      	str	r3, [r0, #0]
 800f606:	f04f 0900 	mov.w	r9, #0
 800f60a:	07eb      	lsls	r3, r5, #31
 800f60c:	d50a      	bpl.n	800f624 <__pow5mult+0x84>
 800f60e:	4639      	mov	r1, r7
 800f610:	4622      	mov	r2, r4
 800f612:	4630      	mov	r0, r6
 800f614:	f7ff ff1a 	bl	800f44c <__multiply>
 800f618:	4639      	mov	r1, r7
 800f61a:	4680      	mov	r8, r0
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7ff fdfd 	bl	800f21c <_Bfree>
 800f622:	4647      	mov	r7, r8
 800f624:	106d      	asrs	r5, r5, #1
 800f626:	d00b      	beq.n	800f640 <__pow5mult+0xa0>
 800f628:	6820      	ldr	r0, [r4, #0]
 800f62a:	b938      	cbnz	r0, 800f63c <__pow5mult+0x9c>
 800f62c:	4622      	mov	r2, r4
 800f62e:	4621      	mov	r1, r4
 800f630:	4630      	mov	r0, r6
 800f632:	f7ff ff0b 	bl	800f44c <__multiply>
 800f636:	6020      	str	r0, [r4, #0]
 800f638:	f8c0 9000 	str.w	r9, [r0]
 800f63c:	4604      	mov	r4, r0
 800f63e:	e7e4      	b.n	800f60a <__pow5mult+0x6a>
 800f640:	4638      	mov	r0, r7
 800f642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f646:	bf00      	nop
 800f648:	08014aa8 	.word	0x08014aa8
 800f64c:	0801485e 	.word	0x0801485e
 800f650:	0801495c 	.word	0x0801495c

0800f654 <__lshift>:
 800f654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f658:	460c      	mov	r4, r1
 800f65a:	6849      	ldr	r1, [r1, #4]
 800f65c:	6923      	ldr	r3, [r4, #16]
 800f65e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f662:	68a3      	ldr	r3, [r4, #8]
 800f664:	4607      	mov	r7, r0
 800f666:	4691      	mov	r9, r2
 800f668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f66c:	f108 0601 	add.w	r6, r8, #1
 800f670:	42b3      	cmp	r3, r6
 800f672:	db0b      	blt.n	800f68c <__lshift+0x38>
 800f674:	4638      	mov	r0, r7
 800f676:	f7ff fd91 	bl	800f19c <_Balloc>
 800f67a:	4605      	mov	r5, r0
 800f67c:	b948      	cbnz	r0, 800f692 <__lshift+0x3e>
 800f67e:	4602      	mov	r2, r0
 800f680:	4b2a      	ldr	r3, [pc, #168]	; (800f72c <__lshift+0xd8>)
 800f682:	482b      	ldr	r0, [pc, #172]	; (800f730 <__lshift+0xdc>)
 800f684:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f688:	f000 fcce 	bl	8010028 <__assert_func>
 800f68c:	3101      	adds	r1, #1
 800f68e:	005b      	lsls	r3, r3, #1
 800f690:	e7ee      	b.n	800f670 <__lshift+0x1c>
 800f692:	2300      	movs	r3, #0
 800f694:	f100 0114 	add.w	r1, r0, #20
 800f698:	f100 0210 	add.w	r2, r0, #16
 800f69c:	4618      	mov	r0, r3
 800f69e:	4553      	cmp	r3, sl
 800f6a0:	db37      	blt.n	800f712 <__lshift+0xbe>
 800f6a2:	6920      	ldr	r0, [r4, #16]
 800f6a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6a8:	f104 0314 	add.w	r3, r4, #20
 800f6ac:	f019 091f 	ands.w	r9, r9, #31
 800f6b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f6b8:	d02f      	beq.n	800f71a <__lshift+0xc6>
 800f6ba:	f1c9 0e20 	rsb	lr, r9, #32
 800f6be:	468a      	mov	sl, r1
 800f6c0:	f04f 0c00 	mov.w	ip, #0
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	fa02 f209 	lsl.w	r2, r2, r9
 800f6ca:	ea42 020c 	orr.w	r2, r2, ip
 800f6ce:	f84a 2b04 	str.w	r2, [sl], #4
 800f6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6d6:	4298      	cmp	r0, r3
 800f6d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f6dc:	d8f2      	bhi.n	800f6c4 <__lshift+0x70>
 800f6de:	1b03      	subs	r3, r0, r4
 800f6e0:	3b15      	subs	r3, #21
 800f6e2:	f023 0303 	bic.w	r3, r3, #3
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	f104 0215 	add.w	r2, r4, #21
 800f6ec:	4290      	cmp	r0, r2
 800f6ee:	bf38      	it	cc
 800f6f0:	2304      	movcc	r3, #4
 800f6f2:	f841 c003 	str.w	ip, [r1, r3]
 800f6f6:	f1bc 0f00 	cmp.w	ip, #0
 800f6fa:	d001      	beq.n	800f700 <__lshift+0xac>
 800f6fc:	f108 0602 	add.w	r6, r8, #2
 800f700:	3e01      	subs	r6, #1
 800f702:	4638      	mov	r0, r7
 800f704:	612e      	str	r6, [r5, #16]
 800f706:	4621      	mov	r1, r4
 800f708:	f7ff fd88 	bl	800f21c <_Bfree>
 800f70c:	4628      	mov	r0, r5
 800f70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f712:	f842 0f04 	str.w	r0, [r2, #4]!
 800f716:	3301      	adds	r3, #1
 800f718:	e7c1      	b.n	800f69e <__lshift+0x4a>
 800f71a:	3904      	subs	r1, #4
 800f71c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f720:	f841 2f04 	str.w	r2, [r1, #4]!
 800f724:	4298      	cmp	r0, r3
 800f726:	d8f9      	bhi.n	800f71c <__lshift+0xc8>
 800f728:	e7ea      	b.n	800f700 <__lshift+0xac>
 800f72a:	bf00      	nop
 800f72c:	080148d0 	.word	0x080148d0
 800f730:	0801495c 	.word	0x0801495c

0800f734 <__mcmp>:
 800f734:	b530      	push	{r4, r5, lr}
 800f736:	6902      	ldr	r2, [r0, #16]
 800f738:	690c      	ldr	r4, [r1, #16]
 800f73a:	1b12      	subs	r2, r2, r4
 800f73c:	d10e      	bne.n	800f75c <__mcmp+0x28>
 800f73e:	f100 0314 	add.w	r3, r0, #20
 800f742:	3114      	adds	r1, #20
 800f744:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f748:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f74c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f750:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f754:	42a5      	cmp	r5, r4
 800f756:	d003      	beq.n	800f760 <__mcmp+0x2c>
 800f758:	d305      	bcc.n	800f766 <__mcmp+0x32>
 800f75a:	2201      	movs	r2, #1
 800f75c:	4610      	mov	r0, r2
 800f75e:	bd30      	pop	{r4, r5, pc}
 800f760:	4283      	cmp	r3, r0
 800f762:	d3f3      	bcc.n	800f74c <__mcmp+0x18>
 800f764:	e7fa      	b.n	800f75c <__mcmp+0x28>
 800f766:	f04f 32ff 	mov.w	r2, #4294967295
 800f76a:	e7f7      	b.n	800f75c <__mcmp+0x28>

0800f76c <__mdiff>:
 800f76c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f770:	460c      	mov	r4, r1
 800f772:	4606      	mov	r6, r0
 800f774:	4611      	mov	r1, r2
 800f776:	4620      	mov	r0, r4
 800f778:	4690      	mov	r8, r2
 800f77a:	f7ff ffdb 	bl	800f734 <__mcmp>
 800f77e:	1e05      	subs	r5, r0, #0
 800f780:	d110      	bne.n	800f7a4 <__mdiff+0x38>
 800f782:	4629      	mov	r1, r5
 800f784:	4630      	mov	r0, r6
 800f786:	f7ff fd09 	bl	800f19c <_Balloc>
 800f78a:	b930      	cbnz	r0, 800f79a <__mdiff+0x2e>
 800f78c:	4b3a      	ldr	r3, [pc, #232]	; (800f878 <__mdiff+0x10c>)
 800f78e:	4602      	mov	r2, r0
 800f790:	f240 2132 	movw	r1, #562	; 0x232
 800f794:	4839      	ldr	r0, [pc, #228]	; (800f87c <__mdiff+0x110>)
 800f796:	f000 fc47 	bl	8010028 <__assert_func>
 800f79a:	2301      	movs	r3, #1
 800f79c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a4:	bfa4      	itt	ge
 800f7a6:	4643      	movge	r3, r8
 800f7a8:	46a0      	movge	r8, r4
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7b0:	bfa6      	itte	ge
 800f7b2:	461c      	movge	r4, r3
 800f7b4:	2500      	movge	r5, #0
 800f7b6:	2501      	movlt	r5, #1
 800f7b8:	f7ff fcf0 	bl	800f19c <_Balloc>
 800f7bc:	b920      	cbnz	r0, 800f7c8 <__mdiff+0x5c>
 800f7be:	4b2e      	ldr	r3, [pc, #184]	; (800f878 <__mdiff+0x10c>)
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f7c6:	e7e5      	b.n	800f794 <__mdiff+0x28>
 800f7c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7cc:	6926      	ldr	r6, [r4, #16]
 800f7ce:	60c5      	str	r5, [r0, #12]
 800f7d0:	f104 0914 	add.w	r9, r4, #20
 800f7d4:	f108 0514 	add.w	r5, r8, #20
 800f7d8:	f100 0e14 	add.w	lr, r0, #20
 800f7dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7e4:	f108 0210 	add.w	r2, r8, #16
 800f7e8:	46f2      	mov	sl, lr
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7f4:	fa1f f883 	uxth.w	r8, r3
 800f7f8:	fa11 f18b 	uxtah	r1, r1, fp
 800f7fc:	0c1b      	lsrs	r3, r3, #16
 800f7fe:	eba1 0808 	sub.w	r8, r1, r8
 800f802:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f806:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f80a:	fa1f f888 	uxth.w	r8, r8
 800f80e:	1419      	asrs	r1, r3, #16
 800f810:	454e      	cmp	r6, r9
 800f812:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f816:	f84a 3b04 	str.w	r3, [sl], #4
 800f81a:	d8e7      	bhi.n	800f7ec <__mdiff+0x80>
 800f81c:	1b33      	subs	r3, r6, r4
 800f81e:	3b15      	subs	r3, #21
 800f820:	f023 0303 	bic.w	r3, r3, #3
 800f824:	3304      	adds	r3, #4
 800f826:	3415      	adds	r4, #21
 800f828:	42a6      	cmp	r6, r4
 800f82a:	bf38      	it	cc
 800f82c:	2304      	movcc	r3, #4
 800f82e:	441d      	add	r5, r3
 800f830:	4473      	add	r3, lr
 800f832:	469e      	mov	lr, r3
 800f834:	462e      	mov	r6, r5
 800f836:	4566      	cmp	r6, ip
 800f838:	d30e      	bcc.n	800f858 <__mdiff+0xec>
 800f83a:	f10c 0203 	add.w	r2, ip, #3
 800f83e:	1b52      	subs	r2, r2, r5
 800f840:	f022 0203 	bic.w	r2, r2, #3
 800f844:	3d03      	subs	r5, #3
 800f846:	45ac      	cmp	ip, r5
 800f848:	bf38      	it	cc
 800f84a:	2200      	movcc	r2, #0
 800f84c:	441a      	add	r2, r3
 800f84e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f852:	b17b      	cbz	r3, 800f874 <__mdiff+0x108>
 800f854:	6107      	str	r7, [r0, #16]
 800f856:	e7a3      	b.n	800f7a0 <__mdiff+0x34>
 800f858:	f856 8b04 	ldr.w	r8, [r6], #4
 800f85c:	fa11 f288 	uxtah	r2, r1, r8
 800f860:	1414      	asrs	r4, r2, #16
 800f862:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f866:	b292      	uxth	r2, r2
 800f868:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f86c:	f84e 2b04 	str.w	r2, [lr], #4
 800f870:	1421      	asrs	r1, r4, #16
 800f872:	e7e0      	b.n	800f836 <__mdiff+0xca>
 800f874:	3f01      	subs	r7, #1
 800f876:	e7ea      	b.n	800f84e <__mdiff+0xe2>
 800f878:	080148d0 	.word	0x080148d0
 800f87c:	0801495c 	.word	0x0801495c

0800f880 <__ulp>:
 800f880:	b082      	sub	sp, #8
 800f882:	ed8d 0b00 	vstr	d0, [sp]
 800f886:	9b01      	ldr	r3, [sp, #4]
 800f888:	4912      	ldr	r1, [pc, #72]	; (800f8d4 <__ulp+0x54>)
 800f88a:	4019      	ands	r1, r3
 800f88c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f890:	2900      	cmp	r1, #0
 800f892:	dd05      	ble.n	800f8a0 <__ulp+0x20>
 800f894:	2200      	movs	r2, #0
 800f896:	460b      	mov	r3, r1
 800f898:	ec43 2b10 	vmov	d0, r2, r3
 800f89c:	b002      	add	sp, #8
 800f89e:	4770      	bx	lr
 800f8a0:	4249      	negs	r1, r1
 800f8a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f8a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f8aa:	f04f 0200 	mov.w	r2, #0
 800f8ae:	f04f 0300 	mov.w	r3, #0
 800f8b2:	da04      	bge.n	800f8be <__ulp+0x3e>
 800f8b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f8b8:	fa41 f300 	asr.w	r3, r1, r0
 800f8bc:	e7ec      	b.n	800f898 <__ulp+0x18>
 800f8be:	f1a0 0114 	sub.w	r1, r0, #20
 800f8c2:	291e      	cmp	r1, #30
 800f8c4:	bfda      	itte	le
 800f8c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f8ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800f8ce:	2101      	movgt	r1, #1
 800f8d0:	460a      	mov	r2, r1
 800f8d2:	e7e1      	b.n	800f898 <__ulp+0x18>
 800f8d4:	7ff00000 	.word	0x7ff00000

0800f8d8 <__b2d>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	6905      	ldr	r5, [r0, #16]
 800f8dc:	f100 0714 	add.w	r7, r0, #20
 800f8e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f8e4:	1f2e      	subs	r6, r5, #4
 800f8e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f7ff fd48 	bl	800f380 <__hi0bits>
 800f8f0:	f1c0 0320 	rsb	r3, r0, #32
 800f8f4:	280a      	cmp	r0, #10
 800f8f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f974 <__b2d+0x9c>
 800f8fa:	600b      	str	r3, [r1, #0]
 800f8fc:	dc14      	bgt.n	800f928 <__b2d+0x50>
 800f8fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800f902:	fa24 f10e 	lsr.w	r1, r4, lr
 800f906:	42b7      	cmp	r7, r6
 800f908:	ea41 030c 	orr.w	r3, r1, ip
 800f90c:	bf34      	ite	cc
 800f90e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f912:	2100      	movcs	r1, #0
 800f914:	3015      	adds	r0, #21
 800f916:	fa04 f000 	lsl.w	r0, r4, r0
 800f91a:	fa21 f10e 	lsr.w	r1, r1, lr
 800f91e:	ea40 0201 	orr.w	r2, r0, r1
 800f922:	ec43 2b10 	vmov	d0, r2, r3
 800f926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f928:	42b7      	cmp	r7, r6
 800f92a:	bf3a      	itte	cc
 800f92c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f930:	f1a5 0608 	subcc.w	r6, r5, #8
 800f934:	2100      	movcs	r1, #0
 800f936:	380b      	subs	r0, #11
 800f938:	d017      	beq.n	800f96a <__b2d+0x92>
 800f93a:	f1c0 0c20 	rsb	ip, r0, #32
 800f93e:	fa04 f500 	lsl.w	r5, r4, r0
 800f942:	42be      	cmp	r6, r7
 800f944:	fa21 f40c 	lsr.w	r4, r1, ip
 800f948:	ea45 0504 	orr.w	r5, r5, r4
 800f94c:	bf8c      	ite	hi
 800f94e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f952:	2400      	movls	r4, #0
 800f954:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f958:	fa01 f000 	lsl.w	r0, r1, r0
 800f95c:	fa24 f40c 	lsr.w	r4, r4, ip
 800f960:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f964:	ea40 0204 	orr.w	r2, r0, r4
 800f968:	e7db      	b.n	800f922 <__b2d+0x4a>
 800f96a:	ea44 030c 	orr.w	r3, r4, ip
 800f96e:	460a      	mov	r2, r1
 800f970:	e7d7      	b.n	800f922 <__b2d+0x4a>
 800f972:	bf00      	nop
 800f974:	3ff00000 	.word	0x3ff00000

0800f978 <__d2b>:
 800f978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f97c:	4689      	mov	r9, r1
 800f97e:	2101      	movs	r1, #1
 800f980:	ec57 6b10 	vmov	r6, r7, d0
 800f984:	4690      	mov	r8, r2
 800f986:	f7ff fc09 	bl	800f19c <_Balloc>
 800f98a:	4604      	mov	r4, r0
 800f98c:	b930      	cbnz	r0, 800f99c <__d2b+0x24>
 800f98e:	4602      	mov	r2, r0
 800f990:	4b25      	ldr	r3, [pc, #148]	; (800fa28 <__d2b+0xb0>)
 800f992:	4826      	ldr	r0, [pc, #152]	; (800fa2c <__d2b+0xb4>)
 800f994:	f240 310a 	movw	r1, #778	; 0x30a
 800f998:	f000 fb46 	bl	8010028 <__assert_func>
 800f99c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f9a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9a4:	bb35      	cbnz	r5, 800f9f4 <__d2b+0x7c>
 800f9a6:	2e00      	cmp	r6, #0
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	d028      	beq.n	800f9fe <__d2b+0x86>
 800f9ac:	4668      	mov	r0, sp
 800f9ae:	9600      	str	r6, [sp, #0]
 800f9b0:	f7ff fd06 	bl	800f3c0 <__lo0bits>
 800f9b4:	9900      	ldr	r1, [sp, #0]
 800f9b6:	b300      	cbz	r0, 800f9fa <__d2b+0x82>
 800f9b8:	9a01      	ldr	r2, [sp, #4]
 800f9ba:	f1c0 0320 	rsb	r3, r0, #32
 800f9be:	fa02 f303 	lsl.w	r3, r2, r3
 800f9c2:	430b      	orrs	r3, r1
 800f9c4:	40c2      	lsrs	r2, r0
 800f9c6:	6163      	str	r3, [r4, #20]
 800f9c8:	9201      	str	r2, [sp, #4]
 800f9ca:	9b01      	ldr	r3, [sp, #4]
 800f9cc:	61a3      	str	r3, [r4, #24]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	bf14      	ite	ne
 800f9d2:	2202      	movne	r2, #2
 800f9d4:	2201      	moveq	r2, #1
 800f9d6:	6122      	str	r2, [r4, #16]
 800f9d8:	b1d5      	cbz	r5, 800fa10 <__d2b+0x98>
 800f9da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9de:	4405      	add	r5, r0
 800f9e0:	f8c9 5000 	str.w	r5, [r9]
 800f9e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9e8:	f8c8 0000 	str.w	r0, [r8]
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	b003      	add	sp, #12
 800f9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9f8:	e7d5      	b.n	800f9a6 <__d2b+0x2e>
 800f9fa:	6161      	str	r1, [r4, #20]
 800f9fc:	e7e5      	b.n	800f9ca <__d2b+0x52>
 800f9fe:	a801      	add	r0, sp, #4
 800fa00:	f7ff fcde 	bl	800f3c0 <__lo0bits>
 800fa04:	9b01      	ldr	r3, [sp, #4]
 800fa06:	6163      	str	r3, [r4, #20]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	6122      	str	r2, [r4, #16]
 800fa0c:	3020      	adds	r0, #32
 800fa0e:	e7e3      	b.n	800f9d8 <__d2b+0x60>
 800fa10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa18:	f8c9 0000 	str.w	r0, [r9]
 800fa1c:	6918      	ldr	r0, [r3, #16]
 800fa1e:	f7ff fcaf 	bl	800f380 <__hi0bits>
 800fa22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa26:	e7df      	b.n	800f9e8 <__d2b+0x70>
 800fa28:	080148d0 	.word	0x080148d0
 800fa2c:	0801495c 	.word	0x0801495c

0800fa30 <__ratio>:
 800fa30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa34:	4688      	mov	r8, r1
 800fa36:	4669      	mov	r1, sp
 800fa38:	4681      	mov	r9, r0
 800fa3a:	f7ff ff4d 	bl	800f8d8 <__b2d>
 800fa3e:	a901      	add	r1, sp, #4
 800fa40:	4640      	mov	r0, r8
 800fa42:	ec55 4b10 	vmov	r4, r5, d0
 800fa46:	f7ff ff47 	bl	800f8d8 <__b2d>
 800fa4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fa52:	eba3 0c02 	sub.w	ip, r3, r2
 800fa56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa5a:	1a9b      	subs	r3, r3, r2
 800fa5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fa60:	ec51 0b10 	vmov	r0, r1, d0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	bfd6      	itet	le
 800fa68:	460a      	movle	r2, r1
 800fa6a:	462a      	movgt	r2, r5
 800fa6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa70:	468b      	mov	fp, r1
 800fa72:	462f      	mov	r7, r5
 800fa74:	bfd4      	ite	le
 800fa76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fa7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fa7e:	4620      	mov	r0, r4
 800fa80:	ee10 2a10 	vmov	r2, s0
 800fa84:	465b      	mov	r3, fp
 800fa86:	4639      	mov	r1, r7
 800fa88:	f7f0 fee8 	bl	800085c <__aeabi_ddiv>
 800fa8c:	ec41 0b10 	vmov	d0, r0, r1
 800fa90:	b003      	add	sp, #12
 800fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa96 <__copybits>:
 800fa96:	3901      	subs	r1, #1
 800fa98:	b570      	push	{r4, r5, r6, lr}
 800fa9a:	1149      	asrs	r1, r1, #5
 800fa9c:	6914      	ldr	r4, [r2, #16]
 800fa9e:	3101      	adds	r1, #1
 800faa0:	f102 0314 	add.w	r3, r2, #20
 800faa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800faa8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800faac:	1f05      	subs	r5, r0, #4
 800faae:	42a3      	cmp	r3, r4
 800fab0:	d30c      	bcc.n	800facc <__copybits+0x36>
 800fab2:	1aa3      	subs	r3, r4, r2
 800fab4:	3b11      	subs	r3, #17
 800fab6:	f023 0303 	bic.w	r3, r3, #3
 800faba:	3211      	adds	r2, #17
 800fabc:	42a2      	cmp	r2, r4
 800fabe:	bf88      	it	hi
 800fac0:	2300      	movhi	r3, #0
 800fac2:	4418      	add	r0, r3
 800fac4:	2300      	movs	r3, #0
 800fac6:	4288      	cmp	r0, r1
 800fac8:	d305      	bcc.n	800fad6 <__copybits+0x40>
 800faca:	bd70      	pop	{r4, r5, r6, pc}
 800facc:	f853 6b04 	ldr.w	r6, [r3], #4
 800fad0:	f845 6f04 	str.w	r6, [r5, #4]!
 800fad4:	e7eb      	b.n	800faae <__copybits+0x18>
 800fad6:	f840 3b04 	str.w	r3, [r0], #4
 800fada:	e7f4      	b.n	800fac6 <__copybits+0x30>

0800fadc <__any_on>:
 800fadc:	f100 0214 	add.w	r2, r0, #20
 800fae0:	6900      	ldr	r0, [r0, #16]
 800fae2:	114b      	asrs	r3, r1, #5
 800fae4:	4298      	cmp	r0, r3
 800fae6:	b510      	push	{r4, lr}
 800fae8:	db11      	blt.n	800fb0e <__any_on+0x32>
 800faea:	dd0a      	ble.n	800fb02 <__any_on+0x26>
 800faec:	f011 011f 	ands.w	r1, r1, #31
 800faf0:	d007      	beq.n	800fb02 <__any_on+0x26>
 800faf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800faf6:	fa24 f001 	lsr.w	r0, r4, r1
 800fafa:	fa00 f101 	lsl.w	r1, r0, r1
 800fafe:	428c      	cmp	r4, r1
 800fb00:	d10b      	bne.n	800fb1a <__any_on+0x3e>
 800fb02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d803      	bhi.n	800fb12 <__any_on+0x36>
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	bd10      	pop	{r4, pc}
 800fb0e:	4603      	mov	r3, r0
 800fb10:	e7f7      	b.n	800fb02 <__any_on+0x26>
 800fb12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb16:	2900      	cmp	r1, #0
 800fb18:	d0f5      	beq.n	800fb06 <__any_on+0x2a>
 800fb1a:	2001      	movs	r0, #1
 800fb1c:	e7f6      	b.n	800fb0c <__any_on+0x30>

0800fb1e <_calloc_r>:
 800fb1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb20:	fba1 2402 	umull	r2, r4, r1, r2
 800fb24:	b94c      	cbnz	r4, 800fb3a <_calloc_r+0x1c>
 800fb26:	4611      	mov	r1, r2
 800fb28:	9201      	str	r2, [sp, #4]
 800fb2a:	f000 f87b 	bl	800fc24 <_malloc_r>
 800fb2e:	9a01      	ldr	r2, [sp, #4]
 800fb30:	4605      	mov	r5, r0
 800fb32:	b930      	cbnz	r0, 800fb42 <_calloc_r+0x24>
 800fb34:	4628      	mov	r0, r5
 800fb36:	b003      	add	sp, #12
 800fb38:	bd30      	pop	{r4, r5, pc}
 800fb3a:	220c      	movs	r2, #12
 800fb3c:	6002      	str	r2, [r0, #0]
 800fb3e:	2500      	movs	r5, #0
 800fb40:	e7f8      	b.n	800fb34 <_calloc_r+0x16>
 800fb42:	4621      	mov	r1, r4
 800fb44:	f7fc fbbe 	bl	800c2c4 <memset>
 800fb48:	e7f4      	b.n	800fb34 <_calloc_r+0x16>
	...

0800fb4c <_free_r>:
 800fb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb4e:	2900      	cmp	r1, #0
 800fb50:	d044      	beq.n	800fbdc <_free_r+0x90>
 800fb52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb56:	9001      	str	r0, [sp, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f1a1 0404 	sub.w	r4, r1, #4
 800fb5e:	bfb8      	it	lt
 800fb60:	18e4      	addlt	r4, r4, r3
 800fb62:	f000 faab 	bl	80100bc <__malloc_lock>
 800fb66:	4a1e      	ldr	r2, [pc, #120]	; (800fbe0 <_free_r+0x94>)
 800fb68:	9801      	ldr	r0, [sp, #4]
 800fb6a:	6813      	ldr	r3, [r2, #0]
 800fb6c:	b933      	cbnz	r3, 800fb7c <_free_r+0x30>
 800fb6e:	6063      	str	r3, [r4, #4]
 800fb70:	6014      	str	r4, [r2, #0]
 800fb72:	b003      	add	sp, #12
 800fb74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb78:	f000 baa6 	b.w	80100c8 <__malloc_unlock>
 800fb7c:	42a3      	cmp	r3, r4
 800fb7e:	d908      	bls.n	800fb92 <_free_r+0x46>
 800fb80:	6825      	ldr	r5, [r4, #0]
 800fb82:	1961      	adds	r1, r4, r5
 800fb84:	428b      	cmp	r3, r1
 800fb86:	bf01      	itttt	eq
 800fb88:	6819      	ldreq	r1, [r3, #0]
 800fb8a:	685b      	ldreq	r3, [r3, #4]
 800fb8c:	1949      	addeq	r1, r1, r5
 800fb8e:	6021      	streq	r1, [r4, #0]
 800fb90:	e7ed      	b.n	800fb6e <_free_r+0x22>
 800fb92:	461a      	mov	r2, r3
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	b10b      	cbz	r3, 800fb9c <_free_r+0x50>
 800fb98:	42a3      	cmp	r3, r4
 800fb9a:	d9fa      	bls.n	800fb92 <_free_r+0x46>
 800fb9c:	6811      	ldr	r1, [r2, #0]
 800fb9e:	1855      	adds	r5, r2, r1
 800fba0:	42a5      	cmp	r5, r4
 800fba2:	d10b      	bne.n	800fbbc <_free_r+0x70>
 800fba4:	6824      	ldr	r4, [r4, #0]
 800fba6:	4421      	add	r1, r4
 800fba8:	1854      	adds	r4, r2, r1
 800fbaa:	42a3      	cmp	r3, r4
 800fbac:	6011      	str	r1, [r2, #0]
 800fbae:	d1e0      	bne.n	800fb72 <_free_r+0x26>
 800fbb0:	681c      	ldr	r4, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	6053      	str	r3, [r2, #4]
 800fbb6:	4421      	add	r1, r4
 800fbb8:	6011      	str	r1, [r2, #0]
 800fbba:	e7da      	b.n	800fb72 <_free_r+0x26>
 800fbbc:	d902      	bls.n	800fbc4 <_free_r+0x78>
 800fbbe:	230c      	movs	r3, #12
 800fbc0:	6003      	str	r3, [r0, #0]
 800fbc2:	e7d6      	b.n	800fb72 <_free_r+0x26>
 800fbc4:	6825      	ldr	r5, [r4, #0]
 800fbc6:	1961      	adds	r1, r4, r5
 800fbc8:	428b      	cmp	r3, r1
 800fbca:	bf04      	itt	eq
 800fbcc:	6819      	ldreq	r1, [r3, #0]
 800fbce:	685b      	ldreq	r3, [r3, #4]
 800fbd0:	6063      	str	r3, [r4, #4]
 800fbd2:	bf04      	itt	eq
 800fbd4:	1949      	addeq	r1, r1, r5
 800fbd6:	6021      	streq	r1, [r4, #0]
 800fbd8:	6054      	str	r4, [r2, #4]
 800fbda:	e7ca      	b.n	800fb72 <_free_r+0x26>
 800fbdc:	b003      	add	sp, #12
 800fbde:	bd30      	pop	{r4, r5, pc}
 800fbe0:	2000217c 	.word	0x2000217c

0800fbe4 <sbrk_aligned>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	4e0e      	ldr	r6, [pc, #56]	; (800fc20 <sbrk_aligned+0x3c>)
 800fbe8:	460c      	mov	r4, r1
 800fbea:	6831      	ldr	r1, [r6, #0]
 800fbec:	4605      	mov	r5, r0
 800fbee:	b911      	cbnz	r1, 800fbf6 <sbrk_aligned+0x12>
 800fbf0:	f000 f9e8 	bl	800ffc4 <_sbrk_r>
 800fbf4:	6030      	str	r0, [r6, #0]
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	f000 f9e3 	bl	800ffc4 <_sbrk_r>
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	d00a      	beq.n	800fc18 <sbrk_aligned+0x34>
 800fc02:	1cc4      	adds	r4, r0, #3
 800fc04:	f024 0403 	bic.w	r4, r4, #3
 800fc08:	42a0      	cmp	r0, r4
 800fc0a:	d007      	beq.n	800fc1c <sbrk_aligned+0x38>
 800fc0c:	1a21      	subs	r1, r4, r0
 800fc0e:	4628      	mov	r0, r5
 800fc10:	f000 f9d8 	bl	800ffc4 <_sbrk_r>
 800fc14:	3001      	adds	r0, #1
 800fc16:	d101      	bne.n	800fc1c <sbrk_aligned+0x38>
 800fc18:	f04f 34ff 	mov.w	r4, #4294967295
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	bd70      	pop	{r4, r5, r6, pc}
 800fc20:	20002180 	.word	0x20002180

0800fc24 <_malloc_r>:
 800fc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc28:	1ccd      	adds	r5, r1, #3
 800fc2a:	f025 0503 	bic.w	r5, r5, #3
 800fc2e:	3508      	adds	r5, #8
 800fc30:	2d0c      	cmp	r5, #12
 800fc32:	bf38      	it	cc
 800fc34:	250c      	movcc	r5, #12
 800fc36:	2d00      	cmp	r5, #0
 800fc38:	4607      	mov	r7, r0
 800fc3a:	db01      	blt.n	800fc40 <_malloc_r+0x1c>
 800fc3c:	42a9      	cmp	r1, r5
 800fc3e:	d905      	bls.n	800fc4c <_malloc_r+0x28>
 800fc40:	230c      	movs	r3, #12
 800fc42:	603b      	str	r3, [r7, #0]
 800fc44:	2600      	movs	r6, #0
 800fc46:	4630      	mov	r0, r6
 800fc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc4c:	4e2e      	ldr	r6, [pc, #184]	; (800fd08 <_malloc_r+0xe4>)
 800fc4e:	f000 fa35 	bl	80100bc <__malloc_lock>
 800fc52:	6833      	ldr	r3, [r6, #0]
 800fc54:	461c      	mov	r4, r3
 800fc56:	bb34      	cbnz	r4, 800fca6 <_malloc_r+0x82>
 800fc58:	4629      	mov	r1, r5
 800fc5a:	4638      	mov	r0, r7
 800fc5c:	f7ff ffc2 	bl	800fbe4 <sbrk_aligned>
 800fc60:	1c43      	adds	r3, r0, #1
 800fc62:	4604      	mov	r4, r0
 800fc64:	d14d      	bne.n	800fd02 <_malloc_r+0xde>
 800fc66:	6834      	ldr	r4, [r6, #0]
 800fc68:	4626      	mov	r6, r4
 800fc6a:	2e00      	cmp	r6, #0
 800fc6c:	d140      	bne.n	800fcf0 <_malloc_r+0xcc>
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	4631      	mov	r1, r6
 800fc72:	4638      	mov	r0, r7
 800fc74:	eb04 0803 	add.w	r8, r4, r3
 800fc78:	f000 f9a4 	bl	800ffc4 <_sbrk_r>
 800fc7c:	4580      	cmp	r8, r0
 800fc7e:	d13a      	bne.n	800fcf6 <_malloc_r+0xd2>
 800fc80:	6821      	ldr	r1, [r4, #0]
 800fc82:	3503      	adds	r5, #3
 800fc84:	1a6d      	subs	r5, r5, r1
 800fc86:	f025 0503 	bic.w	r5, r5, #3
 800fc8a:	3508      	adds	r5, #8
 800fc8c:	2d0c      	cmp	r5, #12
 800fc8e:	bf38      	it	cc
 800fc90:	250c      	movcc	r5, #12
 800fc92:	4629      	mov	r1, r5
 800fc94:	4638      	mov	r0, r7
 800fc96:	f7ff ffa5 	bl	800fbe4 <sbrk_aligned>
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	d02b      	beq.n	800fcf6 <_malloc_r+0xd2>
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	442b      	add	r3, r5
 800fca2:	6023      	str	r3, [r4, #0]
 800fca4:	e00e      	b.n	800fcc4 <_malloc_r+0xa0>
 800fca6:	6822      	ldr	r2, [r4, #0]
 800fca8:	1b52      	subs	r2, r2, r5
 800fcaa:	d41e      	bmi.n	800fcea <_malloc_r+0xc6>
 800fcac:	2a0b      	cmp	r2, #11
 800fcae:	d916      	bls.n	800fcde <_malloc_r+0xba>
 800fcb0:	1961      	adds	r1, r4, r5
 800fcb2:	42a3      	cmp	r3, r4
 800fcb4:	6025      	str	r5, [r4, #0]
 800fcb6:	bf18      	it	ne
 800fcb8:	6059      	strne	r1, [r3, #4]
 800fcba:	6863      	ldr	r3, [r4, #4]
 800fcbc:	bf08      	it	eq
 800fcbe:	6031      	streq	r1, [r6, #0]
 800fcc0:	5162      	str	r2, [r4, r5]
 800fcc2:	604b      	str	r3, [r1, #4]
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	f104 060b 	add.w	r6, r4, #11
 800fcca:	f000 f9fd 	bl	80100c8 <__malloc_unlock>
 800fcce:	f026 0607 	bic.w	r6, r6, #7
 800fcd2:	1d23      	adds	r3, r4, #4
 800fcd4:	1af2      	subs	r2, r6, r3
 800fcd6:	d0b6      	beq.n	800fc46 <_malloc_r+0x22>
 800fcd8:	1b9b      	subs	r3, r3, r6
 800fcda:	50a3      	str	r3, [r4, r2]
 800fcdc:	e7b3      	b.n	800fc46 <_malloc_r+0x22>
 800fcde:	6862      	ldr	r2, [r4, #4]
 800fce0:	42a3      	cmp	r3, r4
 800fce2:	bf0c      	ite	eq
 800fce4:	6032      	streq	r2, [r6, #0]
 800fce6:	605a      	strne	r2, [r3, #4]
 800fce8:	e7ec      	b.n	800fcc4 <_malloc_r+0xa0>
 800fcea:	4623      	mov	r3, r4
 800fcec:	6864      	ldr	r4, [r4, #4]
 800fcee:	e7b2      	b.n	800fc56 <_malloc_r+0x32>
 800fcf0:	4634      	mov	r4, r6
 800fcf2:	6876      	ldr	r6, [r6, #4]
 800fcf4:	e7b9      	b.n	800fc6a <_malloc_r+0x46>
 800fcf6:	230c      	movs	r3, #12
 800fcf8:	603b      	str	r3, [r7, #0]
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	f000 f9e4 	bl	80100c8 <__malloc_unlock>
 800fd00:	e7a1      	b.n	800fc46 <_malloc_r+0x22>
 800fd02:	6025      	str	r5, [r4, #0]
 800fd04:	e7de      	b.n	800fcc4 <_malloc_r+0xa0>
 800fd06:	bf00      	nop
 800fd08:	2000217c 	.word	0x2000217c

0800fd0c <__ssputs_r>:
 800fd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd10:	688e      	ldr	r6, [r1, #8]
 800fd12:	429e      	cmp	r6, r3
 800fd14:	4682      	mov	sl, r0
 800fd16:	460c      	mov	r4, r1
 800fd18:	4690      	mov	r8, r2
 800fd1a:	461f      	mov	r7, r3
 800fd1c:	d838      	bhi.n	800fd90 <__ssputs_r+0x84>
 800fd1e:	898a      	ldrh	r2, [r1, #12]
 800fd20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd24:	d032      	beq.n	800fd8c <__ssputs_r+0x80>
 800fd26:	6825      	ldr	r5, [r4, #0]
 800fd28:	6909      	ldr	r1, [r1, #16]
 800fd2a:	eba5 0901 	sub.w	r9, r5, r1
 800fd2e:	6965      	ldr	r5, [r4, #20]
 800fd30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd38:	3301      	adds	r3, #1
 800fd3a:	444b      	add	r3, r9
 800fd3c:	106d      	asrs	r5, r5, #1
 800fd3e:	429d      	cmp	r5, r3
 800fd40:	bf38      	it	cc
 800fd42:	461d      	movcc	r5, r3
 800fd44:	0553      	lsls	r3, r2, #21
 800fd46:	d531      	bpl.n	800fdac <__ssputs_r+0xa0>
 800fd48:	4629      	mov	r1, r5
 800fd4a:	f7ff ff6b 	bl	800fc24 <_malloc_r>
 800fd4e:	4606      	mov	r6, r0
 800fd50:	b950      	cbnz	r0, 800fd68 <__ssputs_r+0x5c>
 800fd52:	230c      	movs	r3, #12
 800fd54:	f8ca 3000 	str.w	r3, [sl]
 800fd58:	89a3      	ldrh	r3, [r4, #12]
 800fd5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd5e:	81a3      	strh	r3, [r4, #12]
 800fd60:	f04f 30ff 	mov.w	r0, #4294967295
 800fd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd68:	6921      	ldr	r1, [r4, #16]
 800fd6a:	464a      	mov	r2, r9
 800fd6c:	f7ff fa08 	bl	800f180 <memcpy>
 800fd70:	89a3      	ldrh	r3, [r4, #12]
 800fd72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd7a:	81a3      	strh	r3, [r4, #12]
 800fd7c:	6126      	str	r6, [r4, #16]
 800fd7e:	6165      	str	r5, [r4, #20]
 800fd80:	444e      	add	r6, r9
 800fd82:	eba5 0509 	sub.w	r5, r5, r9
 800fd86:	6026      	str	r6, [r4, #0]
 800fd88:	60a5      	str	r5, [r4, #8]
 800fd8a:	463e      	mov	r6, r7
 800fd8c:	42be      	cmp	r6, r7
 800fd8e:	d900      	bls.n	800fd92 <__ssputs_r+0x86>
 800fd90:	463e      	mov	r6, r7
 800fd92:	6820      	ldr	r0, [r4, #0]
 800fd94:	4632      	mov	r2, r6
 800fd96:	4641      	mov	r1, r8
 800fd98:	f000 f976 	bl	8010088 <memmove>
 800fd9c:	68a3      	ldr	r3, [r4, #8]
 800fd9e:	1b9b      	subs	r3, r3, r6
 800fda0:	60a3      	str	r3, [r4, #8]
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	4433      	add	r3, r6
 800fda6:	6023      	str	r3, [r4, #0]
 800fda8:	2000      	movs	r0, #0
 800fdaa:	e7db      	b.n	800fd64 <__ssputs_r+0x58>
 800fdac:	462a      	mov	r2, r5
 800fdae:	f000 f991 	bl	80100d4 <_realloc_r>
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d1e1      	bne.n	800fd7c <__ssputs_r+0x70>
 800fdb8:	6921      	ldr	r1, [r4, #16]
 800fdba:	4650      	mov	r0, sl
 800fdbc:	f7ff fec6 	bl	800fb4c <_free_r>
 800fdc0:	e7c7      	b.n	800fd52 <__ssputs_r+0x46>
	...

0800fdc4 <_svfiprintf_r>:
 800fdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc8:	4698      	mov	r8, r3
 800fdca:	898b      	ldrh	r3, [r1, #12]
 800fdcc:	061b      	lsls	r3, r3, #24
 800fdce:	b09d      	sub	sp, #116	; 0x74
 800fdd0:	4607      	mov	r7, r0
 800fdd2:	460d      	mov	r5, r1
 800fdd4:	4614      	mov	r4, r2
 800fdd6:	d50e      	bpl.n	800fdf6 <_svfiprintf_r+0x32>
 800fdd8:	690b      	ldr	r3, [r1, #16]
 800fdda:	b963      	cbnz	r3, 800fdf6 <_svfiprintf_r+0x32>
 800fddc:	2140      	movs	r1, #64	; 0x40
 800fdde:	f7ff ff21 	bl	800fc24 <_malloc_r>
 800fde2:	6028      	str	r0, [r5, #0]
 800fde4:	6128      	str	r0, [r5, #16]
 800fde6:	b920      	cbnz	r0, 800fdf2 <_svfiprintf_r+0x2e>
 800fde8:	230c      	movs	r3, #12
 800fdea:	603b      	str	r3, [r7, #0]
 800fdec:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf0:	e0d1      	b.n	800ff96 <_svfiprintf_r+0x1d2>
 800fdf2:	2340      	movs	r3, #64	; 0x40
 800fdf4:	616b      	str	r3, [r5, #20]
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800fdfa:	2320      	movs	r3, #32
 800fdfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe00:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe04:	2330      	movs	r3, #48	; 0x30
 800fe06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ffb0 <_svfiprintf_r+0x1ec>
 800fe0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe0e:	f04f 0901 	mov.w	r9, #1
 800fe12:	4623      	mov	r3, r4
 800fe14:	469a      	mov	sl, r3
 800fe16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe1a:	b10a      	cbz	r2, 800fe20 <_svfiprintf_r+0x5c>
 800fe1c:	2a25      	cmp	r2, #37	; 0x25
 800fe1e:	d1f9      	bne.n	800fe14 <_svfiprintf_r+0x50>
 800fe20:	ebba 0b04 	subs.w	fp, sl, r4
 800fe24:	d00b      	beq.n	800fe3e <_svfiprintf_r+0x7a>
 800fe26:	465b      	mov	r3, fp
 800fe28:	4622      	mov	r2, r4
 800fe2a:	4629      	mov	r1, r5
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	f7ff ff6d 	bl	800fd0c <__ssputs_r>
 800fe32:	3001      	adds	r0, #1
 800fe34:	f000 80aa 	beq.w	800ff8c <_svfiprintf_r+0x1c8>
 800fe38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe3a:	445a      	add	r2, fp
 800fe3c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe3e:	f89a 3000 	ldrb.w	r3, [sl]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f000 80a2 	beq.w	800ff8c <_svfiprintf_r+0x1c8>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe52:	f10a 0a01 	add.w	sl, sl, #1
 800fe56:	9304      	str	r3, [sp, #16]
 800fe58:	9307      	str	r3, [sp, #28]
 800fe5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe5e:	931a      	str	r3, [sp, #104]	; 0x68
 800fe60:	4654      	mov	r4, sl
 800fe62:	2205      	movs	r2, #5
 800fe64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe68:	4851      	ldr	r0, [pc, #324]	; (800ffb0 <_svfiprintf_r+0x1ec>)
 800fe6a:	f7f0 f9c1 	bl	80001f0 <memchr>
 800fe6e:	9a04      	ldr	r2, [sp, #16]
 800fe70:	b9d8      	cbnz	r0, 800feaa <_svfiprintf_r+0xe6>
 800fe72:	06d0      	lsls	r0, r2, #27
 800fe74:	bf44      	itt	mi
 800fe76:	2320      	movmi	r3, #32
 800fe78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe7c:	0711      	lsls	r1, r2, #28
 800fe7e:	bf44      	itt	mi
 800fe80:	232b      	movmi	r3, #43	; 0x2b
 800fe82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe86:	f89a 3000 	ldrb.w	r3, [sl]
 800fe8a:	2b2a      	cmp	r3, #42	; 0x2a
 800fe8c:	d015      	beq.n	800feba <_svfiprintf_r+0xf6>
 800fe8e:	9a07      	ldr	r2, [sp, #28]
 800fe90:	4654      	mov	r4, sl
 800fe92:	2000      	movs	r0, #0
 800fe94:	f04f 0c0a 	mov.w	ip, #10
 800fe98:	4621      	mov	r1, r4
 800fe9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe9e:	3b30      	subs	r3, #48	; 0x30
 800fea0:	2b09      	cmp	r3, #9
 800fea2:	d94e      	bls.n	800ff42 <_svfiprintf_r+0x17e>
 800fea4:	b1b0      	cbz	r0, 800fed4 <_svfiprintf_r+0x110>
 800fea6:	9207      	str	r2, [sp, #28]
 800fea8:	e014      	b.n	800fed4 <_svfiprintf_r+0x110>
 800feaa:	eba0 0308 	sub.w	r3, r0, r8
 800feae:	fa09 f303 	lsl.w	r3, r9, r3
 800feb2:	4313      	orrs	r3, r2
 800feb4:	9304      	str	r3, [sp, #16]
 800feb6:	46a2      	mov	sl, r4
 800feb8:	e7d2      	b.n	800fe60 <_svfiprintf_r+0x9c>
 800feba:	9b03      	ldr	r3, [sp, #12]
 800febc:	1d19      	adds	r1, r3, #4
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	9103      	str	r1, [sp, #12]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	bfbb      	ittet	lt
 800fec6:	425b      	neglt	r3, r3
 800fec8:	f042 0202 	orrlt.w	r2, r2, #2
 800fecc:	9307      	strge	r3, [sp, #28]
 800fece:	9307      	strlt	r3, [sp, #28]
 800fed0:	bfb8      	it	lt
 800fed2:	9204      	strlt	r2, [sp, #16]
 800fed4:	7823      	ldrb	r3, [r4, #0]
 800fed6:	2b2e      	cmp	r3, #46	; 0x2e
 800fed8:	d10c      	bne.n	800fef4 <_svfiprintf_r+0x130>
 800feda:	7863      	ldrb	r3, [r4, #1]
 800fedc:	2b2a      	cmp	r3, #42	; 0x2a
 800fede:	d135      	bne.n	800ff4c <_svfiprintf_r+0x188>
 800fee0:	9b03      	ldr	r3, [sp, #12]
 800fee2:	1d1a      	adds	r2, r3, #4
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	9203      	str	r2, [sp, #12]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	bfb8      	it	lt
 800feec:	f04f 33ff 	movlt.w	r3, #4294967295
 800fef0:	3402      	adds	r4, #2
 800fef2:	9305      	str	r3, [sp, #20]
 800fef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ffc0 <_svfiprintf_r+0x1fc>
 800fef8:	7821      	ldrb	r1, [r4, #0]
 800fefa:	2203      	movs	r2, #3
 800fefc:	4650      	mov	r0, sl
 800fefe:	f7f0 f977 	bl	80001f0 <memchr>
 800ff02:	b140      	cbz	r0, 800ff16 <_svfiprintf_r+0x152>
 800ff04:	2340      	movs	r3, #64	; 0x40
 800ff06:	eba0 000a 	sub.w	r0, r0, sl
 800ff0a:	fa03 f000 	lsl.w	r0, r3, r0
 800ff0e:	9b04      	ldr	r3, [sp, #16]
 800ff10:	4303      	orrs	r3, r0
 800ff12:	3401      	adds	r4, #1
 800ff14:	9304      	str	r3, [sp, #16]
 800ff16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff1a:	4826      	ldr	r0, [pc, #152]	; (800ffb4 <_svfiprintf_r+0x1f0>)
 800ff1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff20:	2206      	movs	r2, #6
 800ff22:	f7f0 f965 	bl	80001f0 <memchr>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	d038      	beq.n	800ff9c <_svfiprintf_r+0x1d8>
 800ff2a:	4b23      	ldr	r3, [pc, #140]	; (800ffb8 <_svfiprintf_r+0x1f4>)
 800ff2c:	bb1b      	cbnz	r3, 800ff76 <_svfiprintf_r+0x1b2>
 800ff2e:	9b03      	ldr	r3, [sp, #12]
 800ff30:	3307      	adds	r3, #7
 800ff32:	f023 0307 	bic.w	r3, r3, #7
 800ff36:	3308      	adds	r3, #8
 800ff38:	9303      	str	r3, [sp, #12]
 800ff3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff3c:	4433      	add	r3, r6
 800ff3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff40:	e767      	b.n	800fe12 <_svfiprintf_r+0x4e>
 800ff42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff46:	460c      	mov	r4, r1
 800ff48:	2001      	movs	r0, #1
 800ff4a:	e7a5      	b.n	800fe98 <_svfiprintf_r+0xd4>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	3401      	adds	r4, #1
 800ff50:	9305      	str	r3, [sp, #20]
 800ff52:	4619      	mov	r1, r3
 800ff54:	f04f 0c0a 	mov.w	ip, #10
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff5e:	3a30      	subs	r2, #48	; 0x30
 800ff60:	2a09      	cmp	r2, #9
 800ff62:	d903      	bls.n	800ff6c <_svfiprintf_r+0x1a8>
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d0c5      	beq.n	800fef4 <_svfiprintf_r+0x130>
 800ff68:	9105      	str	r1, [sp, #20]
 800ff6a:	e7c3      	b.n	800fef4 <_svfiprintf_r+0x130>
 800ff6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff70:	4604      	mov	r4, r0
 800ff72:	2301      	movs	r3, #1
 800ff74:	e7f0      	b.n	800ff58 <_svfiprintf_r+0x194>
 800ff76:	ab03      	add	r3, sp, #12
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	462a      	mov	r2, r5
 800ff7c:	4b0f      	ldr	r3, [pc, #60]	; (800ffbc <_svfiprintf_r+0x1f8>)
 800ff7e:	a904      	add	r1, sp, #16
 800ff80:	4638      	mov	r0, r7
 800ff82:	f7fc fa47 	bl	800c414 <_printf_float>
 800ff86:	1c42      	adds	r2, r0, #1
 800ff88:	4606      	mov	r6, r0
 800ff8a:	d1d6      	bne.n	800ff3a <_svfiprintf_r+0x176>
 800ff8c:	89ab      	ldrh	r3, [r5, #12]
 800ff8e:	065b      	lsls	r3, r3, #25
 800ff90:	f53f af2c 	bmi.w	800fdec <_svfiprintf_r+0x28>
 800ff94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff96:	b01d      	add	sp, #116	; 0x74
 800ff98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff9c:	ab03      	add	r3, sp, #12
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	462a      	mov	r2, r5
 800ffa2:	4b06      	ldr	r3, [pc, #24]	; (800ffbc <_svfiprintf_r+0x1f8>)
 800ffa4:	a904      	add	r1, sp, #16
 800ffa6:	4638      	mov	r0, r7
 800ffa8:	f7fc fcd8 	bl	800c95c <_printf_i>
 800ffac:	e7eb      	b.n	800ff86 <_svfiprintf_r+0x1c2>
 800ffae:	bf00      	nop
 800ffb0:	08014ab4 	.word	0x08014ab4
 800ffb4:	08014abe 	.word	0x08014abe
 800ffb8:	0800c415 	.word	0x0800c415
 800ffbc:	0800fd0d 	.word	0x0800fd0d
 800ffc0:	08014aba 	.word	0x08014aba

0800ffc4 <_sbrk_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d06      	ldr	r5, [pc, #24]	; (800ffe0 <_sbrk_r+0x1c>)
 800ffc8:	2300      	movs	r3, #0
 800ffca:	4604      	mov	r4, r0
 800ffcc:	4608      	mov	r0, r1
 800ffce:	602b      	str	r3, [r5, #0]
 800ffd0:	f7f1 ffb8 	bl	8001f44 <_sbrk>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d102      	bne.n	800ffde <_sbrk_r+0x1a>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	b103      	cbz	r3, 800ffde <_sbrk_r+0x1a>
 800ffdc:	6023      	str	r3, [r4, #0]
 800ffde:	bd38      	pop	{r3, r4, r5, pc}
 800ffe0:	20002184 	.word	0x20002184

0800ffe4 <strncmp>:
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	b17a      	cbz	r2, 8010008 <strncmp+0x24>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	3901      	subs	r1, #1
 800ffec:	1884      	adds	r4, r0, r2
 800ffee:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fff2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fff6:	4290      	cmp	r0, r2
 800fff8:	d101      	bne.n	800fffe <strncmp+0x1a>
 800fffa:	42a3      	cmp	r3, r4
 800fffc:	d101      	bne.n	8010002 <strncmp+0x1e>
 800fffe:	1a80      	subs	r0, r0, r2
 8010000:	bd10      	pop	{r4, pc}
 8010002:	2800      	cmp	r0, #0
 8010004:	d1f3      	bne.n	800ffee <strncmp+0xa>
 8010006:	e7fa      	b.n	800fffe <strncmp+0x1a>
 8010008:	4610      	mov	r0, r2
 801000a:	e7f9      	b.n	8010000 <strncmp+0x1c>

0801000c <__ascii_wctomb>:
 801000c:	b149      	cbz	r1, 8010022 <__ascii_wctomb+0x16>
 801000e:	2aff      	cmp	r2, #255	; 0xff
 8010010:	bf85      	ittet	hi
 8010012:	238a      	movhi	r3, #138	; 0x8a
 8010014:	6003      	strhi	r3, [r0, #0]
 8010016:	700a      	strbls	r2, [r1, #0]
 8010018:	f04f 30ff 	movhi.w	r0, #4294967295
 801001c:	bf98      	it	ls
 801001e:	2001      	movls	r0, #1
 8010020:	4770      	bx	lr
 8010022:	4608      	mov	r0, r1
 8010024:	4770      	bx	lr
	...

08010028 <__assert_func>:
 8010028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801002a:	4614      	mov	r4, r2
 801002c:	461a      	mov	r2, r3
 801002e:	4b09      	ldr	r3, [pc, #36]	; (8010054 <__assert_func+0x2c>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4605      	mov	r5, r0
 8010034:	68d8      	ldr	r0, [r3, #12]
 8010036:	b14c      	cbz	r4, 801004c <__assert_func+0x24>
 8010038:	4b07      	ldr	r3, [pc, #28]	; (8010058 <__assert_func+0x30>)
 801003a:	9100      	str	r1, [sp, #0]
 801003c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010040:	4906      	ldr	r1, [pc, #24]	; (801005c <__assert_func+0x34>)
 8010042:	462b      	mov	r3, r5
 8010044:	f000 f80e 	bl	8010064 <fiprintf>
 8010048:	f000 fa8c 	bl	8010564 <abort>
 801004c:	4b04      	ldr	r3, [pc, #16]	; (8010060 <__assert_func+0x38>)
 801004e:	461c      	mov	r4, r3
 8010050:	e7f3      	b.n	801003a <__assert_func+0x12>
 8010052:	bf00      	nop
 8010054:	2000010c 	.word	0x2000010c
 8010058:	08014ac5 	.word	0x08014ac5
 801005c:	08014ad2 	.word	0x08014ad2
 8010060:	08014b00 	.word	0x08014b00

08010064 <fiprintf>:
 8010064:	b40e      	push	{r1, r2, r3}
 8010066:	b503      	push	{r0, r1, lr}
 8010068:	4601      	mov	r1, r0
 801006a:	ab03      	add	r3, sp, #12
 801006c:	4805      	ldr	r0, [pc, #20]	; (8010084 <fiprintf+0x20>)
 801006e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010072:	6800      	ldr	r0, [r0, #0]
 8010074:	9301      	str	r3, [sp, #4]
 8010076:	f000 f885 	bl	8010184 <_vfiprintf_r>
 801007a:	b002      	add	sp, #8
 801007c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010080:	b003      	add	sp, #12
 8010082:	4770      	bx	lr
 8010084:	2000010c 	.word	0x2000010c

08010088 <memmove>:
 8010088:	4288      	cmp	r0, r1
 801008a:	b510      	push	{r4, lr}
 801008c:	eb01 0402 	add.w	r4, r1, r2
 8010090:	d902      	bls.n	8010098 <memmove+0x10>
 8010092:	4284      	cmp	r4, r0
 8010094:	4623      	mov	r3, r4
 8010096:	d807      	bhi.n	80100a8 <memmove+0x20>
 8010098:	1e43      	subs	r3, r0, #1
 801009a:	42a1      	cmp	r1, r4
 801009c:	d008      	beq.n	80100b0 <memmove+0x28>
 801009e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100a6:	e7f8      	b.n	801009a <memmove+0x12>
 80100a8:	4402      	add	r2, r0
 80100aa:	4601      	mov	r1, r0
 80100ac:	428a      	cmp	r2, r1
 80100ae:	d100      	bne.n	80100b2 <memmove+0x2a>
 80100b0:	bd10      	pop	{r4, pc}
 80100b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100ba:	e7f7      	b.n	80100ac <memmove+0x24>

080100bc <__malloc_lock>:
 80100bc:	4801      	ldr	r0, [pc, #4]	; (80100c4 <__malloc_lock+0x8>)
 80100be:	f000 bc11 	b.w	80108e4 <__retarget_lock_acquire_recursive>
 80100c2:	bf00      	nop
 80100c4:	20002188 	.word	0x20002188

080100c8 <__malloc_unlock>:
 80100c8:	4801      	ldr	r0, [pc, #4]	; (80100d0 <__malloc_unlock+0x8>)
 80100ca:	f000 bc0c 	b.w	80108e6 <__retarget_lock_release_recursive>
 80100ce:	bf00      	nop
 80100d0:	20002188 	.word	0x20002188

080100d4 <_realloc_r>:
 80100d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d8:	4680      	mov	r8, r0
 80100da:	4614      	mov	r4, r2
 80100dc:	460e      	mov	r6, r1
 80100de:	b921      	cbnz	r1, 80100ea <_realloc_r+0x16>
 80100e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100e4:	4611      	mov	r1, r2
 80100e6:	f7ff bd9d 	b.w	800fc24 <_malloc_r>
 80100ea:	b92a      	cbnz	r2, 80100f8 <_realloc_r+0x24>
 80100ec:	f7ff fd2e 	bl	800fb4c <_free_r>
 80100f0:	4625      	mov	r5, r4
 80100f2:	4628      	mov	r0, r5
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	f000 fc5c 	bl	80109b4 <_malloc_usable_size_r>
 80100fc:	4284      	cmp	r4, r0
 80100fe:	4607      	mov	r7, r0
 8010100:	d802      	bhi.n	8010108 <_realloc_r+0x34>
 8010102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010106:	d812      	bhi.n	801012e <_realloc_r+0x5a>
 8010108:	4621      	mov	r1, r4
 801010a:	4640      	mov	r0, r8
 801010c:	f7ff fd8a 	bl	800fc24 <_malloc_r>
 8010110:	4605      	mov	r5, r0
 8010112:	2800      	cmp	r0, #0
 8010114:	d0ed      	beq.n	80100f2 <_realloc_r+0x1e>
 8010116:	42bc      	cmp	r4, r7
 8010118:	4622      	mov	r2, r4
 801011a:	4631      	mov	r1, r6
 801011c:	bf28      	it	cs
 801011e:	463a      	movcs	r2, r7
 8010120:	f7ff f82e 	bl	800f180 <memcpy>
 8010124:	4631      	mov	r1, r6
 8010126:	4640      	mov	r0, r8
 8010128:	f7ff fd10 	bl	800fb4c <_free_r>
 801012c:	e7e1      	b.n	80100f2 <_realloc_r+0x1e>
 801012e:	4635      	mov	r5, r6
 8010130:	e7df      	b.n	80100f2 <_realloc_r+0x1e>

08010132 <__sfputc_r>:
 8010132:	6893      	ldr	r3, [r2, #8]
 8010134:	3b01      	subs	r3, #1
 8010136:	2b00      	cmp	r3, #0
 8010138:	b410      	push	{r4}
 801013a:	6093      	str	r3, [r2, #8]
 801013c:	da08      	bge.n	8010150 <__sfputc_r+0x1e>
 801013e:	6994      	ldr	r4, [r2, #24]
 8010140:	42a3      	cmp	r3, r4
 8010142:	db01      	blt.n	8010148 <__sfputc_r+0x16>
 8010144:	290a      	cmp	r1, #10
 8010146:	d103      	bne.n	8010150 <__sfputc_r+0x1e>
 8010148:	f85d 4b04 	ldr.w	r4, [sp], #4
 801014c:	f000 b94a 	b.w	80103e4 <__swbuf_r>
 8010150:	6813      	ldr	r3, [r2, #0]
 8010152:	1c58      	adds	r0, r3, #1
 8010154:	6010      	str	r0, [r2, #0]
 8010156:	7019      	strb	r1, [r3, #0]
 8010158:	4608      	mov	r0, r1
 801015a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801015e:	4770      	bx	lr

08010160 <__sfputs_r>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	4606      	mov	r6, r0
 8010164:	460f      	mov	r7, r1
 8010166:	4614      	mov	r4, r2
 8010168:	18d5      	adds	r5, r2, r3
 801016a:	42ac      	cmp	r4, r5
 801016c:	d101      	bne.n	8010172 <__sfputs_r+0x12>
 801016e:	2000      	movs	r0, #0
 8010170:	e007      	b.n	8010182 <__sfputs_r+0x22>
 8010172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010176:	463a      	mov	r2, r7
 8010178:	4630      	mov	r0, r6
 801017a:	f7ff ffda 	bl	8010132 <__sfputc_r>
 801017e:	1c43      	adds	r3, r0, #1
 8010180:	d1f3      	bne.n	801016a <__sfputs_r+0xa>
 8010182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010184 <_vfiprintf_r>:
 8010184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010188:	460d      	mov	r5, r1
 801018a:	b09d      	sub	sp, #116	; 0x74
 801018c:	4614      	mov	r4, r2
 801018e:	4698      	mov	r8, r3
 8010190:	4606      	mov	r6, r0
 8010192:	b118      	cbz	r0, 801019c <_vfiprintf_r+0x18>
 8010194:	6983      	ldr	r3, [r0, #24]
 8010196:	b90b      	cbnz	r3, 801019c <_vfiprintf_r+0x18>
 8010198:	f000 fb06 	bl	80107a8 <__sinit>
 801019c:	4b89      	ldr	r3, [pc, #548]	; (80103c4 <_vfiprintf_r+0x240>)
 801019e:	429d      	cmp	r5, r3
 80101a0:	d11b      	bne.n	80101da <_vfiprintf_r+0x56>
 80101a2:	6875      	ldr	r5, [r6, #4]
 80101a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101a6:	07d9      	lsls	r1, r3, #31
 80101a8:	d405      	bmi.n	80101b6 <_vfiprintf_r+0x32>
 80101aa:	89ab      	ldrh	r3, [r5, #12]
 80101ac:	059a      	lsls	r2, r3, #22
 80101ae:	d402      	bmi.n	80101b6 <_vfiprintf_r+0x32>
 80101b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101b2:	f000 fb97 	bl	80108e4 <__retarget_lock_acquire_recursive>
 80101b6:	89ab      	ldrh	r3, [r5, #12]
 80101b8:	071b      	lsls	r3, r3, #28
 80101ba:	d501      	bpl.n	80101c0 <_vfiprintf_r+0x3c>
 80101bc:	692b      	ldr	r3, [r5, #16]
 80101be:	b9eb      	cbnz	r3, 80101fc <_vfiprintf_r+0x78>
 80101c0:	4629      	mov	r1, r5
 80101c2:	4630      	mov	r0, r6
 80101c4:	f000 f960 	bl	8010488 <__swsetup_r>
 80101c8:	b1c0      	cbz	r0, 80101fc <_vfiprintf_r+0x78>
 80101ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101cc:	07dc      	lsls	r4, r3, #31
 80101ce:	d50e      	bpl.n	80101ee <_vfiprintf_r+0x6a>
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295
 80101d4:	b01d      	add	sp, #116	; 0x74
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101da:	4b7b      	ldr	r3, [pc, #492]	; (80103c8 <_vfiprintf_r+0x244>)
 80101dc:	429d      	cmp	r5, r3
 80101de:	d101      	bne.n	80101e4 <_vfiprintf_r+0x60>
 80101e0:	68b5      	ldr	r5, [r6, #8]
 80101e2:	e7df      	b.n	80101a4 <_vfiprintf_r+0x20>
 80101e4:	4b79      	ldr	r3, [pc, #484]	; (80103cc <_vfiprintf_r+0x248>)
 80101e6:	429d      	cmp	r5, r3
 80101e8:	bf08      	it	eq
 80101ea:	68f5      	ldreq	r5, [r6, #12]
 80101ec:	e7da      	b.n	80101a4 <_vfiprintf_r+0x20>
 80101ee:	89ab      	ldrh	r3, [r5, #12]
 80101f0:	0598      	lsls	r0, r3, #22
 80101f2:	d4ed      	bmi.n	80101d0 <_vfiprintf_r+0x4c>
 80101f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101f6:	f000 fb76 	bl	80108e6 <__retarget_lock_release_recursive>
 80101fa:	e7e9      	b.n	80101d0 <_vfiprintf_r+0x4c>
 80101fc:	2300      	movs	r3, #0
 80101fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010200:	2320      	movs	r3, #32
 8010202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010206:	f8cd 800c 	str.w	r8, [sp, #12]
 801020a:	2330      	movs	r3, #48	; 0x30
 801020c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80103d0 <_vfiprintf_r+0x24c>
 8010210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010214:	f04f 0901 	mov.w	r9, #1
 8010218:	4623      	mov	r3, r4
 801021a:	469a      	mov	sl, r3
 801021c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010220:	b10a      	cbz	r2, 8010226 <_vfiprintf_r+0xa2>
 8010222:	2a25      	cmp	r2, #37	; 0x25
 8010224:	d1f9      	bne.n	801021a <_vfiprintf_r+0x96>
 8010226:	ebba 0b04 	subs.w	fp, sl, r4
 801022a:	d00b      	beq.n	8010244 <_vfiprintf_r+0xc0>
 801022c:	465b      	mov	r3, fp
 801022e:	4622      	mov	r2, r4
 8010230:	4629      	mov	r1, r5
 8010232:	4630      	mov	r0, r6
 8010234:	f7ff ff94 	bl	8010160 <__sfputs_r>
 8010238:	3001      	adds	r0, #1
 801023a:	f000 80aa 	beq.w	8010392 <_vfiprintf_r+0x20e>
 801023e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010240:	445a      	add	r2, fp
 8010242:	9209      	str	r2, [sp, #36]	; 0x24
 8010244:	f89a 3000 	ldrb.w	r3, [sl]
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 80a2 	beq.w	8010392 <_vfiprintf_r+0x20e>
 801024e:	2300      	movs	r3, #0
 8010250:	f04f 32ff 	mov.w	r2, #4294967295
 8010254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010258:	f10a 0a01 	add.w	sl, sl, #1
 801025c:	9304      	str	r3, [sp, #16]
 801025e:	9307      	str	r3, [sp, #28]
 8010260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010264:	931a      	str	r3, [sp, #104]	; 0x68
 8010266:	4654      	mov	r4, sl
 8010268:	2205      	movs	r2, #5
 801026a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801026e:	4858      	ldr	r0, [pc, #352]	; (80103d0 <_vfiprintf_r+0x24c>)
 8010270:	f7ef ffbe 	bl	80001f0 <memchr>
 8010274:	9a04      	ldr	r2, [sp, #16]
 8010276:	b9d8      	cbnz	r0, 80102b0 <_vfiprintf_r+0x12c>
 8010278:	06d1      	lsls	r1, r2, #27
 801027a:	bf44      	itt	mi
 801027c:	2320      	movmi	r3, #32
 801027e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010282:	0713      	lsls	r3, r2, #28
 8010284:	bf44      	itt	mi
 8010286:	232b      	movmi	r3, #43	; 0x2b
 8010288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801028c:	f89a 3000 	ldrb.w	r3, [sl]
 8010290:	2b2a      	cmp	r3, #42	; 0x2a
 8010292:	d015      	beq.n	80102c0 <_vfiprintf_r+0x13c>
 8010294:	9a07      	ldr	r2, [sp, #28]
 8010296:	4654      	mov	r4, sl
 8010298:	2000      	movs	r0, #0
 801029a:	f04f 0c0a 	mov.w	ip, #10
 801029e:	4621      	mov	r1, r4
 80102a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102a4:	3b30      	subs	r3, #48	; 0x30
 80102a6:	2b09      	cmp	r3, #9
 80102a8:	d94e      	bls.n	8010348 <_vfiprintf_r+0x1c4>
 80102aa:	b1b0      	cbz	r0, 80102da <_vfiprintf_r+0x156>
 80102ac:	9207      	str	r2, [sp, #28]
 80102ae:	e014      	b.n	80102da <_vfiprintf_r+0x156>
 80102b0:	eba0 0308 	sub.w	r3, r0, r8
 80102b4:	fa09 f303 	lsl.w	r3, r9, r3
 80102b8:	4313      	orrs	r3, r2
 80102ba:	9304      	str	r3, [sp, #16]
 80102bc:	46a2      	mov	sl, r4
 80102be:	e7d2      	b.n	8010266 <_vfiprintf_r+0xe2>
 80102c0:	9b03      	ldr	r3, [sp, #12]
 80102c2:	1d19      	adds	r1, r3, #4
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	9103      	str	r1, [sp, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	bfbb      	ittet	lt
 80102cc:	425b      	neglt	r3, r3
 80102ce:	f042 0202 	orrlt.w	r2, r2, #2
 80102d2:	9307      	strge	r3, [sp, #28]
 80102d4:	9307      	strlt	r3, [sp, #28]
 80102d6:	bfb8      	it	lt
 80102d8:	9204      	strlt	r2, [sp, #16]
 80102da:	7823      	ldrb	r3, [r4, #0]
 80102dc:	2b2e      	cmp	r3, #46	; 0x2e
 80102de:	d10c      	bne.n	80102fa <_vfiprintf_r+0x176>
 80102e0:	7863      	ldrb	r3, [r4, #1]
 80102e2:	2b2a      	cmp	r3, #42	; 0x2a
 80102e4:	d135      	bne.n	8010352 <_vfiprintf_r+0x1ce>
 80102e6:	9b03      	ldr	r3, [sp, #12]
 80102e8:	1d1a      	adds	r2, r3, #4
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	9203      	str	r2, [sp, #12]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	bfb8      	it	lt
 80102f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80102f6:	3402      	adds	r4, #2
 80102f8:	9305      	str	r3, [sp, #20]
 80102fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80103e0 <_vfiprintf_r+0x25c>
 80102fe:	7821      	ldrb	r1, [r4, #0]
 8010300:	2203      	movs	r2, #3
 8010302:	4650      	mov	r0, sl
 8010304:	f7ef ff74 	bl	80001f0 <memchr>
 8010308:	b140      	cbz	r0, 801031c <_vfiprintf_r+0x198>
 801030a:	2340      	movs	r3, #64	; 0x40
 801030c:	eba0 000a 	sub.w	r0, r0, sl
 8010310:	fa03 f000 	lsl.w	r0, r3, r0
 8010314:	9b04      	ldr	r3, [sp, #16]
 8010316:	4303      	orrs	r3, r0
 8010318:	3401      	adds	r4, #1
 801031a:	9304      	str	r3, [sp, #16]
 801031c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010320:	482c      	ldr	r0, [pc, #176]	; (80103d4 <_vfiprintf_r+0x250>)
 8010322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010326:	2206      	movs	r2, #6
 8010328:	f7ef ff62 	bl	80001f0 <memchr>
 801032c:	2800      	cmp	r0, #0
 801032e:	d03f      	beq.n	80103b0 <_vfiprintf_r+0x22c>
 8010330:	4b29      	ldr	r3, [pc, #164]	; (80103d8 <_vfiprintf_r+0x254>)
 8010332:	bb1b      	cbnz	r3, 801037c <_vfiprintf_r+0x1f8>
 8010334:	9b03      	ldr	r3, [sp, #12]
 8010336:	3307      	adds	r3, #7
 8010338:	f023 0307 	bic.w	r3, r3, #7
 801033c:	3308      	adds	r3, #8
 801033e:	9303      	str	r3, [sp, #12]
 8010340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010342:	443b      	add	r3, r7
 8010344:	9309      	str	r3, [sp, #36]	; 0x24
 8010346:	e767      	b.n	8010218 <_vfiprintf_r+0x94>
 8010348:	fb0c 3202 	mla	r2, ip, r2, r3
 801034c:	460c      	mov	r4, r1
 801034e:	2001      	movs	r0, #1
 8010350:	e7a5      	b.n	801029e <_vfiprintf_r+0x11a>
 8010352:	2300      	movs	r3, #0
 8010354:	3401      	adds	r4, #1
 8010356:	9305      	str	r3, [sp, #20]
 8010358:	4619      	mov	r1, r3
 801035a:	f04f 0c0a 	mov.w	ip, #10
 801035e:	4620      	mov	r0, r4
 8010360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010364:	3a30      	subs	r2, #48	; 0x30
 8010366:	2a09      	cmp	r2, #9
 8010368:	d903      	bls.n	8010372 <_vfiprintf_r+0x1ee>
 801036a:	2b00      	cmp	r3, #0
 801036c:	d0c5      	beq.n	80102fa <_vfiprintf_r+0x176>
 801036e:	9105      	str	r1, [sp, #20]
 8010370:	e7c3      	b.n	80102fa <_vfiprintf_r+0x176>
 8010372:	fb0c 2101 	mla	r1, ip, r1, r2
 8010376:	4604      	mov	r4, r0
 8010378:	2301      	movs	r3, #1
 801037a:	e7f0      	b.n	801035e <_vfiprintf_r+0x1da>
 801037c:	ab03      	add	r3, sp, #12
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	462a      	mov	r2, r5
 8010382:	4b16      	ldr	r3, [pc, #88]	; (80103dc <_vfiprintf_r+0x258>)
 8010384:	a904      	add	r1, sp, #16
 8010386:	4630      	mov	r0, r6
 8010388:	f7fc f844 	bl	800c414 <_printf_float>
 801038c:	4607      	mov	r7, r0
 801038e:	1c78      	adds	r0, r7, #1
 8010390:	d1d6      	bne.n	8010340 <_vfiprintf_r+0x1bc>
 8010392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010394:	07d9      	lsls	r1, r3, #31
 8010396:	d405      	bmi.n	80103a4 <_vfiprintf_r+0x220>
 8010398:	89ab      	ldrh	r3, [r5, #12]
 801039a:	059a      	lsls	r2, r3, #22
 801039c:	d402      	bmi.n	80103a4 <_vfiprintf_r+0x220>
 801039e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103a0:	f000 faa1 	bl	80108e6 <__retarget_lock_release_recursive>
 80103a4:	89ab      	ldrh	r3, [r5, #12]
 80103a6:	065b      	lsls	r3, r3, #25
 80103a8:	f53f af12 	bmi.w	80101d0 <_vfiprintf_r+0x4c>
 80103ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103ae:	e711      	b.n	80101d4 <_vfiprintf_r+0x50>
 80103b0:	ab03      	add	r3, sp, #12
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	462a      	mov	r2, r5
 80103b6:	4b09      	ldr	r3, [pc, #36]	; (80103dc <_vfiprintf_r+0x258>)
 80103b8:	a904      	add	r1, sp, #16
 80103ba:	4630      	mov	r0, r6
 80103bc:	f7fc face 	bl	800c95c <_printf_i>
 80103c0:	e7e4      	b.n	801038c <_vfiprintf_r+0x208>
 80103c2:	bf00      	nop
 80103c4:	08014b24 	.word	0x08014b24
 80103c8:	08014b44 	.word	0x08014b44
 80103cc:	08014b04 	.word	0x08014b04
 80103d0:	08014ab4 	.word	0x08014ab4
 80103d4:	08014abe 	.word	0x08014abe
 80103d8:	0800c415 	.word	0x0800c415
 80103dc:	08010161 	.word	0x08010161
 80103e0:	08014aba 	.word	0x08014aba

080103e4 <__swbuf_r>:
 80103e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e6:	460e      	mov	r6, r1
 80103e8:	4614      	mov	r4, r2
 80103ea:	4605      	mov	r5, r0
 80103ec:	b118      	cbz	r0, 80103f6 <__swbuf_r+0x12>
 80103ee:	6983      	ldr	r3, [r0, #24]
 80103f0:	b90b      	cbnz	r3, 80103f6 <__swbuf_r+0x12>
 80103f2:	f000 f9d9 	bl	80107a8 <__sinit>
 80103f6:	4b21      	ldr	r3, [pc, #132]	; (801047c <__swbuf_r+0x98>)
 80103f8:	429c      	cmp	r4, r3
 80103fa:	d12b      	bne.n	8010454 <__swbuf_r+0x70>
 80103fc:	686c      	ldr	r4, [r5, #4]
 80103fe:	69a3      	ldr	r3, [r4, #24]
 8010400:	60a3      	str	r3, [r4, #8]
 8010402:	89a3      	ldrh	r3, [r4, #12]
 8010404:	071a      	lsls	r2, r3, #28
 8010406:	d52f      	bpl.n	8010468 <__swbuf_r+0x84>
 8010408:	6923      	ldr	r3, [r4, #16]
 801040a:	b36b      	cbz	r3, 8010468 <__swbuf_r+0x84>
 801040c:	6923      	ldr	r3, [r4, #16]
 801040e:	6820      	ldr	r0, [r4, #0]
 8010410:	1ac0      	subs	r0, r0, r3
 8010412:	6963      	ldr	r3, [r4, #20]
 8010414:	b2f6      	uxtb	r6, r6
 8010416:	4283      	cmp	r3, r0
 8010418:	4637      	mov	r7, r6
 801041a:	dc04      	bgt.n	8010426 <__swbuf_r+0x42>
 801041c:	4621      	mov	r1, r4
 801041e:	4628      	mov	r0, r5
 8010420:	f000 f92e 	bl	8010680 <_fflush_r>
 8010424:	bb30      	cbnz	r0, 8010474 <__swbuf_r+0x90>
 8010426:	68a3      	ldr	r3, [r4, #8]
 8010428:	3b01      	subs	r3, #1
 801042a:	60a3      	str	r3, [r4, #8]
 801042c:	6823      	ldr	r3, [r4, #0]
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	6022      	str	r2, [r4, #0]
 8010432:	701e      	strb	r6, [r3, #0]
 8010434:	6963      	ldr	r3, [r4, #20]
 8010436:	3001      	adds	r0, #1
 8010438:	4283      	cmp	r3, r0
 801043a:	d004      	beq.n	8010446 <__swbuf_r+0x62>
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	07db      	lsls	r3, r3, #31
 8010440:	d506      	bpl.n	8010450 <__swbuf_r+0x6c>
 8010442:	2e0a      	cmp	r6, #10
 8010444:	d104      	bne.n	8010450 <__swbuf_r+0x6c>
 8010446:	4621      	mov	r1, r4
 8010448:	4628      	mov	r0, r5
 801044a:	f000 f919 	bl	8010680 <_fflush_r>
 801044e:	b988      	cbnz	r0, 8010474 <__swbuf_r+0x90>
 8010450:	4638      	mov	r0, r7
 8010452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010454:	4b0a      	ldr	r3, [pc, #40]	; (8010480 <__swbuf_r+0x9c>)
 8010456:	429c      	cmp	r4, r3
 8010458:	d101      	bne.n	801045e <__swbuf_r+0x7a>
 801045a:	68ac      	ldr	r4, [r5, #8]
 801045c:	e7cf      	b.n	80103fe <__swbuf_r+0x1a>
 801045e:	4b09      	ldr	r3, [pc, #36]	; (8010484 <__swbuf_r+0xa0>)
 8010460:	429c      	cmp	r4, r3
 8010462:	bf08      	it	eq
 8010464:	68ec      	ldreq	r4, [r5, #12]
 8010466:	e7ca      	b.n	80103fe <__swbuf_r+0x1a>
 8010468:	4621      	mov	r1, r4
 801046a:	4628      	mov	r0, r5
 801046c:	f000 f80c 	bl	8010488 <__swsetup_r>
 8010470:	2800      	cmp	r0, #0
 8010472:	d0cb      	beq.n	801040c <__swbuf_r+0x28>
 8010474:	f04f 37ff 	mov.w	r7, #4294967295
 8010478:	e7ea      	b.n	8010450 <__swbuf_r+0x6c>
 801047a:	bf00      	nop
 801047c:	08014b24 	.word	0x08014b24
 8010480:	08014b44 	.word	0x08014b44
 8010484:	08014b04 	.word	0x08014b04

08010488 <__swsetup_r>:
 8010488:	4b32      	ldr	r3, [pc, #200]	; (8010554 <__swsetup_r+0xcc>)
 801048a:	b570      	push	{r4, r5, r6, lr}
 801048c:	681d      	ldr	r5, [r3, #0]
 801048e:	4606      	mov	r6, r0
 8010490:	460c      	mov	r4, r1
 8010492:	b125      	cbz	r5, 801049e <__swsetup_r+0x16>
 8010494:	69ab      	ldr	r3, [r5, #24]
 8010496:	b913      	cbnz	r3, 801049e <__swsetup_r+0x16>
 8010498:	4628      	mov	r0, r5
 801049a:	f000 f985 	bl	80107a8 <__sinit>
 801049e:	4b2e      	ldr	r3, [pc, #184]	; (8010558 <__swsetup_r+0xd0>)
 80104a0:	429c      	cmp	r4, r3
 80104a2:	d10f      	bne.n	80104c4 <__swsetup_r+0x3c>
 80104a4:	686c      	ldr	r4, [r5, #4]
 80104a6:	89a3      	ldrh	r3, [r4, #12]
 80104a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104ac:	0719      	lsls	r1, r3, #28
 80104ae:	d42c      	bmi.n	801050a <__swsetup_r+0x82>
 80104b0:	06dd      	lsls	r5, r3, #27
 80104b2:	d411      	bmi.n	80104d8 <__swsetup_r+0x50>
 80104b4:	2309      	movs	r3, #9
 80104b6:	6033      	str	r3, [r6, #0]
 80104b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104bc:	81a3      	strh	r3, [r4, #12]
 80104be:	f04f 30ff 	mov.w	r0, #4294967295
 80104c2:	e03e      	b.n	8010542 <__swsetup_r+0xba>
 80104c4:	4b25      	ldr	r3, [pc, #148]	; (801055c <__swsetup_r+0xd4>)
 80104c6:	429c      	cmp	r4, r3
 80104c8:	d101      	bne.n	80104ce <__swsetup_r+0x46>
 80104ca:	68ac      	ldr	r4, [r5, #8]
 80104cc:	e7eb      	b.n	80104a6 <__swsetup_r+0x1e>
 80104ce:	4b24      	ldr	r3, [pc, #144]	; (8010560 <__swsetup_r+0xd8>)
 80104d0:	429c      	cmp	r4, r3
 80104d2:	bf08      	it	eq
 80104d4:	68ec      	ldreq	r4, [r5, #12]
 80104d6:	e7e6      	b.n	80104a6 <__swsetup_r+0x1e>
 80104d8:	0758      	lsls	r0, r3, #29
 80104da:	d512      	bpl.n	8010502 <__swsetup_r+0x7a>
 80104dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104de:	b141      	cbz	r1, 80104f2 <__swsetup_r+0x6a>
 80104e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104e4:	4299      	cmp	r1, r3
 80104e6:	d002      	beq.n	80104ee <__swsetup_r+0x66>
 80104e8:	4630      	mov	r0, r6
 80104ea:	f7ff fb2f 	bl	800fb4c <_free_r>
 80104ee:	2300      	movs	r3, #0
 80104f0:	6363      	str	r3, [r4, #52]	; 0x34
 80104f2:	89a3      	ldrh	r3, [r4, #12]
 80104f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104f8:	81a3      	strh	r3, [r4, #12]
 80104fa:	2300      	movs	r3, #0
 80104fc:	6063      	str	r3, [r4, #4]
 80104fe:	6923      	ldr	r3, [r4, #16]
 8010500:	6023      	str	r3, [r4, #0]
 8010502:	89a3      	ldrh	r3, [r4, #12]
 8010504:	f043 0308 	orr.w	r3, r3, #8
 8010508:	81a3      	strh	r3, [r4, #12]
 801050a:	6923      	ldr	r3, [r4, #16]
 801050c:	b94b      	cbnz	r3, 8010522 <__swsetup_r+0x9a>
 801050e:	89a3      	ldrh	r3, [r4, #12]
 8010510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010518:	d003      	beq.n	8010522 <__swsetup_r+0x9a>
 801051a:	4621      	mov	r1, r4
 801051c:	4630      	mov	r0, r6
 801051e:	f000 fa09 	bl	8010934 <__smakebuf_r>
 8010522:	89a0      	ldrh	r0, [r4, #12]
 8010524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010528:	f010 0301 	ands.w	r3, r0, #1
 801052c:	d00a      	beq.n	8010544 <__swsetup_r+0xbc>
 801052e:	2300      	movs	r3, #0
 8010530:	60a3      	str	r3, [r4, #8]
 8010532:	6963      	ldr	r3, [r4, #20]
 8010534:	425b      	negs	r3, r3
 8010536:	61a3      	str	r3, [r4, #24]
 8010538:	6923      	ldr	r3, [r4, #16]
 801053a:	b943      	cbnz	r3, 801054e <__swsetup_r+0xc6>
 801053c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010540:	d1ba      	bne.n	80104b8 <__swsetup_r+0x30>
 8010542:	bd70      	pop	{r4, r5, r6, pc}
 8010544:	0781      	lsls	r1, r0, #30
 8010546:	bf58      	it	pl
 8010548:	6963      	ldrpl	r3, [r4, #20]
 801054a:	60a3      	str	r3, [r4, #8]
 801054c:	e7f4      	b.n	8010538 <__swsetup_r+0xb0>
 801054e:	2000      	movs	r0, #0
 8010550:	e7f7      	b.n	8010542 <__swsetup_r+0xba>
 8010552:	bf00      	nop
 8010554:	2000010c 	.word	0x2000010c
 8010558:	08014b24 	.word	0x08014b24
 801055c:	08014b44 	.word	0x08014b44
 8010560:	08014b04 	.word	0x08014b04

08010564 <abort>:
 8010564:	b508      	push	{r3, lr}
 8010566:	2006      	movs	r0, #6
 8010568:	f000 fa54 	bl	8010a14 <raise>
 801056c:	2001      	movs	r0, #1
 801056e:	f000 fb59 	bl	8010c24 <_exit>
	...

08010574 <__sflush_r>:
 8010574:	898a      	ldrh	r2, [r1, #12]
 8010576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057a:	4605      	mov	r5, r0
 801057c:	0710      	lsls	r0, r2, #28
 801057e:	460c      	mov	r4, r1
 8010580:	d458      	bmi.n	8010634 <__sflush_r+0xc0>
 8010582:	684b      	ldr	r3, [r1, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	dc05      	bgt.n	8010594 <__sflush_r+0x20>
 8010588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801058a:	2b00      	cmp	r3, #0
 801058c:	dc02      	bgt.n	8010594 <__sflush_r+0x20>
 801058e:	2000      	movs	r0, #0
 8010590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010596:	2e00      	cmp	r6, #0
 8010598:	d0f9      	beq.n	801058e <__sflush_r+0x1a>
 801059a:	2300      	movs	r3, #0
 801059c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105a0:	682f      	ldr	r7, [r5, #0]
 80105a2:	602b      	str	r3, [r5, #0]
 80105a4:	d032      	beq.n	801060c <__sflush_r+0x98>
 80105a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105a8:	89a3      	ldrh	r3, [r4, #12]
 80105aa:	075a      	lsls	r2, r3, #29
 80105ac:	d505      	bpl.n	80105ba <__sflush_r+0x46>
 80105ae:	6863      	ldr	r3, [r4, #4]
 80105b0:	1ac0      	subs	r0, r0, r3
 80105b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105b4:	b10b      	cbz	r3, 80105ba <__sflush_r+0x46>
 80105b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105b8:	1ac0      	subs	r0, r0, r3
 80105ba:	2300      	movs	r3, #0
 80105bc:	4602      	mov	r2, r0
 80105be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105c0:	6a21      	ldr	r1, [r4, #32]
 80105c2:	4628      	mov	r0, r5
 80105c4:	47b0      	blx	r6
 80105c6:	1c43      	adds	r3, r0, #1
 80105c8:	89a3      	ldrh	r3, [r4, #12]
 80105ca:	d106      	bne.n	80105da <__sflush_r+0x66>
 80105cc:	6829      	ldr	r1, [r5, #0]
 80105ce:	291d      	cmp	r1, #29
 80105d0:	d82c      	bhi.n	801062c <__sflush_r+0xb8>
 80105d2:	4a2a      	ldr	r2, [pc, #168]	; (801067c <__sflush_r+0x108>)
 80105d4:	40ca      	lsrs	r2, r1
 80105d6:	07d6      	lsls	r6, r2, #31
 80105d8:	d528      	bpl.n	801062c <__sflush_r+0xb8>
 80105da:	2200      	movs	r2, #0
 80105dc:	6062      	str	r2, [r4, #4]
 80105de:	04d9      	lsls	r1, r3, #19
 80105e0:	6922      	ldr	r2, [r4, #16]
 80105e2:	6022      	str	r2, [r4, #0]
 80105e4:	d504      	bpl.n	80105f0 <__sflush_r+0x7c>
 80105e6:	1c42      	adds	r2, r0, #1
 80105e8:	d101      	bne.n	80105ee <__sflush_r+0x7a>
 80105ea:	682b      	ldr	r3, [r5, #0]
 80105ec:	b903      	cbnz	r3, 80105f0 <__sflush_r+0x7c>
 80105ee:	6560      	str	r0, [r4, #84]	; 0x54
 80105f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105f2:	602f      	str	r7, [r5, #0]
 80105f4:	2900      	cmp	r1, #0
 80105f6:	d0ca      	beq.n	801058e <__sflush_r+0x1a>
 80105f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105fc:	4299      	cmp	r1, r3
 80105fe:	d002      	beq.n	8010606 <__sflush_r+0x92>
 8010600:	4628      	mov	r0, r5
 8010602:	f7ff faa3 	bl	800fb4c <_free_r>
 8010606:	2000      	movs	r0, #0
 8010608:	6360      	str	r0, [r4, #52]	; 0x34
 801060a:	e7c1      	b.n	8010590 <__sflush_r+0x1c>
 801060c:	6a21      	ldr	r1, [r4, #32]
 801060e:	2301      	movs	r3, #1
 8010610:	4628      	mov	r0, r5
 8010612:	47b0      	blx	r6
 8010614:	1c41      	adds	r1, r0, #1
 8010616:	d1c7      	bne.n	80105a8 <__sflush_r+0x34>
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d0c4      	beq.n	80105a8 <__sflush_r+0x34>
 801061e:	2b1d      	cmp	r3, #29
 8010620:	d001      	beq.n	8010626 <__sflush_r+0xb2>
 8010622:	2b16      	cmp	r3, #22
 8010624:	d101      	bne.n	801062a <__sflush_r+0xb6>
 8010626:	602f      	str	r7, [r5, #0]
 8010628:	e7b1      	b.n	801058e <__sflush_r+0x1a>
 801062a:	89a3      	ldrh	r3, [r4, #12]
 801062c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010630:	81a3      	strh	r3, [r4, #12]
 8010632:	e7ad      	b.n	8010590 <__sflush_r+0x1c>
 8010634:	690f      	ldr	r7, [r1, #16]
 8010636:	2f00      	cmp	r7, #0
 8010638:	d0a9      	beq.n	801058e <__sflush_r+0x1a>
 801063a:	0793      	lsls	r3, r2, #30
 801063c:	680e      	ldr	r6, [r1, #0]
 801063e:	bf08      	it	eq
 8010640:	694b      	ldreq	r3, [r1, #20]
 8010642:	600f      	str	r7, [r1, #0]
 8010644:	bf18      	it	ne
 8010646:	2300      	movne	r3, #0
 8010648:	eba6 0807 	sub.w	r8, r6, r7
 801064c:	608b      	str	r3, [r1, #8]
 801064e:	f1b8 0f00 	cmp.w	r8, #0
 8010652:	dd9c      	ble.n	801058e <__sflush_r+0x1a>
 8010654:	6a21      	ldr	r1, [r4, #32]
 8010656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010658:	4643      	mov	r3, r8
 801065a:	463a      	mov	r2, r7
 801065c:	4628      	mov	r0, r5
 801065e:	47b0      	blx	r6
 8010660:	2800      	cmp	r0, #0
 8010662:	dc06      	bgt.n	8010672 <__sflush_r+0xfe>
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801066a:	81a3      	strh	r3, [r4, #12]
 801066c:	f04f 30ff 	mov.w	r0, #4294967295
 8010670:	e78e      	b.n	8010590 <__sflush_r+0x1c>
 8010672:	4407      	add	r7, r0
 8010674:	eba8 0800 	sub.w	r8, r8, r0
 8010678:	e7e9      	b.n	801064e <__sflush_r+0xda>
 801067a:	bf00      	nop
 801067c:	20400001 	.word	0x20400001

08010680 <_fflush_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	690b      	ldr	r3, [r1, #16]
 8010684:	4605      	mov	r5, r0
 8010686:	460c      	mov	r4, r1
 8010688:	b913      	cbnz	r3, 8010690 <_fflush_r+0x10>
 801068a:	2500      	movs	r5, #0
 801068c:	4628      	mov	r0, r5
 801068e:	bd38      	pop	{r3, r4, r5, pc}
 8010690:	b118      	cbz	r0, 801069a <_fflush_r+0x1a>
 8010692:	6983      	ldr	r3, [r0, #24]
 8010694:	b90b      	cbnz	r3, 801069a <_fflush_r+0x1a>
 8010696:	f000 f887 	bl	80107a8 <__sinit>
 801069a:	4b14      	ldr	r3, [pc, #80]	; (80106ec <_fflush_r+0x6c>)
 801069c:	429c      	cmp	r4, r3
 801069e:	d11b      	bne.n	80106d8 <_fflush_r+0x58>
 80106a0:	686c      	ldr	r4, [r5, #4]
 80106a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d0ef      	beq.n	801068a <_fflush_r+0xa>
 80106aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80106ac:	07d0      	lsls	r0, r2, #31
 80106ae:	d404      	bmi.n	80106ba <_fflush_r+0x3a>
 80106b0:	0599      	lsls	r1, r3, #22
 80106b2:	d402      	bmi.n	80106ba <_fflush_r+0x3a>
 80106b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106b6:	f000 f915 	bl	80108e4 <__retarget_lock_acquire_recursive>
 80106ba:	4628      	mov	r0, r5
 80106bc:	4621      	mov	r1, r4
 80106be:	f7ff ff59 	bl	8010574 <__sflush_r>
 80106c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106c4:	07da      	lsls	r2, r3, #31
 80106c6:	4605      	mov	r5, r0
 80106c8:	d4e0      	bmi.n	801068c <_fflush_r+0xc>
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	059b      	lsls	r3, r3, #22
 80106ce:	d4dd      	bmi.n	801068c <_fflush_r+0xc>
 80106d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106d2:	f000 f908 	bl	80108e6 <__retarget_lock_release_recursive>
 80106d6:	e7d9      	b.n	801068c <_fflush_r+0xc>
 80106d8:	4b05      	ldr	r3, [pc, #20]	; (80106f0 <_fflush_r+0x70>)
 80106da:	429c      	cmp	r4, r3
 80106dc:	d101      	bne.n	80106e2 <_fflush_r+0x62>
 80106de:	68ac      	ldr	r4, [r5, #8]
 80106e0:	e7df      	b.n	80106a2 <_fflush_r+0x22>
 80106e2:	4b04      	ldr	r3, [pc, #16]	; (80106f4 <_fflush_r+0x74>)
 80106e4:	429c      	cmp	r4, r3
 80106e6:	bf08      	it	eq
 80106e8:	68ec      	ldreq	r4, [r5, #12]
 80106ea:	e7da      	b.n	80106a2 <_fflush_r+0x22>
 80106ec:	08014b24 	.word	0x08014b24
 80106f0:	08014b44 	.word	0x08014b44
 80106f4:	08014b04 	.word	0x08014b04

080106f8 <std>:
 80106f8:	2300      	movs	r3, #0
 80106fa:	b510      	push	{r4, lr}
 80106fc:	4604      	mov	r4, r0
 80106fe:	e9c0 3300 	strd	r3, r3, [r0]
 8010702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010706:	6083      	str	r3, [r0, #8]
 8010708:	8181      	strh	r1, [r0, #12]
 801070a:	6643      	str	r3, [r0, #100]	; 0x64
 801070c:	81c2      	strh	r2, [r0, #14]
 801070e:	6183      	str	r3, [r0, #24]
 8010710:	4619      	mov	r1, r3
 8010712:	2208      	movs	r2, #8
 8010714:	305c      	adds	r0, #92	; 0x5c
 8010716:	f7fb fdd5 	bl	800c2c4 <memset>
 801071a:	4b05      	ldr	r3, [pc, #20]	; (8010730 <std+0x38>)
 801071c:	6263      	str	r3, [r4, #36]	; 0x24
 801071e:	4b05      	ldr	r3, [pc, #20]	; (8010734 <std+0x3c>)
 8010720:	62a3      	str	r3, [r4, #40]	; 0x28
 8010722:	4b05      	ldr	r3, [pc, #20]	; (8010738 <std+0x40>)
 8010724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010726:	4b05      	ldr	r3, [pc, #20]	; (801073c <std+0x44>)
 8010728:	6224      	str	r4, [r4, #32]
 801072a:	6323      	str	r3, [r4, #48]	; 0x30
 801072c:	bd10      	pop	{r4, pc}
 801072e:	bf00      	nop
 8010730:	08010a4d 	.word	0x08010a4d
 8010734:	08010a6f 	.word	0x08010a6f
 8010738:	08010aa7 	.word	0x08010aa7
 801073c:	08010acb 	.word	0x08010acb

08010740 <_cleanup_r>:
 8010740:	4901      	ldr	r1, [pc, #4]	; (8010748 <_cleanup_r+0x8>)
 8010742:	f000 b8af 	b.w	80108a4 <_fwalk_reent>
 8010746:	bf00      	nop
 8010748:	08010681 	.word	0x08010681

0801074c <__sfmoreglue>:
 801074c:	b570      	push	{r4, r5, r6, lr}
 801074e:	2268      	movs	r2, #104	; 0x68
 8010750:	1e4d      	subs	r5, r1, #1
 8010752:	4355      	muls	r5, r2
 8010754:	460e      	mov	r6, r1
 8010756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801075a:	f7ff fa63 	bl	800fc24 <_malloc_r>
 801075e:	4604      	mov	r4, r0
 8010760:	b140      	cbz	r0, 8010774 <__sfmoreglue+0x28>
 8010762:	2100      	movs	r1, #0
 8010764:	e9c0 1600 	strd	r1, r6, [r0]
 8010768:	300c      	adds	r0, #12
 801076a:	60a0      	str	r0, [r4, #8]
 801076c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010770:	f7fb fda8 	bl	800c2c4 <memset>
 8010774:	4620      	mov	r0, r4
 8010776:	bd70      	pop	{r4, r5, r6, pc}

08010778 <__sfp_lock_acquire>:
 8010778:	4801      	ldr	r0, [pc, #4]	; (8010780 <__sfp_lock_acquire+0x8>)
 801077a:	f000 b8b3 	b.w	80108e4 <__retarget_lock_acquire_recursive>
 801077e:	bf00      	nop
 8010780:	20002189 	.word	0x20002189

08010784 <__sfp_lock_release>:
 8010784:	4801      	ldr	r0, [pc, #4]	; (801078c <__sfp_lock_release+0x8>)
 8010786:	f000 b8ae 	b.w	80108e6 <__retarget_lock_release_recursive>
 801078a:	bf00      	nop
 801078c:	20002189 	.word	0x20002189

08010790 <__sinit_lock_acquire>:
 8010790:	4801      	ldr	r0, [pc, #4]	; (8010798 <__sinit_lock_acquire+0x8>)
 8010792:	f000 b8a7 	b.w	80108e4 <__retarget_lock_acquire_recursive>
 8010796:	bf00      	nop
 8010798:	2000218a 	.word	0x2000218a

0801079c <__sinit_lock_release>:
 801079c:	4801      	ldr	r0, [pc, #4]	; (80107a4 <__sinit_lock_release+0x8>)
 801079e:	f000 b8a2 	b.w	80108e6 <__retarget_lock_release_recursive>
 80107a2:	bf00      	nop
 80107a4:	2000218a 	.word	0x2000218a

080107a8 <__sinit>:
 80107a8:	b510      	push	{r4, lr}
 80107aa:	4604      	mov	r4, r0
 80107ac:	f7ff fff0 	bl	8010790 <__sinit_lock_acquire>
 80107b0:	69a3      	ldr	r3, [r4, #24]
 80107b2:	b11b      	cbz	r3, 80107bc <__sinit+0x14>
 80107b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107b8:	f7ff bff0 	b.w	801079c <__sinit_lock_release>
 80107bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80107c0:	6523      	str	r3, [r4, #80]	; 0x50
 80107c2:	4b13      	ldr	r3, [pc, #76]	; (8010810 <__sinit+0x68>)
 80107c4:	4a13      	ldr	r2, [pc, #76]	; (8010814 <__sinit+0x6c>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80107ca:	42a3      	cmp	r3, r4
 80107cc:	bf04      	itt	eq
 80107ce:	2301      	moveq	r3, #1
 80107d0:	61a3      	streq	r3, [r4, #24]
 80107d2:	4620      	mov	r0, r4
 80107d4:	f000 f820 	bl	8010818 <__sfp>
 80107d8:	6060      	str	r0, [r4, #4]
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 f81c 	bl	8010818 <__sfp>
 80107e0:	60a0      	str	r0, [r4, #8]
 80107e2:	4620      	mov	r0, r4
 80107e4:	f000 f818 	bl	8010818 <__sfp>
 80107e8:	2200      	movs	r2, #0
 80107ea:	60e0      	str	r0, [r4, #12]
 80107ec:	2104      	movs	r1, #4
 80107ee:	6860      	ldr	r0, [r4, #4]
 80107f0:	f7ff ff82 	bl	80106f8 <std>
 80107f4:	68a0      	ldr	r0, [r4, #8]
 80107f6:	2201      	movs	r2, #1
 80107f8:	2109      	movs	r1, #9
 80107fa:	f7ff ff7d 	bl	80106f8 <std>
 80107fe:	68e0      	ldr	r0, [r4, #12]
 8010800:	2202      	movs	r2, #2
 8010802:	2112      	movs	r1, #18
 8010804:	f7ff ff78 	bl	80106f8 <std>
 8010808:	2301      	movs	r3, #1
 801080a:	61a3      	str	r3, [r4, #24]
 801080c:	e7d2      	b.n	80107b4 <__sinit+0xc>
 801080e:	bf00      	nop
 8010810:	080146c0 	.word	0x080146c0
 8010814:	08010741 	.word	0x08010741

08010818 <__sfp>:
 8010818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081a:	4607      	mov	r7, r0
 801081c:	f7ff ffac 	bl	8010778 <__sfp_lock_acquire>
 8010820:	4b1e      	ldr	r3, [pc, #120]	; (801089c <__sfp+0x84>)
 8010822:	681e      	ldr	r6, [r3, #0]
 8010824:	69b3      	ldr	r3, [r6, #24]
 8010826:	b913      	cbnz	r3, 801082e <__sfp+0x16>
 8010828:	4630      	mov	r0, r6
 801082a:	f7ff ffbd 	bl	80107a8 <__sinit>
 801082e:	3648      	adds	r6, #72	; 0x48
 8010830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010834:	3b01      	subs	r3, #1
 8010836:	d503      	bpl.n	8010840 <__sfp+0x28>
 8010838:	6833      	ldr	r3, [r6, #0]
 801083a:	b30b      	cbz	r3, 8010880 <__sfp+0x68>
 801083c:	6836      	ldr	r6, [r6, #0]
 801083e:	e7f7      	b.n	8010830 <__sfp+0x18>
 8010840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010844:	b9d5      	cbnz	r5, 801087c <__sfp+0x64>
 8010846:	4b16      	ldr	r3, [pc, #88]	; (80108a0 <__sfp+0x88>)
 8010848:	60e3      	str	r3, [r4, #12]
 801084a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801084e:	6665      	str	r5, [r4, #100]	; 0x64
 8010850:	f000 f847 	bl	80108e2 <__retarget_lock_init_recursive>
 8010854:	f7ff ff96 	bl	8010784 <__sfp_lock_release>
 8010858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801085c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010860:	6025      	str	r5, [r4, #0]
 8010862:	61a5      	str	r5, [r4, #24]
 8010864:	2208      	movs	r2, #8
 8010866:	4629      	mov	r1, r5
 8010868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801086c:	f7fb fd2a 	bl	800c2c4 <memset>
 8010870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010878:	4620      	mov	r0, r4
 801087a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801087c:	3468      	adds	r4, #104	; 0x68
 801087e:	e7d9      	b.n	8010834 <__sfp+0x1c>
 8010880:	2104      	movs	r1, #4
 8010882:	4638      	mov	r0, r7
 8010884:	f7ff ff62 	bl	801074c <__sfmoreglue>
 8010888:	4604      	mov	r4, r0
 801088a:	6030      	str	r0, [r6, #0]
 801088c:	2800      	cmp	r0, #0
 801088e:	d1d5      	bne.n	801083c <__sfp+0x24>
 8010890:	f7ff ff78 	bl	8010784 <__sfp_lock_release>
 8010894:	230c      	movs	r3, #12
 8010896:	603b      	str	r3, [r7, #0]
 8010898:	e7ee      	b.n	8010878 <__sfp+0x60>
 801089a:	bf00      	nop
 801089c:	080146c0 	.word	0x080146c0
 80108a0:	ffff0001 	.word	0xffff0001

080108a4 <_fwalk_reent>:
 80108a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108a8:	4606      	mov	r6, r0
 80108aa:	4688      	mov	r8, r1
 80108ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80108b0:	2700      	movs	r7, #0
 80108b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108b6:	f1b9 0901 	subs.w	r9, r9, #1
 80108ba:	d505      	bpl.n	80108c8 <_fwalk_reent+0x24>
 80108bc:	6824      	ldr	r4, [r4, #0]
 80108be:	2c00      	cmp	r4, #0
 80108c0:	d1f7      	bne.n	80108b2 <_fwalk_reent+0xe>
 80108c2:	4638      	mov	r0, r7
 80108c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108c8:	89ab      	ldrh	r3, [r5, #12]
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d907      	bls.n	80108de <_fwalk_reent+0x3a>
 80108ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108d2:	3301      	adds	r3, #1
 80108d4:	d003      	beq.n	80108de <_fwalk_reent+0x3a>
 80108d6:	4629      	mov	r1, r5
 80108d8:	4630      	mov	r0, r6
 80108da:	47c0      	blx	r8
 80108dc:	4307      	orrs	r7, r0
 80108de:	3568      	adds	r5, #104	; 0x68
 80108e0:	e7e9      	b.n	80108b6 <_fwalk_reent+0x12>

080108e2 <__retarget_lock_init_recursive>:
 80108e2:	4770      	bx	lr

080108e4 <__retarget_lock_acquire_recursive>:
 80108e4:	4770      	bx	lr

080108e6 <__retarget_lock_release_recursive>:
 80108e6:	4770      	bx	lr

080108e8 <__swhatbuf_r>:
 80108e8:	b570      	push	{r4, r5, r6, lr}
 80108ea:	460e      	mov	r6, r1
 80108ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f0:	2900      	cmp	r1, #0
 80108f2:	b096      	sub	sp, #88	; 0x58
 80108f4:	4614      	mov	r4, r2
 80108f6:	461d      	mov	r5, r3
 80108f8:	da08      	bge.n	801090c <__swhatbuf_r+0x24>
 80108fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80108fe:	2200      	movs	r2, #0
 8010900:	602a      	str	r2, [r5, #0]
 8010902:	061a      	lsls	r2, r3, #24
 8010904:	d410      	bmi.n	8010928 <__swhatbuf_r+0x40>
 8010906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801090a:	e00e      	b.n	801092a <__swhatbuf_r+0x42>
 801090c:	466a      	mov	r2, sp
 801090e:	f000 f903 	bl	8010b18 <_fstat_r>
 8010912:	2800      	cmp	r0, #0
 8010914:	dbf1      	blt.n	80108fa <__swhatbuf_r+0x12>
 8010916:	9a01      	ldr	r2, [sp, #4]
 8010918:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801091c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010920:	425a      	negs	r2, r3
 8010922:	415a      	adcs	r2, r3
 8010924:	602a      	str	r2, [r5, #0]
 8010926:	e7ee      	b.n	8010906 <__swhatbuf_r+0x1e>
 8010928:	2340      	movs	r3, #64	; 0x40
 801092a:	2000      	movs	r0, #0
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	b016      	add	sp, #88	; 0x58
 8010930:	bd70      	pop	{r4, r5, r6, pc}
	...

08010934 <__smakebuf_r>:
 8010934:	898b      	ldrh	r3, [r1, #12]
 8010936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010938:	079d      	lsls	r5, r3, #30
 801093a:	4606      	mov	r6, r0
 801093c:	460c      	mov	r4, r1
 801093e:	d507      	bpl.n	8010950 <__smakebuf_r+0x1c>
 8010940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010944:	6023      	str	r3, [r4, #0]
 8010946:	6123      	str	r3, [r4, #16]
 8010948:	2301      	movs	r3, #1
 801094a:	6163      	str	r3, [r4, #20]
 801094c:	b002      	add	sp, #8
 801094e:	bd70      	pop	{r4, r5, r6, pc}
 8010950:	ab01      	add	r3, sp, #4
 8010952:	466a      	mov	r2, sp
 8010954:	f7ff ffc8 	bl	80108e8 <__swhatbuf_r>
 8010958:	9900      	ldr	r1, [sp, #0]
 801095a:	4605      	mov	r5, r0
 801095c:	4630      	mov	r0, r6
 801095e:	f7ff f961 	bl	800fc24 <_malloc_r>
 8010962:	b948      	cbnz	r0, 8010978 <__smakebuf_r+0x44>
 8010964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010968:	059a      	lsls	r2, r3, #22
 801096a:	d4ef      	bmi.n	801094c <__smakebuf_r+0x18>
 801096c:	f023 0303 	bic.w	r3, r3, #3
 8010970:	f043 0302 	orr.w	r3, r3, #2
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	e7e3      	b.n	8010940 <__smakebuf_r+0xc>
 8010978:	4b0d      	ldr	r3, [pc, #52]	; (80109b0 <__smakebuf_r+0x7c>)
 801097a:	62b3      	str	r3, [r6, #40]	; 0x28
 801097c:	89a3      	ldrh	r3, [r4, #12]
 801097e:	6020      	str	r0, [r4, #0]
 8010980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010984:	81a3      	strh	r3, [r4, #12]
 8010986:	9b00      	ldr	r3, [sp, #0]
 8010988:	6163      	str	r3, [r4, #20]
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	6120      	str	r0, [r4, #16]
 801098e:	b15b      	cbz	r3, 80109a8 <__smakebuf_r+0x74>
 8010990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010994:	4630      	mov	r0, r6
 8010996:	f000 f8d1 	bl	8010b3c <_isatty_r>
 801099a:	b128      	cbz	r0, 80109a8 <__smakebuf_r+0x74>
 801099c:	89a3      	ldrh	r3, [r4, #12]
 801099e:	f023 0303 	bic.w	r3, r3, #3
 80109a2:	f043 0301 	orr.w	r3, r3, #1
 80109a6:	81a3      	strh	r3, [r4, #12]
 80109a8:	89a0      	ldrh	r0, [r4, #12]
 80109aa:	4305      	orrs	r5, r0
 80109ac:	81a5      	strh	r5, [r4, #12]
 80109ae:	e7cd      	b.n	801094c <__smakebuf_r+0x18>
 80109b0:	08010741 	.word	0x08010741

080109b4 <_malloc_usable_size_r>:
 80109b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109b8:	1f18      	subs	r0, r3, #4
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	bfbc      	itt	lt
 80109be:	580b      	ldrlt	r3, [r1, r0]
 80109c0:	18c0      	addlt	r0, r0, r3
 80109c2:	4770      	bx	lr

080109c4 <_raise_r>:
 80109c4:	291f      	cmp	r1, #31
 80109c6:	b538      	push	{r3, r4, r5, lr}
 80109c8:	4604      	mov	r4, r0
 80109ca:	460d      	mov	r5, r1
 80109cc:	d904      	bls.n	80109d8 <_raise_r+0x14>
 80109ce:	2316      	movs	r3, #22
 80109d0:	6003      	str	r3, [r0, #0]
 80109d2:	f04f 30ff 	mov.w	r0, #4294967295
 80109d6:	bd38      	pop	{r3, r4, r5, pc}
 80109d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80109da:	b112      	cbz	r2, 80109e2 <_raise_r+0x1e>
 80109dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109e0:	b94b      	cbnz	r3, 80109f6 <_raise_r+0x32>
 80109e2:	4620      	mov	r0, r4
 80109e4:	f000 f830 	bl	8010a48 <_getpid_r>
 80109e8:	462a      	mov	r2, r5
 80109ea:	4601      	mov	r1, r0
 80109ec:	4620      	mov	r0, r4
 80109ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109f2:	f000 b817 	b.w	8010a24 <_kill_r>
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d00a      	beq.n	8010a10 <_raise_r+0x4c>
 80109fa:	1c59      	adds	r1, r3, #1
 80109fc:	d103      	bne.n	8010a06 <_raise_r+0x42>
 80109fe:	2316      	movs	r3, #22
 8010a00:	6003      	str	r3, [r0, #0]
 8010a02:	2001      	movs	r0, #1
 8010a04:	e7e7      	b.n	80109d6 <_raise_r+0x12>
 8010a06:	2400      	movs	r4, #0
 8010a08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	4798      	blx	r3
 8010a10:	2000      	movs	r0, #0
 8010a12:	e7e0      	b.n	80109d6 <_raise_r+0x12>

08010a14 <raise>:
 8010a14:	4b02      	ldr	r3, [pc, #8]	; (8010a20 <raise+0xc>)
 8010a16:	4601      	mov	r1, r0
 8010a18:	6818      	ldr	r0, [r3, #0]
 8010a1a:	f7ff bfd3 	b.w	80109c4 <_raise_r>
 8010a1e:	bf00      	nop
 8010a20:	2000010c 	.word	0x2000010c

08010a24 <_kill_r>:
 8010a24:	b538      	push	{r3, r4, r5, lr}
 8010a26:	4d07      	ldr	r5, [pc, #28]	; (8010a44 <_kill_r+0x20>)
 8010a28:	2300      	movs	r3, #0
 8010a2a:	4604      	mov	r4, r0
 8010a2c:	4608      	mov	r0, r1
 8010a2e:	4611      	mov	r1, r2
 8010a30:	602b      	str	r3, [r5, #0]
 8010a32:	f000 f8d7 	bl	8010be4 <_kill>
 8010a36:	1c43      	adds	r3, r0, #1
 8010a38:	d102      	bne.n	8010a40 <_kill_r+0x1c>
 8010a3a:	682b      	ldr	r3, [r5, #0]
 8010a3c:	b103      	cbz	r3, 8010a40 <_kill_r+0x1c>
 8010a3e:	6023      	str	r3, [r4, #0]
 8010a40:	bd38      	pop	{r3, r4, r5, pc}
 8010a42:	bf00      	nop
 8010a44:	20002184 	.word	0x20002184

08010a48 <_getpid_r>:
 8010a48:	f000 b8bc 	b.w	8010bc4 <_getpid>

08010a4c <__sread>:
 8010a4c:	b510      	push	{r4, lr}
 8010a4e:	460c      	mov	r4, r1
 8010a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a54:	f000 f894 	bl	8010b80 <_read_r>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	bfab      	itete	ge
 8010a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8010a60:	181b      	addge	r3, r3, r0
 8010a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a66:	bfac      	ite	ge
 8010a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a6a:	81a3      	strhlt	r3, [r4, #12]
 8010a6c:	bd10      	pop	{r4, pc}

08010a6e <__swrite>:
 8010a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a72:	461f      	mov	r7, r3
 8010a74:	898b      	ldrh	r3, [r1, #12]
 8010a76:	05db      	lsls	r3, r3, #23
 8010a78:	4605      	mov	r5, r0
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	4616      	mov	r6, r2
 8010a7e:	d505      	bpl.n	8010a8c <__swrite+0x1e>
 8010a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a84:	2302      	movs	r3, #2
 8010a86:	2200      	movs	r2, #0
 8010a88:	f000 f868 	bl	8010b5c <_lseek_r>
 8010a8c:	89a3      	ldrh	r3, [r4, #12]
 8010a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a96:	81a3      	strh	r3, [r4, #12]
 8010a98:	4632      	mov	r2, r6
 8010a9a:	463b      	mov	r3, r7
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa2:	f000 b817 	b.w	8010ad4 <_write_r>

08010aa6 <__sseek>:
 8010aa6:	b510      	push	{r4, lr}
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aae:	f000 f855 	bl	8010b5c <_lseek_r>
 8010ab2:	1c43      	adds	r3, r0, #1
 8010ab4:	89a3      	ldrh	r3, [r4, #12]
 8010ab6:	bf15      	itete	ne
 8010ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ac2:	81a3      	strheq	r3, [r4, #12]
 8010ac4:	bf18      	it	ne
 8010ac6:	81a3      	strhne	r3, [r4, #12]
 8010ac8:	bd10      	pop	{r4, pc}

08010aca <__sclose>:
 8010aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ace:	f000 b813 	b.w	8010af8 <_close_r>
	...

08010ad4 <_write_r>:
 8010ad4:	b538      	push	{r3, r4, r5, lr}
 8010ad6:	4d07      	ldr	r5, [pc, #28]	; (8010af4 <_write_r+0x20>)
 8010ad8:	4604      	mov	r4, r0
 8010ada:	4608      	mov	r0, r1
 8010adc:	4611      	mov	r1, r2
 8010ade:	2200      	movs	r2, #0
 8010ae0:	602a      	str	r2, [r5, #0]
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	f000 f896 	bl	8010c14 <_write>
 8010ae8:	1c43      	adds	r3, r0, #1
 8010aea:	d102      	bne.n	8010af2 <_write_r+0x1e>
 8010aec:	682b      	ldr	r3, [r5, #0]
 8010aee:	b103      	cbz	r3, 8010af2 <_write_r+0x1e>
 8010af0:	6023      	str	r3, [r4, #0]
 8010af2:	bd38      	pop	{r3, r4, r5, pc}
 8010af4:	20002184 	.word	0x20002184

08010af8 <_close_r>:
 8010af8:	b538      	push	{r3, r4, r5, lr}
 8010afa:	4d06      	ldr	r5, [pc, #24]	; (8010b14 <_close_r+0x1c>)
 8010afc:	2300      	movs	r3, #0
 8010afe:	4604      	mov	r4, r0
 8010b00:	4608      	mov	r0, r1
 8010b02:	602b      	str	r3, [r5, #0]
 8010b04:	f000 f84e 	bl	8010ba4 <_close>
 8010b08:	1c43      	adds	r3, r0, #1
 8010b0a:	d102      	bne.n	8010b12 <_close_r+0x1a>
 8010b0c:	682b      	ldr	r3, [r5, #0]
 8010b0e:	b103      	cbz	r3, 8010b12 <_close_r+0x1a>
 8010b10:	6023      	str	r3, [r4, #0]
 8010b12:	bd38      	pop	{r3, r4, r5, pc}
 8010b14:	20002184 	.word	0x20002184

08010b18 <_fstat_r>:
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4d07      	ldr	r5, [pc, #28]	; (8010b38 <_fstat_r+0x20>)
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	4604      	mov	r4, r0
 8010b20:	4608      	mov	r0, r1
 8010b22:	4611      	mov	r1, r2
 8010b24:	602b      	str	r3, [r5, #0]
 8010b26:	f000 f845 	bl	8010bb4 <_fstat>
 8010b2a:	1c43      	adds	r3, r0, #1
 8010b2c:	d102      	bne.n	8010b34 <_fstat_r+0x1c>
 8010b2e:	682b      	ldr	r3, [r5, #0]
 8010b30:	b103      	cbz	r3, 8010b34 <_fstat_r+0x1c>
 8010b32:	6023      	str	r3, [r4, #0]
 8010b34:	bd38      	pop	{r3, r4, r5, pc}
 8010b36:	bf00      	nop
 8010b38:	20002184 	.word	0x20002184

08010b3c <_isatty_r>:
 8010b3c:	b538      	push	{r3, r4, r5, lr}
 8010b3e:	4d06      	ldr	r5, [pc, #24]	; (8010b58 <_isatty_r+0x1c>)
 8010b40:	2300      	movs	r3, #0
 8010b42:	4604      	mov	r4, r0
 8010b44:	4608      	mov	r0, r1
 8010b46:	602b      	str	r3, [r5, #0]
 8010b48:	f000 f844 	bl	8010bd4 <_isatty>
 8010b4c:	1c43      	adds	r3, r0, #1
 8010b4e:	d102      	bne.n	8010b56 <_isatty_r+0x1a>
 8010b50:	682b      	ldr	r3, [r5, #0]
 8010b52:	b103      	cbz	r3, 8010b56 <_isatty_r+0x1a>
 8010b54:	6023      	str	r3, [r4, #0]
 8010b56:	bd38      	pop	{r3, r4, r5, pc}
 8010b58:	20002184 	.word	0x20002184

08010b5c <_lseek_r>:
 8010b5c:	b538      	push	{r3, r4, r5, lr}
 8010b5e:	4d07      	ldr	r5, [pc, #28]	; (8010b7c <_lseek_r+0x20>)
 8010b60:	4604      	mov	r4, r0
 8010b62:	4608      	mov	r0, r1
 8010b64:	4611      	mov	r1, r2
 8010b66:	2200      	movs	r2, #0
 8010b68:	602a      	str	r2, [r5, #0]
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	f000 f842 	bl	8010bf4 <_lseek>
 8010b70:	1c43      	adds	r3, r0, #1
 8010b72:	d102      	bne.n	8010b7a <_lseek_r+0x1e>
 8010b74:	682b      	ldr	r3, [r5, #0]
 8010b76:	b103      	cbz	r3, 8010b7a <_lseek_r+0x1e>
 8010b78:	6023      	str	r3, [r4, #0]
 8010b7a:	bd38      	pop	{r3, r4, r5, pc}
 8010b7c:	20002184 	.word	0x20002184

08010b80 <_read_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	4d07      	ldr	r5, [pc, #28]	; (8010ba0 <_read_r+0x20>)
 8010b84:	4604      	mov	r4, r0
 8010b86:	4608      	mov	r0, r1
 8010b88:	4611      	mov	r1, r2
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	602a      	str	r2, [r5, #0]
 8010b8e:	461a      	mov	r2, r3
 8010b90:	f000 f838 	bl	8010c04 <_read>
 8010b94:	1c43      	adds	r3, r0, #1
 8010b96:	d102      	bne.n	8010b9e <_read_r+0x1e>
 8010b98:	682b      	ldr	r3, [r5, #0]
 8010b9a:	b103      	cbz	r3, 8010b9e <_read_r+0x1e>
 8010b9c:	6023      	str	r3, [r4, #0]
 8010b9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ba0:	20002184 	.word	0x20002184

08010ba4 <_close>:
 8010ba4:	4b02      	ldr	r3, [pc, #8]	; (8010bb0 <_close+0xc>)
 8010ba6:	2258      	movs	r2, #88	; 0x58
 8010ba8:	601a      	str	r2, [r3, #0]
 8010baa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bae:	4770      	bx	lr
 8010bb0:	20002184 	.word	0x20002184

08010bb4 <_fstat>:
 8010bb4:	4b02      	ldr	r3, [pc, #8]	; (8010bc0 <_fstat+0xc>)
 8010bb6:	2258      	movs	r2, #88	; 0x58
 8010bb8:	601a      	str	r2, [r3, #0]
 8010bba:	f04f 30ff 	mov.w	r0, #4294967295
 8010bbe:	4770      	bx	lr
 8010bc0:	20002184 	.word	0x20002184

08010bc4 <_getpid>:
 8010bc4:	4b02      	ldr	r3, [pc, #8]	; (8010bd0 <_getpid+0xc>)
 8010bc6:	2258      	movs	r2, #88	; 0x58
 8010bc8:	601a      	str	r2, [r3, #0]
 8010bca:	f04f 30ff 	mov.w	r0, #4294967295
 8010bce:	4770      	bx	lr
 8010bd0:	20002184 	.word	0x20002184

08010bd4 <_isatty>:
 8010bd4:	4b02      	ldr	r3, [pc, #8]	; (8010be0 <_isatty+0xc>)
 8010bd6:	2258      	movs	r2, #88	; 0x58
 8010bd8:	601a      	str	r2, [r3, #0]
 8010bda:	2000      	movs	r0, #0
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop
 8010be0:	20002184 	.word	0x20002184

08010be4 <_kill>:
 8010be4:	4b02      	ldr	r3, [pc, #8]	; (8010bf0 <_kill+0xc>)
 8010be6:	2258      	movs	r2, #88	; 0x58
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	f04f 30ff 	mov.w	r0, #4294967295
 8010bee:	4770      	bx	lr
 8010bf0:	20002184 	.word	0x20002184

08010bf4 <_lseek>:
 8010bf4:	4b02      	ldr	r3, [pc, #8]	; (8010c00 <_lseek+0xc>)
 8010bf6:	2258      	movs	r2, #88	; 0x58
 8010bf8:	601a      	str	r2, [r3, #0]
 8010bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bfe:	4770      	bx	lr
 8010c00:	20002184 	.word	0x20002184

08010c04 <_read>:
 8010c04:	4b02      	ldr	r3, [pc, #8]	; (8010c10 <_read+0xc>)
 8010c06:	2258      	movs	r2, #88	; 0x58
 8010c08:	601a      	str	r2, [r3, #0]
 8010c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c0e:	4770      	bx	lr
 8010c10:	20002184 	.word	0x20002184

08010c14 <_write>:
 8010c14:	4b02      	ldr	r3, [pc, #8]	; (8010c20 <_write+0xc>)
 8010c16:	2258      	movs	r2, #88	; 0x58
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1e:	4770      	bx	lr
 8010c20:	20002184 	.word	0x20002184

08010c24 <_exit>:
 8010c24:	e7fe      	b.n	8010c24 <_exit>
	...

08010c28 <_init>:
 8010c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2a:	bf00      	nop
 8010c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c2e:	bc08      	pop	{r3}
 8010c30:	469e      	mov	lr, r3
 8010c32:	4770      	bx	lr

08010c34 <_fini>:
 8010c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c36:	bf00      	nop
 8010c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c3a:	bc08      	pop	{r3}
 8010c3c:	469e      	mov	lr, r3
 8010c3e:	4770      	bx	lr
